From c413b9cecd3e4a8c54a6ce2d6502ba0492986b17 Mon Sep 17 00:00:00 2001
From: Jan Sondhauss <jan.sondhauss@wago.com>
Date: Thu, 12 Jul 2018 09:57:48 +0200
Subject: [PATCH] cpsw: add workqueue to schedule net_rx_ni for incoming frames

Signed-off-by: Jan Sondhauss <jan.sondhauss@wago.com>
Signed-off-by: Andreas Schmidt <andreas.schmidt@wago.com>
---
 drivers/net/ethernet/ti/Kconfig          |   7 ++
 drivers/net/ethernet/ti/Makefile         |   1 +
 drivers/net/ethernet/ti/cpsw.c           |  20 +++++-
 drivers/net/ethernet/ti/cpsw_async_net.c | 111 +++++++++++++++++++++++++++++++
 drivers/net/ethernet/ti/cpsw_async_net.h |  37 +++++++++++
 net/pn/Kconfig                           |   1 +
 6 files changed, 174 insertions(+), 3 deletions(-)
 create mode 100644 drivers/net/ethernet/ti/cpsw_async_net.c
 create mode 100644 drivers/net/ethernet/ti/cpsw_async_net.h

diff --git a/drivers/net/ethernet/ti/Kconfig b/drivers/net/ethernet/ti/Kconfig
index 9904d74..a041dc9 100644
--- a/drivers/net/ethernet/ti/Kconfig
+++ b/drivers/net/ethernet/ti/Kconfig
@@ -73,6 +73,13 @@ config TI_CPSW
 	  To compile this driver as a module, choose M here: the module
 	  will be called cpsw.
 
+config TI_CPSW_ASYNC_NET
+	bool "TI CPSW ASYNC NET Support"
+	---help---
+	This enables async packet processing for TI's CPSW Ethernet Switch.
+
+	A work queue is used to process the packets received by CPSW.
+
 config TI_CPTS
 	bool "TI Common Platform Time Sync (CPTS) Support"
 	depends on TI_CPSW
diff --git a/drivers/net/ethernet/ti/Makefile b/drivers/net/ethernet/ti/Makefile
index d420d94..c59cefb 100644
--- a/drivers/net/ethernet/ti/Makefile
+++ b/drivers/net/ethernet/ti/Makefile
@@ -13,6 +13,7 @@ obj-$(CONFIG_TI_DAVINCI_CPDMA) += davinci_cpdma.o
 obj-$(CONFIG_TI_CPSW_PHY_SEL) += cpsw-phy-sel.o
 obj-$(CONFIG_TI_CPSW_ALE) += cpsw_ale.o
 obj-$(CONFIG_TI_CPSW) += ti_cpsw.o
+obj-$(CONFIG_TI_CPSW_ASYNC_NET) += cpsw_async_net.o
 ti_cpsw-y := cpsw.o cpts.o
 
 obj-$(CONFIG_TI_KEYSTONE_NETCP) += keystone_netcp.o
diff --git a/drivers/net/ethernet/ti/cpsw.c b/drivers/net/ethernet/ti/cpsw.c
index cb2504c..413ffc92 100644
--- a/drivers/net/ethernet/ti/cpsw.c
+++ b/drivers/net/ethernet/ti/cpsw.c
@@ -26,7 +26,6 @@
 #include <linux/netdevice.h>
 #include <linux/net_tstamp.h>
 #include <linux/phy.h>
-#include <linux/workqueue.h>
 #include <linux/delay.h>
 #include <linux/pm_runtime.h>
 #include <linux/gpio.h>
@@ -42,6 +41,7 @@
 #include "cpsw_ale.h"
 #include "cpts.h"
 #include "davinci_cpdma.h"
+#include "cpsw_async_net.h"
 
 #define CPSW_DEBUG	(NETIF_MSG_HW		| NETIF_MSG_WOL		| \
 			 NETIF_MSG_DRV		| NETIF_MSG_LINK	| \
@@ -686,6 +686,8 @@ static void cpsw_tx_handler(void *token, int len, int status)
 	dev_kfree_skb_any(skb);
 }
 
+#ifdef CONFIG_PN_SOCKETS
+
 static bool cpsw_is_pn_frame(struct sk_buff *skb)
 {
 	bool ret = false;
@@ -756,7 +758,7 @@ static void cpsw_pn_rx_handler(void *token, int len, int status)
 		} else {
 			cpts_rx_timestamp(cpsw->cpts, skb);
 			skb->protocol = eth_type_trans(skb, ndev);
-			netif_receive_skb(skb);
+			cpsw_queue_net_rx(skb);
 		}
 		ndev->stats.rx_bytes += len;
 		ndev->stats.rx_packets++;
@@ -778,6 +780,9 @@ static void cpsw_pn_rx_handler(void *token, int len, int status)
 	if (WARN_ON(ret < 0))
 		dev_kfree_skb_any(new_skb);
 }
+#else
+static void cpsw_pn_rx_handler(void *token, int len, int status) {}
+#endif /*CONFIG_PN_SOCK*/
 
 static void cpsw_rx_handler(void *token, int len, int status)
 {
@@ -2666,7 +2671,7 @@ static struct platform_device_id cpsw_devtype[] = {
 		.driver_data = CPSW_QUIRK_IRQ,
 	}, {
 		.name = "am335x-cpsw",
-		.driver_data = CPSW_QUIRK_IRQ,
+		.driver_data = 0,
 	}, {
 		.name = "am4372-cpsw",
 		.driver_data = 0,
@@ -2990,6 +2995,15 @@ static int cpsw_probe(struct platform_device *pdev)
 
 	pm_runtime_put(&pdev->dev);
 
+	if (cpsw_is_pn_device()) {
+		ret = cpsw_async_net_init();
+		if (ret) {
+			dev_err(priv->dev, "initialize async net failed (%d)\n",
+				ret);
+			goto clean_unregister_netdev_ret;
+		}
+	}
+
 	return 0;
 
 clean_unregister_netdev_ret:
diff --git a/drivers/net/ethernet/ti/cpsw_async_net.c b/drivers/net/ethernet/ti/cpsw_async_net.c
new file mode 100644
index 0000000..ac348e7
--- /dev/null
+++ b/drivers/net/ethernet/ti/cpsw_async_net.c
@@ -0,0 +1,111 @@
+/*
+ * Network Asnychronous Packet Processing
+ *
+ * Copyright (C) 2018 WAGO Kontakttechnik GmbH
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/kernel.h>
+#include <linux/workqueue.h>
+#include <linux/netdevice.h>
+
+static struct workqueue_struct *napi_wq;
+
+/* no. of packets currently in the queue.
+ * the highest bit signals to drop packets.
+ */
+static atomic_long_t napi_queue_count = ATOMIC_INIT(0);
+
+/* how many entries must me free until we allow for new packets enqueued after
+ * NAPI_QUEUE_COUNT_MAX was reached
+ */
+#define NAPI_QUEUE_THROTTLE_BATCH 16
+
+/* max no. of packets in the queue */
+#define NAPI_QUEUE_COUNT_MAX 256
+#define NAPI_QUEUE_THROTTLE_FLAG BIT(31)
+
+struct netif_rx_work {
+	struct work_struct work;
+	struct sk_buff *skb;
+};
+
+#define CMPXCHG_LOOP_RELAXED(atomic, old, new) do { \
+while ((old) != atomic_long_cmpxchg_relaxed(&(atomic), (old), (new))) { \
+	cpu_relax_lowlatency();	\
+	(old) = atomic_long_read(&(atomic)); \
+} \
+} while (0)
+
+static void cpsw_work_net_rx(struct work_struct *work)
+{
+	long queue_count;
+	bool throttle_active;
+
+	struct netif_rx_work *rx_work = container_of(work, struct netif_rx_work,
+						     work);
+	netif_rx_ni(rx_work->skb);
+	kfree(rx_work);
+
+	atomic_long_dec(&napi_queue_count);
+
+	queue_count = atomic_long_read(&napi_queue_count);
+	throttle_active = !!(queue_count & NAPI_QUEUE_THROTTLE_FLAG);
+
+	if (!throttle_active)
+		return;
+
+	queue_count &= ~(NAPI_QUEUE_THROTTLE_FLAG);
+	if (queue_count < (NAPI_QUEUE_COUNT_MAX - NAPI_QUEUE_THROTTLE_BATCH))
+		CMPXCHG_LOOP_RELAXED(napi_queue_count, queue_count,
+				     queue_count & (~NAPI_QUEUE_THROTTLE_FLAG));
+}
+
+int cpsw_queue_net_rx(struct sk_buff *skb)
+{
+	struct netif_rx_work *rx_work = kmalloc(sizeof(*rx_work),
+						GFP_NOWAIT | GFP_KERNEL);
+
+	long queue_count = atomic_long_read(&napi_queue_count);
+	bool drop_packet = !!(queue_count & NAPI_QUEUE_THROTTLE_FLAG);
+
+	if (queue_count == NAPI_QUEUE_COUNT_MAX) {
+		CMPXCHG_LOOP_RELAXED(napi_queue_count, queue_count,
+				     queue_count | (NAPI_QUEUE_THROTTLE_FLAG));
+		drop_packet = true;
+	}
+
+	if (drop_packet || !rx_work) {
+		kfree_skb(skb);
+		kfree(rx_work);
+		atomic_long_inc(&skb->dev->rx_dropped);
+		return NET_RX_DROP;
+	}
+
+	atomic_long_inc(&napi_queue_count);
+
+	INIT_WORK(&rx_work->work, cpsw_work_net_rx);
+	rx_work->skb = skb;
+
+	if (queue_work(napi_wq, &rx_work->work))
+		return NET_RX_SUCCESS;
+
+	return NET_RX_DROP;
+}
+
+int cpsw_async_net_init(void)
+{
+	napi_wq = alloc_ordered_workqueue("cpsw_napi_wq", WQ_UNBOUND);
+	if (!napi_wq)
+		return -ENOMEM;
+
+	return 0;
+}
diff --git a/drivers/net/ethernet/ti/cpsw_async_net.h b/drivers/net/ethernet/ti/cpsw_async_net.h
new file mode 100644
index 0000000..39c6ab4
--- /dev/null
+++ b/drivers/net/ethernet/ti/cpsw_async_net.h
@@ -0,0 +1,37 @@
+/*
+ * Network Asnychronous Packet Processing
+ *
+ * Copyright (C) 2018 WAGO Kontakttechnik GmbH
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/netdevice.h>
+
+#ifdef CONFIG_TI_CPSW_ASYNC_NET
+
+int cpsw_async_net_init(void);
+int cpsw_queue_net_rx(struct sk_buff *skb);
+
+#else
+
+static int cpsw_async_net_init(void)
+{
+	return 0;
+}
+
+#ifdef CONFIG_PN_SOCKETS
+static int cpsw_queue_net_rx(struct sk_buff *skb)
+{
+	return netif_receive_skb(skb);
+}
+#endif
+
+#endif
diff --git a/net/pn/Kconfig b/net/pn/Kconfig
index 265949f..09c82b3 100644
--- a/net/pn/Kconfig
+++ b/net/pn/Kconfig
@@ -1,6 +1,7 @@
 config PN_SOCKETS
 	bool "PROFINET sockets"
 	select PAGE_POOL
+	select TI_CPSW_ASYNC_NET
 	default n
 	help
 	  PROFINET sockets allows a channel between CPSW and
-- 
2.7.4

