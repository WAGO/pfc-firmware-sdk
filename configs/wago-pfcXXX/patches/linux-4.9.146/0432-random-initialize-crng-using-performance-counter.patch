From 54a38906bf060bc4ece2ada6841628ed6ced792b Mon Sep 17 00:00:00 2001
From: Jan Sondhauss <jan.sondhauss@wago.com>
Date: Tue, 22 Sep 2020 07:27:06 +0200
Subject: [PATCH] random: initialize crng using performance counter

When getrandom() tries to generate entropy, it relies on small timing
noise. Provide that via cycle counter which should be highres enough to
satisfy the randomness.

Signed-off-by: Jan Sondhauss <jan.sondhauss@wago.com>
---
 arch/arm/include/asm/timex.h | 45 +++++++++++++++++++++++++++++++++++-
 drivers/char/random.c        | 11 +++++++++
 2 files changed, 55 insertions(+), 1 deletion(-)

diff --git a/arch/arm/include/asm/timex.h b/arch/arm/include/asm/timex.h
index f6fcc67ef06e..35765f9dabe0 100644
--- a/arch/arm/include/asm/timex.h
+++ b/arch/arm/include/asm/timex.h
@@ -13,6 +13,49 @@
 #define _ASMARM_TIMEX_H
 
 typedef unsigned long cycles_t;
-#define get_cycles()	({ cycles_t c; read_current_timer(&c) ? 0 : c; })
+
+static inline void random_get_entropy_init(u32 values[3])
+{
+	/* in general enable all counters (including cycle counter)
+	 *  reset all counters to zero.
+	 *  reset cycle counter to zero.
+	 */
+	int32_t value = 1 | 2 | 4 | 16;
+
+	asm volatile("MRC p15, 0, %0, c9, c12, 0\t\n" : "=r"(values[0])::);
+	asm volatile("MRC p15, 0, %0, c9, c12, 1\t\n" : "=r"(values[1])::);
+	asm volatile("MRC p15, 0, %0, c9, c12, 3\t\n" : "=r"(values[2])::);
+
+	// program the performance-counter control-register:
+	asm volatile("MCR p15, 0, %0, c9, c12, 0\t\n" ::"r"(value));
+
+	// enable all counters:
+	asm volatile("MCR p15, 0, %0, c9, c12, 1\t\n" ::"r"(0x8000000f));
+
+	// clear overflows:
+	asm volatile("MCR p15, 0, %0, c9, c12, 3\t\n" ::"r"(0x8000000f));
+}
+
+static inline void random_get_entropy_deinit(u32 values[3])
+{
+	asm volatile("MCR p15, 0, %0, c9, c12, 0\t\n" ::"r"(values[0]) :);
+	asm volatile("MCR p15, 0, %0, c9, c12, 1\t\n" ::"r"(values[1]) :);
+	asm volatile("MCR p15, 0, %0, c9, c12, 3\t\n" ::"r"(values[2]) :);
+}
+
+#ifndef random_get_entropy
+#define random_get_entropy()                                                   \
+	({                                                                     \
+		cycles_t c;                                                    \
+		asm volatile("MRC p15, 0, %0, c9, c13, 0\n\t" : "=r"(c)::);    \
+		c;                                                             \
+	})
+#endif
+
+#define get_cycles()                                                           \
+	({                                                                     \
+		cycles_t c;                                                    \
+		read_current_timer(&c) ? 0 : c;                                \
+	})
 
 #endif
diff --git a/drivers/char/random.c b/drivers/char/random.c
index a8638be47169..0030f5f54cde 100644
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@ -1971,6 +1971,12 @@ static void try_to_generate_entropy(void)
 		struct timer_list timer;
 	} stack;
 
+#ifdef CONFIG_ARM
+{
+	u32 values[3];
+	random_get_entropy_init(values);
+#endif
+
 	stack.now = random_get_entropy();
 	/* Slow counter - or none */
 	slow_timer = stack.now == random_get_entropy();
@@ -1989,6 +1995,11 @@ static void try_to_generate_entropy(void)
 		stack.now = random_get_entropy();
 	}
 
+#ifdef CONFIG_ARM
+	random_get_entropy_deinit(values);
+}
+#endif
+
 	del_timer_sync(&stack.timer);
 	destroy_timer_on_stack(&stack.timer);
 	mix_pool_bytes(&input_pool, &stack.now, sizeof(stack.now));
-- 
2.28.0

