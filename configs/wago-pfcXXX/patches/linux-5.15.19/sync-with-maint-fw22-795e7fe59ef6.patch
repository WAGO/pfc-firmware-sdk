diff --git a/.gitignore b/.gitignore
index 7afd412dadd2..2c35e9cdc628 100644
--- a/.gitignore
+++ b/.gitignore
@@ -161,3 +161,6 @@ x509.genkey
 
 # Documentation toolchain
 sphinx_*/
+
+# wago patch export script
+export-release-patch.sh
diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 000000000000..9e43bcfb3700
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule "labgrid-wago"]
+	path = labgrid-wago
+	url = ssh://tfs-eng:22/tfs/ProductDevelopment/Linux-BSP/_git/labgrid-wago
diff --git a/Documentation/ABI/testing/configfs-usb-gadget-rndis b/Documentation/ABI/testing/configfs-usb-gadget-rndis
index 9416eda7fe93..52d295607678 100644
--- a/Documentation/ABI/testing/configfs-usb-gadget-rndis
+++ b/Documentation/ABI/testing/configfs-usb-gadget-rndis
@@ -16,4 +16,7 @@ Description:
 		class		USB interface class, default is 02 (hex)
 		subclass	USB interface subclass, default is 06 (hex)
 		protocol	USB interface protocol, default is 00 (hex)
+		use_ms_rndiscmp	Use the MS Windows rndiscmp.inf compatible
+				class 0xEF, subclass 0x04, protocol 0x01
+				instead of the default 0x02/0x06/0x00.
 		=========	=============================================
diff --git a/Documentation/dev-tools/kcov.rst b/Documentation/dev-tools/kcov.rst
index d2c4c27e1702..d83c9ab49427 100644
--- a/Documentation/dev-tools/kcov.rst
+++ b/Documentation/dev-tools/kcov.rst
@@ -50,6 +50,7 @@ program using kcov:
     #include <sys/mman.h>
     #include <unistd.h>
     #include <fcntl.h>
+    #include <linux/types.h>
 
     #define KCOV_INIT_TRACE			_IOR('c', 1, unsigned long)
     #define KCOV_ENABLE			_IO('c', 100)
@@ -177,6 +178,8 @@ Comparison operands collection is similar to coverage collection:
 	/* Read number of comparisons collected. */
 	n = __atomic_load_n(&cover[0], __ATOMIC_RELAXED);
 	for (i = 0; i < n; i++) {
+		uint64_t ip;
+
 		type = cover[i * KCOV_WORDS_PER_CMP + 1];
 		/* arg1 and arg2 - operands of the comparison. */
 		arg1 = cover[i * KCOV_WORDS_PER_CMP + 2];
@@ -251,6 +254,8 @@ selectively from different subsystems.
 
 .. code-block:: c
 
+    /* Same includes and defines as above. */
+
     struct kcov_remote_arg {
 	__u32		trace_mode;
 	__u32		area_size;
diff --git a/Documentation/devicetree/bindings/memory-controllers/omap-gpmc.txt b/Documentation/devicetree/bindings/memory-controllers/omap-gpmc.txt
index c1359f4d48d7..15da496d673a 100644
--- a/Documentation/devicetree/bindings/memory-controllers/omap-gpmc.txt
+++ b/Documentation/devicetree/bindings/memory-controllers/omap-gpmc.txt
@@ -22,6 +22,8 @@ Required properties:
 			can support.
  - gpmc,num-waitpins:	The maximum number of wait pins that controller can
 			support.
+ - gpmc,wait0-active-high: sets high polarity of input pin WAIT0
+ - gpmc,wait1-active-high: sets high polarity of input pin WAIT1
  - ranges:		Must be set up to reflect the memory layout with four
 			integer values for each chip-select line in use:
 
diff --git a/arch/alpha/include/asm/spinlock_types.h b/arch/alpha/include/asm/spinlock_types.h
index 1d5716bc060b..2526fd3be5fd 100644
--- a/arch/alpha/include/asm/spinlock_types.h
+++ b/arch/alpha/include/asm/spinlock_types.h
@@ -2,7 +2,7 @@
 #ifndef _ALPHA_SPINLOCK_TYPES_H
 #define _ALPHA_SPINLOCK_TYPES_H
 
-#ifndef __LINUX_SPINLOCK_TYPES_H
+#ifndef __LINUX_SPINLOCK_TYPES_RAW_H
 # error "please don't include this file directly"
 #endif
 
diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 4ebd512043be..1d04b66eb1cb 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -32,6 +32,7 @@ config ARM
 	select ARCH_OPTIONAL_KERNEL_RWX_DEFAULT if CPU_V7
 	select ARCH_SUPPORTS_ATOMIC_RMW
 	select ARCH_SUPPORTS_HUGETLBFS if ARM_LPAE
+	select ARCH_SUPPORTS_RT if HAVE_POSIX_CPU_TIMERS_TASK_WORK
 	select ARCH_USE_BUILTIN_BSWAP
 	select ARCH_USE_CMPXCHG_LOCKREF
 	select ARCH_USE_MEMTEST
@@ -51,7 +52,7 @@ config ARM
 	select EDAC_ATOMIC_SCRUB
 	select GENERIC_ALLOCATOR
 	select GENERIC_ARCH_TOPOLOGY if ARM_CPU_TOPOLOGY
-	select GENERIC_ATOMIC64 if CPU_V7M || CPU_V6 || !CPU_32v6K || !AEABI
+	select GENERIC_ATOMIC64 if CPU_V7M || CPU_V6 || !CPU_32v6K || !AEABI || ARCH_OMAP3
 	select GENERIC_CLOCKEVENTS_BROADCAST if SMP
 	select GENERIC_IRQ_IPI if SMP
 	select GENERIC_CPU_AUTOPROBE
@@ -68,7 +69,7 @@ config ARM
 	select HARDIRQS_SW_RESEND
 	select HAVE_ARCH_AUDITSYSCALL if AEABI && !OABI_COMPAT
 	select HAVE_ARCH_BITREVERSE if (CPU_32v7M || CPU_32v7) && !CPU_32v6
-	select HAVE_ARCH_JUMP_LABEL if !XIP_KERNEL && !CPU_ENDIAN_BE32 && MMU
+	select HAVE_ARCH_JUMP_LABEL if !XIP_KERNEL && !CPU_ENDIAN_BE32 && MMU && !PREEMPT_RT
 	select HAVE_ARCH_KGDB if !CPU_ENDIAN_BE32 && MMU
 	select HAVE_ARCH_KASAN if MMU && !XIP_KERNEL
 	select HAVE_ARCH_MMAP_RND_BITS if MMU
@@ -109,6 +110,7 @@ config ARM
 	select HAVE_PERF_EVENTS
 	select HAVE_PERF_REGS
 	select HAVE_PERF_USER_STACK_DUMP
+	select HAVE_PREEMPT_LAZY
 	select MMU_GATHER_RCU_TABLE_FREE if SMP && ARM_LPAE
 	select HAVE_REGS_AND_STACK_ACCESS_API
 	select HAVE_RSEQ
@@ -124,6 +126,7 @@ config ARM
 	select OLD_SIGSUSPEND3
 	select PCI_SYSCALL if PCI
 	select PERF_USE_VMALLOC
+	select HAVE_POSIX_CPU_TIMERS_TASK_WORK if !KVM
 	select RTC_LIB
 	select SYS_SUPPORTS_APM_EMULATION
 	select TRACE_IRQFLAGS_SUPPORT if !CPU_V7M
diff --git a/arch/arm/boot/dts/Makefile b/arch/arm/boot/dts/Makefile
index 7e0934180724..c18eac4f6b2c 100644
--- a/arch/arm/boot/dts/Makefile
+++ b/arch/arm/boot/dts/Makefile
@@ -615,8 +615,14 @@ dtb-$(CONFIG_SOC_IMX6Q) += \
 	imx6q-vicut1.dtb \
 	imx6q-wandboard.dtb \
 	imx6q-wandboard-revb1.dtb \
-	imx6q-wandboard-revd1.dtb \
 	imx6q-zii-rdu2.dtb \
+	imx6q-vtpctp-0004.dtb \
+	imx6q-vtpctp-0005.dtb \
+	imx6q-vtpctp-0007.dtb \
+	imx6q-vtpctp-0010.dtb \
+	imx6q-vtpctp-0015.dtb \
+	imx6q-vtpctp-0021.dtb \
+	imx6q-ec-752_8303.dtb \
 	imx6qp-nitrogen6_max.dtb \
 	imx6qp-nitrogen6_som2.dtb \
 	imx6qp-phytec-mira-rdk-nand.dtb \
@@ -775,6 +781,11 @@ dtb-$(CONFIG_ARCH_OMAP3) += \
 	am3517-craneboard.dtb \
 	am3517-evm.dtb \
 	am3517_mt_ventoux.dtb \
+	am3505-pfc-750_8202.dtb \
+	am3505-pfc-750_8203.dtb \
+	am3505-pfc-750_8204.dtb \
+	am3505-pfc-750_8206.dtb \
+	am3505-pfc-750_8207.dtb \
 	logicpd-torpedo-37xx-devkit.dtb \
 	logicpd-som-lv-37xx-devkit.dtb \
 	omap3430-sdp.dtb \
@@ -871,6 +882,17 @@ dtb-$(CONFIG_SOC_AM33XX) += \
 	am335x-sbc-t335.dtb \
 	am335x-sl50.dtb \
 	am335x-wega-rdk.dtb \
+	am335x-pfc-750_8102.dtb \
+	am335x-pfc-750_8100_8101.dtb \
+	am335x-pfc-750_8208.dtb \
+	am335x-pfc-750_8210.dtb \
+	am335x-pfc-750_8211.dtb \
+	am335x-pfc-750_8212.dtb \
+	am335x-pfc-750_8213.dtb \
+	am335x-pfc-750_8214.dtb \
+	am335x-pfc-750_8215.dtb \
+	am335x-pfc-750_8216.dtb \
+	am335x-pfc-750_8217.dtb \
 	am335x-osd3358-sm-red.dtb
 dtb-$(CONFIG_ARCH_OMAP4) += \
 	omap4-droid-bionic-xt875.dtb \
@@ -1129,7 +1151,8 @@ dtb-$(CONFIG_ARCH_STM32) += \
 	stm32mp157c-ed1.dtb \
 	stm32mp157c-ev1.dtb \
 	stm32mp157c-lxa-mc1.dtb \
-	stm32mp157c-odyssey.dtb
+	stm32mp157c-odyssey.dtb \
+	stm32mp151-cc100.dtb
 dtb-$(CONFIG_MACH_SUN4I) += \
 	sun4i-a10-a1000.dtb \
 	sun4i-a10-ba10-tvbox.dtb \
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8100_8101.dts b/arch/arm/boot/dts/am335x-pfc-750_8100_8101.dts
new file mode 100644
index 000000000000..7af4cd39952c
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8100_8101.dts
@@ -0,0 +1,114 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+/dts-v1/;
+
+#include "am335x-pfc-750_810x.dtsi"
+#include "am335x-pfc-750_8xxx-ksz8863.dtsi"
+#include "am335x-pfc-750_810x-dip.dtsi"
+#include "wago-devconf.dtsi"
+
+/ {
+	model = "WAGO PFC100 750-8100/8101";
+	compatible = "wago,am335x-pfc-750_810x-0028", "wago,am335x-pfc", "ti,am33xx";
+};
+
+&am33xx_pinmux {
+	ksz8863_switch_pins: pinmux_ksz8863_switch_pins {
+		pinctrl-single,pins = <
+			AM33XX_MII1_RXD0_GPIO2_21(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_BEN1_GPIO1_28(PIN_INPUT_PULLUP)
+		>;
+	};
+};
+
+&aes {
+	status = "okay";
+};
+
+&bitbang_mdio0_sw {
+	status = "okay";
+};
+
+&cppi41dma {
+	status = "okay";
+};
+
+&elm {
+	status = "okay";
+};
+
+&ecap0 {
+	status = "okay";
+};
+
+&epwmss0 {
+	status = "okay";
+};
+
+&gpmc {
+	status = "okay";
+};
+
+&i2c0 {
+	status = "okay";
+};
+
+&kbus0 {
+	status = "okay";
+};
+
+&ksz8863_switch {
+	pinctrl-names = "default";
+	pinctrl-0 = <&ksz8863_switch_pins>;
+
+	ksz,reset-gpio = <&gpio2 21 GPIO_ACTIVE_LOW>;
+
+	status = "okay";
+
+	ports {
+		port@0 {
+			reg = <1>;
+		};
+
+		port@1 {
+			reg = <2>;
+		};
+	};
+};
+
+&mac_sw {
+	status = "okay";
+};
+
+&mmc1 {
+	status = "okay";
+};
+
+&oms {
+	status = "okay";
+};
+
+&sham {
+	status = "okay";
+};
+
+&spi0 {
+	status = "okay";
+};
+
+&swcfg_ksz8863 {
+	status = "okay";
+};
+
+&uart4 {
+	status = "okay";
+};
+
+&watchdog {
+	status = "okay";
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8102.dts b/arch/arm/boot/dts/am335x-pfc-750_8102.dts
new file mode 100644
index 000000000000..97c07a8faf3e
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8102.dts
@@ -0,0 +1,120 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+/dts-v1/;
+
+#include "am335x-pfc-750_810x.dtsi"
+#include "am335x-pfc-750_8xxx-ksz8863.dtsi"
+#include "am335x-pfc-750_8xxx-uart1.dtsi"
+#include "am335x-pfc-750_8xxx-uart4.dtsi"
+#include "wago-devconf.dtsi"
+
+/ {
+	model = "WAGO PFC100 750-8102";
+	compatible = "wago,am335x-pfc-750_810x-000c", "wago,am335x-pfc", "ti,am33xx";
+};
+
+&am33xx_pinmux {
+	ksz8863_switch_pins: pinmux_ksz8863_switch_pins {
+		pinctrl-single,pins = <
+			AM33XX_MII1_RXD0_GPIO2_21(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_BEN1_GPIO1_28(PIN_INPUT_PULLUP)
+		>;
+	};
+};
+
+&aes {
+	status = "okay";
+};
+
+&bitbang_mdio0_sw {
+	status = "okay";
+};
+
+&cppi41dma {
+	status = "okay";
+};
+
+&ecap0 {
+	status = "okay";
+};
+
+&elm {
+	status = "okay";
+};
+
+&epwmss0 {
+	status = "okay";
+};
+
+&gpmc {
+	status = "okay";
+};
+
+&i2c0 {
+	status = "okay";
+};
+
+&kbus0 {
+	status = "okay";
+};
+
+&ksz8863_switch {
+	pinctrl-names = "default";
+	pinctrl-0 = <&ksz8863_switch_pins>;
+
+	ksz,reset-gpio = <&gpio2 21 GPIO_ACTIVE_LOW>;
+
+	status = "okay";
+
+	ports {
+		port@0 {
+			reg = <1>;
+		};
+
+		port@1 {
+			reg = <2>;
+		};
+	};
+
+};
+
+&mac_sw {
+	status = "okay";
+};
+
+&mmc1 {
+	status = "okay";
+};
+
+&oms {
+	status = "okay";
+};
+
+&sham {
+	status = "okay";
+};
+
+&spi0 {
+	status = "okay";
+};
+
+&swcfg_ksz8863 {
+	status = "okay";
+};
+
+&uart1 {
+	status = "okay";
+};
+
+&uart4 {
+	status = "okay";
+};
+
+&watchdog {
+	status = "okay";
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_810x-dip.dtsi b/arch/arm/boot/dts/am335x-pfc-750_810x-dip.dtsi
new file mode 100644
index 000000000000..667a1519962d
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_810x-dip.dtsi
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include "am33xx-pinfunc.h"
+
+&am33xx_pinmux {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart1_dip_pins>;
+
+	uart1_dip_pins: pinmux_uart1_dip_pins { /* optional uart1 with dip switch */
+		pinctrl-single,pins = <
+			AM33XX_UART1_TXD_GPIO0_15(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_UART1_RXD_GPIO0_14(PIN_INPUT_PULLDOWN)
+			AM33XX_UART1_RTSN_GPIO0_13(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_UART1_CTSN_GPIO0_12(PIN_INPUT_PULLDOWN)
+			AM33XX_MCASP0_FSR_GPIO3_19(PIN_INPUT_PULLDOWN)
+		>;
+	};
+};
+
+/ {
+	dip-switch {
+		/* ti,sn74lv165a 8-bit shifit register */
+		compatible = "ti,sn74lv165a";
+
+		gpios = <&gpio0 15 GPIO_ACTIVE_HIGH /* clk */
+			 &gpio0 14 GPIO_ACTIVE_LOW  /* output */
+			 &gpio0 13 GPIO_ACTIVE_LOW  /* load */
+		>;
+
+		clk,period = <2>;
+	};
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_810x.dtsi b/arch/arm/boot/dts/am335x-pfc-750_810x.dtsi
new file mode 100644
index 000000000000..1c5777e4d3cb
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_810x.dtsi
@@ -0,0 +1,315 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include "am335x-pfc.dtsi"
+#include "am335x-pfc-750_8xxx-uart4.dtsi"
+#include "am335x-pfc-750_8xxx-leds.dtsi"
+#include "am335x-pfc-750_8xxx-nvram.dtsi"
+#include "am335x-pfc-750_8xxx-kbus.dtsi"
+
+/ {
+	memory {
+		device_type = "memory";
+		reg = <0x80000000 0x10000000>; /* 256 MB */
+	};
+};
+
+/delete-node/ &led_bar61;
+
+&oms_reset_all {
+	gpios = <&gpio3 15 GPIO_ACTIVE_LOW>;
+};
+
+&cpu_0 {
+	/*
+	 * To consider voltage drop between PMIC and SoC,
+	 * tolerance value is reduced to 2% from 4% and
+	 * voltage value is increased as a precaution.
+	 */
+	operating-points = <
+		/* kHz    uV */
+		600000  1100000
+		300000  950000
+	>;
+};
+
+&wsysinit {
+	board,variant = "pfc100";
+	adjtimex,frequency = <2000000>;
+};
+
+&watchdog {
+	pinctrl-names = "default";
+	pinctrl-0 = <&watchdog_pins>;
+
+	en-gpios = <&gpio0 17 GPIO_ACTIVE_LOW>;
+	gpios = <&gpio0 16 GPIO_ACTIVE_LOW>;
+};
+
+&gpmc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&gpmc_data_pins>, <&gpmc_addr_pins>, <&gpmc_ctrl_pins>;
+
+	num-cs = <2>;
+	num-waitpins = <1>;
+	ranges = <
+		0 0 0x08000000 0x01000000 /* CS0: NAND, 16M */
+		1 0 0x01000000 0x01000000 /* CS1: NVRAM, 16M */
+	>;
+
+	nand: nand@0,0 {
+		compatible = "ti,omap2-nand";
+		reg = <0 0 4>; /* CS0, offset 0, IO size 4 */
+		nand-bus-width = <8>;
+		ti,nand-ecc-opt = "bch8";
+		gpmc,device-nand = "true";
+		gpmc,device-width = <1>;
+		gpmc,sync-clk-ps = <0>;
+		gpmc,cs-on-ns = <0>;
+		gpmc,cs-rd-off-ns = <44>;
+		gpmc,cs-wr-off-ns = <44>;
+		gpmc,adv-on-ns = <6>;
+		gpmc,adv-rd-off-ns = <34>;
+		gpmc,adv-wr-off-ns = <44>;
+		gpmc,we-on-ns = <0>;
+		gpmc,we-off-ns = <40>;
+		gpmc,oe-on-ns = <0>;
+		gpmc,oe-off-ns = <54>;
+		gpmc,access-ns = <64>;
+		gpmc,rd-cycle-ns = <82>;
+		gpmc,wr-cycle-ns = <82>;
+		gpmc,wait-pin = <0>;
+		gpmc,wait-on-read;
+		gpmc,wait-on-write;
+		gpmc,bus-turnaround-ns = <0>;
+		gpmc,cycle2cycle-delay-ns = <0>;
+		gpmc,clk-activation-ns = <0>;
+		gpmc,wait-monitoring-ns = <0>;
+		gpmc,wr-access-ns = <40>;
+		gpmc,wr-data-mux-bus-ns = <0>;
+
+		#address-cells = <1>;
+		#size-cells = <1>;
+		ti,elm-id = <&elm>;
+	};
+
+	nvram: nor@1,0 { /* NVRAM Device 128k */
+		reg = <1 0 0x01000000>;
+		bank-width = <2>; /* 1: 8bit, 2: 16bit */
+		gpmc,sync-clk-ps = <0>;
+		gpmc,cs-on-ns = <0>;
+		gpmc,cs-rd-off-ns = <50>;
+		gpmc,cs-wr-off-ns = <30>;
+		gpmc,adv-on-ns = <0>;
+		gpmc,adv-rd-off-ns = <0>;
+		gpmc,adv-wr-off-ns = <0>;
+		gpmc,oe-on-ns = <0>;
+		gpmc,oe-off-ns = <50>;
+		gpmc,we-on-ns = <0>;
+		gpmc,we-off-ns = <30>;
+		gpmc,rd-cycle-ns = <50>;
+		gpmc,wr-cycle-ns = <30>;
+		gpmc,access-ns = <40>;
+		gpmc,wr-access-ns = <10>;
+		gpmc,wr-data-mux-bus-ns = <0>;
+		gpmc,cycle2cycle-delay-ns = <10>;
+		gpmc,cycle2cycle-samecsen;
+		gpmc,cycle2cycle-diffcsen;
+
+		#address-cells = <1>;
+		#size-cells = <1>;
+	};
+};
+
+&am33xx_pinmux {
+	sdcard_cd_pins: pinmux_sdcard_cd_pins {
+		pinctrl-single,pins = <
+			AM33XX_MCASP0_ACLKX_GPIO3_14(PIN_INPUT_PULLUP)
+		>;
+	};
+
+	gpmc_data_pins: pinmux_gpmc_data_pins {
+		pinctrl-single,pins = <
+			AM33XX_GPMC_AD0(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD1(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD2(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD3(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD4(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD5(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD6(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD7(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD8(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD9(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD10(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD11(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD12(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD13(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD14(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD15(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+		>;
+	};
+
+	gpmc_addr_pins: pinmux_gpmc_addr_pins {
+		pinctrl-single,pins = <
+			AM33XX_LCD_DATA0_GPMC_A0(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA1_GPMC_A1(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA2_GPMC_A2(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA3_GPMC_A3(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA4_GPMC_A4(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA5_GPMC_A5(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA6_GPMC_A6(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA7_GPMC_A7(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_VSYNC_GPMC_A8(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_HSYNC_GPMC_A9(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_PCLK_GPMC_A10(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_AC_BIAS_EN_GPMC_A11(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA8_GPMC_A12(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA9_GPMC_A13(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA10_GPMC_A14(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA11_GPMC_A15(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA12_GPMC_A16(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA13_GPMC_A17(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA14_GPMC_A18(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA15_GPMC_A19(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+		>;
+	};
+
+	gpmc_ctrl_pins: pinmux_gpmc_ctrl_pins {
+		pinctrl-single,pins = <
+			AM33XX_GPMC_BEN0_CLE(PIN_OUTPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_ADVN_ALE(PIN_OUTPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_OEN_REN(PIN_OUTPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_WEN(PIN_OUTPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_CSN0(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_CSN1(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_CSN2_GPMC_BE1N(PIN_OUTPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_WAIT0(PIN_INPUT_PULLUP)
+			AM33XX_GPMC_CLK_GPIO2_1(PIN_INPUT_PULLDOWN)
+		>;
+	};
+
+	kbus_pins: pinmux_kbus_pins {
+		pinctrl-single,pins = <
+			AM33XX_GPMC_A7_GPIO1_23(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+			AM33XX_GPMC_A9_GPIO1_25(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_A8_GPIO1_24(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+			AM33XX_XDMA_EVENT_INTR1_GPIO0_20(PIN_INPUT_PULLUP)
+			AM33XX_NNMI(PIN_INPUT_PULLUP)
+			AM33XX_GPMC_A6_GPIO1_22(PIN_INPUT_PULLUP)
+			AM33XX_MII1_RX_ER_GPIO3_2(PIN_INPUT_PULLUP)
+			AM33XX_MII1_TX_EN_GPIO3_3(PIN_INPUT_PULLUP)
+			AM33XX_MII1_RX_DV_GPIO3_4(PIN_INPUT_PULLUP)
+			AM33XX_XDMA_EVENT_INTR0_GPIO0_19(PIN_INPUT_PULLUP)
+		>;
+	};
+
+	watchdog_pins: pinmux_watchdog_pins {
+		pinctrl-single,pins = <
+			AM33XX_MII1_TXD3_GPIO0_16(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_MII1_TXD2_GPIO0_17(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+		>;
+	};
+
+	ecap0_pins: pinmux_ecap0_pins {
+		pinctrl-single,pins = <
+			AM33XX_SPI0_CS1_ECAP1_IN_PWM1_OUT(PIN_INPUT)
+		>;
+	};
+
+	rmii2_pins: pinmux_rmii2_pins {
+		pinctrl-single,pins = <
+			/* RMII 2 */
+			AM33XX_GPMC_A0_RMII2_TXEN(PIN_OUTPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_A4_RMII2_TXD1(PIN_OUTPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_A5_RMII2_TXD0(PIN_OUTPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_A10_RMII2_RXD1(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_A11_RMII2_RXD0(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_WPN_RMII2_RXERR(PIN_INPUT_PULLDOWN)
+			AM33XX_MII1_COL_RMII2_REFCLK(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_CSN3_RMII2_CRS_DV(PIN_INPUT)
+		>;
+	};
+
+	rmii2_sleep_pins: pinmux_rmii2_sleep_pins {
+		pinctrl-single,pins = <
+			/* RMII 2 */
+			AM33XX_GPMC_A0_GPIO1_16(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_A4_GPIO1_20(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_A5_GPIO1_21(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_A10_GPIO1_26(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_A11_GPIO1_27(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_WPN_GPIO0_31(PIN_INPUT_PULLDOWN)
+			AM33XX_MII1_COL_GPIO3_0(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_CSN3_GPIO2_0(PIN_INPUT_PULLDOWN)
+		>;
+	};
+};
+
+&kbus0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&kbus_pins>;
+
+	/*
+	 * announce used tty-device in /sys/class/wago/system.
+	 * is needed to link this device to /dev/ttyKbus
+	 */
+	kbus,tty-device = "ttyO4"; /* corresponds to &uart4*/
+
+	/* some should be active low, keep all to high for compatibility reasons */
+	kbus,nrst-gpios   = <&gpio1 25 GPIO_ACTIVE_LOW>;
+	kbus,nsync-gpios  = <&gpio1 22 GPIO_ACTIVE_HIGH>;
+	kbus,cmdsel-gpios = <&gpio1 24 GPIO_ACTIVE_HIGH>;
+	kbus,nirq-gpios   = <&gpio1 23 GPIO_ACTIVE_HIGH>;
+	kbus,nerr-gpios   = <&gpio3  2 GPIO_ACTIVE_HIGH>;
+	kbus,nrdy-gpios   = <&gpio0 20 GPIO_ACTIVE_HIGH>;
+};
+
+&tps {
+	interrupts = <47>;
+	interrupt-parent = <&intc>;
+};
+
+/* do we need this ?? */
+&tscadc {
+	adc {
+		//AIN0 	= +5V0 Local Bus voltage	pmic-in
+		//AIN1	= +3V3  IO system voltage 	dcdc4_reg
+		//AIN2-7	not used
+		ti,adc-channels = <8>;
+	};
+};
+
+&ecap0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&ecap0_pins>;
+};
+
+&ocmcram {
+	ti,no_idle_on_suspend;
+};
+
+&mmc1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <
+		&mmc1_pins
+		&sdcard_cd_pins
+	>;
+
+	cd-debounce-delay-ms = <7>;
+	cd-gpios = <&gpio3 14 GPIO_ACTIVE_LOW>;
+};
+
+&mac_sw {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&rmii2_pins>;
+	pinctrl-1 = <&rmii2_sleep_pins>;
+	mac_control = <0x18021>; /* force 100MBit full-duplex */
+	active_slave = <1>;
+};
+
+/include/ "pxc-nandparts.dtsi"
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8208-netx.dtsi b/arch/arm/boot/dts/am335x-pfc-750_8208-netx.dtsi
new file mode 100644
index 000000000000..e6596d21c50b
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8208-netx.dtsi
@@ -0,0 +1,87 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include "am33xx-pinfunc.h"
+
+/ {
+	uio_netx: uio_netx_dma_fb_asic@8000000 {
+		compatible = "uio_pdrv_genirq";
+		pinctrl-names = "default";
+		pinctrl-0 = <&netx_pins>;
+
+		reg = <0x04000000 0x40000>; /* 256k (min: 64k, max: 256k) */
+
+		/* gpio0_19: DMA-FB-ASIC  */
+		interrupt-parent = <&gpio0>;
+		interrupts = <19 IRQ_TYPE_LEVEL_LOW>;
+
+		status = "disabled";
+	};
+};
+
+&am33xx_pinmux {
+	netx_pins: pinmux_netx_pins {
+		pinctrl-single,pins = <
+			AM33XX_GPMC_BEN1_GPMC_CSN6(PIN_OUTPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_MII1_RXD2_UART3_TXD(PIN_OUTPUT_PULLDOWN)
+			AM33XX_MII1_RXD3_UART3_RXD(PIN_INPUT_PULLDOWN)
+			AM33XX_XDMA_EVENT_INTR0_GPIO0_19(PIN_INPUT_PULLDOWN)
+			AM33XX_LCD_DATA14_GPIO0_10(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+		>;
+	};
+};
+
+&wsysinit {
+	dp,reset;
+	dp,gpio-rst = <&gpio0 10 GPIO_ACTIVE_LOW>; /* nRST-FB */
+};
+
+&gpmc {
+	netX51: nor@6,0 {	/* FIXME: Timings are to be updated!!! */
+		reg = <6 0 0x40000>; /* 256k (min: 64k, max: 256k) */
+		bank-width = <2>;    /* 16bit Device (2 Bytes) */
+
+		gpmc,cs-on-ns = <0>;
+		gpmc,cs-rd-off-ns = <150>;
+		gpmc,cs-wr-off-ns = <70>;
+
+		gpmc,adv-on-ns = <0>;
+		gpmc,adv-rd-off-ns = <0>;
+		gpmc,adv-wr-off-ns = <0>;
+
+		gpmc,oe-on-ns = <0>;
+		gpmc,oe-off-ns = <150>;
+
+		gpmc,we-on-ns = <0>;
+		gpmc,we-off-ns = <70>;
+
+		gpmc,rd-cycle-ns = <150>;
+		gpmc,wr-cycle-ns = <70>;
+
+		gpmc,access-ns = <130>;
+		gpmc,wr-access-ns = <50>;
+
+		gpmc,wr-data-mux-bus-ns = <0>;
+
+		gpmc,cycle2cycle-delay-ns = <20>;
+		gpmc,cycle2cycle-samecsen;
+		gpmc,cycle2cycle-diffcsen;
+
+		/* gpmc,time-para-granularity; */
+		gpmc,mux-add-data = <0>; /* non-multiplexing mode */
+
+		/* First rising edge of GPMC_CLK at start access time */
+		gpmc,clk-activation-ns = <0>;
+
+		/* =1, WAIT pin is monitored one GPMC_CLK cycle before valid data */
+		gpmc,wait-monitoring-ns = <0>;
+
+		#address-cells = <1>;
+		#size-cells = <1>;
+	};
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8208.dts b/arch/arm/boot/dts/am335x-pfc-750_8208.dts
new file mode 100644
index 000000000000..ab01ef0fa536
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8208.dts
@@ -0,0 +1,111 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+/dts-v1/;
+
+#include "am335x-pfc-750_8208.dtsi"
+#include "am335x-pfc-750_8xxx-ksz8863.dtsi"
+#include "am335x-pfc-750_8xxx-uart1.dtsi"
+#include "am335x-pfc-750_8208-netx.dtsi"
+#include "am335x-pfc-750_82xx-dcan.dtsi"
+#include "wago-devconf.dtsi"
+
+/ {
+	model = "WAGO PFC200 750-8208";
+	compatible = "wago,am335x-pfc-750_8208-004e", "wago,am335x-pfc", "ti,am33xx";
+};
+
+&am33xx_pinmux {
+	ksz8863_switch_pins: pinmux_ksz8863_switch_pins {
+		pinctrl-single,pins = <
+			AM33XX_MII1_RX_CLK_GPIO3_10(PIN_OUTPUT_PULLDOWN)
+			AM33XX_SPI0_CS1_GPIO0_6(PIN_INPUT_PULLDOWN)
+		>;
+	};
+};
+
+&aes {
+	status = "okay";
+};
+
+&bitbang_mdio0_sw {
+	status = "okay";
+};
+
+&cppi41dma {
+	status = "okay";
+};
+
+&dcan0 {
+	status = "okay";
+};
+
+&elm {
+	status = "okay";
+};
+
+&gpmc {
+	status = "okay";
+};
+
+&i2c0 {
+	status = "okay";
+};
+
+&kbus0 {
+	status = "okay";
+};
+
+&ksz8863_switch {
+	pinctrl-names = "default";
+	pintctrl-0 = <&ksz8863_switch_pins>;
+
+	ksz,reset-gpio = <&gpio3 10 GPIO_ACTIVE_LOW>;
+	reg = <0>;
+
+	status = "okay";
+};
+
+&mac_sw {
+	status = "okay";
+};
+
+&mmc1 {
+	status = "okay";
+};
+
+&oms {
+	status = "okay";
+};
+
+&sham {
+	status = "okay";
+};
+
+&spi0 {
+	status = "okay";
+};
+
+&swcfg_ksz8863 {
+	status = "okay";
+};
+
+&uart1 {
+	status = "okay";
+};
+
+&uart4 {
+	status = "okay";
+};
+
+&uio_netx {
+	status = "okay";
+};
+
+&watchdog {
+	status = "okay";
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8208.dtsi b/arch/arm/boot/dts/am335x-pfc-750_8208.dtsi
new file mode 100644
index 000000000000..2f96e575ce04
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8208.dtsi
@@ -0,0 +1,333 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include "am335x-pfc.dtsi"
+#include "am335x-pfc-750_8xxx-uart4.dtsi"
+#include "am335x-pfc-750_8xxx-leds.dtsi"
+#include "am335x-pfc-750_8xxx-nvram.dtsi"
+#include "am335x-pfc-750_8xxx-kbus.dtsi"
+
+/ {
+	memory: memory {
+		device_type = "memory";
+		reg = <0x80000000 0x10000000>; /* 256 MB */
+	};
+};
+
+&cpu_0 {
+	operating-points = <
+		/* kHz    uV */
+		600000  1100000
+		300000  950000
+	>;
+};
+
+&am33xx_pinmux {
+	rmii1_pins: pinmux_rmii1_pins {
+		pinctrl-single,pins = <
+			/* reserved, not yet used (RMII1) */
+			AM33XX_MII1_TX_EN_RMII1_TXEN(PIN_OUTPUT_PULLDOWN)
+			AM33XX_MII1_TXD0_RMII1_TXD0(PIN_OUTPUT_PULLDOWN)
+			AM33XX_MII1_TXD1_RMII1_TXD1(PIN_OUTPUT_PULLDOWN)
+			AM33XX_MII1_RXD0_RMII1_RXD0(PIN_INPUT_PULLDOWN)
+			AM33XX_MII1_RXD1_RMII1_RXD1(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_CLK_GPIO2_1(PIN_OUTPUT_PULLDOWN)
+			AM33XX_GPMC_A1_GPIO1_17(PIN_INPUT_PULLDOWN)
+			AM33XX_RMII1_REF_CLK(PIN_INPUT)
+			AM33XX_MII1_CRS_RMII1_CRS_DV(PIN_INPUT_PULLDOWN)
+			AM33XX_MII1_RX_ER_RMII1_RXERR(PIN_INPUT_PULLDOWN)
+		>;
+	};
+
+	rmii2_pins: pinmux_rmii2_pins {
+		pinctrl-single,pins = <
+			/* RMII 2 */
+			AM33XX_GPMC_A0_RMII2_TXEN(PIN_OUTPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_A4_RMII2_TXD1(PIN_OUTPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_A5_RMII2_TXD0(PIN_OUTPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_A10_RMII2_RXD1(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_A11_RMII2_RXD0(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_WPN_RMII2_RXERR(PIN_INPUT_PULLDOWN)
+			AM33XX_MII1_COL_RMII2_REFCLK(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_CSN3_RMII2_CRS_DV(PIN_INPUT)
+		>;
+	};
+
+	rmii2_sleep_pins: pinmux_rmii2_sleep_pins {
+		pinctrl-single,pins = <
+			/* RMII 2 */
+			AM33XX_GPMC_A0_GPIO1_16(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_A4_GPIO1_20(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_A5_GPIO1_21(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_A10_GPIO1_26(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_A11_GPIO1_27(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_WPN_GPIO0_31(PIN_INPUT_PULLDOWN)
+			AM33XX_MII1_COL_GPIO3_0(PIN_INPUT_PULLDOWN)
+			AM33XX_GPMC_CSN3_GPIO2_0(PIN_INPUT_PULLDOWN)
+		>;
+	};
+
+	watchdog_pins: pinmux_watchdog_pins {
+		pinctrl-single,pins = <
+			AM33XX_EMU0_GPIO3_7(PIN_OUTPUT_PULLDOWN)
+			AM33XX_EMU1_GPIO3_8(PIN_OUTPUT_PULLDOWN)
+		>;
+	};
+
+	sdcard_cd_pins: pinmux_sdcard_cd_pins {
+		pinctrl-single,pins = <
+			AM33XX_MCASP0_ACLKX_GPIO3_14(PIN_INPUT_PULLUP)
+		>;
+	};
+
+	sdcard_wp_pins: pinmux_sdcard_wp_pins {
+		pinctrl-single,pins = <
+			AM33XX_ECAP0_IN_PWM0_OUT_MMC0_SDWP(PIN_INPUT_PULLDOWN)
+		>;
+	};
+
+	kbus_pins: pinmux_kbus_pins {
+		pinctrl-single,pins = <
+			AM33XX_GPMC_A7_GPIO1_23(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+			AM33XX_GPMC_A9_GPIO1_25(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_A8_GPIO1_24(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+			AM33XX_XDMA_EVENT_INTR1_GPIO0_20(PIN_INPUT_PULLUP)
+			AM33XX_GPMC_A6_GPIO1_22(PIN_INPUT_PULLUP)
+			AM33XX_MII1_TX_CLK_GPIO3_9(PIN_INPUT_PULLUP)
+		>;
+	};
+
+	gpmc_data_pins: pinmux_gpmc_data_pins {
+		pinctrl-single,pins = <
+			AM33XX_GPMC_AD0(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD1(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD2(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD3(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD4(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD5(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD6(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD7(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD8(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD9(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD10(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD11(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD12(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD13(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD14(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_AD15(PIN_INPUT_PULLDOWN | SLEWCTRL_FAST)
+		>;
+	};
+
+	gpmc_addr_pins: pinmux_gpmc_addr_pins {
+		pinctrl-single,pins = <
+			AM33XX_LCD_DATA0_GPMC_A0(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA1_GPMC_A1(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA2_GPMC_A2(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA3_GPMC_A3(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA4_GPMC_A4(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA5_GPMC_A5(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA6_GPMC_A6(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA7_GPMC_A7(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_VSYNC_GPMC_A8(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_HSYNC_GPMC_A9(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_PCLK_GPMC_A10(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_AC_BIAS_EN_GPMC_A11(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA8_GPMC_A12(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA9_GPMC_A13(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA10_GPMC_A14(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA11_GPMC_A15(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA12_GPMC_A16(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA13_GPMC_A17(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA15_GPMC_A19(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+		>;
+	};
+
+	gpmc_ctrl_pins: pinmux_gpmc_ctrl_pins {
+		pinctrl-single,pins = <
+			AM33XX_GPMC_BEN0_CLE(PIN_OUTPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_ADVN_ALE(PIN_OUTPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_OEN_REN(PIN_OUTPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_WEN(PIN_OUTPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_CSN0(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_CSN1(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_CSN2_GPMC_BE1N(PIN_OUTPUT_PULLDOWN | SLEWCTRL_FAST)
+			AM33XX_GPMC_WAIT0(PIN_INPUT_PULLUP)
+		>;
+	};
+};
+
+&wsysinit {
+	board,variant = "pfc200v2";
+	adjtimex,frequency = <2000000>;
+};
+
+&watchdog {
+	pinctrl-names = "default";
+	pinctrl-0 = <&watchdog_pins>;
+
+	en-gpios = <&gpio3 7 GPIO_ACTIVE_LOW>;
+	gpios = <&gpio3 8 GPIO_ACTIVE_LOW>;
+};
+
+&mac_sw {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&rmii2_pins>;
+	pinctrl-1 = <&rmii2_sleep_pins>;
+	mac_control = <0x18021>; /* force 100MBit full-duplex */
+	active_slave = <1>;
+};
+
+&gpmc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&gpmc_data_pins>, <&gpmc_addr_pins>, <&gpmc_ctrl_pins>;
+
+	num-cs = <7>;
+	num-waitpins = <3>;
+	ranges = <
+		0 0 0x08000000 0x01000000 /* CS0: NAND, 16M */
+		1 0 0x01000000 0x01000000 /* CS1: NVRAM, 16M */
+		6 0 0x04000000 0x01000000 /* CS6: NETX/DPC31, 16M */
+	>;
+
+	nand: nand@0,0 {
+		compatible = "ti,omap2-nand";
+		reg = <0 0 4>; /* CS0, offset 0, IO size 4 */
+		nand-bus-width = <8>;
+		ti,nand-ecc-opt = "bch8";
+		gpmc,device-nand = "true";
+		gpmc,device-width = <1>;
+		gpmc,sync-clk-ps = <0>;
+		gpmc,cs-on-ns = <0>;
+		gpmc,cs-rd-off-ns = <44>;
+		gpmc,cs-wr-off-ns = <44>;
+		gpmc,adv-on-ns = <6>;
+		gpmc,adv-rd-off-ns = <34>;
+		gpmc,adv-wr-off-ns = <44>;
+		gpmc,we-on-ns = <0>;
+		gpmc,we-off-ns = <40>;
+		gpmc,oe-on-ns = <0>;
+		gpmc,oe-off-ns = <54>;
+		gpmc,access-ns = <64>;
+		gpmc,rd-cycle-ns = <82>;
+		gpmc,wr-cycle-ns = <82>;
+		gpmc,wait-pin = <0>;
+		gpmc,wait-on-read;
+		gpmc,wait-on-write;
+		gpmc,bus-turnaround-ns = <0>;
+		gpmc,cycle2cycle-delay-ns = <0>;
+		gpmc,clk-activation-ns = <0>;
+		gpmc,wait-monitoring-ns = <0>;
+		gpmc,wr-access-ns = <40>;
+		gpmc,wr-data-mux-bus-ns = <0>;
+
+		#address-cells = <1>;
+		#size-cells = <1>;
+		ti,elm-id = <&elm>;
+	};
+
+	nvram: nor@1,0 { /* NVRAM Device 128k */
+		reg = <1 0 0x01000000>;
+		bank-width = <2>; /* 1: 8bit, 2: 16bit */
+		gpmc,sync-clk-ps = <0>;
+		gpmc,cs-on-ns = <0>;
+		gpmc,cs-rd-off-ns = <50>;
+		gpmc,cs-wr-off-ns = <30>;
+		gpmc,adv-on-ns = <0>;
+		gpmc,adv-rd-off-ns = <0>;
+		gpmc,adv-wr-off-ns = <0>;
+		gpmc,oe-on-ns = <0>;
+		gpmc,oe-off-ns = <50>;
+		gpmc,we-on-ns = <0>;
+		gpmc,we-off-ns = <30>;
+		gpmc,rd-cycle-ns = <50>;
+		gpmc,wr-cycle-ns = <30>;
+		gpmc,access-ns = <40>;
+		gpmc,wr-access-ns = <10>;
+		gpmc,wr-data-mux-bus-ns = <0>;
+		gpmc,cycle2cycle-delay-ns = <10>;
+		gpmc,cycle2cycle-samecsen;
+		gpmc,cycle2cycle-diffcsen;
+
+		#address-cells = <1>;
+		#size-cells = <1>;
+	};
+};
+
+&kbus0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&kbus_pins>;
+
+	/*
+	 * announce used tty-device in /sys/class/wago/system.
+	 * is needed to link this device to /dev/ttyKbus
+	 */
+	kbus,tty-device = "ttyO4"; /* corresponds to &uart4*/
+
+	/* some should be active low, keep all to high for compatibility reasons */
+	kbus,nrst-gpios   = <&gpio1 25 GPIO_ACTIVE_LOW>;
+	kbus,nsync-gpios  = <&gpio1 22 GPIO_ACTIVE_HIGH>;
+	kbus,cmdsel-gpios = <&gpio1 24 GPIO_ACTIVE_HIGH>;
+	kbus,nirq-gpios   = <&gpio1 23 GPIO_ACTIVE_HIGH>;
+	kbus,nerr-gpios   = <&gpio3  9 GPIO_ACTIVE_HIGH>;
+	kbus,nrdy-gpios   = <&gpio0 20 GPIO_ACTIVE_HIGH>;
+};
+
+&lb61_0 {
+	label = "bf-red";
+};
+
+&lb61_1 {
+	label = "bf-green";
+};
+
+&lb61_2 {
+	label = "dia-red";
+};
+
+&lb61_3 {
+	label = "dia-green";
+};
+
+&lb60_10 {
+	label = "can-red";
+};
+
+&lb60_11 {
+	label = "can-green";
+};
+
+&tps {
+	interrupts = <47>;
+	interrupt-parent = <&intc>;
+};
+
+&tscadc {
+	adc {
+		/* AIN0 = +5V0 Local Bus voltage pmic-in
+		 * AIN1 = +3V3 IO system voltage dcdc4_reg
+		 * AIN2-7 not used
+		 */
+		ti,adc-channels = <8>;
+	};
+};
+
+&ocmcram {
+	ti,no_idle_on_suspend;
+};
+
+&mmc1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <
+		&mmc1_pins
+		&sdcard_cd_pins
+		&sdcard_wp_pins
+	>;
+	cd-gpios = <&gpio3 14 GPIO_ACTIVE_LOW>;
+};
+
+/include/ "pxc-nandparts.dtsi"
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8210.dts b/arch/arm/boot/dts/am335x-pfc-750_8210.dts
new file mode 100644
index 000000000000..81f1b4fa3219
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8210.dts
@@ -0,0 +1,160 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+/dts-v1/;
+
+#include "am335x-pfc-750_821x.dtsi"
+#include "am335x-pfc-750_821x-mv88e6321.dtsi"
+#include "wago-devconf.dtsi"
+
+/{
+	model = "WAGO PFC200 750-8210";
+	compatible = "wago,am335x-pfc-750_821x-1007", "wago,am335x-pfc", "ti,am33xx";
+};
+
+&aes {
+	status = "okay";
+};
+
+&cppi41dma {
+	status = "okay";
+};
+
+&elm {
+	status = "okay";
+};
+
+&gpmc {
+	status = "okay";
+};
+
+&i2c0 {
+	status = "okay";
+};
+
+&kbus0 {
+	status = "okay";
+};
+
+&mac_sw {
+	status = "okay";
+};
+
+&mmc1 {
+	status = "okay";
+};
+
+&mmc2 {
+	status = "okay";
+};
+
+&oms {
+	status = "okay";
+};
+
+&sham {
+	status = "okay";
+};
+
+&spi0 {
+	status = "okay";
+};
+
+&uart0 {
+	status = "okay";
+};
+
+&uart5 {
+	status = "okay";
+};
+
+&watchdog {
+	status = "okay";
+};
+
+&wsysinit {
+	tty,rs232-485 = "nop";
+	profinet-capable;
+};
+
+&am33xx_pinmux {
+	ext_phy0_pins: pinmux_ext_phy0_pins {
+		pinctrl-single,pins = <
+			AM33XX_GPMC_WPN_GPIO0_31(PIN_INPUT)
+		>;
+	};
+
+	ext_phy1_pins: pinmux_ext_phy1_pins {
+		pinctrl-single,pins = <
+			AM33XX_MII1_RX_ER_GPIO3_2(PIN_INPUT)
+		>;
+	};
+
+};
+
+&swcfg_mv88e6321 {
+	status = "okay";
+};
+
+&mv88e6321_switch {
+	eeprom = /bits/ 8 <0x20 0x80 0x09 0x5E 0x40 0x80 0x09 0x5E 0x01 0x7D 0x01 0x7D 0x01 0x7D 0x01 0x7D
+			   0xF9 0x7F 0x40 0x19 0xF8 0x7F 0x60 0x94 0xF9 0x7F 0x40 0x19 0xF8 0x7F 0x80 0x94
+			   0xF9 0x7F 0x40 0x19 0xF8 0x7F 0x00 0x94 0xF9 0x7F 0x40 0x19 0xF8 0x7F 0x20 0x94
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF>;
+
+	mdio {
+		ext_phy0: ethernet-phy@0 {
+			compatible = "ethernet-phy-idD565.A401", "ethernet-phy-ieee802.3-c22";
+			pinctrl-names = "default";
+			pinctrl-0 = <&ext_phy0_pins>;
+			reg = <0>;
+			max-speed = <100>;
+			interrupt-parent = <&gpio3>;
+			interrupts = <2 IRQ_TYPE_EDGE_FALLING>;
+		};
+
+		ext_phy1: ethernet-phy@1 {
+			compatible = "ethernet-phy-idD565.A401", "ethernet-phy-ieee802.3-c22";
+			pinctrl-names = "default";
+			pinctrl-0 = <&ext_phy1_pins>;
+			reg = <1>;
+			max-speed = <100>;
+			interrupt-parent = <&gpio0>;
+			interrupts = <31 IRQ_TYPE_EDGE_FALLING>;
+		};
+	};
+
+	ports {
+		port@0 {
+			reg = <0>;
+			label = "ethX1";
+			phy-mode = "sgmii";
+			phy-handle = <&ext_phy0>;
+			phy-external;
+		};
+
+		port@1 {
+			reg = <1>;
+			label = "ethX2";
+			phy-mode = "sgmii";
+			phy-handle = <&ext_phy1>;
+			phy-external;
+		};
+	};
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8211.dts b/arch/arm/boot/dts/am335x-pfc-750_8211.dts
new file mode 100644
index 000000000000..a655570a9dd7
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8211.dts
@@ -0,0 +1,140 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+/dts-v1/;
+
+#include "am335x-pfc-750_821x.dtsi"
+#include "am335x-pfc-750_82xx-dcan.dtsi"
+#include "am335x-pfc-750_821x-mv88e6321.dtsi"
+#include "am335x-pfc-750_8xxx-uart1-two-wire.dtsi"
+#include "wago-devconf.dtsi"
+
+/{
+	model = "WAGO PFC200 750-8211";
+	compatible = "wago,am335x-pfc-750_821x-1004", "wago,am335x-pfc", "ti,am33xx";
+};
+
+&aes {
+	status = "okay";
+};
+
+&cppi41dma {
+	status = "okay";
+};
+
+&elm {
+	status = "okay";
+};
+
+&gpmc {
+	status = "okay";
+};
+
+&i2c0 {
+	status = "okay";
+};
+
+&kbus0 {
+	status = "okay";
+};
+
+&mac_sw {
+	status = "okay";
+};
+
+&mmc1 {
+	status = "okay";
+};
+
+&mmc2 {
+	status = "okay";
+};
+
+&oms {
+	status = "okay";
+};
+
+&sham {
+	status = "okay";
+};
+
+&swcfg_mv88e6321 {
+	status = "okay";
+};
+
+&spi0 {
+	status = "okay";
+};
+
+&uart0 {
+	status = "okay";
+};
+
+&uart1 {
+	/delete-property/ rs485en-gpio;
+	/delete-property/ rs485-rts-active-high;
+	/delete-property/ rs485-rts-delay;
+	status = "okay";
+};
+
+&uart5 {
+	status = "okay";
+};
+
+&watchdog {
+	status = "okay";
+};
+
+&wsysinit {
+	tty,rs232-485 = "nop";
+	profinet-capable;
+};
+
+&mv88e6321_switch {
+	eeprom = /bits/ 8 <0x20 0x80 0x09 0x5E 0x40 0x80 0x09 0x5E 0x01 0x7D 0x01 0x7D 0x01 0x7D 0x01 0x7D
+			   0xF9 0x7F 0x40 0x19 0xF8 0x7F 0x60 0x94 0xF9 0x7F 0x40 0x19 0xF8 0x7F 0x80 0x94
+			   0xF9 0x7F 0x40 0x19 0xF8 0x7F 0x00 0x94 0xF9 0x7F 0x40 0x19 0xF8 0x7F 0x20 0x94
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF>;
+
+	led-ctrl = /bits/ 16 <0x0000 0x0000 0x0000 0x0088 0x0088 0x0000 0x0000 0x0000>;
+
+	ports {
+		port@0 {
+			reg = <0>;
+			label = "ethX1";
+			phy-mode = "sgmii";
+
+			fixed-link {
+				speed = <100>;
+				full-duplex;
+			};
+		};
+
+		port@1 {
+			reg = <1>;
+			label = "ethX2";
+			phy-mode = "sgmii";
+
+			fixed-link {
+				speed = <100>;
+				full-duplex;
+			};
+		};
+	};
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8212.dts b/arch/arm/boot/dts/am335x-pfc-750_8212.dts
new file mode 100644
index 000000000000..13b4c861b18b
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8212.dts
@@ -0,0 +1,90 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+/dts-v1/;
+
+#include "am335x-pfc-750_821x.dtsi"
+#include "am335x-pfc-750_8xxx-ksz8863.dtsi"
+#include "am335x-pfc-750_8xxx-uart1.dtsi"
+#include "wago-devconf.dtsi"
+
+/ {
+	model = "WAGO PFC200 750-8212";
+	compatible = "wago,am335x-pfc-750_821x-000c", "wago,am335x-pfc", "ti,am33xx";
+};
+
+&aes {
+	status = "okay";
+};
+
+&bitbang_mdio0_sw {
+	status = "okay";
+};
+
+&elm {
+	status = "okay";
+};
+
+&gpmc {
+	status = "okay";
+};
+
+&i2c0 {
+	status = "okay";
+};
+
+&kbus0 {
+	status = "okay";
+};
+
+&ksz8863_switch {
+	status = "okay";
+};
+
+&mac_sw {
+	status = "okay";
+};
+
+&mmc1 {
+	status = "okay";
+};
+
+&mmc2 {
+	status = "okay";
+};
+
+&oms {
+	status = "okay";
+};
+
+&sham {
+	status = "okay";
+};
+
+&spi0 {
+	status = "okay";
+};
+
+&swcfg_ksz8863 {
+	status = "okay";
+};
+
+&uart0 {
+	status = "okay";
+};
+
+&uart1 {
+	status = "okay";
+};
+
+&uart5 {
+	status = "okay";
+};
+
+&watchdog {
+	status = "okay";
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8213.dts b/arch/arm/boot/dts/am335x-pfc-750_8213.dts
new file mode 100644
index 000000000000..b38afa7b388e
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8213.dts
@@ -0,0 +1,98 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+/dts-v1/;
+
+#include "am335x-pfc-750_821x.dtsi"
+#include "am335x-pfc-750_8xxx-ksz8863.dtsi"
+#include "am335x-pfc-750_82xx-dcan.dtsi"
+#include "wago-devconf.dtsi"
+
+/ {
+	model = "WAGO PFC200 750-8213";
+	compatible = "wago,am335x-pfc-750_821x-000a", "wago,am335x-pfc", "ti,am33xx";
+};
+
+&aes {
+	status = "okay";
+};
+
+&bitbang_mdio0_sw {
+	status = "okay";
+};
+
+&dcan0 {
+	status = "okay";
+};
+
+&elm {
+	status = "okay";
+};
+
+&gpmc {
+	status = "okay";
+};
+
+&i2c0 {
+	status = "okay";
+};
+
+&kbus0 {
+	status = "okay";
+};
+
+&ksz8863_switch {
+	status = "okay";
+};
+
+&mac_sw {
+	status = "okay";
+};
+
+&mmc1 {
+	status = "okay";
+};
+
+&mmc2 {
+	status = "okay";
+};
+
+&oms {
+	status = "okay";
+};
+
+&sham {
+	status = "okay";
+};
+
+&spi0 {
+	status = "okay";
+};
+
+&swcfg_ksz8863 {
+	status = "okay";
+};
+
+&uart0 {
+	status = "okay";
+};
+
+&uart5 {
+	status = "okay";
+};
+
+&watchdog {
+	status = "okay";
+};
+
+&lb60_10 {
+	label = "can-red";
+};
+
+&lb60_11 {
+	label = "can-green";
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8214.dts b/arch/arm/boot/dts/am335x-pfc-750_8214.dts
new file mode 100644
index 000000000000..ece335863615
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8214.dts
@@ -0,0 +1,103 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+/dts-v1/;
+
+#include "am335x-pfc-750_821x.dtsi"
+#include "am335x-pfc-750_8xxx-uart1.dtsi"
+#include "am335x-pfc-750_8xxx-ksz8863.dtsi"
+#include "am335x-pfc-750_82xx-dcan.dtsi"
+#include "wago-devconf.dtsi"
+
+/ {
+	model = "WAGO PFC200 750-8214";
+	compatible = "wago,am335x-pfc-750_821x-000e", "wago,am335x-pfc", "ti,am33xx";
+};
+
+&aes {
+	status = "okay";
+};
+
+&bitbang_mdio0_sw {
+	status = "okay";
+};
+
+&dcan0 {
+	status = "okay";
+};
+
+&elm {
+	status = "okay";
+};
+
+&gpmc {
+	status = "okay";
+};
+
+&i2c0 {
+	status = "okay";
+};
+
+&kbus0 {
+	status = "okay";
+};
+
+&ksz8863_switch {
+	status = "okay";
+};
+
+&mac_sw {
+	status = "okay";
+};
+
+&mmc1 {
+	status = "okay";
+};
+
+&mmc2 {
+	status = "okay";
+};
+
+&oms {
+	status = "okay";
+};
+
+&sham {
+	status = "okay";
+};
+
+&spi0 {
+	status = "okay";
+};
+
+&swcfg_ksz8863 {
+	status = "okay";
+};
+
+&uart0 {
+	status = "okay";
+};
+
+&uart1 {
+	status = "okay";
+};
+
+&uart5 {
+	status = "okay";
+};
+
+&watchdog {
+	status = "okay";
+};
+
+&lb60_10 {
+	label = "can-red";
+};
+
+&lb60_11 {
+	label = "can-green";
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8215-tcam.dtsi b/arch/arm/boot/dts/am335x-pfc-750_8215-tcam.dtsi
new file mode 100644
index 000000000000..83b0cfef8d6d
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8215-tcam.dtsi
@@ -0,0 +1,505 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/{
+	tcam {
+		compatible = "mv88e6321,tcam";
+		tcam-mode-port-mask = <0x58>;   /* use tcam */
+		debug-port = <0x03>;
+
+		/* ethX11: forwarding mrp test frames to ethX12 */
+		ethX11_mrp_test_forwarding {
+			id = <1>;
+			frame-type-mask = <3>;
+			frame-type = <0>;
+			spv-mask = <0x7F>;
+			spv = <0x08>;       /* use tcam entry for Port 3 -> ethX11 */
+			ppri-mask = <0x0>;
+			ppri = <0x0>;
+			pvid-mask = <0x0>;
+			pvid = <0x0>;
+			next-id = <0>;
+
+			dpv-override;
+			dpv-data = <0x10>;  /* frame forwarding to Port 4 -> ethX12 */
+
+			action-override;
+			action-data = <0x0>;
+
+			frame-data = [
+				01 15 4E 00 00 01 00 00 00 00 00 00 00 00 00 00
+				88 E3 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+
+			frame-data-mask = [
+				FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00
+				FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+		};
+
+		/* ethX12: forwarding mrp test frames to ethX12 */
+		ethX12_mrp_test_forwarding {
+			id = <2>;
+			frame-type-mask = <3>;
+			frame-type = <0>;
+			spv-mask = <0x7F>;
+			spv = <0x10>;       /* use tcam entry for Port 4 -> ethX12 */
+			ppri-mask = <0x0>;
+			ppri = <0x0>;
+			pvid-mask = <0x0>;
+			pvid = <0x0>;
+			next-id = <0>;
+
+			dpv-override;
+			dpv-data = <0x08>;  /* frame forwarding to Port 3 -> ethX11 */
+
+			action-override;
+			action-data = <0x0>;
+
+			frame-data = [
+				01 15 4E 00 00 01 00 00 00 00 00 00 00 00 00 00
+				88 E3 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+
+			frame-data-mask = [
+				FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00
+				FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+		};
+
+		/* ethX11: forwarding mrp control frames to ethX12 and cpu */
+		ethX11_mrp_control_forwarding {
+			id = <3>;
+			frame-type-mask = <3>;
+			frame-type = <0>;
+			spv-mask = <0x7F>;
+			spv = <0x08>;       /* use tcam entry for Port 3 -> ethX11 */
+			ppri-mask = <0x0>;
+			ppri = <0x0>;
+			pvid-mask = <0x0>;
+			pvid = <0x0>;
+			next-id = <0>;
+
+			dpv-override;
+			dpv-data = <0x50>;  /* frame forwarding to Port 4 -> ethX12 and cpu*/
+
+			action-override;
+			action-data = <0x0>;
+
+			frame-data = [
+				01 15 4E 00 00 02 00 00 00 00 00 00 00 00 00 00
+				88 E3 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+
+			frame-data-mask = [
+				FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00
+				FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+		};
+
+		/* ethX12: forwarding mrp control frames to ethX12 */
+		ethX12_mrp_control_forwarding {
+			id = <4>;
+			frame-type-mask = <3>;
+			frame-type = <0>;
+			spv-mask = <0x7F>;
+			spv = <0x10>;       /* use tcam entry for Port 4 -> ethX12 */
+			ppri-mask = <0x0>;
+			ppri = <0x0>;
+			pvid-mask = <0x0>;
+			pvid = <0x0>;
+			next-id = <0>;
+
+			dpv-override;
+			dpv-data = <0x48>;  /* frame forwarding to Port 3 -> ethX11 and cpu */
+
+			action-override;
+			action-data = <0x0>;
+
+			frame-data = [
+				01 15 4E 00 00 02 00 00 00 00 00 00 00 00 00 00
+				88 E3 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+
+			frame-data-mask = [
+				FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00
+				FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+		};
+
+		/* ethX11: dcp ident boundary - Egress of Frames with MAC '01-0E-CF-00-00-00' on
+		 * ethX11 must be prevented Ingress on ethX12 is allowed, forward to CPU port is allowed
+		 */
+		ethX11_dcp_ident_boundary {
+			id = <5>;
+			frame-type-mask = <3>;
+			frame-type = <0>;
+			spv-mask = <0x7F>;
+			spv = <0x10>;       /* use tcam entry for Port 4 -> ethX12 */
+			ppri-mask = <0x0>;
+			ppri = <0x0>;
+			pvid-mask = <0x0>;
+			pvid = <0x0>;
+			next-id = <0>;
+
+			dpv-override;
+			dpv-data = <0x40>;  /* frame forwarding to Port 6 -> CPU  */
+
+			action-override;
+			action-data = <0x0>;
+
+			frame-data = [
+				01 0E CF 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+
+			frame-data-mask = [
+				FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+		};
+
+		/* ethX12: dcp ident boundary - Egress of Frames with MAC '01-0E-CF-00-00-00'
+		 * on ethX12 must be prevented Ingress on ethX11 is allowed, forward to CPU port is allowed
+		 */
+		ethX12_dcp_ident_boundary {
+			id = <6>;
+			frame-type-mask = <3>;
+			frame-type = <0>;
+			spv-mask = <0x7F>;
+			spv = <0x08>;       /* use tcam entry for Port 3 -> ethX11 */
+			ppri-mask = <0x0>;
+			ppri = <0x0>;
+			pvid-mask = <0x0>;
+			pvid = <0x0>;
+			next-id = <0>;
+
+			dpv-override;
+			dpv-data = <0x40>;  /* frame forwarding to Port 6 -> CPU  */
+
+			action-override;
+			action-data = <0x0>;
+
+			frame-data = [
+				01 0E CF 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+
+			frame-data-mask = [
+				FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+		};
+		/* ethX11: dcp hello boundary - Egress of Frames with MAC '01-0E-CF-00-00-01'
+		 * on ethX11 must be prevented Ingress on ethX12 is allowed, forward to CPU port is allowed
+		 */
+		ethX11_dcp_hello_boundary {
+			id = <7>;
+			frame-type-mask = <3>;
+			frame-type = <0>;
+			spv-mask = <0x7F>;
+			spv = <0x10>;       /* use tcam entry for Port 4 -> ethX12 */
+			ppri-mask = <0x0>;
+			ppri = <0x0>;
+			pvid-mask = <0x0>;
+			pvid = <0x0>;
+			next-id = <0>;
+
+			dpv-override;
+			dpv-data = <0x40>;  /* frame forwarding to Port 6 -> CPU  */
+
+			action-override;
+			action-data = <0x0>;
+
+			frame-data = [
+				01 0E CF 00 00 01 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+
+			frame-data-mask = [
+				FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+		};
+
+		/* ethX12: dcp hello boundary - Egress of Frames with MAC '01-0E-CF-00-00-01'
+		 * on ethX12 must be prevented Ingress on ethX11 is allowed, forward to CPU port is allowed
+		 */
+		ethX12_dcp_hello_boundary {
+			id = <8>;
+			frame-type-mask = <3>;
+			frame-type = <0>;
+			spv-mask = <0x7F>;
+			spv = <0x08>;       /*  */
+			ppri-mask = <0x0>;
+			ppri = <0x0>;
+			pvid-mask = <0x0>;
+			pvid = <0x0>;
+			next-id = <0>;
+
+			dpv-override;
+			dpv-data = <0x40>;  /* frame forwarding to Port 6 -> CPU  */
+
+			action-override;
+			action-data = <0x0>;
+
+			frame-data = [
+				01 0E CF 00 00 01 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+
+			frame-data-mask = [
+				FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+		};
+
+		/* ethX11: forwarding all frames to CPU */
+		ethX11_all_forwarding_to_cpu {
+			id = <9>;
+			frame-type-mask = <3>;
+			frame-type = <0>;
+			spv-mask = <0x7F>;
+			spv = <0x08>;       /* use tcam entry for Port 3 -> ethX11 */
+			ppri-mask = <0x0>;
+			ppri = <0x0>;
+			pvid-mask = <0x0>;
+			pvid = <0x0>;
+			next-id = <0>;
+
+			dpv-override;
+			dpv-data = <0x40>;  /* frame forwarding to Port 6 -> CPU */
+
+			action-override;
+			action-data = <0x0>;
+
+			frame-data = [
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+
+			frame-data-mask = [
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+		};
+
+		/* ethX12: forwarding all frames to CPU */
+		ethX12_all_forwarding_to_cpu {
+			id = <10>;
+			frame-type-mask = <3>;
+			frame-type = <0>;
+			spv-mask = <0x7F>;
+			spv = <0x10>;       /* use tcam entry for Port 4 -> ethX12 */
+			ppri-mask = <0x0>;
+			ppri = <0x0>;
+			pvid-mask = <0x0>;
+			pvid = <0x0>;
+			next-id = <0>;
+
+			dpv-override;
+			dpv-data = <0x40>;  /* frame forwarding to Port 6 -> CPU */
+
+			action-override;
+			action-data = <0x0>;
+
+			frame-data = [
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+
+			frame-data-mask = [
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+		};
+
+		/* Forward DLR beacon frames
+		 */
+		dlr_forward_beacon_ethX11_to_ethX12 {
+			id = <11>;
+			frame-type-mask = <3>;
+			frame-type = <0>;
+			spv-mask = <0x7F>;
+			spv = <0x08>;         /* switch port 3 -> ethX11 */
+			ppri-mask = <0x0>;
+			ppri = <0x0>;
+			pvid-mask = <0x0>;
+			pvid = <0x0>;
+			next-id = <0>;
+
+			dpv-override;
+			dpv-data = <0x10>;  /* forward to Port 4 -> ethX12 */
+
+			action-override;
+			action-data = <0x0>;
+
+			frame-data = [
+				01 21 6C 00 00 01 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+
+			frame-data-mask = [
+				FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+		};
+
+		dlr_forward_beacon_ethX12_to_ethX11 {
+			id = <12>;
+			frame-type-mask = <3>;
+			frame-type = <0>;
+			spv-mask = <0x7F>;
+			spv = <0x10>;         /* switch port 4 -> ethX12 */
+			ppri-mask = <0x0>;
+			ppri = <0x0>;
+			pvid-mask = <0x0>;
+			pvid = <0x0>;
+			next-id = <0>;
+
+			dpv-override;
+			dpv-data = <0x08>;  /* forward to port 3 -> ethX11 */
+
+			action-override;
+			action-data = <0x0>;
+
+			frame-data = [
+				01 21 6C 00 00 01 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+
+			frame-data-mask = [
+				FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+		};
+
+		/* DLR Peer-to-Peer frames are only forwarded to CPU port
+		 */
+		dlr_p2p_all_to_cpu {
+			id = <13>;
+			frame-type-mask = <3>;
+			frame-type = <0>;
+			spv-mask = <0x40>; /* All but CPU port */
+			spv = <0x0>;
+			ppri-mask = <0x0>;
+			ppri = <0x0>;
+			pvid-mask = <0x0>;
+			pvid = <0x0>;
+			next-id = <0>;
+
+			dpv-override;
+			dpv-data = <0x40>;  /* frame forwarding to Port 6 -> CPU */
+
+			action-override;
+			action-data = <0x0>;
+
+			frame-data = [
+				01 21 6C 00 00 02 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+
+			frame-data-mask = [
+				FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+		};
+
+		/* DLR Gateway ethX11 to ethX12
+		 */
+		dlr_gateway_ethX11_to_ethX12 {
+			id = <14>;
+			frame-type-mask = <3>;
+			frame-type = <0>;
+			spv-mask = <0x7F>;
+			spv = <0x08>;         /* switch port 3 -> ethX11 */
+			ppri-mask = <0x0>;
+			ppri = <0x0>;
+			pvid-mask = <0x0>;
+			pvid = <0x0>;
+			next-id = <0>;
+
+			dpv-override;
+			dpv-data = <0x10>;  /* forward to Port 4 -> ethX12 */
+
+			action-override;
+			action-data = <0x0>;
+
+			frame-data = [
+				01 21 6C 00 00 04 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+
+			frame-data-mask = [
+				FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+		};
+
+		/* DLR Gateway frames from ethX12 to ethX11
+		 */
+		dlr_gateway_ethX12_to_ethX11 {
+			id = <15>;
+			frame-type-mask = <3>;
+			frame-type = <0>;
+			spv-mask = <0x7F>;
+			spv = <0x10>;         /* switch port 4 -> ethX12 */
+			ppri-mask = <0x0>;
+			ppri = <0x0>;
+			pvid-mask = <0x0>;
+			pvid = <0x0>;
+			next-id = <0>;
+
+			dpv-override;
+			dpv-data = <0x08>;  /* forward to port 3 -> ethX11 */
+
+			action-override;
+			action-data = <0x0>;
+
+			frame-data = [
+				01 21 6C 00 00 04 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+
+			frame-data-mask = [
+				FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
+				];
+		};
+	};
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8215.dts b/arch/arm/boot/dts/am335x-pfc-750_8215.dts
new file mode 100644
index 000000000000..908f07629487
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8215.dts
@@ -0,0 +1,215 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+/dts-v1/;
+
+#include "am335x-pfc-750_821x.dtsi"
+#include "am335x-pfc-750_82xx-dcan.dtsi"
+#include "am335x-pfc-750_821x-mv88e6321.dtsi"
+#include "am335x-pfc-750_8215-tcam.dtsi"
+#include "wago-devconf.dtsi"
+
+/{
+	model = "WAGO PFC200 750-8215";
+	compatible = "wago,am335x-pfc-750_821x-0182", "wago,am335x-pfc", "ti,am33xx";
+};
+
+&aes {
+	status = "okay";
+};
+
+&cppi41dma {
+	status = "okay";
+};
+
+&dcan0 {
+	status = "okay";
+};
+
+&elm {
+	status = "okay";
+};
+
+&gpmc {
+	status = "okay";
+};
+
+&i2c0 {
+	status = "okay";
+};
+
+&kbus0 {
+	status = "okay";
+};
+
+&mac_sw {
+	status = "okay";
+};
+
+&mmc1 {
+	status = "okay";
+};
+
+&mmc2 {
+	status = "okay";
+};
+
+&oms {
+	status = "okay";
+};
+
+&sham {
+	status = "okay";
+};
+
+&spi0 {
+	status = "okay";
+};
+
+&uart0 {
+	status = "okay";
+};
+
+&uart5 {
+	status = "okay";
+};
+
+&usb {
+	status = "okay";
+};
+
+&usb_ctrl_mod {
+	status = "okay";
+};
+
+&usb1_phy {
+	status = "okay";
+};
+
+&usb1 {
+	pinctrl-names = "default";
+	pinctr-0 = <&usb1_pins>;
+
+	dr_mode = "host";
+	status = "okay";
+};
+
+&watchdog {
+	status = "okay";
+};
+
+&wsysinit {
+	tty,rs232-485 = "nop";
+	profinet-capable;
+};
+
+&am33xx_pinmux {
+	ext_phy0_pins: pinmux_ext_phy0_pins {
+		pinctrl-single,pins = <
+			AM33XX_GPMC_WPN_GPIO0_31(PIN_INPUT)
+		>;
+	};
+
+	ext_phy1_pins: pinmux_ext_phy1_pins {
+		pinctrl-single,pins = <
+			AM33XX_MII1_RX_ER_GPIO3_2(PIN_INPUT)
+		>;
+	};
+
+	usb1_pins: pinmux_usb0_pins {
+		pinctrl-single,pins = <
+			AM33XX_USB1_DRVVBUS(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+		>;
+	};
+};
+
+&swcfg_mv88e6321 {
+	status = "okay";
+};
+
+&mv88e6321_switch {
+	eeprom = /bits/ 8 <0x20 0x80 0x09 0x5E 0x40 0x80 0x09 0x5E 0x01 0x7D 0x01 0x7D 0x01 0x7D 0x01 0x7D
+			   0xF9 0x7F 0x40 0x19 0xF8 0x7F 0x60 0x94 0xF9 0x7F 0x40 0x19 0xF8 0x7F 0x80 0x94
+			   0xF9 0x7F 0x40 0x19 0xF8 0x7F 0x00 0x94 0xF9 0x7F 0x40 0x19 0xF8 0x7F 0x20 0x94
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
+			   0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF>;
+
+	mdio {
+		ext_phy0: ethernet-phy@0 {
+			compatible = "ethernet-phy-idD565.A401", "ethernet-phy-ieee802.3-c22";
+			pinctrl-names = "default";
+			pinctrl-0 = <&ext_phy0_pins>;
+			reg = <0>;
+			max-speed = <100>;
+			interrupt-parent = <&gpio0>;
+			interrupts = <31 IRQ_TYPE_EDGE_FALLING>;
+		};
+
+		ext_phy1: ethernet-phy@1 {
+			compatible = "ethernet-phy-idD565.A401", "ethernet-phy-ieee802.3-c22";
+			pinctrl-names = "default";
+			pinctrl-0 = <&ext_phy1_pins>;
+			reg = <1>;
+			max-speed = <100>;
+			interrupt-parent = <&gpio3>;
+			interrupts = <2 IRQ_TYPE_EDGE_FALLING>;
+		};
+	};
+
+	ports {
+		port@0 {
+			reg = <0>;
+			label = "ethX1";
+			phy-mode = "sgmii";
+			phy-handle = <&ext_phy0>;
+			phy-external;
+		};
+
+		port@1 {
+			reg = <1>;
+			label = "ethX2";
+			phy-mode = "sgmii";
+			phy-handle = <&ext_phy1>;
+			phy-external;
+		};
+	};
+};
+
+&lb61_0 {
+	label = "bf-red";
+};
+
+&lb61_1 {
+	label = "bf-green";
+};
+
+&lb61_2 {
+	label = "dia-red";
+};
+
+&lb61_3 {
+	label = "dia-green";
+};
+
+&lb60_10 {
+	label = "can-red";
+};
+
+&lb60_11 {
+	label = "can-green";
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8216.dts b/arch/arm/boot/dts/am335x-pfc-750_8216.dts
new file mode 100644
index 000000000000..0e2a30699131
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8216.dts
@@ -0,0 +1,120 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+/dts-v1/;
+
+#include "am335x-pfc-750_821x.dtsi"
+#include "am335x-pfc-750_8xxx-ksz8863.dtsi"
+#include "am335x-pfc-750_8xxx-uart1.dtsi"
+#include "am335x-pfc-750_82xx-dcan.dtsi"
+#include "am335x-pfc-750_821x-dpc31.dtsi"
+#include "wago-devconf.dtsi"
+
+/ {
+	model = "WAGO PFC200 750-8216";
+	compatible = "wago,am335x-pfc-750_821x-000f", "wago,am335x-pfc", "ti,am33xx";
+};
+
+&aes {
+	status = "okay";
+};
+
+&bitbang_mdio0_sw {
+	status = "okay";
+};
+
+&dcan0 {
+	status = "okay";
+};
+
+&elm {
+	status = "okay";
+};
+
+&gpmc {
+	status = "okay";
+};
+
+&i2c0 {
+	status = "okay";
+};
+
+&kbus0 {
+	status = "okay";
+};
+
+&ksz8863_switch {
+	status = "okay";
+};
+
+&mac_sw {
+	status = "okay";
+};
+
+&mmc1 {
+	status = "okay";
+};
+
+&mmc2 {
+	status = "okay";
+};
+
+&oms {
+	status = "okay";
+};
+
+&sham {
+	status = "okay";
+};
+
+&spi0 {
+	status = "okay";
+};
+
+&swcfg_ksz8863 {
+	status = "okay";
+};
+
+&uart0 {
+	status = "okay";
+};
+
+&uart1 {
+	status = "okay";
+};
+
+&uart5 {
+	status = "okay";
+};
+
+&watchdog {
+	status = "okay";
+};
+
+&lb61_0 {
+	label = "bf-red";
+};
+
+&lb61_1 {
+	label = "bf-green";
+};
+
+&lb61_2 {
+	label = "dia-red";
+};
+
+&lb61_3 {
+	label = "dia-green";
+};
+
+&lb60_10 {
+	label = "can-red";
+};
+
+&lb60_11 {
+	label = "can-green";
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8217.dts b/arch/arm/boot/dts/am335x-pfc-750_8217.dts
new file mode 100644
index 000000000000..cd9abaabb629
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8217.dts
@@ -0,0 +1,186 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+/dts-v1/;
+
+#include "am335x-pfc-750_821x.dtsi"
+#include "am335x-pfc-750_8xxx-ksz8863.dtsi"
+#include "am335x-pfc-750_8xxx-uart1.dtsi"
+#include "wago-devconf.dtsi"
+
+/ {
+	model = "WAGO PFC200 750-8217";
+	compatible = "wago,am335x-pfc-750_821x-1006", "wago,am335x-pfc", "ti,am33xx";
+};
+
+&aes {
+	status = "okay";
+};
+
+&bitbang_mdio0_sw {
+	status = "okay";
+};
+
+&cppi41dma {
+	status = "okay";
+};
+
+&elm {
+	status = "okay";
+};
+
+&gpmc {
+	status = "okay";
+};
+
+&i2c0 {
+	status = "okay";
+};
+
+&kbus0 {
+	status = "okay";
+};
+
+&ksz8863_switch {
+	status = "okay";
+};
+
+&lb61_0 {
+	label = "s4-red";
+};
+
+&lb61_1 {
+	label = "s4-green";
+};
+
+&lb61_2 {
+	label = "s3-red";
+};
+
+&lb61_3 {
+	label = "s3-green";
+};
+
+&lb61_4 {
+	label = "s2-red";
+};
+
+&lb61_5 {
+	label = "s2-green";
+};
+
+&lb61_6 {
+	label = "s1-red";
+};
+
+&lb61_7 {
+	label = "s1-green";
+};
+
+&lb61_8 {
+	label = "wds-red";
+};
+
+&lb61_9 {
+	label = "wds-green";
+};
+
+&lb61_10 {
+	label = "net-red";
+};
+
+&lb61_11 {
+	label = "net-green";
+};
+
+&lb60_10 {
+	label = "usr-red";
+};
+
+&lb60_11 {
+	label = "usr-green";
+};
+
+&mac_sw {
+	status = "okay";
+};
+
+&mmc1 {
+	status = "okay";
+};
+
+&mmc2 {
+	status = "okay";
+};
+
+&oms {
+	status = "okay";
+};
+
+&sham {
+	status = "okay";
+};
+
+&spi0 {
+	status = "okay";
+};
+
+&swcfg_ksz8863 {
+	status = "okay";
+};
+
+&uart0 {
+	status = "okay";
+};
+
+&uart1 {
+	status = "okay";
+};
+
+&uart5 {
+	status = "okay";
+};
+
+&usb {
+	status = "okay";
+};
+
+&usb_ctrl_mod {
+	status = "okay";
+};
+
+&usb0_phy {
+	status = "disabled";
+};
+
+&usb1_phy {
+	status = "okay";
+};
+
+&usb0 {
+	status = "disabled";
+};
+
+&usb1 {
+	pinctrl-names = "default";
+	pinctr-0 = <&usb1_pins>;
+
+	status = "okay";
+	dr_mode = "host";
+};
+
+&watchdog {
+	status = "okay";
+};
+
+&am33xx_pinmux {
+	usb1_pins: pinmux_usb1_pins {
+		pinctrl-single,pins = <
+			AM33XX_USB1_DRVVBUS(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+		>;
+	};
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_821x-dpc31.dtsi b/arch/arm/boot/dts/am335x-pfc-750_821x-dpc31.dtsi
new file mode 100644
index 000000000000..53f0e6d1734a
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_821x-dpc31.dtsi
@@ -0,0 +1,80 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/ {
+	UIO_DPC31_XINT@0x1000000 {
+		compatible = "uio_pdrv_genirq";
+		reg = <0x4000000 0x4000>; /* 8k * 2 = 16k, needed because of 16Bit addressing */
+		interrupt-parent = <&gpio0>;
+		interrupts = <6 IRQ_TYPE_EDGE_FALLING>;
+	};
+
+	UIO_DPC31_SYNC@0x1000000 {
+		compatible = "uio_pdrv_genirq";
+		interrupt-parent = <&gpio1>;
+		interrupts = <25 IRQ_TYPE_EDGE_RISING>;
+	};
+};
+
+&am33xx_pinmux {
+	dpc31_pins: pinmux_dpc31_pins {
+		pinctrl-single,pins = <
+			AM33XX_SPI0_CS1_GPIO0_6(PIN_INPUT) /* SPI0_CS1/GPIO0_6 | DIRQ-FB-ASIC */
+			AM33XX_GPMC_CSN0(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW) /* GPMC_CSN0/GPIO1_29 | Chip-Select 0 */
+			AM33XX_GPMC_A9_GPIO1_25(PIN_INPUT) /* RGMII2_RD2/GPIO1_25 | DPSYNC */
+		>;
+	};
+};
+
+&wsysinit {
+	pinctrl-names = "default";
+	pinctrl-0 = <&dpc31_pins>;
+
+	dp,reset;
+	dp,gpio-rst = <&io_expander_70 1 GPIO_ACTIVE_HIGH>; /* dpc31 reset */
+};
+
+&gpmc {
+	dpc31: nor@x0,0 {
+		reg = <0 0 0x1000000>; /* 8k * 2 = 16k, needed because of 16Bit addressing
+					* minimum is 16M - set it here */
+		bank-width = <2>; /* 1: 8bit, 2: 16bit */
+		gpmc,sync-clk-ps = <0>;
+
+		gpmc,cs-on-ns = <10>;
+		gpmc,cs-rd-off-ns = <140>;
+		gpmc,cs-wr-off-ns = <100>;
+
+		gpmc,adv-on-ns = <0>;
+		gpmc,adv-rd-off-ns = <0>;
+		gpmc,adv-wr-off-ns = <0>;
+
+		gpmc,oe-on-ns = <10>;
+		gpmc,oe-off-ns = <130>;
+
+		gpmc,we-on-ns = <1>;
+		gpmc,we-off-ns = <110>;
+
+		gpmc,rd-cycle-ns = <140>;
+		gpmc,wr-cycle-ns = <120>;
+
+		gpmc,access-ns = <120>;
+		gpmc,wr-access-ns = <10>;
+
+		gpmc,wr-data-mux-bus-ns = <0>;
+
+		gpmc,cycle2cycle-delay-ns = <0>;
+
+		gpmc,mux-add-data = <0>; /* non multiplexing mode */
+
+		gpmc,clk-activation-ns = <0>;
+
+		#address-cells = <1>;
+		#size-cells = <1>;
+	};
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_821x-mv88e6321.dtsi b/arch/arm/boot/dts/am335x-pfc-750_821x-mv88e6321.dtsi
new file mode 100644
index 000000000000..0c381469999e
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_821x-mv88e6321.dtsi
@@ -0,0 +1,125 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/ {
+	swcfg_mv88e6321: swcfg_mv88e6321 {
+		compatible = "swcfg,mv88e6321";
+
+		swcfg,mii-bus = <&davinci_mdio_sw>;
+
+		swcfg,alias = "mv88e6321";
+		swcfg,cpu_port = <6>;
+		swcfg,ports = <7>;
+		swcfg,vlans = <1>;
+		swcfg,switch = <&mv88e6321_switch>;
+
+		status = "disabled";
+	};
+};
+
+&am33xx_pinmux {
+	davinci_mdio_default_pins: pinmux_davinci_mdio_default_pins {
+		pinctrl-single,pins = <
+			AM33XX_MDIO_DATA(PIN_INPUT_PULLUP | SLEWCTRL_FAST)
+			AM33XX_MDC_MDIO_CLK(PIN_OUTPUT_PULLUP)
+		>;
+	};
+
+	davinci_mdio_sleep_pins: pinmux_davinci_mdio_sleep_pins {
+		pinctrl-single,pins = <
+			AM33XX_MDIO_GPIO0_0(PIN_INPUT_PULLDOWN)
+			AM33XX_MDC_GPIO0_1(PIN_INPUT_PULLDOWN)
+		>;
+	};
+
+	switch0_pins: pinmux_switch0_pins {
+		pinctrl-single,pins = <
+			AM33XX_LCD_DATA15_GPIO0_11(PIN_INPUT)
+		>;
+	};
+};
+
+&davinci_mdio_sw {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&davinci_mdio_default_pins>;
+	pinctrl-1 = <&davinci_mdio_sleep_pins>;
+	status = "okay";
+
+	mv88e6321_switch: switch@0 {
+		eeprom-length = <256>;
+
+		compatible = "marvell,mv88e6085";
+		pinctrl-names = "default";
+		pinctrl-0 = <&switch0_pins>;
+
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		reg = <0>;
+		dsa,member = <0 0>;
+		phy-scan;
+
+		interrupt-controller;
+		#interrupt-cells = <2>;
+		reset-gpios = <&io_expander_70 4 GPIO_ACTIVE_LOW>;
+		interrupt-parent = <&gpio0>;
+		interrupts = <11 IRQ_TYPE_LEVEL_LOW>;
+
+		mdio {
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			int_phy3: ethernet-phy@3 {
+				compatible = "ethernet-phy-id0141.0C00", "ethernet-phy-ieee802.3-c22";
+				reg = <3>;
+				max-speed = <100>;
+				interrupt-parent = <&mv88e6321_switch>;
+				interrupts = <3 IRQ_TYPE_LEVEL_HIGH>;
+				eee-broken-100tx;
+				eee-broken-1000t;
+			};
+
+			int_phy4: ethernet-phy@4 {
+				compatible = "ethernet-phy-id0141.0C00", "ethernet-phy-ieee802.3-c22";
+				reg = <4>;
+				max-speed = <100>;
+				interrupt-parent = <&mv88e6321_switch>;
+				interrupts = <4 IRQ_TYPE_LEVEL_HIGH>;
+				eee-broken-100tx;
+				eee-broken-1000t;
+			};
+		};
+
+		ports {
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			port@3 {
+				reg = <3>;
+				label = "ethX11";
+				phy-handle = <&int_phy3>;
+			};
+
+			port@4 {
+				reg = <4>;
+				label = "ethX12";
+				phy-handle = <&int_phy4>;
+			};
+
+			port@6 {
+				reg = <6>;
+				label = "cpu";
+				ethernet = <&mac_sw>;
+				fixed-link {
+					speed = <100>;
+					full-duplex;
+				};
+			};
+		};
+	};
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_821x.dtsi b/arch/arm/boot/dts/am335x-pfc-750_821x.dtsi
new file mode 100644
index 000000000000..b41513671fcd
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_821x.dtsi
@@ -0,0 +1,382 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include "am335x-pfc.dtsi"
+#include "am335x-pfc-750_8xxx-leds.dtsi"
+#include "am335x-pfc-750_8xxx-nvram.dtsi"
+#include "am335x-pfc-750_8xxx-kbus.dtsi"
+
+/ {
+	memory {
+		device_type = "memory";
+		reg = <0x80000000 0x20000000>; /* 512 MB */
+	};
+};
+
+&cpu_0 {
+	operating-points = <
+		1000000  1325000
+		 800000  1260000
+		 720000  1200000
+		 600000  1100000
+		 300000  950000
+	>;
+};
+
+&am33xx_pinmux {
+	pinctrl-names = "default";
+	pinctrl-0 = <
+		&gpio0_pins
+		&gpio1_pins
+	>;
+
+	watchdog_pins: pinmux_watchdog_pins {
+		pinctrl-single,pins = <
+			AM33XX_EMU1_GPIO3_8(PIN_OUTPUT_PULLDOWN)
+		>;
+	};
+
+	uart1_pins: pinmux_uart1_pins {
+		pinctrl-single,pins = <
+			AM33XX_UART1_TXD(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+			AM33XX_UART1_RXD(PIN_INPUT_PULLUP)
+			AM33XX_UART1_CTSN(PIN_INPUT_PULLUP)
+			AM33XX_UART1_RTSN(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+			AM33XX_MCASP0_FSR_GPIO3_19(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+		>;
+	};
+
+	uart5_pins: pinmux_uart5_pins {
+		pinctrl-single,pins = <
+			AM33XX_MII1_RX_DV_UART5_TXD(PIN_OUTPUT | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA14_UART5_RXD(PIN_INPUT_PULLUP)
+		>;
+	};
+
+	spi0_pins: pinmux_spi0_pins {
+		pinctrl-single,pins = <
+			AM33XX_SPI0_SCLK(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_SPI0_D0(PIN_INPUT)
+			AM33XX_SPI0_D1(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_SPI0_CS0(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+		>;
+
+	};
+
+	spi1_pins: pinmux_spi1_pins {
+		pinctrl-single,pins = <
+			AM33XX_UART0_CTSN_SPI1_D0(PIN_INPUT)
+			AM33XX_UART0_RTSN_SPI1_D1(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_MCASP0_ACLKX_SPI1_SCLK(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_ECAP0_IN_PWM0_OUT_SPI1_CS1(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+		>;
+	};
+
+	sdcard_cd_pins: pinmux_sdcard_cd_pins {
+		pinctrl-single,pins = <
+			AM33XX_GPMC_A3_GPIO1_19(PIN_INPUT_PULLUP)
+		>;
+	};
+
+	sdcard_wp_pins: pinmux_sdcard_wp_pins {
+		pinctrl-single,pins = <
+			AM33XX_GPMC_ADVN_ALE_GPIO2_2(PIN_INPUT_PULLUP)
+		>;
+	};
+
+	emmc_pins: pinmux_emmc_pins {
+		pinctrl-single,pins = <
+			AM33XX_GPMC_CSN1_MMC1_CLK(PIN_INPUT_PULLUP | SLEWCTRL_FAST)
+			AM33XX_GPMC_CSN2_MMC1_CMD(PIN_INPUT_PULLUP | SLEWCTRL_FAST)
+			AM33XX_MII1_TX_CLK_MMC1_DAT0(PIN_INPUT_PULLUP | SLEWCTRL_FAST)
+			AM33XX_MII1_RX_CLK_MMC1_DAT1(PIN_INPUT_PULLUP | SLEWCTRL_FAST)
+			AM33XX_MII1_RXD3_MMC1_DAT2(PIN_INPUT_PULLUP | SLEWCTRL_FAST)
+			AM33XX_MII1_RXD2_MMC1_DAT3(PIN_INPUT_PULLUP | SLEWCTRL_FAST)
+		>;
+	};
+
+	gpmc_data_pins: pinmux_gpmc_data_pins {
+		pinctrl-single,pins = <
+			AM33XX_GPMC_AD0(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_AD1(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_AD2(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_AD3(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_AD4(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_AD5(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_AD6(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_AD7(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_AD8(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_AD9(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_AD10(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_AD11(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_AD12(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_AD13(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_AD14(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_GPMC_AD15(PIN_INPUT_PULLDOWN | SLEWCTRL_SLOW)
+		>;
+	};
+
+	gpmc_addr_pins: pinmux_gpmc_addr_pins {
+		pinctrl-single,pins = <
+			AM33XX_LCD_DATA0_GPMC_A0(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA1_GPMC_A1(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA2_GPMC_A2(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA3_GPMC_A3(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA4_GPMC_A4(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA5_GPMC_A5(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA6_GPMC_A6(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA7_GPMC_A7(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_VSYNC_GPMC_A8(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_HSYNC_GPMC_A9(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_PCLK_GPMC_A10(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_AC_BIAS_EN_GPMC_A11(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA8_GPMC_A12(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA9_GPMC_A13(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA10_GPMC_A14(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA11_GPMC_A15(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA12_GPMC_A16(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+			AM33XX_LCD_DATA13_GPMC_A17(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+		>;
+	};
+
+	gpmc_ctrl_pins: pinmux_gpmc_ctrl_pins {
+		pinctrl-single,pins = <
+			/* GPMC CONTROL */
+			AM33XX_GPMC_OEN_REN(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+			AM33XX_GPMC_WEN(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+			AM33XX_GPMC_WAIT0_GPMC_CSN4(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+			AM33XX_GPMC_BEN0_CLE(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+			AM33XX_GPMC_BEN1(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+			AM33XX_GPMC_CLK_GPMC_WAIT1(PIN_INPUT_PULLUP)
+		>;
+	};
+
+	rmii2_pins: pinmux_rmii2_pins {
+		pinctrl-single,pins = <
+			/* RMII 2 */
+			AM33XX_GPMC_A0_RMII2_TXEN(PIN_OUTPUT | SLEWCTRL_FAST)
+			AM33XX_GPMC_A4_RMII2_TXD1(PIN_OUTPUT | SLEWCTRL_FAST)
+			AM33XX_GPMC_A5_RMII2_TXD0(PIN_OUTPUT | SLEWCTRL_FAST)
+			AM33XX_GPMC_A10_RMII2_RXD1(PIN_INPUT)
+			AM33XX_GPMC_A11_RMII2_RXD0(PIN_INPUT)
+			AM33XX_MII1_COL_RMII2_REFCLK(PIN_INPUT)
+			AM33XX_GPMC_CSN3_RMII2_CRS_DV(PIN_INPUT)
+		>;
+	};
+
+	rmii2_sleep_pins: pinmux_rmii2_sleep_pins {
+		pinctrl-single,pins = <
+			/* RMII 2 */
+			AM33XX_GPMC_A0_RMII2_TXEN(PIN_OUTPUT | SLEWCTRL_FAST)
+			AM33XX_GPMC_A4_RMII2_TXD1(PIN_OUTPUT | SLEWCTRL_FAST)
+			AM33XX_GPMC_A5_RMII2_TXD0(PIN_OUTPUT | SLEWCTRL_FAST)
+			AM33XX_GPMC_A10_RMII2_RXD1(PIN_INPUT)
+			AM33XX_GPMC_A11_RMII2_RXD0(PIN_INPUT)
+			AM33XX_MII1_COL_RMII2_REFCLK(PIN_INPUT)
+			AM33XX_GPMC_CSN3_RMII2_CRS_DV(PIN_INPUT)
+		>;
+	};
+
+	rmii1_pins: pinmux_rmii1_pins {
+		pinctrl-single,pins = <
+			/* RMII1 could used on Marvell based devices only; default off*/
+			AM33XX_RMII1_REF_CLK_GPIO0_29(PIN_INPUT)
+			AM33XX_MII1_TX_EN_GPIO3_3(PIN_INPUT)
+			AM33XX_MII1_TXD0_GPIO0_28(PIN_INPUT)
+			AM33XX_MII1_TXD1_GPIO0_21(PIN_INPUT)
+			AM33XX_MII1_RXD0_GPIO2_21(PIN_INPUT)
+			AM33XX_MII1_RXD1_GPIO2_20(PIN_INPUT)
+			AM33XX_MII1_CRS_GPIO3_1(PIN_INPUT)
+		>;
+	};
+
+	rmii1_sleep_pins: pinmux_rmii1_sleep_pins {
+		pinctrl-single,pins = <
+			/* RMII1 could used on Marvell based devices only; default off*/
+			AM33XX_RMII1_REF_CLK_GPIO0_29(PIN_INPUT)
+			AM33XX_MII1_TX_EN_GPIO3_3(PIN_INPUT)
+			AM33XX_MII1_TXD0_GPIO0_28(PIN_INPUT)
+			AM33XX_MII1_TXD1_GPIO0_21(PIN_INPUT)
+			AM33XX_MII1_RXD0_GPIO2_21(PIN_INPUT)
+			AM33XX_MII1_RXD1_GPIO2_20(PIN_INPUT)
+			AM33XX_MII1_CRS_GPIO3_1(PIN_INPUT)
+		>;
+	};
+
+	kbus_pins: pinmux_kbus_pins {
+		pinctrl-single,pins = <
+			AM33XX_GPMC_A6_GPIO1_22(PIN_INPUT_PULLUP)
+			AM33XX_GPMC_A7_GPIO1_23(PIN_INPUT_PULLUP)
+			AM33XX_XDMA_EVENT_INTR1_GPIO0_20(PIN_INPUT_PULLUP)
+			AM33XX_EMU0_GPIO3_7(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+			AM33XX_GPMC_A8_GPIO1_24(PIN_INPUT_PULLUP)
+		>;
+	};
+
+	gpio0_pins: pinmux_gpio0_pins {
+		pinctrl-single,pins = <
+			AM33XX_XDMA_EVENT_INTR0_GPIO0_19(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+		>;
+	};
+
+	gpio1_pins: pinmux_gpio1_pins {
+		pinctrl-single,pins = <
+			AM33XX_GPMC_A1_GPIO1_17(PIN_INPUT_PULLUP)
+			AM33XX_GPMC_A2_GPIO1_18(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+		>;
+	};
+};
+
+&wsysinit {
+	board,variant = "pfc200v3";
+};
+
+&watchdog {
+	pinctrl-names = "default";
+	pinctrl-0 = <&watchdog_pins>;
+
+	en-gpios = <&io_expander_70 0 GPIO_ACTIVE_LOW>;
+	gpios = <&gpio3 8 GPIO_ACTIVE_LOW>;
+};
+
+&gpmc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&gpmc_data_pins>, <&gpmc_addr_pins>, <&gpmc_ctrl_pins>;
+
+	num-cs = <7>;	/* only two devices */
+	num-waitpins = <3>;
+	ranges = <
+		4 0 0x01000000 0x01000000	/* CS4: NVRAM, 16M */
+		0 0 0x04000000 0x01000000	/* CS0: NETX/DPC31, 16M */
+	>;
+
+	nvram: nor@4,0 { /* NVRAM Device 128k */
+		reg = <4 0 0x01000000>;
+		bank-width = <2>; /* 1: 8bit, 2: 16bit */
+		gpmc,sync-clk-ps = <0>;
+		gpmc,cs-on-ns = <0>;
+		gpmc,cs-rd-off-ns = <50>;
+		gpmc,cs-wr-off-ns = <30>;
+		gpmc,adv-on-ns = <0>;
+		gpmc,adv-rd-off-ns = <0>;
+		gpmc,adv-wr-off-ns = <0>;
+		gpmc,oe-on-ns = <0>;
+		gpmc,oe-off-ns = <50>;
+		gpmc,we-on-ns = <0>;
+		gpmc,we-off-ns = <30>;
+		gpmc,rd-cycle-ns = <50>;
+		gpmc,wr-cycle-ns = <30>;
+		gpmc,access-ns = <40>;
+		gpmc,wr-access-ns = <10>;
+		gpmc,wr-data-mux-bus-ns = <0>;
+		gpmc,cycle2cycle-delay-ns = <10>;
+		gpmc,cycle2cycle-samecsen;
+		gpmc,cycle2cycle-diffcsen;
+
+		#address-cells = <1>;
+		#size-cells = <1>;
+	};
+};
+
+&uart5 { /* KBUS Firmware download */
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart5_pins>;
+};
+
+&kbus0 { /* KBUS on cs0 */
+	pinctrl-names = "default";
+	pinctrl-0 = <&kbus_pins>;
+
+	/*
+	 * announce used tty-device in /sys/class/wago/system.
+	 * is needed to link this device to /dev/ttyKbus
+	 */
+	kbus,tty-device = "ttyO5"; /* corresponds to &uart5*/
+
+	/* some should be active low, keep all to high for compatibility reasons */
+	kbus,nrst-gpio   = <&io_expander_70 3 GPIO_ACTIVE_LOW>;
+	kbus,nsync-gpio  = <&gpio1 22 GPIO_ACTIVE_HIGH>;
+	kbus,cmdsel-gpio = <&gpio3 7 GPIO_ACTIVE_HIGH>;
+	kbus,nirq-gpio   = <&gpio1 23 GPIO_ACTIVE_HIGH>;
+	kbus,nerr-gpio   = <&gpio1 24 GPIO_ACTIVE_HIGH>;
+	kbus,nrdy-gpio   = <&gpio0 20 GPIO_ACTIVE_HIGH>;
+};
+
+&i2c0 {
+	clock-frequency = <100000>;
+
+	io_expander_70: pca9554@70 { /* IO Port Expander only outputs*/
+		compatible = "nxp,pca9554";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		#gpio-cells = <2>;
+		gpio-controller;
+		reg = <0x70>;
+	};
+};
+
+&lb60_10 {
+	label = "u7-red";
+};
+
+&lb60_11 {
+	label = "u7-green";
+};
+
+&rtc_i2c {
+	trim-data = <0 1 31>;
+};
+
+&tps {
+	interrupt-parent = <&gpio3>;
+	interrupts = <20 IRQ_TYPE_LEVEL_LOW>;
+};
+
+&mac_sw {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <
+		&rmii2_pins
+		&rmii1_pins
+	>;
+	pinctrl-1 = <
+		&rmii2_sleep_pins
+		&rmii1_sleep_pins
+	>;
+	mac_control = <0x18021>; /* force 100MBit full-duplex */
+	active_slave = <1>;
+};
+
+&mmc1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <
+		&mmc1_pins
+		&sdcard_cd_pins
+		&sdcard_wp_pins
+	>;
+
+	cd-debounce-delay-ms = <7>;
+	cd-gpios = <&gpio1 19 GPIO_ACTIVE_LOW>;
+	wp-gpios = <&gpio2 2 GPIO_ACTIVE_HIGH>;
+};
+
+&mmc2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&emmc_pins>;
+	vmmc-supply = <&dcdc4_reg>;
+	bus-width = <4>;
+	ti,non-removable;
+};
+
+&gpio1 {
+	boot_select {
+		gpio-hog;
+		gpios = <18 GPIO_ACTIVE_LOW>;
+		output-high;
+		line-name = "boot_select";
+	};
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_82xx-dcan.dtsi b/arch/arm/boot/dts/am335x-pfc-750_82xx-dcan.dtsi
new file mode 100644
index 000000000000..b64292406747
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_82xx-dcan.dtsi
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include "am33xx-pinfunc.h"
+
+&am33xx_pinmux {
+	dcan0_pins: pinmux_dcan0_pins {
+		pinctrl-single,pins = <
+			AM33XX_MII1_TXD3_DCAN0_TX(PIN_OUTPUT_PULLDOWN)
+			AM33XX_MII1_TXD2_DCAN0_RX(PIN_INPUT_PULLDOWN)
+		>;
+	};
+};
+
+&dcan0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&dcan0_pins>;
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8xxx-kbus.dtsi b/arch/arm/boot/dts/am335x-pfc-750_8xxx-kbus.dtsi
new file mode 100644
index 000000000000..44529c853c50
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8xxx-kbus.dtsi
@@ -0,0 +1,26 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+&spi0 {
+	spi-rt;
+	spi-rt-prio = <81>;
+
+	kbus0: kbus@0 {
+		compatible = "wago,spi-kbus";
+		reg = <0>;
+		spi-max-frequency = <10000000>;
+		kbus,dma-boost;
+		kbus,dma-boost-prio = <85>;
+		kbus,dma-boost-irq-thread = "49000000";
+		kbus,dma-default-prio = <50>;
+
+		kbus,reset-on-boot;
+
+		status = "disabled";
+	};
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8xxx-ksz8863.dtsi b/arch/arm/boot/dts/am335x-pfc-750_8xxx-ksz8863.dtsi
new file mode 100644
index 000000000000..d3dc16aef377
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8xxx-ksz8863.dtsi
@@ -0,0 +1,66 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+
+/ {
+	swcfg_ksz8863: swcfg_ksz8863 {
+		compatible = "swcfg,ksz8863";
+		swcfg,mii-bus = <&bitbang_mdio0_sw>;
+		swcfg,alias = "ksz8863";
+		swcfg,cpu_port = <2>;
+		swcfg,ports = <3>;
+		swcfg,vlans = <16>;
+		swcfg,switch = <&ksz8863_switch>;
+
+		status = "disabled";
+	};
+};
+
+&bitbang_mdio0_sw {
+	ksz8863_switch: switch@0 {
+		compatible = "micrel,ksz8863";
+
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		ksz,reset-gpio = <&io_expander_70 4 GPIO_ACTIVE_LOW>;
+
+		reg = <0>;
+		dsa,member = <0 0>;
+
+		ksz,reset-switch;
+		ksz,disable-internal-ldo;
+
+		status = "disabled";
+
+		ports {
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			port@0 {
+				reg = <2>;
+				label = "ethX1";
+			};
+
+			port@1 {
+				reg = <1>;
+				label = "ethX2";
+			};
+
+			port@2 {
+				reg = <3>;
+				label = "cpu";
+				ethernet = <&mac_sw>;
+				fixed-link {
+					speed = <100>;
+					full-duplex;
+				};
+			};
+		};
+	};
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8xxx-leds.dtsi b/arch/arm/boot/dts/am335x-pfc-750_8xxx-leds.dtsi
new file mode 100644
index 000000000000..1d01ac6f78fd
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8xxx-leds.dtsi
@@ -0,0 +1,156 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+&i2c0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c0_pins>;
+
+	clock-frequency = <400000>;
+
+	led_bar60: pca9552@60 {
+		compatible = "nxp,pca9552";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		reg = <0x60>;
+
+		lb60_0: sys-red@0 {
+			label = "sys-red";
+			reg = <0>;
+			linux,default-trigger = "timer";
+		};
+
+		lb60_1: sys-green@1 {
+			label = "sys-green";
+			reg = <1>;
+			linux,default-trigger = "timer";
+		};
+
+		lb60_2: run-red@2 {
+			label = "run-red";
+			reg = <2>;
+		};
+
+		lb60_3: run-green@3 {
+			label = "run-green";
+			reg = <3>;
+		};
+
+		lb60_4: io-red@4 {
+			label = "io-red";
+			reg = <4>;
+		};
+
+		lb60_5: io-green@5 {
+			label = "io-green";
+			reg = <5>;
+		};
+
+		lb60_6: ms-red@6 {
+			label = "ms-red";
+			reg = <6>;
+		};
+
+		lb60_7: ms-green@7 {
+			label = "ms-green";
+			reg = <7>;
+		};
+
+		lb60_8: ns-red@8 {
+			label = "ns-red";
+			reg = <8>;
+		};
+
+		lb60_9: ns-green@9 {
+			label = "ns-green";
+			reg = <9>;
+		};
+
+		lb60_10: usr_r@10 {
+			label = "usr-red";
+			reg = <10>;
+		};
+
+		lb60_11: usr_g@11 {
+			label = "usr-green";
+			reg = <11>;
+		};
+
+		lb60_15: sys-over-red@15 {
+			label = "sys-over-red";
+			reg = <15>;
+			linux,default-trigger = "default-on";
+		};
+	};
+
+	led_bar61: pca9552@61 {
+		compatible = "nxp,pca9552";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		reg = <0x61>;
+
+		lb61_0: u6-red@0 {
+			label = "u6-red";
+			reg = <0>;
+		};
+
+		lb61_1: u6-green@1 {
+			label = "u6-green";
+			reg = <1>;
+		};
+
+		lb61_2: u5-red@2 {
+			label = "u5-red";
+			reg = <2>;
+		};
+
+		lb61_3: u5-green@3 {
+			label = "u5-green";
+			reg = <3>;
+		};
+
+		lb61_4: u4-red@4 {
+			label = "u4-red";
+			reg = <4>;
+		};
+
+		lb61_5: u4-green@5 {
+			label = "u4-green";
+			reg = <5>;
+		};
+
+		lb61_6: u3-red@6 {
+			label = "u3-red";
+			reg = <6>;
+		};
+
+		lb61_7: u3-green@7 {
+			label = "u3-green";
+			reg = <7>;
+		};
+
+		lb61_8: u2-red@8 {
+			label = "u2-red";
+			reg = <8>;
+		};
+
+		lb61_9: u2-green@9 {
+			label = "u2-green";
+			reg = <9>;
+		};
+
+		lb61_10: u1-red@10 {
+			label = "u1-red";
+			reg = <10>;
+		};
+
+		lb61_11: u1-green@11 {
+			label = "u1-green";
+			reg = <11>;
+		};
+	};
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8xxx-nvram.dtsi b/arch/arm/boot/dts/am335x-pfc-750_8xxx-nvram.dtsi
new file mode 100644
index 000000000000..e7df8856e75c
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8xxx-nvram.dtsi
@@ -0,0 +1,14 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/ {
+	uio_nvram: UIO_NVRAM@0x1000000 {
+		compatible = "uio_pdrv_genirq";
+		reg = <0x01000000 0x00020000>; /* 128k 16bit NVRAM */
+	};
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8xxx-uart1-two-wire.dtsi b/arch/arm/boot/dts/am335x-pfc-750_8xxx-uart1-two-wire.dtsi
new file mode 100644
index 000000000000..92e96eaf5870
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8xxx-uart1-two-wire.dtsi
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include "am33xx-pinfunc.h"
+
+&am33xx_pinmux {
+	uart1_pins: pinmux_uart1_pins {
+		pinctrl-single,pins = <
+			AM33XX_UART1_TXD(PIN_OUTPUT | SLEWCTRL_SLOW)
+			AM33XX_UART1_RXD(PIN_INPUT)
+		>;
+	};
+};
+
+&uart1 {
+	compatible = "ti,omap3-uart";
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart1_pins>;
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8xxx-uart1.dtsi b/arch/arm/boot/dts/am335x-pfc-750_8xxx-uart1.dtsi
new file mode 100644
index 000000000000..4987769dbc22
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8xxx-uart1.dtsi
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include "am33xx-pinfunc.h"
+
+&am33xx_pinmux {
+	uart1_pins: pinmux_uart1_pins {
+		pinctrl-single,pins = <
+			AM33XX_UART1_TXD(PIN_OUTPUT | SLEWCTRL_SLOW)
+			AM33XX_UART1_RXD(PIN_INPUT)
+			AM33XX_UART1_CTSN(PIN_INPUT)
+			AM33XX_UART1_RTSN(PIN_OUTPUT | SLEWCTRL_SLOW)
+			AM33XX_MCASP0_FSR_GPIO3_19(PIN_OUTPUT_PULLDOWN | SLEWCTRL_SLOW)
+		>;
+	};
+};
+
+&uart1 {
+	compatible = "ti,omap3-uart-rtu";
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart1_pins>;
+
+	rs485en-gpio = <&gpio3 19 GPIO_ACTIVE_LOW>;
+	rs485-rts-active-high;
+
+	rs485-rts-delay = <1 1>;
+};
diff --git a/arch/arm/boot/dts/am335x-pfc-750_8xxx-uart4.dtsi b/arch/arm/boot/dts/am335x-pfc-750_8xxx-uart4.dtsi
new file mode 100644
index 000000000000..6359a99132ea
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc-750_8xxx-uart4.dtsi
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include "am33xx-pinfunc.h"
+
+&am33xx_pinmux {
+	uart4_pins: pinmux_uart4_pins {
+		pinctrl-single,pins = <
+			AM33XX_UART0_CTSN_UART4_RXD(PIN_INPUT_PULLUP)
+			AM33XX_UART0_RTSN_UART4_TXD(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+		>;
+	};
+};
+
+&uart4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart4_pins>;
+};
diff --git a/arch/arm/boot/dts/am335x-pfc.dtsi b/arch/arm/boot/dts/am335x-pfc.dtsi
new file mode 100644
index 000000000000..31b91e9eee73
--- /dev/null
+++ b/arch/arm/boot/dts/am335x-pfc.dtsi
@@ -0,0 +1,346 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <dt-bindings/interrupt-controller/irq.h>
+#include "am33xx.dtsi"
+#include "am33xx-pinfunc.h"
+
+/ {
+	compatible = "wago,am335x-pfc", "ti,am33xx";
+
+	cpus {
+		cpu_0: cpu@0 {
+			cpu0-supply = <&dcdc2_reg>;
+		};
+	};
+
+	/* XE164 +3V3  System voltage */
+	vxe164_reg: fixedregulator@0 {
+		compatible = "regulator-fixed";
+		regulator-name = "vxe164";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		vin-supply = <&dcdc4_reg>;
+	};
+
+	/* SD Card +3V3 Systemvoltage over power switch */
+	vsd_reg: fixedregulator@1 {
+		compatible = "regulator-fixed";
+		regulator-name = "v_sd";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		vin-supply = <&dcdc4_reg>;
+	};
+
+	wsysinit: wsysinit_init {
+		compatible = "wago,sysinit";
+
+		tty,service   = "ttyO0";
+		tty,rs232-485 = "ttyO1";
+
+		/* sysclock adjustments, empirical values */
+		adjtimex,tick = <10000>;
+		adjtimex,frequency = <200000>;
+	};
+
+	/* this name of the gpio-keys device is a
+	 * historical heritage from 3.6.11 kernel.
+	 * the device-name is checked in omsd. So we
+	 * need to adapt this configuration
+	 */
+	oms: PAC-Operating-Mode-Switch {
+		compatible = "gpio-keys";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		autorepeat;
+		status = "disabled";
+
+		oms_run: run {
+			label = "RUN";
+			gpios = <&gpio3 18 GPIO_ACTIVE_LOW>;
+			linux,code = <1>;
+			linux,input-type = <5>;
+			debounce-interval = <1>;
+		};
+
+		oms_stop: stop {
+			label = "STOP";
+			gpios = <&gpio3 17 GPIO_ACTIVE_LOW>;
+			linux,code = <2>;
+			linux,input-type = <5>;
+			debounce-interval = <1>;
+		};
+
+		oms_reset: reset {
+			label = "RESET";
+			gpios = <&gpio3 16 GPIO_ACTIVE_LOW>;
+			linux,code = <3>;
+			linux,input-type = <1>;
+			debounce-interval = <1>;
+		};
+
+		oms_reset_all: reset_all {
+			label = "RESET_ALL";
+			gpios = <&gpio3 15 GPIO_ACTIVE_HIGH>;
+			linux,code = <4>;
+			linux,input-type = <1>;
+			debounce-interval = <1>;
+		};
+	};
+
+	watchdog: watchdog {
+		/* XC6124 */
+		compatible = "linux,wdt-gpio";
+
+		hw_algo = "toggle";
+		hw_margin_ms = <1600>;
+		rt-prio = <91>;
+
+		status = "disabled";
+	};
+};
+
+&am33xx_pinmux {
+	uart0_pins: pinmux_uart0_pins {
+		pinctrl-single,pins = <
+			AM33XX_UART0_RXD(PIN_INPUT_PULLUP)
+			AM33XX_UART0_TXD(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+		>;
+	};
+
+	spi0_pins: pinmux_spi0_pins {
+		pinctrl-single,pins = <
+			AM33XX_SPI0_SCLK(PIN_INPUT_PULLUP | SLEWCTRL_SLOW)
+			AM33XX_SPI0_D0(PIN_INPUT_PULLUP)
+			AM33XX_SPI0_D1(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+			AM33XX_SPI0_CS0(PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW)
+		>;
+	};
+
+	i2c0_pins: pinmux_i2c0_pins {
+		pinctrl-single,pins = <
+			AM33XX_I2C0_SDA(PIN_INPUT_PULLUP | SLEWCTRL_SLOW)
+			AM33XX_I2C0_SCL(PIN_INPUT_PULLUP | SLEWCTRL_SLOW)
+		>;
+	};
+
+	gpio_bitbang_mdio_pins: pinmux_gpio_bitbang_mdio_pins {
+		pinctrl-single,pins = <
+			AM33XX_MDIO_GPIO0_0(PIN_INPUT_PULLUP | SLEWCTRL_FAST)
+			AM33XX_MDC_GPIO0_1(PIN_OUTPUT_PULLUP)
+		>;
+	};
+
+	gpio_bitbang_mdio_sleep_pins: pinmux_gpio_bitbang_mdio_sleep_pins {
+		pinctrl-single,pins = <
+			AM33XX_MDIO_GPIO0_0(PIN_INPUT_PULLUP)
+			AM33XX_MDC_GPIO0_1(PIN_INPUT_PULLDOWN)
+		>;
+	};
+
+	gpio3_pins: pinmux_gpio3_pins {
+		pinctrl-single,pins = <
+			AM33XX_MCASP0_FSX_GPIO3_15(PIN_INPUT)
+			AM33XX_MCASP0_AXR0_GPIO3_16(PIN_INPUT)
+			AM33XX_MCASP0_AHCLKR_GPIO3_17(PIN_INPUT)
+			AM33XX_MCASP0_ACLKR_GPIO3_18(PIN_INPUT)
+			AM33XX_MCASP0_AXR1_GPIO3_20(PIN_INPUT_PULLUP)
+			AM33XX_MCASP0_AHCLKX_GPIO3_21(PIN_INPUT_PULLUP)
+		>;
+	};
+
+	mmc1_pins: pinmux_mmc1_pins {
+		pinctrl-single,pins = <
+			AM33XX_MMC0_CLK(PIN_INPUT_PULLUP | SLEWCTRL_FAST)
+			AM33XX_MMC0_CMD(PIN_INPUT_PULLUP | SLEWCTRL_FAST)
+			AM33XX_MMC0_DAT0(PIN_INPUT_PULLUP | SLEWCTRL_FAST)
+			AM33XX_MMC0_DAT1(PIN_INPUT_PULLUP | SLEWCTRL_FAST)
+			AM33XX_MMC0_DAT2(PIN_INPUT_PULLUP | SLEWCTRL_FAST)
+			AM33XX_MMC0_DAT3(PIN_INPUT_PULLUP | SLEWCTRL_FAST)
+		>;
+	};
+
+
+};
+
+&uart0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart0_pins>;
+	status = "okay";
+};
+
+&spi0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&spi0_pins>;
+};
+
+&i2c0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c0_pins>;
+
+	clock-frequency = <400000>;
+
+	eeprom: at24cs128n@54 {
+		compatible = "atmel,24c512";
+		reg = <0x54>;
+
+		pagesize = <128>;
+	};
+
+	rtc_i2c: rtc_r2221t@32 {
+		compatible = "ricoh,r2221tl";
+		reg = <0x32>;
+
+		interrupt-parent = <&gpio3>;
+		interrupts = <21 IRQ_TYPE_LEVEL_LOW>;
+		trim-data = <0 0 13>;
+	};
+
+	tps: tps65218@24 {
+		compatible = "ti,tps65218";
+		reg = <0x24>;
+		interrupt-controller;
+		ti,strict-supply-voltage-supervision = <1>;
+		ti,under-voltage-hyst-microvolt = <400000>;
+		ti,under-voltage-limit-microvolt = <3350000>;
+		#interrupt-cells = <2>;
+
+		dcdc1_reg: regulator-dcdc1 {
+			regulator-name = "vdd_core";
+			regulator-min-microvolt = <1100000>;
+			regulator-max-microvolt = <1100000>;
+			regulator-boot-on;
+			regulator-always-on;
+		};
+
+		dcdc2_reg: regulator-dcdc2 {
+			regulator-name = "vdd_mpu";
+			regulator-min-microvolt = <912000>;
+			regulator-max-microvolt = <1378000>;
+			regulator-boot-on;
+			regulator-always-on;
+		};
+
+		dcdc3_reg: regulator-dcdc3 {
+			regulator-name = "vdcdc3";
+			regulator-min-microvolt = <1500000>;
+			regulator-max-microvolt = <1500000>;
+			regulator-boot-on;
+			regulator-always-on;
+		};
+
+		dcdc4_reg: regulator-dcdc4 {
+			regulator-name = "vdd_logic";
+			regulator-min-microvolt = <3300000>;
+			regulator-max-microvolt = <3300000>;
+			regulator-boot-on;
+			regulator-always-on;
+		};
+
+		loadswitch2:  regulator-ls2 {
+			/* Should be set to 100 mA according to SLP00000843.002
+			 * but 4G Modem is not being enumerated correctly,
+			 * so we increase it.
+			 */
+			regulator-min-microamp = <200000>;
+			regulator-max-microamp = <200000>;
+			regulator-boot-on;
+			regulator-always-on;
+		};
+
+		loadswitch3: regulator-ls3 {
+			regulator-min-microamp = <1000000>;
+			regulator-max-microamp = <1000000>;
+			regulator-boot-on;
+			regulator-always-on;
+		};
+
+		ldo1: regulator-ldo1 {
+			regulator-always-on;
+		};
+
+		regulator-pwrbutton {
+			// dummy entry to suppres warning on boot
+			compatible = "ti,tps65218-pwrbutton";
+			status = "disabled";
+		};
+
+		regulator-gpio {
+			// dummy entry to suppres warning on boot
+			compatible = "ti,tps65218-gpio";
+			status = "disabled";
+		};
+	};
+};
+
+&bitbang_mdio0_sw {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&gpio_bitbang_mdio_pins>;
+	pinctrl-1 = <&gpio_bitbang_mdio_sleep_pins>;
+	gpios = <&gpio0 1 0   /* 0: mdc  */
+		 &gpio0 0 0>; /* 1: mdio */
+};
+
+&cpsw_port1 {
+	status = "disabled";
+};
+
+/*
+ * Use a fixed phy for emac2.
+ * that's rgmii2
+ */
+&cpsw_port2 {
+	phy-mode = "rmii";
+	ti,dual-emac-pvid = <2>;
+	fixed-link {
+		speed = <100>;
+		full-duplex;
+	};
+};
+
+&mmc1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&mmc1_pins>;
+
+	vmmc-supply = <&dcdc4_reg>;
+	bus-width = <4>;
+};
+
+&gpio3 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&gpio3_pins>;
+};
+
+&wdt2_module {
+	ti,no-reset-on-init;
+	ti,no-idle;
+};
+
+&usb {
+	status = "disabled";
+};
+
+&usb_ctrl_mod {
+	status = "disabled";
+};
+
+&usb0_phy {
+	status = "disabled";
+};
+
+&usb1_phy {
+	status = "disabled";
+};
+
+&usb0 {
+	status = "disabled";
+};
+
+&usb1 {
+	status = "disabled";
+};
diff --git a/arch/arm/boot/dts/am33xx-l4.dtsi b/arch/arm/boot/dts/am33xx-l4.dtsi
index c9629cb5ccd1..b42d6868ebd7 100644
--- a/arch/arm/boot/dts/am33xx-l4.dtsi
+++ b/arch/arm/boot/dts/am33xx-l4.dtsi
@@ -390,7 +390,7 @@ target-module@33000 {			/* 0x44e33000, ap 27 18.0 */
 			ranges = <0x0 0x33000 0x1000>;
 		};
 
-		target-module@35000 {			/* 0x44e35000, ap 29 50.0 */
+		wdt2_module: target-module@35000 {			/* 0x44e35000, ap 29 50.0 */
 			compatible = "ti,sysc-omap2", "ti,sysc";
 			reg = <0x35000 0x4>,
 			      <0x35010 0x4>,
@@ -753,6 +753,13 @@ davinci_mdio: mdio@1000 {
 					status = "disabled";
 				};
 
+				bitbang_mdio0: gpio_mdio {
+					compatible = "virtual,mdio-gpio";
+					#address-cells = <1>;
+					#size-cells = <0>;
+					status = "disabled";
+				};
+
 				cpsw_emac0: slave@200 {
 					/* Filled in by U-Boot */
 					mac-address = [ 00 00 00 00 00 00 ];
@@ -799,6 +806,13 @@ cpsw_port2: port@2 {
 					};
 				};
 
+				bitbang_mdio0_sw: gpio_mdio {
+					compatible = "virtual,mdio-gpio";
+					#address-cells = <1>;
+					#size-cells = <0>;
+					status = "disabled";
+				};
+
 				davinci_mdio_sw: mdio@1000 {
 					compatible = "ti,cpsw-mdio","ti,davinci_mdio";
 					clocks = <&cpsw_125mhz_gclk>;
@@ -2318,4 +2332,3 @@ target-module@24000 {			/* 0x48324000, ap 103 68.0 */
 		};
 	};
 };
-
diff --git a/arch/arm/boot/dts/am33xx-pinfunc.h b/arch/arm/boot/dts/am33xx-pinfunc.h
new file mode 100644
index 000000000000..d254acdb1e93
--- /dev/null
+++ b/arch/arm/boot/dts/am33xx-pinfunc.h
@@ -0,0 +1,1064 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. GK - https://www.wago.com/
+ *
+ * The code contained herein is licensed under the GNU General Public
+ * License. You may obtain a copy of the GNU General Public License
+ * Version 2 or later at the following locations:
+ *
+ * http://www.opensource.org/licenses/gpl-license.html
+ * http://www.gnu.org/copyleft/gpl.html
+ */
+
+#ifndef __DTS_AM33XX_PINFUNC_H
+#define __DTS_AM33XX_PINFUNC_H
+
+#include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/pinctrl/am33xx.h>
+
+
+#define AM33XX_PIN_OFFSET				0x800
+#define AM33XX_PIN(offset, mode, flags) \
+	AM33XX_PADCONF(offset, flags, mode)
+
+#define AM33XX_PIN_GPMC_AD0(mode, flags)		AM33XX_PIN(0x800, mode, flags)
+#define AM33XX_PIN_GPMC_AD1(mode, flags)		AM33XX_PIN(0x804, mode, flags)
+#define AM33XX_PIN_GPMC_AD2(mode, flags)		AM33XX_PIN(0x808, mode, flags)
+#define AM33XX_PIN_GPMC_AD3(mode, flags)		AM33XX_PIN(0x80C, mode, flags)
+#define AM33XX_PIN_GPMC_AD4(mode, flags)		AM33XX_PIN(0x810, mode, flags)
+#define AM33XX_PIN_GPMC_AD5(mode, flags)		AM33XX_PIN(0x814, mode, flags)
+#define AM33XX_PIN_GPMC_AD6(mode, flags)		AM33XX_PIN(0x818, mode, flags)
+#define AM33XX_PIN_GPMC_AD7(mode, flags)		AM33XX_PIN(0x81C, mode, flags)
+#define AM33XX_PIN_GPMC_AD8(mode, flags)		AM33XX_PIN(0x820, mode, flags)
+#define AM33XX_PIN_GPMC_AD9(mode, flags)		AM33XX_PIN(0x824, mode, flags)
+#define AM33XX_PIN_GPMC_AD10(mode, flags)		AM33XX_PIN(0x828, mode, flags)
+#define AM33XX_PIN_GPMC_AD11(mode, flags)		AM33XX_PIN(0x82C, mode, flags)
+#define AM33XX_PIN_GPMC_AD12(mode, flags)		AM33XX_PIN(0x830, mode, flags)
+#define AM33XX_PIN_GPMC_AD13(mode, flags)		AM33XX_PIN(0x834, mode, flags)
+#define AM33XX_PIN_GPMC_AD14(mode, flags)		AM33XX_PIN(0x838, mode, flags)
+#define AM33XX_PIN_GPMC_AD15(mode, flags)		AM33XX_PIN(0x83C, mode, flags)
+#define AM33XX_PIN_GPMC_A0(mode, flags)			AM33XX_PIN(0x840, mode, flags)
+#define AM33XX_PIN_GPMC_A1(mode, flags)			AM33XX_PIN(0x844, mode, flags)
+#define AM33XX_PIN_GPMC_A2(mode, flags)			AM33XX_PIN(0x848, mode, flags)
+#define AM33XX_PIN_GPMC_A3(mode, flags)			AM33XX_PIN(0x84C, mode, flags)
+#define AM33XX_PIN_GPMC_A4(mode, flags)			AM33XX_PIN(0x850, mode, flags)
+#define AM33XX_PIN_GPMC_A5(mode, flags)			AM33XX_PIN(0x854, mode, flags)
+#define AM33XX_PIN_GPMC_A6(mode, flags)			AM33XX_PIN(0x858, mode, flags)
+#define AM33XX_PIN_GPMC_A7(mode, flags)			AM33XX_PIN(0x85C, mode, flags)
+#define AM33XX_PIN_GPMC_A8(mode, flags)			AM33XX_PIN(0x860, mode, flags)
+#define AM33XX_PIN_GPMC_A9(mode, flags)			AM33XX_PIN(0x864, mode, flags)
+#define AM33XX_PIN_GPMC_A10(mode, flags)		AM33XX_PIN(0x868, mode, flags)
+#define AM33XX_PIN_GPMC_A11(mode, flags)		AM33XX_PIN(0x86C, mode, flags)
+#define AM33XX_PIN_GPMC_WAIT0(mode, flags)		AM33XX_PIN(0x870, mode, flags)
+#define AM33XX_PIN_GPMC_WPN(mode, flags)		AM33XX_PIN(0x874, mode, flags)
+#define AM33XX_PIN_GPMC_BEN1(mode, flags)		AM33XX_PIN(0x878, mode, flags)
+#define AM33XX_PIN_GPMC_CSN0(mode, flags)		AM33XX_PIN(0x87C, mode, flags)
+#define AM33XX_PIN_GPMC_CSN1(mode, flags)		AM33XX_PIN(0x880, mode, flags)
+#define AM33XX_PIN_GPMC_CSN2(mode, flags)		AM33XX_PIN(0x884, mode, flags)
+#define AM33XX_PIN_GPMC_CSN3(mode, flags)		AM33XX_PIN(0x888, mode, flags)
+#define AM33XX_PIN_GPMC_CLK(mode, flags)		AM33XX_PIN(0x88C, mode, flags)
+#define AM33XX_PIN_GPMC_ADVN_ALE(mode, flags)		AM33XX_PIN(0x890, mode, flags)
+#define AM33XX_PIN_GPMC_OEN_REN(mode, flags)		AM33XX_PIN(0x894, mode, flags)
+#define AM33XX_PIN_GPMC_WEN(mode, flags)		AM33XX_PIN(0x898, mode, flags)
+#define AM33XX_PIN_GPMC_BEN0_CLE(mode, flags)		AM33XX_PIN(0x89C, mode, flags)
+#define AM33XX_PIN_LCD_DATA0(mode, flags)		AM33XX_PIN(0x8A0, mode, flags)
+#define AM33XX_PIN_LCD_DATA1(mode, flags)		AM33XX_PIN(0x8A4, mode, flags)
+#define AM33XX_PIN_LCD_DATA2(mode, flags)		AM33XX_PIN(0x8A8, mode, flags)
+#define AM33XX_PIN_LCD_DATA3(mode, flags)		AM33XX_PIN(0x8AC, mode, flags)
+#define AM33XX_PIN_LCD_DATA4(mode, flags)		AM33XX_PIN(0x8B0, mode, flags)
+#define AM33XX_PIN_LCD_DATA5(mode, flags)		AM33XX_PIN(0x8B4, mode, flags)
+#define AM33XX_PIN_LCD_DATA6(mode, flags)		AM33XX_PIN(0x8B8, mode, flags)
+#define AM33XX_PIN_LCD_DATA7(mode, flags)		AM33XX_PIN(0x8BC, mode, flags)
+#define AM33XX_PIN_LCD_DATA8(mode, flags)		AM33XX_PIN(0x8C0, mode, flags)
+#define AM33XX_PIN_LCD_DATA9(mode, flags)		AM33XX_PIN(0x8C4, mode, flags)
+#define AM33XX_PIN_LCD_DATA10(mode, flags)		AM33XX_PIN(0x8C8, mode, flags)
+#define AM33XX_PIN_LCD_DATA11(mode, flags)		AM33XX_PIN(0x8CC, mode, flags)
+#define AM33XX_PIN_LCD_DATA12(mode, flags)		AM33XX_PIN(0x8D0, mode, flags)
+#define AM33XX_PIN_LCD_DATA13(mode, flags)		AM33XX_PIN(0x8D4, mode, flags)
+#define AM33XX_PIN_LCD_DATA14(mode, flags)		AM33XX_PIN(0x8D8, mode, flags)
+#define AM33XX_PIN_LCD_DATA15(mode, flags)		AM33XX_PIN(0x8DC, mode, flags)
+#define AM33XX_PIN_LCD_VSYNC(mode, flags)		AM33XX_PIN(0x8E0, mode, flags)
+#define AM33XX_PIN_LCD_HSYNC(mode, flags)		AM33XX_PIN(0x8E4, mode, flags)
+#define AM33XX_PIN_LCD_PCLK(mode, flags)		AM33XX_PIN(0x8E8, mode, flags)
+#define AM33XX_PIN_LCD_AC_BIAS_EN(mode, flags)		AM33XX_PIN(0x8EC, mode, flags)
+#define AM33XX_PIN_MMC0_DAT3(mode, flags)		AM33XX_PIN(0x8F0, mode, flags)
+#define AM33XX_PIN_MMC0_DAT2(mode, flags)		AM33XX_PIN(0x8F4, mode, flags)
+#define AM33XX_PIN_MMC0_DAT1(mode, flags)		AM33XX_PIN(0x8F8, mode, flags)
+#define AM33XX_PIN_MMC0_DAT0(mode, flags)		AM33XX_PIN(0x8FC, mode, flags)
+#define AM33XX_PIN_MMC0_CLK(mode, flags)		AM33XX_PIN(0x900, mode, flags)
+#define AM33XX_PIN_MMC0_CMD(mode, flags)		AM33XX_PIN(0x904, mode, flags)
+#define AM33XX_PIN_MII1_COL(mode, flags)		AM33XX_PIN(0x908, mode, flags)
+#define AM33XX_PIN_MII1_CRS(mode, flags)		AM33XX_PIN(0x90C, mode, flags)
+#define AM33XX_PIN_MII1_RX_ER(mode, flags)		AM33XX_PIN(0x910, mode, flags)
+#define AM33XX_PIN_MII1_TX_EN(mode, flags)		AM33XX_PIN(0x914, mode, flags)
+#define AM33XX_PIN_MII1_RX_DV(mode, flags)		AM33XX_PIN(0x918, mode, flags)
+#define AM33XX_PIN_MII1_TXD3(mode, flags)		AM33XX_PIN(0x91C, mode, flags)
+#define AM33XX_PIN_MII1_TXD2(mode, flags)		AM33XX_PIN(0x920, mode, flags)
+#define AM33XX_PIN_MII1_TXD1(mode, flags)		AM33XX_PIN(0x924, mode, flags)
+#define AM33XX_PIN_MII1_TXD0(mode, flags)		AM33XX_PIN(0x928, mode, flags)
+#define AM33XX_PIN_MII1_TX_CLK(mode, flags)		AM33XX_PIN(0x92C, mode, flags)
+#define AM33XX_PIN_MII1_RX_CLK(mode, flags)		AM33XX_PIN(0x930, mode, flags)
+#define AM33XX_PIN_MII1_RXD3(mode, flags)		AM33XX_PIN(0x934, mode, flags)
+#define AM33XX_PIN_MII1_RXD2(mode, flags)		AM33XX_PIN(0x938, mode, flags)
+#define AM33XX_PIN_MII1_RXD1(mode, flags)		AM33XX_PIN(0x93C, mode, flags)
+#define AM33XX_PIN_MII1_RXD0(mode, flags)		AM33XX_PIN(0x940, mode, flags)
+#define AM33XX_PIN_RMII1_REF_CLK(mode, flags)		AM33XX_PIN(0x944, mode, flags)
+#define AM33XX_PIN_MDIO(mode, flags)			AM33XX_PIN(0x948, mode, flags)
+#define AM33XX_PIN_MDC(mode, flags)			AM33XX_PIN(0x94C, mode, flags)
+#define AM33XX_PIN_SPI0_SCLK(mode, flags)		AM33XX_PIN(0x950, mode, flags)
+#define AM33XX_PIN_SPI0_D0(mode, flags)			AM33XX_PIN(0x954, mode, flags)
+#define AM33XX_PIN_SPI0_D1(mode, flags)			AM33XX_PIN(0x958, mode, flags)
+#define AM33XX_PIN_SPI0_CS0(mode, flags)		AM33XX_PIN(0x95C, mode, flags)
+#define AM33XX_PIN_SPI0_CS1(mode, flags)		AM33XX_PIN(0x960, mode, flags)
+#define AM33XX_PIN_ECAP0_IN_PWM0_OUT(mode, flags)	AM33XX_PIN(0x964, mode, flags)
+#define AM33XX_PIN_UART0_CTSN(mode, flags)		AM33XX_PIN(0x968, mode, flags)
+#define AM33XX_PIN_UART0_RTSN(mode, flags)		AM33XX_PIN(0x96C, mode, flags)
+#define AM33XX_PIN_UART0_RXD(mode, flags)		AM33XX_PIN(0x970, mode, flags)
+#define AM33XX_PIN_UART0_TXD(mode, flags)		AM33XX_PIN(0x974, mode, flags)
+#define AM33XX_PIN_UART1_CTSN(mode, flags)		AM33XX_PIN(0x978, mode, flags)
+#define AM33XX_PIN_UART1_RTSN(mode, flags)		AM33XX_PIN(0x97C, mode, flags)
+#define AM33XX_PIN_UART1_RXD(mode, flags)		AM33XX_PIN(0x980, mode, flags)
+#define AM33XX_PIN_UART1_TXD(mode, flags)		AM33XX_PIN(0x984, mode, flags)
+#define AM33XX_PIN_I2C0_SDA(mode, flags)		AM33XX_PIN(0x988, mode, flags)
+#define AM33XX_PIN_I2C0_SCL(mode, flags)		AM33XX_PIN(0x98C, mode, flags)
+#define AM33XX_PIN_MCASP0_ACLKX(mode, flags)		AM33XX_PIN(0x990, mode, flags)
+#define AM33XX_PIN_MCASP0_FSX(mode, flags)		AM33XX_PIN(0x994, mode, flags)
+#define AM33XX_PIN_MCASP0_AXR0(mode, flags)		AM33XX_PIN(0x998, mode, flags)
+#define AM33XX_PIN_MCASP0_AHCLKR(mode, flags)		AM33XX_PIN(0x99C, mode, flags)
+#define AM33XX_PIN_MCASP0_ACLKR(mode, flags)		AM33XX_PIN(0x9A0, mode, flags)
+#define AM33XX_PIN_MCASP0_FSR(mode, flags)		AM33XX_PIN(0x9A4, mode, flags)
+#define AM33XX_PIN_MCASP0_AXR1(mode, flags)		AM33XX_PIN(0x9A8, mode, flags)
+#define AM33XX_PIN_MCASP0_AHCLKX(mode, flags)		AM33XX_PIN(0x9AC, mode, flags)
+#define AM33XX_PIN_XDMA_EVENT_INTR0(mode, flags)	AM33XX_PIN(0x9B0, mode, flags)
+#define AM33XX_PIN_XDMA_EVENT_INTR1(mode, flags)	AM33XX_PIN(0x9B4, mode, flags)
+#define AM33XX_PIN_NNMI(mode, flags)			AM33XX_PIN(0x9C0, mode, flags)
+#define AM33XX_PIN_TMS(mode, flags)			AM33XX_PIN(0x9D0, mode, flags)
+#define AM33XX_PIN_TDI(mode, flags)			AM33XX_PIN(0x9D0, mode, flags)
+#define AM33XX_PIN_TDO(mode, flags)			AM33XX_PIN(0x9D4, mode, flags)
+#define AM33XX_PIN_TCK(mode, flags)			AM33XX_PIN(0x9D8, mode, flags)
+#define AM33XX_PIN_TRSTN(mode, flags)			AM33XX_PIN(0x9DC, mode, flags)
+#define AM33XX_PIN_EMU0(mode, flags)			AM33XX_PIN(0x9E4, mode, flags)
+#define AM33XX_PIN_EMU1(mode, flags)			AM33XX_PIN(0x9E8, mode, flags)
+#define AM33XX_PIN_USB0_DRVVBUS(mode, flags)		AM33XX_PIN(0xA1C, mode, flags)
+#define AM33XX_PIN_USB1_DRVVBUS(mode, flags)		AM33XX_PIN(0xA34, mode, flags)
+
+#define AM33XX_ECAP0_IN_PWM0_OUT(flags)					AM33XX_PIN_ECAP0_IN_PWM0_OUT(MUX_MODE0, flags)
+#define AM33XX_ECAP0_IN_PWM0_OUT_UART3_TXD(flags)			AM33XX_PIN_ECAP0_IN_PWM0_OUT(MUX_MODE1, flags)
+#define AM33XX_ECAP0_IN_PWM0_OUT_SPI1_CS1(flags)			AM33XX_PIN_ECAP0_IN_PWM0_OUT(MUX_MODE2, flags)
+#define AM33XX_ECAP0_IN_PWM0_OUT_PR1_ECAP0_ECAP_CAPIN_APWM_O(flags)	AM33XX_PIN_ECAP0_IN_PWM0_OUT(MUX_MODE3, flags)
+#define AM33XX_ECAP0_IN_PWM0_OUT_SPI1_SCLK(flags)			AM33XX_PIN_ECAP0_IN_PWM0_OUT(MUX_MODE4, flags)
+#define AM33XX_ECAP0_IN_PWM0_OUT_MMC0_SDWP(flags)			AM33XX_PIN_ECAP0_IN_PWM0_OUT(MUX_MODE5, flags)
+#define AM33XX_ECAP0_IN_PWM0_OUT_XDMA_EVENT_INTR2(flags)		AM33XX_PIN_ECAP0_IN_PWM0_OUT(MUX_MODE6, flags)
+#define AM33XX_ECAP0_IN_PWM0_OUT_GPIO0_7(flags)				AM33XX_PIN_ECAP0_IN_PWM0_OUT(MUX_MODE7, flags)
+
+#define AM33XX_EMU0(flags)						AM33XX_PIN_EMU0(MUX_MODE0, flags)
+#define AM33XX_EMU0_GPIO3_7(flags)					AM33XX_PIN_EMU0(MUX_MODE7, flags)
+
+#define AM33XX_EMU1(flags)						AM33XX_PIN_EMU1(MUX_MODE0, flags)
+#define AM33XX_EMU1_GPIO3_8(flags)					AM33XX_PIN_EMU1(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_A0(flags)						AM33XX_PIN_GPMC_A0(MUX_MODE0, flags)
+#define AM33XX_GPMC_A0_GMII2_TXEN(flags)				AM33XX_PIN_GPMC_A0(MUX_MODE1, flags)
+#define AM33XX_GPMC_A0_RGMII2_TCTL(flags)				AM33XX_PIN_GPMC_A0(MUX_MODE2, flags)
+#define AM33XX_GPMC_A0_RMII2_TXEN(flags)				AM33XX_PIN_GPMC_A0(MUX_MODE3, flags)
+#define AM33XX_GPMC_A0_GPMC_A16(flags)					AM33XX_PIN_GPMC_A0(MUX_MODE4, flags)
+#define AM33XX_GPMC_A0_PR1_MII_MT1_CLK(flags)				AM33XX_PIN_GPMC_A0(MUX_MODE5, flags)
+#define AM33XX_GPMC_A0_EHRPWM1_TRIPZONE_INPUT(flags)			AM33XX_PIN_GPMC_A0(MUX_MODE6, flags)
+#define AM33XX_GPMC_A0_GPIO1_16(flags)					AM33XX_PIN_GPMC_A0(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_A1(flags)						AM33XX_PIN_GPMC_A1(MUX_MODE0, flags)
+#define AM33XX_GPMC_A1_GMII2_RXDV(flags)				AM33XX_PIN_GPMC_A1(MUX_MODE1, flags)
+#define AM33XX_GPMC_A1_RGMII2_RCTL(flags)				AM33XX_PIN_GPMC_A1(MUX_MODE2, flags)
+#define AM33XX_GPMC_A1_MMC2_DAT0(flags)					AM33XX_PIN_GPMC_A1(MUX_MODE3, flags)
+#define AM33XX_GPMC_A1_GPMC_A17(flags)					AM33XX_PIN_GPMC_A1(MUX_MODE4, flags)
+#define AM33XX_GPMC_A1_PR1_MII1_TXD3(flags)				AM33XX_PIN_GPMC_A1(MUX_MODE5, flags)
+#define AM33XX_GPMC_A1_EHRPWM0_SYNCO(flags)				AM33XX_PIN_GPMC_A1(MUX_MODE6, flags)
+#define AM33XX_GPMC_A1_GPIO1_17(flags)					AM33XX_PIN_GPMC_A1(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_A2(flags)						AM33XX_PIN_GPMC_A2(MUX_MODE0, flags)
+#define AM33XX_GPMC_A2_GMII2_TXD3(flags)				AM33XX_PIN_GPMC_A2(MUX_MODE1, flags)
+#define AM33XX_GPMC_A2_RGMII2_TD3(flags)				AM33XX_PIN_GPMC_A2(MUX_MODE2, flags)
+#define AM33XX_GPMC_A2_MMC2_DAT1(flags)					AM33XX_PIN_GPMC_A2(MUX_MODE3, flags)
+#define AM33XX_GPMC_A2_GPMC_A18(flags)					AM33XX_PIN_GPMC_A2(MUX_MODE4, flags)
+#define AM33XX_GPMC_A2_PR1_MII1_TXD2(flags)				AM33XX_PIN_GPMC_A2(MUX_MODE5, flags)
+#define AM33XX_GPMC_A2_EHRPWM1A(flags)					AM33XX_PIN_GPMC_A2(MUX_MODE6, flags)
+#define AM33XX_GPMC_A2_GPIO1_18(flags)					AM33XX_PIN_GPMC_A2(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_A3(flags)						AM33XX_PIN_GPMC_A3(MUX_MODE0, flags)
+#define AM33XX_GPMC_A3_GMII2_TXD2(flags)				AM33XX_PIN_GPMC_A3(MUX_MODE1, flags)
+#define AM33XX_GPMC_A3_RGMII2_TD2(flags)				AM33XX_PIN_GPMC_A3(MUX_MODE2, flags)
+#define AM33XX_GPMC_A3_MMC2_DAT2(flags)					AM33XX_PIN_GPMC_A3(MUX_MODE3, flags)
+#define AM33XX_GPMC_A3_GPMC_A19(flags)					AM33XX_PIN_GPMC_A3(MUX_MODE4, flags)
+#define AM33XX_GPMC_A3_PR1_MII1_TXD1(flags)				AM33XX_PIN_GPMC_A3(MUX_MODE5, flags)
+#define AM33XX_GPMC_A3_EHRPWM1B(flags)					AM33XX_PIN_GPMC_A3(MUX_MODE6, flags)
+#define AM33XX_GPMC_A3_GPIO1_19(flags)					AM33XX_PIN_GPMC_A3(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_A4(flags)						AM33XX_PIN_GPMC_A4(MUX_MODE0, flags)
+#define AM33XX_GPMC_A4_GMII2_TXD1(flags)				AM33XX_PIN_GPMC_A4(MUX_MODE1, flags)
+#define AM33XX_GPMC_A4_RGMII2_TD1(flags)				AM33XX_PIN_GPMC_A4(MUX_MODE2, flags)
+#define AM33XX_GPMC_A4_RMII2_TXD1(flags)				AM33XX_PIN_GPMC_A4(MUX_MODE3, flags)
+#define AM33XX_GPMC_A4_GPMC_A20(flags)					AM33XX_PIN_GPMC_A4(MUX_MODE4, flags)
+#define AM33XX_GPMC_A4_PR1_MII1_TXD0(flags)				AM33XX_PIN_GPMC_A4(MUX_MODE5, flags)
+#define AM33XX_GPMC_A4_EQEP1A_IN(flags)					AM33XX_PIN_GPMC_A4(MUX_MODE6, flags)
+#define AM33XX_GPMC_A4_GPIO1_20(flags)					AM33XX_PIN_GPMC_A4(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_A5(flags)						AM33XX_PIN_GPMC_A5(MUX_MODE0, flags)
+#define AM33XX_GPMC_A5_GMII2_TXD0(flags)				AM33XX_PIN_GPMC_A5(MUX_MODE1, flags)
+#define AM33XX_GPMC_A5_RGMII2_TD0(flags)				AM33XX_PIN_GPMC_A5(MUX_MODE2, flags)
+#define AM33XX_GPMC_A5_RMII2_TXD0(flags)				AM33XX_PIN_GPMC_A5(MUX_MODE3, flags)
+#define AM33XX_GPMC_A5_GPMC_A21(flags)					AM33XX_PIN_GPMC_A5(MUX_MODE4, flags)
+#define AM33XX_GPMC_A5_PR1_MII1_RXD3(flags)				AM33XX_PIN_GPMC_A5(MUX_MODE5, flags)
+#define AM33XX_GPMC_A5_EQEP1B_IN(flags)					AM33XX_PIN_GPMC_A5(MUX_MODE6, flags)
+#define AM33XX_GPMC_A5_GPIO1_21(flags)					AM33XX_PIN_GPMC_A5(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_A6(flags)						AM33XX_PIN_GPMC_A6(MUX_MODE0, flags)
+#define AM33XX_GPMC_A6_GMII2_TXCLK(flags)				AM33XX_PIN_GPMC_A6(MUX_MODE1, flags)
+#define AM33XX_GPMC_A6_RGMII2_TCLK(flags)				AM33XX_PIN_GPMC_A6(MUX_MODE2, flags)
+#define AM33XX_GPMC_A6_MMC2_DAT4(flags)					AM33XX_PIN_GPMC_A6(MUX_MODE3, flags)
+#define AM33XX_GPMC_A6_GPMC_A22(flags)					AM33XX_PIN_GPMC_A6(MUX_MODE4, flags)
+#define AM33XX_GPMC_A6_PR1_MII1_RXD2(flags)				AM33XX_PIN_GPMC_A6(MUX_MODE5, flags)
+#define AM33XX_GPMC_A6_EQEP1_INDEX(flags)				AM33XX_PIN_GPMC_A6(MUX_MODE6, flags)
+#define AM33XX_GPMC_A6_GPIO1_22(flags)					AM33XX_PIN_GPMC_A6(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_A7(flags)						AM33XX_PIN_GPMC_A7(MUX_MODE0, flags)
+#define AM33XX_GPMC_A7_GMII2_RXCLK(flags)				AM33XX_PIN_GPMC_A7(MUX_MODE1, flags)
+#define AM33XX_GPMC_A7_RGMII2_RCLK(flags)				AM33XX_PIN_GPMC_A7(MUX_MODE2, flags)
+#define AM33XX_GPMC_A7_MMC2_DAT5(flags)					AM33XX_PIN_GPMC_A7(MUX_MODE3, flags)
+#define AM33XX_GPMC_A7_GPMC_A23(flags)					AM33XX_PIN_GPMC_A7(MUX_MODE4, flags)
+#define AM33XX_GPMC_A7_PR1_MII1_RXD1(flags)				AM33XX_PIN_GPMC_A7(MUX_MODE5, flags)
+#define AM33XX_GPMC_A7_EQEP1_STROBE(flags)				AM33XX_PIN_GPMC_A7(MUX_MODE6, flags)
+#define AM33XX_GPMC_A7_GPIO1_23(flags)					AM33XX_PIN_GPMC_A7(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_A8(flags)						AM33XX_PIN_GPMC_A8(MUX_MODE0, flags)
+#define AM33XX_GPMC_A8_GMII2_RXD3(flags)				AM33XX_PIN_GPMC_A8(MUX_MODE1, flags)
+#define AM33XX_GPMC_A8_RGMII2_RD3(flags)				AM33XX_PIN_GPMC_A8(MUX_MODE2, flags)
+#define AM33XX_GPMC_A8_MMC2_DAT6(flags)					AM33XX_PIN_GPMC_A8(MUX_MODE3, flags)
+#define AM33XX_GPMC_A8_GPMC_A24(flags)					AM33XX_PIN_GPMC_A8(MUX_MODE4, flags)
+#define AM33XX_GPMC_A8_PR1_MII1_RXD0(flags)				AM33XX_PIN_GPMC_A8(MUX_MODE5, flags)
+#define AM33XX_GPMC_A8_MCASP0_ACLKX(flags)				AM33XX_PIN_GPMC_A8(MUX_MODE6, flags)
+#define AM33XX_GPMC_A8_GPIO1_24(flags)					AM33XX_PIN_GPMC_A8(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_A9(flags)						AM33XX_PIN_GPMC_A9(MUX_MODE0, flags)
+#define AM33XX_GPMC_A9_GMII2_RXD2(flags)				AM33XX_PIN_GPMC_A9(MUX_MODE1, flags)
+#define AM33XX_GPMC_A9_RGMII2_RD2(flags)				AM33XX_PIN_GPMC_A9(MUX_MODE2, flags)
+#define AM33XX_GPMC_A9_MMC2_DAT7(flags)					AM33XX_PIN_GPMC_A9(MUX_MODE3, flags)
+#define AM33XX_GPMC_A9_RMII2_CRS_DV(flags)				AM33XX_PIN_GPMC_A9(MUX_MODE3, flags)
+#define AM33XX_GPMC_A9_GPMC_A25(flags)					AM33XX_PIN_GPMC_A9(MUX_MODE4, flags)
+#define AM33XX_GPMC_A9_PR1_MII_MR1_CLK(flags)				AM33XX_PIN_GPMC_A9(MUX_MODE5, flags)
+#define AM33XX_GPMC_A9_MCASP0_FSX(flags)				AM33XX_PIN_GPMC_A9(MUX_MODE6, flags)
+#define AM33XX_GPMC_A9_GPIO1_25(flags)					AM33XX_PIN_GPMC_A9(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_A10(flags)						AM33XX_PIN_GPMC_A10(MUX_MODE0, flags)
+#define AM33XX_GPMC_A10_GMII2_RXD1(flags)				AM33XX_PIN_GPMC_A10(MUX_MODE1, flags)
+#define AM33XX_GPMC_A10_RGMII2_RD1(flags)				AM33XX_PIN_GPMC_A10(MUX_MODE2, flags)
+#define AM33XX_GPMC_A10_RMII2_RXD1(flags)				AM33XX_PIN_GPMC_A10(MUX_MODE3, flags)
+#define AM33XX_GPMC_A10_GPMC_A26(flags)					AM33XX_PIN_GPMC_A10(MUX_MODE4, flags)
+#define AM33XX_GPMC_A10_PR1_MII1_RXDV(flags)				AM33XX_PIN_GPMC_A10(MUX_MODE5, flags)
+#define AM33XX_GPMC_A10_MCASP0_AXR0(flags)				AM33XX_PIN_GPMC_A10(MUX_MODE6, flags)
+#define AM33XX_GPMC_A10_GPIO1_26(flags)					AM33XX_PIN_GPMC_A10(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_A11(flags)						AM33XX_PIN_GPMC_A11(MUX_MODE0, flags)
+#define AM33XX_GPMC_A11_GMII2_RXD0(flags)				AM33XX_PIN_GPMC_A11(MUX_MODE1, flags)
+#define AM33XX_GPMC_A11_RGMII2_RD0(flags)				AM33XX_PIN_GPMC_A11(MUX_MODE2, flags)
+#define AM33XX_GPMC_A11_RMII2_RXD0(flags)				AM33XX_PIN_GPMC_A11(MUX_MODE3, flags)
+#define AM33XX_GPMC_A11_GPMC_A27(flags)					AM33XX_PIN_GPMC_A11(MUX_MODE4, flags)
+#define AM33XX_GPMC_A11_PR1_MII1_RXER(flags)				AM33XX_PIN_GPMC_A11(MUX_MODE5, flags)
+#define AM33XX_GPMC_A11_MCASP0_AXR1(flags)				AM33XX_PIN_GPMC_A11(MUX_MODE6, flags)
+#define AM33XX_GPMC_A11_GPIO1_27(flags)					AM33XX_PIN_GPMC_A11(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_AD0(flags)						AM33XX_PIN_GPMC_AD0(MUX_MODE0, flags)
+#define AM33XX_GPMC_AD0_MMC1_DAT0(flags)				AM33XX_PIN_GPMC_AD0(MUX_MODE1, flags)
+#define AM33XX_GPMC_AD0_GPIO1_0(flags)					AM33XX_PIN_GPMC_AD0(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_AD1(flags)						AM33XX_PIN_GPMC_AD1(MUX_MODE0, flags)
+#define AM33XX_GPMC_AD1_MMC1_DAT1(flags)				AM33XX_PIN_GPMC_AD1(MUX_MODE1, flags)
+#define AM33XX_GPMC_AD1_GPIO1_1(flags)					AM33XX_PIN_GPMC_AD1(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_AD2(flags)						AM33XX_PIN_GPMC_AD2(MUX_MODE0, flags)
+#define AM33XX_GPMC_AD2_MMC1_DAT2(flags)				AM33XX_PIN_GPMC_AD2(MUX_MODE1, flags)
+#define AM33XX_GPMC_AD2_GPIO1_2(flags)					AM33XX_PIN_GPMC_AD2(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_AD3(flags)						AM33XX_PIN_GPMC_AD3(MUX_MODE0, flags)
+#define AM33XX_GPMC_AD3_MMC1_DAT3(flags)				AM33XX_PIN_GPMC_AD3(MUX_MODE1, flags)
+#define AM33XX_GPMC_AD3_GPIO1_3(flags)					AM33XX_PIN_GPMC_AD3(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_AD4(flags)						AM33XX_PIN_GPMC_AD4(MUX_MODE0, flags)
+#define AM33XX_GPMC_AD4_MMC1_DAT4(flags)				AM33XX_PIN_GPMC_AD4(MUX_MODE1, flags)
+#define AM33XX_GPMC_AD4_GPIO1_4(flags)					AM33XX_PIN_GPMC_AD4(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_AD5(flags)						AM33XX_PIN_GPMC_AD5(MUX_MODE0, flags)
+#define AM33XX_GPMC_AD5_MMC1_DAT5(flags)				AM33XX_PIN_GPMC_AD5(MUX_MODE1, flags)
+#define AM33XX_GPMC_AD5_GPIO1_5(flags)					AM33XX_PIN_GPMC_AD5(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_AD6(flags)						AM33XX_PIN_GPMC_AD6(MUX_MODE0, flags)
+#define AM33XX_GPMC_AD6_MMC1_DAT6(flags)				AM33XX_PIN_GPMC_AD6(MUX_MODE1, flags)
+#define AM33XX_GPMC_AD6_GPIO1_6(flags)					AM33XX_PIN_GPMC_AD6(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_AD7(flags)						AM33XX_PIN_GPMC_AD7(MUX_MODE0, flags)
+#define AM33XX_MMC1_DAT7(flags)						AM33XX_PIN_GPMC_AD7(MUX_MODE1, flags)
+#define AM33XX_GPMC_AD7_GPIO1_7(flags)					AM33XX_PIN_GPMC_AD7(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_AD8(flags)						AM33XX_PIN_GPMC_AD8(MUX_MODE0, flags)
+#define AM33XX_GPMC_AD8_LCD_DATA23(flags)				AM33XX_PIN_GPMC_AD8(MUX_MODE1, flags)
+#define AM33XX_GPMC_AD8_MMC1_DAT0(flags)				AM33XX_PIN_GPMC_AD8(MUX_MODE2, flags)
+#define AM33XX_GPMC_AD8_MMC2_DAT4(flags)				AM33XX_PIN_GPMC_AD8(MUX_MODE3, flags)
+#define AM33XX_GPMC_AD8_EHRPWM2A(flags)					AM33XX_PIN_GPMC_AD8(MUX_MODE4, flags)
+#define AM33XX_GPMC_AD8_PR1_MII_MT0_CLK(flags)				AM33XX_PIN_GPMC_AD8(MUX_MODE5, flags)
+#define AM33XX_GPMC_AD8_GPIO0_22(flags)					AM33XX_PIN_GPMC_AD8(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_AD9(flags)						AM33XX_PIN_GPMC_AD9(MUX_MODE0, flags)
+#define AM33XX_GPMC_AD9_LCD_DATA22(flags)				AM33XX_PIN_GPMC_AD9(MUX_MODE1, flags)
+#define AM33XX_GPMC_AD9_MMC1_DAT1(flags)				AM33XX_PIN_GPMC_AD9(MUX_MODE2, flags)
+#define AM33XX_GPMC_AD9_MMC2_DAT5(flags)				AM33XX_PIN_GPMC_AD9(MUX_MODE3, flags)
+#define AM33XX_GPMC_AD9_EHRPWM2B(flags)					AM33XX_PIN_GPMC_AD9(MUX_MODE4, flags)
+#define AM33XX_GPMC_AD9_PR1_MII0_COL(flags)				AM33XX_PIN_GPMC_AD9(MUX_MODE5, flags)
+#define AM33XX_GPMC_AD9_GPIO0_23(flags)					AM33XX_PIN_GPMC_AD9(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_AD10(flags)						AM33XX_PIN_GPMC_AD10(MUX_MODE0, flags)
+#define AM33XX_GPMC_AD10_LCD_DATA21(flags)				AM33XX_PIN_GPMC_AD10(MUX_MODE1, flags)
+#define AM33XX_GPMC_AD10_MMC1_DAT2(flags)				AM33XX_PIN_GPMC_AD10(MUX_MODE2, flags)
+#define AM33XX_GPMC_AD10_MMC2_DAT6(flags)				AM33XX_PIN_GPMC_AD10(MUX_MODE3, flags)
+#define AM33XX_GPMC_AD10_EHRPWM2_TRIPZONE_INPUT(flags)			AM33XX_PIN_GPMC_AD10(MUX_MODE4, flags)
+#define AM33XX_GPMC_AD10_PR1_MII0_TXEN(flags)				AM33XX_PIN_GPMC_AD10(MUX_MODE5, flags)
+#define AM33XX_GPMC_AD10_GPIO0_26(flags)				AM33XX_PIN_GPMC_AD10(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_AD11(flags)						AM33XX_PIN_GPMC_AD11(MUX_MODE0, flags)
+#define AM33XX_GPMC_AD11_LCD_DATA20(flags)				AM33XX_PIN_GPMC_AD11(MUX_MODE1, flags)
+#define AM33XX_GPMC_AD11_MMC1_DAT3(flags)				AM33XX_PIN_GPMC_AD11(MUX_MODE2, flags)
+#define AM33XX_GPMC_AD11_MMC2_DAT7(flags)				AM33XX_PIN_GPMC_AD11(MUX_MODE3, flags)
+#define AM33XX_GPMC_AD11_EHRPWM0_SYNCO(flags)				AM33XX_PIN_GPMC_AD11(MUX_MODE4, flags)
+#define AM33XX_GPMC_AD11_PR1_MII0_TXD3(flags)				AM33XX_PIN_GPMC_AD11(MUX_MODE5, flags)
+#define AM33XX_GPMC_AD11_GPIO0_27(flags)				AM33XX_PIN_GPMC_AD11(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_AD12(flags)						AM33XX_PIN_GPMC_AD12(MUX_MODE0, flags)
+#define AM33XX_GPMC_AD12_LCD_DATA19(flags)				AM33XX_PIN_GPMC_AD12(MUX_MODE1, flags)
+#define AM33XX_GPMC_AD12_MMC1_DAT4(flags)				AM33XX_PIN_GPMC_AD12(MUX_MODE2, flags)
+#define AM33XX_GPMC_AD12_MMC2_DAT0(flags)				AM33XX_PIN_GPMC_AD12(MUX_MODE3, flags)
+#define AM33XX_GPMC_AD12_EQEP2A_IN(flags)				AM33XX_PIN_GPMC_AD12(MUX_MODE4, flags)
+#define AM33XX_GPMC_AD12_PR1_MII0_TXD2(flags)				AM33XX_PIN_GPMC_AD12(MUX_MODE5, flags)
+#define AM33XX_GPMC_AD12_PR1_PRU0_PRU_R30_14(flags)			AM33XX_PIN_GPMC_AD12(MUX_MODE6, flags)
+#define AM33XX_GPMC_AD12_GPIO1_12(flags)				AM33XX_PIN_GPMC_AD12(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_AD13(flags)						AM33XX_PIN_GPMC_AD13(MUX_MODE0, flags)
+#define AM33XX_GPMC_AD13_LCD_DATA18(flags)				AM33XX_PIN_GPMC_AD13(MUX_MODE1, flags)
+#define AM33XX_GPMC_AD13_MMC1_DAT5(flags)				AM33XX_PIN_GPMC_AD13(MUX_MODE2, flags)
+#define AM33XX_GPMC_AD13_MMC2_DAT1(flags)				AM33XX_PIN_GPMC_AD13(MUX_MODE3, flags)
+#define AM33XX_GPMC_AD13_EQEP2B_IN(flags)				AM33XX_PIN_GPMC_AD13(MUX_MODE4, flags)
+#define AM33XX_GPMC_AD13_PR1_MII0_TXD1(flags)				AM33XX_PIN_GPMC_AD13(MUX_MODE5, flags)
+#define AM33XX_GPMC_AD13_PR1_PRU0_PRU_R30_15(flags)			AM33XX_PIN_GPMC_AD13(MUX_MODE6, flags)
+#define AM33XX_GPMC_AD13_GPIO1_13(flags)				AM33XX_PIN_GPMC_AD13(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_AD14(flags)						AM33XX_PIN_GPMC_AD14(MUX_MODE0, flags)
+#define AM33XX_GPMC_AD14_LCD_DATA17(flags)				AM33XX_PIN_GPMC_AD14(MUX_MODE1, flags)
+#define AM33XX_GPMC_AD14_MMC1_DAT6(flags)				AM33XX_PIN_GPMC_AD14(MUX_MODE2, flags)
+#define AM33XX_GPMC_AD14_MMC2_DAT2(flags)				AM33XX_PIN_GPMC_AD14(MUX_MODE3, flags)
+#define AM33XX_GPMC_AD14_EQEP2_INDEX(flags)				AM33XX_PIN_GPMC_AD14(MUX_MODE4, flags)
+#define AM33XX_GPMC_AD14_PR1_MII0_TXD0(flags)				AM33XX_PIN_GPMC_AD14(MUX_MODE5, flags)
+#define AM33XX_GPMC_AD14_PR1_PRU0_PRU_R31_14(flags)			AM33XX_PIN_GPMC_AD14(MUX_MODE6, flags)
+#define AM33XX_GPMC_AD14_GPIO1_14(flags)				AM33XX_PIN_GPMC_AD14(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_AD15(flags)						AM33XX_PIN_GPMC_AD15(MUX_MODE0, flags)
+#define AM33XX_GPMC_AD15_LCD_DATA16(flags)				AM33XX_PIN_GPMC_AD15(MUX_MODE1, flags)
+#define AM33XX_GPMC_AD15_MMC1_DAT7(flags)				AM33XX_PIN_GPMC_AD15(MUX_MODE2, flags)
+#define AM33XX_GPMC_AD15_MMC2_DAT3(flags)				AM33XX_PIN_GPMC_AD15(MUX_MODE3, flags)
+#define AM33XX_GPMC_AD15_EQEP2_STROBE(flags)				AM33XX_PIN_GPMC_AD15(MUX_MODE4, flags)
+#define AM33XX_GPMC_AD15_PR1_ECAP0_ECAP_CAPIN_APWM_O(flags)		AM33XX_PIN_GPMC_AD15(MUX_MODE5, flags)
+#define AM33XX_GPMC_AD15_PR1_PRU0_PRU_R31_15(flags)			AM33XX_PIN_GPMC_AD15(MUX_MODE6, flags)
+#define AM33XX_GPMC_AD15_GPIO1_15(flags)				AM33XX_PIN_GPMC_AD15(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_ADVN_ALE(flags)					AM33XX_PIN_GPMC_ADVN_ALE(MUX_MODE0, flags)
+#define AM33XX_GPMC_ADVN_ALE_TIMER4(flags)				AM33XX_PIN_GPMC_ADVN_ALE(MUX_MODE2, flags)
+#define AM33XX_GPMC_ADVN_ALE_GPIO2_2(flags)				AM33XX_PIN_GPMC_ADVN_ALE(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_BEN0_CLE(flags)					AM33XX_PIN_GPMC_BEN0_CLE(MUX_MODE0, flags)
+#define AM33XX_GPMC_BEN0_CLE_TIMER5(flags)				AM33XX_PIN_GPMC_BEN0_CLE(MUX_MODE2, flags)
+#define AM33XX_GPMC_BEN0_CLE_GPIO2_5(flags)				AM33XX_PIN_GPMC_BEN0_CLE(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_BEN1(flags)						AM33XX_PIN_GPMC_BEN1(MUX_MODE0, flags)
+#define AM33XX_GPMC_BEN1_GMII2_COL(flags)				AM33XX_PIN_GPMC_BEN1(MUX_MODE1, flags)
+#define AM33XX_GPMC_BEN1_GPMC_CSN6(flags)				AM33XX_PIN_GPMC_BEN1(MUX_MODE2, flags)
+#define AM33XX_GPMC_BEN1_MMC2_DAT3(flags)				AM33XX_PIN_GPMC_BEN1(MUX_MODE3, flags)
+#define AM33XX_GPMC_BEN1_GPMC_DIR(flags)				AM33XX_PIN_GPMC_BEN1(MUX_MODE4, flags)
+#define AM33XX_GPMC_BEN1_PR1_MII1_RXLINK(flags)				AM33XX_PIN_GPMC_BEN1(MUX_MODE5, flags)
+#define AM33XX_GPMC_BEN1_MCASP0_ACLKR(flags)				AM33XX_PIN_GPMC_BEN1(MUX_MODE6, flags)
+#define AM33XX_GPMC_BEN1_GPIO1_28(flags)				AM33XX_PIN_GPMC_BEN1(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_CLK(flags)						AM33XX_PIN_GPMC_CLK(MUX_MODE0, flags)
+#define AM33XX_GPMC_CLK_LCD_MEMORY_CLK(flags)				AM33XX_PIN_GPMC_CLK(MUX_MODE1, flags)
+#define AM33XX_GPMC_CLK_GPMC_WAIT1(flags)				AM33XX_PIN_GPMC_CLK(MUX_MODE2, flags)
+#define AM33XX_GPMC_CLK_MMC2_CLK(flags)					AM33XX_PIN_GPMC_CLK(MUX_MODE3, flags)
+#define AM33XX_GPMC_CLK_PR1_MII1_CRS(flags)				AM33XX_PIN_GPMC_CLK(MUX_MODE4, flags)
+#define AM33XX_GPMC_CLK_PR1_MDIO_MDCLK(flags)				AM33XX_PIN_GPMC_CLK(MUX_MODE5, flags)
+#define AM33XX_GPMC_CLK_MCASP0_FSR(flags)				AM33XX_PIN_GPMC_CLK(MUX_MODE6, flags)
+#define AM33XX_GPMC_CLK_GPIO2_1(flags)					AM33XX_PIN_GPMC_CLK(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_CSN0(flags)						AM33XX_PIN_GPMC_CSN0(MUX_MODE0, flags)
+#define AM33XX_GPMC_CSN0_GPIO1_29(flags)				AM33XX_PIN_GPMC_CSN0(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_CSN1(flags)						AM33XX_PIN_GPMC_CSN1(MUX_MODE0, flags)
+#define AM33XX_GPMC_CSN1_GPMC_CLK(flags)				AM33XX_PIN_GPMC_CSN1(MUX_MODE1, flags)
+#define AM33XX_GPMC_CSN1_MMC1_CLK(flags)				AM33XX_PIN_GPMC_CSN1(MUX_MODE2, flags)
+#define AM33XX_GPMC_CSN1_PR1_EDIO_DATA_IN6(flags)			AM33XX_PIN_GPMC_CSN1(MUX_MODE3, flags)
+#define AM33XX_GPMC_CSN1_PR1_EDIO_DATA_OUT6(flags)			AM33XX_PIN_GPMC_CSN1(MUX_MODE4, flags)
+#define AM33XX_GPMC_CSN1_PR1_PRU1_PRU_R30_12(flags)			AM33XX_PIN_GPMC_CSN1(MUX_MODE5, flags)
+#define AM33XX_GPMC_CSN1_PR1_PRU1_PRU_R31_12(flags)			AM33XX_PIN_GPMC_CSN1(MUX_MODE6, flags)
+#define AM33XX_GPMC_CSN1_GPIO1_30(flags)				AM33XX_PIN_GPMC_CSN1(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_CSN2(flags)						AM33XX_PIN_GPMC_CSN2(MUX_MODE0, flags)
+#define AM33XX_GPMC_CSN2_GPMC_BE1N(flags)				AM33XX_PIN_GPMC_CSN2(MUX_MODE1, flags)
+#define AM33XX_GPMC_CSN2_MMC1_CMD(flags)				AM33XX_PIN_GPMC_CSN2(MUX_MODE2, flags)
+#define AM33XX_GPMC_CSN2_PR1_EDIO_DATA_IN7(flags)			AM33XX_PIN_GPMC_CSN2(MUX_MODE3, flags)
+#define AM33XX_GPMC_CSN2_PR1_EDIO_DATA_OUT7(flags)			AM33XX_PIN_GPMC_CSN2(MUX_MODE4, flags)
+#define AM33XX_GPMC_CSN2_PR1_PRU1_PRU_R30_13(flags)			AM33XX_PIN_GPMC_CSN2(MUX_MODE5, flags)
+#define AM33XX_GPMC_CSN2_PR1_PRU1_PRU_R31_13(flags)			AM33XX_PIN_GPMC_CSN2(MUX_MODE6, flags)
+#define AM33XX_GPMC_CSN2_GPIO1_31(flags)				AM33XX_PIN_GPMC_CSN2(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_CSN3(flags)						AM33XX_PIN_GPMC_CSN3(MUX_MODE0, flags)
+#define AM33XX_GPMC_CSN3_GPMC_CSN3_GPMC_A3(flags)			AM33XX_PIN_GPMC_CSN3(MUX_MODE1, flags)
+#define AM33XX_GPMC_CSN3_RMII2_CRS_DV(flags)				AM33XX_PIN_GPMC_CSN3(MUX_MODE2, flags)
+#define AM33XX_GPMC_CSN3_MMC2_CMD(flags)				AM33XX_PIN_GPMC_CSN3(MUX_MODE3, flags)
+#define AM33XX_GPMC_CSN3_PR1_MII0_CRS(flags)				AM33XX_PIN_GPMC_CSN3(MUX_MODE4, flags)
+#define AM33XX_GPMC_CSN3_PR1_MDIO_DATA(flags)				AM33XX_PIN_GPMC_CSN3(MUX_MODE5, flags)
+#define AM33XX_GPMC_CSN3_EMU4(flags)					AM33XX_PIN_GPMC_CSN3(MUX_MODE6, flags)
+#define AM33XX_GPMC_CSN3_GPIO2_0(flags)					AM33XX_PIN_GPMC_CSN3(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_OEN_REN(flags)					AM33XX_PIN_GPMC_OEN_REN(MUX_MODE0, flags)
+#define AM33XX_GPMC_OEN_REN_TIMER7(flags)				AM33XX_PIN_GPMC_OEN_REN(MUX_MODE2, flags)
+#define AM33XX_GPMC_OEN_REN_GPIO2_3(flags)				AM33XX_PIN_GPMC_OEN_REN(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_WAIT0(flags)					AM33XX_PIN_GPMC_WAIT0(MUX_MODE0, flags)
+#define AM33XX_GPMC_WAIT0_GMII2_CRS(flags)				AM33XX_PIN_GPMC_WAIT0(MUX_MODE1, flags)
+#define AM33XX_GPMC_WAIT0_GPMC_CSN4(flags)				AM33XX_PIN_GPMC_WAIT0(MUX_MODE2, flags)
+#define AM33XX_GPMC_WAIT0_RMII2_CRS_DV(flags)				AM33XX_PIN_GPMC_WAIT0(MUX_MODE3, flags)
+#define AM33XX_GPMC_WAIT0_MMC1_SDCD(flags)				AM33XX_PIN_GPMC_WAIT0(MUX_MODE4, flags)
+#define AM33XX_GPMC_WAIT0_PR1_MII1_COL(flags)				AM33XX_PIN_GPMC_WAIT0(MUX_MODE5, flags)
+#define AM33XX_GPMC_WAIT0_UART4_RXD(flags)				AM33XX_PIN_GPMC_WAIT0(MUX_MODE6, flags)
+#define AM33XX_GPMC_WAIT0_GPIO0_30(flags)				AM33XX_PIN_GPMC_WAIT0(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_WEN(flags)						AM33XX_PIN_GPMC_WEN(MUX_MODE0, flags)
+#define AM33XX_GPMC_WEN_TIMER6(flags)					AM33XX_PIN_GPMC_WEN(MUX_MODE2, flags)
+#define AM33XX_GPMC_WEN_GPIO2_4(flags)					AM33XX_PIN_GPMC_WEN(MUX_MODE7, flags)
+
+#define AM33XX_GPMC_WPN(flags)						AM33XX_PIN_GPMC_WPN(MUX_MODE0, flags)
+#define AM33XX_GPMC_WPN_GMII2_RXERR(flags)				AM33XX_PIN_GPMC_WPN(MUX_MODE1, flags)
+#define AM33XX_GPMC_WPN_GPMC_CSN5(flags)				AM33XX_PIN_GPMC_WPN(MUX_MODE2, flags)
+#define AM33XX_GPMC_WPN_RMII2_RXERR(flags)				AM33XX_PIN_GPMC_WPN(MUX_MODE3, flags)
+#define AM33XX_GPMC_WPN_MMC2_SDCD(flags)				AM33XX_PIN_GPMC_WPN(MUX_MODE4, flags)
+#define AM33XX_GPMC_WPN_PR1_MII1_TXEN(flags)				AM33XX_PIN_GPMC_WPN(MUX_MODE5, flags)
+#define AM33XX_GPMC_WPN_UART4_TXD(flags)				AM33XX_PIN_GPMC_WPN(MUX_MODE6, flags)
+#define AM33XX_GPMC_WPN_GPIO0_31(flags)					AM33XX_PIN_GPMC_WPN(MUX_MODE7, flags)
+
+#define AM33XX_I2C0_SDA(flags)						AM33XX_PIN_I2C0_SDA(MUX_MODE0, flags)
+#define AM33XX_I2C0_SDA_TIMER4(flags)					AM33XX_PIN_I2C0_SDA(MUX_MODE1, flags)
+#define AM33XX_I2C0_SDA_UART2_CTSN(flags)				AM33XX_PIN_I2C0_SDA(MUX_MODE2, flags)
+#define AM33XX_I2C0_SDA_ECAP2_IN_PWM2_OUT(flags)			AM33XX_PIN_I2C0_SDA(MUX_MODE3, flags)
+#define AM33XX_I2C0_SDA_GPIO3_5(flags)					AM33XX_PIN_I2C0_SDA(MUX_MODE7, flags)
+
+#define AM33XX_I2C0_SCL(flags)						AM33XX_PIN_I2C0_SCL(MUX_MODE0, flags)
+#define AM33XX_I2C0_SCL_TIMER7(flags)					AM33XX_PIN_I2C0_SCL(MUX_MODE1, flags)
+#define AM33XX_I2C0_SCL_UART2_RTSN(flags)				AM33XX_PIN_I2C0_SCL(MUX_MODE2, flags)
+#define AM33XX_I2C0_SCL_ECAP1_IN_PWM1_OUT(flags)			AM33XX_PIN_I2C0_SCL(MUX_MODE3, flags)
+#define AM33XX_I2C0_SCL_GPIO3_6(flags)					AM33XX_PIN_I2C0_SCL(MUX_MODE7, flags)
+
+#define AM33XX_LCD_AC_BIAS_EN(flags)					AM33XX_PIN_LCD_AC_BIAS_EN(MUX_MODE0, flags)
+#define AM33XX_LCD_AC_BIAS_EN_GPMC_A11(flags)				AM33XX_PIN_LCD_AC_BIAS_EN(MUX_MODE1, flags)
+#define AM33XX_LCD_AC_BIAS_EN_PR1_MII1_CRS(flags)			AM33XX_PIN_LCD_AC_BIAS_EN(MUX_MODE2, flags)
+#define AM33XX_LCD_AC_BIAS_EN_PR1_EDIO_DATA_IN5(flags)			AM33XX_PIN_LCD_AC_BIAS_EN(MUX_MODE3, flags)
+#define AM33XX_LCD_AC_BIAS_EN_PR1_EDIO_DATA_OUT5(flags)			AM33XX_PIN_LCD_AC_BIAS_EN(MUX_MODE4, flags)
+#define AM33XX_LCD_AC_BIAS_EN_PR1_PRU1_PRU_R30_11(flags)		AM33XX_PIN_LCD_AC_BIAS_EN(MUX_MODE5, flags)
+#define AM33XX_LCD_AC_BIAS_EN_PR1_PRU1_PRU_R31_11(flags)		AM33XX_PIN_LCD_AC_BIAS_EN(MUX_MODE6, flags)
+#define AM33XX_LCD_AC_BIAS_EN_GPIO2_25(flags)				AM33XX_PIN_LCD_AC_BIAS_EN(MUX_MODE7, flags)
+
+#define AM33XX_LCD_DATA0(flags)						AM33XX_PIN_LCD_DATA0(MUX_MODE0, flags)
+#define AM33XX_LCD_DATA0_GPMC_A0(flags)					AM33XX_PIN_LCD_DATA0(MUX_MODE1, flags)
+#define AM33XX_LCD_DATA0_PR1_MII_MT0_CLK(flags)				AM33XX_PIN_LCD_DATA0(MUX_MODE2, flags)
+#define AM33XX_LCD_DATA0_EHRPWM2A(flags)				AM33XX_PIN_LCD_DATA0(MUX_MODE3, flags)
+#define AM33XX_LCD_DATA0_PR1_PRU1_PRU_R30_0(flags)			AM33XX_PIN_LCD_DATA0(MUX_MODE5, flags)
+#define AM33XX_LCD_DATA0_PR1_PRU1_PRU_R31_0(flags)			AM33XX_PIN_LCD_DATA0(MUX_MODE6, flags)
+#define AM33XX_LCD_DATA0_GPIO2_6(flags)					AM33XX_PIN_LCD_DATA0(MUX_MODE7, flags)
+
+#define AM33XX_LCD_DATA1(flags)						AM33XX_PIN_LCD_DATA1(MUX_MODE0, flags)
+#define AM33XX_LCD_DATA1_GPMC_A1(flags)					AM33XX_PIN_LCD_DATA1(MUX_MODE1, flags)
+#define AM33XX_LCD_DATA1_PR1_MII0_TXEN(flags)				AM33XX_PIN_LCD_DATA1(MUX_MODE2, flags)
+#define AM33XX_LCD_DATA1_EHRPWM2B(flags)				AM33XX_PIN_LCD_DATA1(MUX_MODE3, flags)
+#define AM33XX_LCD_DATA1_PR1_PRU1_PRU_R30_1(flags)			AM33XX_PIN_LCD_DATA1(MUX_MODE5, flags)
+#define AM33XX_LCD_DATA1_PR1_PRU1_PRU_R31_1(flags)			AM33XX_PIN_LCD_DATA1(MUX_MODE6, flags)
+#define AM33XX_LCD_DATA1_GPIO2_7(flags)					AM33XX_PIN_LCD_DATA1(MUX_MODE7, flags)
+
+#define AM33XX_LCD_DATA2(flags)						AM33XX_PIN_LCD_DATA2(MUX_MODE0, flags)
+#define AM33XX_LCD_DATA2_GPMC_A2(flags)					AM33XX_PIN_LCD_DATA2(MUX_MODE1, flags)
+#define AM33XX_LCD_DATA2_PR1_MII0_TXD3(flags)				AM33XX_PIN_LCD_DATA2(MUX_MODE2, flags)
+#define AM33XX_LCD_DATA2_EHRPWM2_TRIPZONE_INPUT(flags)			AM33XX_PIN_LCD_DATA2(MUX_MODE3, flags)
+#define AM33XX_LCD_DATA2_PR1_PRU1_PRU_R30_2(flags)			AM33XX_PIN_LCD_DATA2(MUX_MODE5, flags)
+#define AM33XX_LCD_DATA2_PR1_PRU1_PRU_R31_2(flags)			AM33XX_PIN_LCD_DATA2(MUX_MODE6, flags)
+#define AM33XX_LCD_DATA2_GPIO2_8(flags)					AM33XX_PIN_LCD_DATA2(MUX_MODE7, flags)
+
+#define AM33XX_LCD_DATA3(flags)						AM33XX_PIN_LCD_DATA3(MUX_MODE0, flags)
+#define AM33XX_LCD_DATA3_GPMC_A3(flags)					AM33XX_PIN_LCD_DATA3(MUX_MODE1, flags)
+#define AM33XX_LCD_DATA3_PR1_MII0_TXD2(flags)				AM33XX_PIN_LCD_DATA3(MUX_MODE2, flags)
+#define AM33XX_LCD_DATA3_LCD_DATA3_EHRPWM0_SYNCO(flags)			AM33XX_PIN_LCD_DATA3(MUX_MODE3, flags)
+#define AM33XX_LCD_DATA3_PR1_PRU1_PRU_R30_3(flags)			AM33XX_PIN_LCD_DATA3(MUX_MODE5, flags)
+#define AM33XX_LCD_DATA3_PR1_PRU1_PRU_R31_3(flags)			AM33XX_PIN_LCD_DATA3(MUX_MODE6, flags)
+#define AM33XX_LCD_DATA3_GPIO2_9(flags)					AM33XX_PIN_LCD_DATA3(MUX_MODE7, flags)
+
+#define AM33XX_LCD_DATA4(flags)						AM33XX_PIN_LCD_DATA4(MUX_MODE0, flags)
+#define AM33XX_LCD_DATA4_GPMC_A4(flags)					AM33XX_PIN_LCD_DATA4(MUX_MODE1, flags)
+#define AM33XX_LCD_DATA4_PR1_MII0_TXD1(flags)				AM33XX_PIN_LCD_DATA4(MUX_MODE2, flags)
+#define AM33XX_LCD_DATA4_EQEP2A_IN(flags)				AM33XX_PIN_LCD_DATA4(MUX_MODE3, flags)
+#define AM33XX_LCD_DATA4_PR1_PRU1_PRU_R30_4(flags)			AM33XX_PIN_LCD_DATA4(MUX_MODE5, flags)
+#define AM33XX_LCD_DATA4_PR1_PRU1_PRU_R31_4(flags)			AM33XX_PIN_LCD_DATA4(MUX_MODE6, flags)
+#define AM33XX_LCD_DATA4_GPIO2_10(flags)				AM33XX_PIN_LCD_DATA4(MUX_MODE7, flags)
+
+#define AM33XX_LCD_DATA5(flags)						AM33XX_PIN_LCD_DATA5(MUX_MODE0, flags)
+#define AM33XX_LCD_DATA5_GPMC_A5(flags)					AM33XX_PIN_LCD_DATA5(MUX_MODE1, flags)
+#define AM33XX_LCD_DATA5_PR1_MII0_TXD0(flags)				AM33XX_PIN_LCD_DATA5(MUX_MODE2, flags)
+#define AM33XX_LCD_DATA5_EQEP2B_IN(flags)				AM33XX_PIN_LCD_DATA5(MUX_MODE3, flags)
+#define AM33XX_LCD_DATA5_PR1_PRU1_PRU_R30_5(flags)			AM33XX_PIN_LCD_DATA5(MUX_MODE5, flags)
+#define AM33XX_LCD_DATA5_PR1_PRU1_PRU_R31_5(flags)			AM33XX_PIN_LCD_DATA5(MUX_MODE6, flags)
+#define AM33XX_LCD_DATA5_GPIO2_11(flags)				AM33XX_PIN_LCD_DATA5(MUX_MODE7, flags)
+
+#define AM33XX_LCD_DATA6(flags)						AM33XX_PIN_LCD_DATA6(MUX_MODE0, flags)
+#define AM33XX_LCD_DATA6_GPMC_A6(flags)					AM33XX_PIN_LCD_DATA6(MUX_MODE1, flags)
+#define AM33XX_LCD_DATA6_PR1_EDIO_DATA_IN6(flags)			AM33XX_PIN_LCD_DATA6(MUX_MODE2, flags)
+#define AM33XX_LCD_DATA6_EQEP2_INDEX(flags)				AM33XX_PIN_LCD_DATA6(MUX_MODE3, flags)
+#define AM33XX_LCD_DATA6_PR1_EDIO_DATA_OUT6(flags)			AM33XX_PIN_LCD_DATA6(MUX_MODE4, flags)
+#define AM33XX_LCD_DATA6_PR1_PRU1_PRU_R30_6(flags)			AM33XX_PIN_LCD_DATA6(MUX_MODE5, flags)
+#define AM33XX_LCD_DATA6_PR1_PRU1_PRU_R31_6(flags)			AM33XX_PIN_LCD_DATA6(MUX_MODE6, flags)
+#define AM33XX_LCD_DATA6_GPIO2_12(flags)				AM33XX_PIN_LCD_DATA6(MUX_MODE7, flags)
+
+#define AM33XX_LCD_DATA7(flags)						AM33XX_PIN_LCD_DATA7(MUX_MODE0, flags)
+#define AM33XX_LCD_DATA7_GPMC_A7(flags)					AM33XX_PIN_LCD_DATA7(MUX_MODE1, flags)
+#define AM33XX_LCD_DATA7_PR1_EDIO_DATA_IN7(flags)			AM33XX_PIN_LCD_DATA7(MUX_MODE2, flags)
+#define AM33XX_LCD_DATA7_EQEP2_STROBE(flags)				AM33XX_PIN_LCD_DATA7(MUX_MODE3, flags)
+#define AM33XX_LCD_DATA7_PR1_EDIO_DATA_OUT7(flags)			AM33XX_PIN_LCD_DATA7(MUX_MODE4, flags)
+#define AM33XX_LCD_DATA7_PR1_PRU1_PRU_R30_7(flags)			AM33XX_PIN_LCD_DATA7(MUX_MODE5, flags)
+#define AM33XX_LCD_DATA7_PR1_PRU1_PRU_R31_7(flags)			AM33XX_PIN_LCD_DATA7(MUX_MODE6, flags)
+#define AM33XX_LCD_DATA7_GPIO2_13(flags)				AM33XX_PIN_LCD_DATA7(MUX_MODE7, flags)
+
+#define AM33XX_LCD_DATA8(flags)						AM33XX_PIN_LCD_DATA8(MUX_MODE0, flags)
+#define AM33XX_LCD_DATA8_GPMC_A12(flags)				AM33XX_PIN_LCD_DATA8(MUX_MODE1, flags)
+#define AM33XX_LCD_DATA8_EHRPWM1_TRIPZONE_INPUT(flags)			AM33XX_PIN_LCD_DATA8(MUX_MODE2, flags)
+#define AM33XX_LCD_DATA8_MCASP0_ACLKX(flags)				AM33XX_PIN_LCD_DATA8(MUX_MODE3, flags)
+#define AM33XX_LCD_DATA8_UART5_TXD(flags)				AM33XX_PIN_LCD_DATA8(MUX_MODE4, flags)
+#define AM33XX_LCD_DATA8_PR1_MII0_RXD3(flags)				AM33XX_PIN_LCD_DATA8(MUX_MODE5, flags)
+#define AM33XX_LCD_DATA8_UART2_CTSN(flags)				AM33XX_PIN_LCD_DATA8(MUX_MODE6, flags)
+#define AM33XX_LCD_DATA8_GPIO2_14(flags)				AM33XX_PIN_LCD_DATA8(MUX_MODE7, flags)
+
+#define AM33XX_LCD_DATA9(flags)						AM33XX_PIN_LCD_DATA9(MUX_MODE0, flags)
+#define AM33XX_LCD_DATA9_GPMC_A13(flags)				AM33XX_PIN_LCD_DATA9(MUX_MODE1, flags)
+#define AM33XX_LCD_DATA9_EHRPWM0_SYNCO(flags)				AM33XX_PIN_LCD_DATA9(MUX_MODE2, flags)
+#define AM33XX_LCD_DATA9_MCASP0_FSX(flags)				AM33XX_PIN_LCD_DATA9(MUX_MODE3, flags)
+#define AM33XX_LCD_DATA9_UART5_RXD(flags)				AM33XX_PIN_LCD_DATA9(MUX_MODE4, flags)
+#define AM33XX_LCD_DATA9_PR1_MII0_RXD2(flags)				AM33XX_PIN_LCD_DATA9(MUX_MODE5, flags)
+#define AM33XX_LCD_DATA9_UART2_RTSN(flags)				AM33XX_PIN_LCD_DATA9(MUX_MODE6, flags)
+#define AM33XX_LCD_DATA9_GPIO2_15(flags)				AM33XX_PIN_LCD_DATA9(MUX_MODE7, flags)
+
+#define AM33XX_LCD_DATA10(flags)					AM33XX_PIN_LCD_DATA10(MUX_MODE0, flags)
+#define AM33XX_LCD_DATA10_GPMC_A14(flags)				AM33XX_PIN_LCD_DATA10(MUX_MODE1, flags)
+#define AM33XX_LCD_DATA10_EHRPWM1A(flags)				AM33XX_PIN_LCD_DATA10(MUX_MODE2, flags)
+#define AM33XX_LCD_DATA10_MCASP0_AXR0(flags)				AM33XX_PIN_LCD_DATA10(MUX_MODE3, flags)
+#define AM33XX_LCD_DATA10_PR1_MII0_RXD1(flags)				AM33XX_PIN_LCD_DATA10(MUX_MODE5, flags)
+#define AM33XX_LCD_DATA10_UART3_CTSN(flags)				AM33XX_PIN_LCD_DATA10(MUX_MODE6, flags)
+#define AM33XX_LCD_DATA10_GPIO2_16(flags)				AM33XX_PIN_LCD_DATA10(MUX_MODE7, flags)
+
+#define AM33XX_LCD_DATA11(flags)					AM33XX_PIN_LCD_DATA11(MUX_MODE0, flags)
+#define AM33XX_LCD_DATA11_GPMC_A15(flags)				AM33XX_PIN_LCD_DATA11(MUX_MODE1, flags)
+#define AM33XX_LCD_DATA11_EHRPWM1B(flags)				AM33XX_PIN_LCD_DATA11(MUX_MODE2, flags)
+#define AM33XX_LCD_DATA11_MCASP0_AHCLKR(flags)				AM33XX_PIN_LCD_DATA11(MUX_MODE3, flags)
+#define AM33XX_LCD_DATA11_MCASP0_AXR2(flags)				AM33XX_PIN_LCD_DATA11(MUX_MODE4, flags)
+#define AM33XX_LCD_DATA11_PR1_MII0_RXD0(flags)				AM33XX_PIN_LCD_DATA11(MUX_MODE5, flags)
+#define AM33XX_LCD_DATA11_UART3_RTSN(flags)				AM33XX_PIN_LCD_DATA11(MUX_MODE6, flags)
+#define AM33XX_LCD_DATA11_GPIO2_17(flags)				AM33XX_PIN_LCD_DATA11(MUX_MODE7, flags)
+
+#define AM33XX_LCD_DATA12_LCD_DATA12(flags)				AM33XX_PIN_LCD_DATA12(MUX_MODE0, flags)
+#define AM33XX_LCD_DATA12_GPMC_A16(flags)				AM33XX_PIN_LCD_DATA12(MUX_MODE1, flags)
+#define AM33XX_LCD_DATA12_EQEP1A_IN(flags)				AM33XX_PIN_LCD_DATA12(MUX_MODE2, flags)
+#define AM33XX_LCD_DATA12_MCASP0_ACLKR(flags)				AM33XX_PIN_LCD_DATA12(MUX_MODE3, flags)
+#define AM33XX_LCD_DATA12_MCASP0_AXR2(flags)				AM33XX_PIN_LCD_DATA12(MUX_MODE4, flags)
+#define AM33XX_LCD_DATA12_PR1_MII0_RXLINK(flags)			AM33XX_PIN_LCD_DATA12(MUX_MODE5, flags)
+#define AM33XX_LCD_DATA12_UART4_CTSN(flags)				AM33XX_PIN_LCD_DATA12(MUX_MODE6, flags)
+#define AM33XX_LCD_DATA12_GPIO0_8(flags)				AM33XX_PIN_LCD_DATA12(MUX_MODE7, flags)
+
+#define AM33XX_LCD_DATA13_LCD_DATA13(flags)				AM33XX_PIN_LCD_DATA13(MUX_MODE0, flags)
+#define AM33XX_LCD_DATA13_GPMC_A17(flags)				AM33XX_PIN_LCD_DATA13(MUX_MODE1, flags)
+#define AM33XX_LCD_DATA13_EQEP1B_IN(flags)				AM33XX_PIN_LCD_DATA13(MUX_MODE2, flags)
+#define AM33XX_LCD_DATA13_MCASP0_FSR(flags)				AM33XX_PIN_LCD_DATA13(MUX_MODE3, flags)
+#define AM33XX_LCD_DATA13_MCASP0_AXR3(flags)				AM33XX_PIN_LCD_DATA13(MUX_MODE4, flags)
+#define AM33XX_LCD_DATA13_PR1_MII0_RXER(flags)				AM33XX_PIN_LCD_DATA13(MUX_MODE5, flags)
+#define AM33XX_LCD_DATA13_UART4_RTSN(flags)				AM33XX_PIN_LCD_DATA13(MUX_MODE6, flags)
+#define AM33XX_LCD_DATA13_GPIO0_9(flags)				AM33XX_PIN_LCD_DATA13(MUX_MODE7, flags)
+
+#define AM33XX_LCD_DATA14(flags)					AM33XX_PIN_LCD_DATA14(MUX_MODE0, flags)
+#define AM33XX_LCD_DATA14_GPMC_A18(flags)				AM33XX_PIN_LCD_DATA14(MUX_MODE1, flags)
+#define AM33XX_LCD_DATA14_EQEP1_INDEX(flags)				AM33XX_PIN_LCD_DATA14(MUX_MODE2, flags)
+#define AM33XX_LCD_DATA14_MCASP0_AXR1(flags)				AM33XX_PIN_LCD_DATA14(MUX_MODE3, flags)
+#define AM33XX_LCD_DATA14_UART5_RXD(flags)				AM33XX_PIN_LCD_DATA14(MUX_MODE4, flags)
+#define AM33XX_LCD_DATA14_PR1_MII_MR0_CLK(flags)			AM33XX_PIN_LCD_DATA14(MUX_MODE5, flags)
+#define AM33XX_LCD_DATA14_UART5_CTSN(flags)				AM33XX_PIN_LCD_DATA14(MUX_MODE6, flags)
+#define AM33XX_LCD_DATA14_GPIO0_10(flags)				AM33XX_PIN_LCD_DATA14(MUX_MODE7, flags)
+
+#define AM33XX_LCD_DATA15(flags)					AM33XX_PIN_LCD_DATA15(MUX_MODE0, flags)
+#define AM33XX_LCD_DATA15_GPMC_A19(flags)				AM33XX_PIN_LCD_DATA15(MUX_MODE1, flags)
+#define AM33XX_LCD_DATA15_EQEP1_STROBE(flags)				AM33XX_PIN_LCD_DATA15(MUX_MODE2, flags)
+#define AM33XX_LCD_DATA15_MCASP0_AHCLKX(flags)				AM33XX_PIN_LCD_DATA15(MUX_MODE3, flags)
+#define AM33XX_LCD_DATA15_MCASP0_AXR3(flags)				AM33XX_PIN_LCD_DATA15(MUX_MODE4, flags)
+#define AM33XX_LCD_DATA15_PR1_MII0_RXDV(flags)				AM33XX_PIN_LCD_DATA15(MUX_MODE5, flags)
+#define AM33XX_LCD_DATA15_UART5_RTSN(flags)				AM33XX_PIN_LCD_DATA15(MUX_MODE6, flags)
+#define AM33XX_LCD_DATA15_GPIO0_11(flags)				AM33XX_PIN_LCD_DATA15(MUX_MODE7, flags)
+
+#define AM33XX_LCD_HSYNC(flags)						AM33XX_PIN_LCD_HSYNC(MUX_MODE0, flags)
+#define AM33XX_LCD_HSYNC_GPMC_A9(flags)					AM33XX_PIN_LCD_HSYNC(MUX_MODE1, flags)
+#define AM33XX_LCD_HSYNC_GPMC_A2(flags)					AM33XX_PIN_LCD_HSYNC(MUX_MODE2, flags)
+#define AM33XX_LCD_HSYNC_PR1_EDIO_DATA_IN3(flags)			AM33XX_PIN_LCD_HSYNC(MUX_MODE3, flags)
+#define AM33XX_LCD_HSYNC_PR1_EDIO_DATA_OUT3(flags)			AM33XX_PIN_LCD_HSYNC(MUX_MODE4, flags)
+#define AM33XX_LCD_HSYNC_PR1_PRU1_PRU_R30_9(flags)			AM33XX_PIN_LCD_HSYNC(MUX_MODE5, flags)
+#define AM33XX_LCD_HSYNC_PR1_PRU1_PRU_R31_9(flags)			AM33XX_PIN_LCD_HSYNC(MUX_MODE6, flags)
+#define AM33XX_LCD_HSYNC_GPIO2_23(flags)				AM33XX_PIN_LCD_HSYNC(MUX_MODE7, flags)
+
+#define AM33XX_LCD_PCLK(flags)						AM33XX_PIN_LCD_PCLK(MUX_MODE0, flags)
+#define AM33XX_LCD_PCLK_GPMC_A10(flags)					AM33XX_PIN_LCD_PCLK(MUX_MODE1, flags)
+#define AM33XX_LCD_PCLK_PR1_MII0_CRS(flags)				AM33XX_PIN_LCD_PCLK(MUX_MODE2, flags)
+#define AM33XX_LCD_PCLK_PR1_EDIO_DATA_IN4(flags)			AM33XX_PIN_LCD_PCLK(MUX_MODE3, flags)
+#define AM33XX_LCD_PCLK_PR1_EDIO_DATA_OUT4(flags)			AM33XX_PIN_LCD_PCLK(MUX_MODE4, flags)
+#define AM33XX_LCD_PCLK_PR1_PRU1_PRU_R30_10(flags)			AM33XX_PIN_LCD_PCLK(MUX_MODE5, flags)
+#define AM33XX_LCD_PCLK_PR1_PRU1_PRU_R31_10(flags)			AM33XX_PIN_LCD_PCLK(MUX_MODE6, flags)
+#define AM33XX_LCD_PCLK_GPIO2_24(flags)					AM33XX_PIN_LCD_PCLK(MUX_MODE7, flags)
+
+#define AM33XXLCD_VSYNC(flags)						AM33XX_PIN_LCD_VSYNC(MUX_MODE0, flags)
+#define AM33XX_LCD_VSYNC_GPMC_A8(flags)					AM33XX_PIN_LCD_VSYNC(MUX_MODE1, flags)
+#define AM33XX_LCD_VSYNC_GPMC_A1(flags)					AM33XX_PIN_LCD_VSYNC(MUX_MODE2, flags)
+#define AM33XX_LCD_VSYNC_PR1_EDIO_DATA_IN2(flags)			AM33XX_PIN_LCD_VSYNC(MUX_MODE3, flags)
+#define AM33XX_LCD_VSYNC_PR1_EDIO_DATA_OUT2(flags)			AM33XX_PIN_LCD_VSYNC(MUX_MODE4, flags)
+#define AM33XX_LCD_VSYNC_PR1_PRU1_PRU_R30_8(flags)			AM33XX_PIN_LCD_VSYNC(MUX_MODE5, flags)
+#define AM33XX_LCD_VSYNC_PR1_PRU1_PRU_R31_8(flags)			AM33XX_PIN_LCD_VSYNC(MUX_MODE6, flags)
+#define AM33XX_LCD_VSYNC_GPIO2_22(flags)				AM33XX_PIN_LCD_VSYNC(MUX_MODE7, flags)
+
+#define AM33XX_MCASP0_FSX(flags)					AM33XX_PIN_MCASP0_FSX(MUX_MODE0, flags)
+#define AM33XX_MCASP0_FSX_EHRPWM0B(flags)				AM33XX_PIN_MCASP0_FSX(MUX_MODE1, flags)
+#define AM33XX_MCASP0_FSX_SPI1_D0(flags)				AM33XX_PIN_MCASP0_FSX(MUX_MODE3, flags)
+#define AM33XX_MCASP0_FSX_MMC1_SDCD(flags)				AM33XX_PIN_MCASP0_FSX(MUX_MODE4, flags)
+#define AM33XX_MCASP0_FSX_PR1_PRU0_PRU_R30_1(flags)			AM33XX_PIN_MCASP0_FSX(MUX_MODE5, flags)
+#define AM33XX_MCASP0_FSX_PR1_PRU0_PRU_R31_1(flags)			AM33XX_PIN_MCASP0_FSX(MUX_MODE6, flags)
+#define AM33XX_MCASP0_FSX_GPIO3_15(flags)				AM33XX_PIN_MCASP0_FSX(MUX_MODE7, flags)
+
+#define AM33XX_MCASP0_ACLKR(flags)					AM33XX_PIN_MCASP0_ACLKR(MUX_MODE0, flags)
+#define AM33XX_MCASP0_ACLKR_EQEP0A_IN(flags)				AM33XX_PIN_MCASP0_ACLKR(MUX_MODE1, flags)
+#define AM33XX_MCASP0_ACLKR_MCASP0_AXR2(flags)				AM33XX_PIN_MCASP0_ACLKR(MUX_MODE2, flags)
+#define AM33XX_MCASP0_ACLKR_MCASP1_ACLKX(flags)				AM33XX_PIN_MCASP0_ACLKR(MUX_MODE3, flags)
+#define AM33XX_MCASP0_ACLKR_MMC0_SDWP(flags)				AM33XX_PIN_MCASP0_ACLKR(MUX_MODE4, flags)
+#define AM33XX_MCASP0_ACLKR_PR1_PRU0_PRU_R30_4(flags)			AM33XX_PIN_MCASP0_ACLKR(MUX_MODE5, flags)
+#define AM33XX_MCASP0_ACLKR_PR1_PRU0_PRU_R31_4(flags)			AM33XX_PIN_MCASP0_ACLKR(MUX_MODE6, flags)
+#define AM33XX_MCASP0_ACLKR_GPIO3_18(flags)				AM33XX_PIN_MCASP0_ACLKR(MUX_MODE7, flags)
+
+#define AM33XXMCASP0_AHCLKR(flags)					AM33XX_PIN_MCASP0_AHCLKR(MUX_MODE0, flags)
+#define AM33XXMCASP0_AHCLKR_EHRPWM0_SYNCI(flags)			AM33XX_PIN_MCASP0_AHCLKR(MUX_MODE1, flags)
+#define AM33XX_MCASP0_AHCLKR_MCASP0_AXR2(flags)				AM33XX_PIN_MCASP0_AHCLKR(MUX_MODE2, flags)
+#define AM33XX_MCASP0_AHCLKR_SPI1_CS0(flags)				AM33XX_PIN_MCASP0_AHCLKR(MUX_MODE3, flags)
+#define AM33XX_MCASP0_AHCLKR_ECAP2_IN_PWM2_OUT(flags)			AM33XX_PIN_MCASP0_AHCLKR(MUX_MODE4, flags)
+#define AM33XX_MCASP0_AHCLKR_PR1_PRU0_PRU_R30_3(flags)			AM33XX_PIN_MCASP0_AHCLKR(MUX_MODE5, flags)
+#define AM33XX_MCASP0_AHCLKR_PR1_PRU0_PRU_R31_3(flags)			AM33XX_PIN_MCASP0_AHCLKR(MUX_MODE6, flags)
+#define AM33XX_MCASP0_AHCLKR_GPIO3_17(flags)				AM33XX_PIN_MCASP0_AHCLKR(MUX_MODE7, flags)
+
+#define AM33XX_MCASP0_AHCLKX(flags)					AM33XX_PIN_MCASP0_AHCLKX(MUX_MODE0, flags)
+#define AM33XX_MCASP0_AHCLKX_EQEP0_STROBE(flags)			AM33XX_PIN_MCASP0_AHCLKX(MUX_MODE1, flags)
+#define AM33XX_MCASP0_AHCLKX_MCASP0_AXR3(flags)				AM33XX_PIN_MCASP0_AHCLKX(MUX_MODE2, flags)
+#define AM33XX_MCASP0_AHCLKX_MCASP1_AXR1(flags)				AM33XX_PIN_MCASP0_AHCLKX(MUX_MODE3, flags)
+#define AM33XX_MCASP0_AHCLKX_EMU4(flags)				AM33XX_PIN_MCASP0_AHCLKX(MUX_MODE4, flags)
+#define AM33XX_MCASP0_AHCLKX_PR1_PRU0_PRU_R30_7(flags)			AM33XX_PIN_MCASP0_AHCLKX(MUX_MODE5, flags)
+#define AM33XX_MCASP0_AHCLKX_PR1_PRU0_PRU_R31_7(flags)			AM33XX_PIN_MCASP0_AHCLKX(MUX_MODE6, flags)
+#define AM33XX_MCASP0_AHCLKX_GPIO3_21(flags)				AM33XX_PIN_MCASP0_AHCLKX(MUX_MODE7, flags)
+
+#define AM33XX_MCASP0_ACLKX(flags)					AM33XX_PIN_MCASP0_ACLKX(MUX_MODE0, flags)
+#define AM33XX_MCASP0_ACLKX_EHRPWM0A(flags)				AM33XX_PIN_MCASP0_ACLKX(MUX_MODE1, flags)
+#define AM33XX_MCASP0_ACLKX_SPI1_SCLK(flags)				AM33XX_PIN_MCASP0_ACLKX(MUX_MODE3, flags)
+#define AM33XX_MCASP0_ACLKX_MMC0_SDCD(flags)				AM33XX_PIN_MCASP0_ACLKX(MUX_MODE4, flags)
+#define AM33XX_MCASP0_ACLKX_PR1_PRU0_PRU_R30_0(flags)			AM33XX_PIN_MCASP0_ACLKX(MUX_MODE5, flags)
+#define AM33XX_MCASP0_ACLKX_PR1_PRU0_PRU_R31_0(flags)			AM33XX_PIN_MCASP0_ACLKX(MUX_MODE6, flags)
+#define AM33XX_MCASP0_ACLKX_GPIO3_14(flags)				AM33XX_PIN_MCASP0_ACLKX(MUX_MODE7, flags)
+
+#define AM33XX_MCASP0_FSR(flags)					AM33XX_PIN_MCASP0_FSR(MUX_MODE0, flags)
+#define AM33XX_MCASP0_FSR_EQEP0B_IN(flags)				AM33XX_PIN_MCASP0_FSR(MUX_MODE1, flags)
+#define AM33XX_MCASP0_FSR_MCASP0_AXR3(flags)				AM33XX_PIN_MCASP0_FSR(MUX_MODE2, flags)
+#define AM33XX_MCASP0_FSR_MCASP1_FSX(flags)				AM33XX_PIN_MCASP0_FSR(MUX_MODE3, flags)
+#define AM33XX_MCASP0_FSR_EMU2(flags)					AM33XX_PIN_MCASP0_FSR(MUX_MODE4, flags)
+#define AM33XX_MCASP0_FSR_PR1_PRU0_PRU_R30_5(flags)			AM33XX_PIN_MCASP0_FSR(MUX_MODE5, flags)
+#define AM33XX_MCASP0_FSR_PR1_PRU0_PRU_R31_5(flags)			AM33XX_PIN_MCASP0_FSR(MUX_MODE6, flags)
+#define AM33XX_MCASP0_FSR_GPIO3_19(flags)				AM33XX_PIN_MCASP0_FSR(MUX_MODE7, flags)
+
+#define AM33XX_MCASP0_AXR0(flags)					AM33XX_PIN_MCASP0_AXR0(MUX_MODE0, flags)
+#define AM33XX_MCASP0_AXR0_EHRPWM0_TRIPZONE_INPUT(flags)		AM33XX_PIN_MCASP0_AXR0(MUX_MODE1, flags)
+#define AM33XX_MCASP0_AXR0_SPI1_D1(flags)				AM33XX_PIN_MCASP0_AXR0(MUX_MODE3, flags)
+#define AM33XX_MCASP0_AXR0_MMC2_SDCD(flags)				AM33XX_PIN_MCASP0_AXR0(MUX_MODE4, flags)
+#define AM33XX_MCASP0_AXR0_PR1_PRU0_PRU_R30_2(flags)			AM33XX_PIN_MCASP0_AXR0(MUX_MODE5, flags)
+#define AM33XX_MCASP0_AXR0_PR1_PRU0_PRU_R31_2(flags)			AM33XX_PIN_MCASP0_AXR0(MUX_MODE6, flags)
+#define AM33XX_MCASP0_AXR0_GPIO3_16(flags)				AM33XX_PIN_MCASP0_AXR0(MUX_MODE7, flags)
+
+#define AM33XX_MCASP0_AXR1(flags)					AM33XX_PIN_MCASP0_AXR1(MUX_MODE0, flags)
+#define AM33XX_MCASP0_AXR1_EQEP0_INDEX(flags)				AM33XX_PIN_MCASP0_AXR1(MUX_MODE1, flags)
+#define AM33XX_MCASP0_AXR1_MCASP1_AXR0(flags)				AM33XX_PIN_MCASP0_AXR1(MUX_MODE3, flags)
+#define AM33XX_MCASP0_AXR1_EMU3(flags)					AM33XX_PIN_MCASP0_AXR1(MUX_MODE4, flags)
+#define AM33XX_MCASP0_AXR1_PR1_PRU0_PRU_R30_6(flags)			AM33XX_PIN_MCASP0_AXR1(MUX_MODE5, flags)
+#define AM33XX_MCASP0_AXR1_PR1_PRU0_PRU_R31_6(flags)			AM33XX_PIN_MCASP0_AXR1(MUX_MODE6, flags)
+#define AM33XX_MCASP0_AXR1_GPIO3_20(flags)				AM33XX_PIN_MCASP0_AXR1(MUX_MODE7, flags)
+
+#define AM33XX_MDC_MDIO_CLK(flags)					AM33XX_PIN_MDC(MUX_MODE0, flags)
+#define AM33XX_MDC_TIMER5(flags)					AM33XX_PIN_MDC(MUX_MODE1, flags)
+#define AM33XX_MDC_UART5_TXD(flags)					AM33XX_PIN_MDC(MUX_MODE2, flags)
+#define AM33XX_MDC_UART3_RTSN(flags)					AM33XX_PIN_MDC(MUX_MODE3, flags)
+#define AM33XX_MDC_MMC0_SDWP(flags)					AM33XX_PIN_MDC(MUX_MODE4, flags)
+#define AM33XX_MDC_MMC1_CLK(flags)					AM33XX_PIN_MDC(MUX_MODE5, flags)
+#define AM33XX_MDC_MMC2_CLK(flags)					AM33XX_PIN_MDC(MUX_MODE6, flags)
+#define AM33XX_MDC_GPIO0_1(flags)					AM33XX_PIN_MDC(MUX_MODE7, flags)
+
+#define AM33XX_MDIO_DATA(flags)						AM33XX_PIN_MDIO(MUX_MODE0, flags)
+#define AM33XX_MDIO_TIMER6(flags)					AM33XX_PIN_MDIO(MUX_MODE1, flags)
+#define AM33XX_MDIO_UART5_RXD(flags)					AM33XX_PIN_MDIO(MUX_MODE2, flags)
+#define AM33XX_MDIO_UART3_CTSN(flags)					AM33XX_PIN_MDIO(MUX_MODE3, flags)
+#define AM33XX_MDIO_MMC0_SDCD(flags)					AM33XX_PIN_MDIO(MUX_MODE4, flags)
+#define AM33XX_MDIO_MMC1_CMD(flags)					AM33XX_PIN_MDIO(MUX_MODE5, flags)
+#define AM33XX_MDIO_MMC2_CMD(flags)					AM33XX_PIN_MDIO(MUX_MODE6, flags)
+#define AM33XX_MDIO_GPIO0_0(flags)					AM33XX_PIN_MDIO(MUX_MODE7, flags)
+
+#define AM33XX_MII1_RX_DV_GMII1_RXDV(flags)				AM33XX_PIN_MII1_RX_DV(MUX_MODE0, flags)
+#define AM33XX_MII1_RX_DV_LCD_MEMORY_CLK(flags)				AM33XX_PIN_MII1_RX_DV(MUX_MODE1, flags)
+#define AM33XX_MII1_RX_DV_RGMII1_RCTL(flags)				AM33XX_PIN_MII1_RX_DV(MUX_MODE2, flags)
+#define AM33XX_MII1_RX_DV_UART5_TXD(flags)				AM33XX_PIN_MII1_RX_DV(MUX_MODE3, flags)
+#define AM33XX_MII1_RX_DV_MCASP1_ACLKX(flags)				AM33XX_PIN_MII1_RX_DV(MUX_MODE4, flags)
+#define AM33XX_MII1_RX_DV_MMC2_DAT0(flags)				AM33XX_PIN_MII1_RX_DV(MUX_MODE5, flags)
+#define AM33XX_MII1_RX_DV_MCASP0_ACLKR(flags)				AM33XX_PIN_MII1_RX_DV(MUX_MODE6, flags)
+#define AM33XX_MII1_RX_DV_GPIO3_4(flags)				AM33XX_PIN_MII1_RX_DV(MUX_MODE7, flags)
+
+#define AM33XX_MII1_TX_EN_GMII1_TXEN(flags)				AM33XX_PIN_MII1_TX_EN(MUX_MODE0, flags)
+#define AM33XX_MII1_TX_EN_RMII1_TXEN(flags)				AM33XX_PIN_MII1_TX_EN(MUX_MODE1, flags)
+#define AM33XX_MII1_TX_EN_RGMII1_TCTL(flags)				AM33XX_PIN_MII1_TX_EN(MUX_MODE2, flags)
+#define AM33XX_MII1_TX_EN_TIMER4(flags)					AM33XX_PIN_MII1_TX_EN(MUX_MODE3, flags)
+#define AM33XX_MII1_TX_EN_MCASP1_AXR0(flags)				AM33XX_PIN_MII1_TX_EN(MUX_MODE4, flags)
+#define AM33XX_MII1_TX_EN_EQEP0_INDEX(flags)				AM33XX_PIN_MII1_TX_EN(MUX_MODE5, flags)
+#define AM33XX_MII1_TX_EN_MMC2_CMD(flags)				AM33XX_PIN_MII1_TX_EN(MUX_MODE6, flags)
+#define AM33XX_MII1_TX_EN_GPIO3_3(flags)				AM33XX_PIN_MII1_TX_EN(MUX_MODE7, flags)
+
+#define AM33XX_MII1_RX_ER_GMII1_RXERR(flags)				AM33XX_PIN_MII1_RX_ER(MUX_MODE0, flags)
+#define AM33XX_MII1_RX_ER_RMII1_RXERR(flags)				AM33XX_PIN_MII1_RX_ER(MUX_MODE1, flags)
+#define AM33XX_MII1_RX_ER_SPI1_D1(flags)				AM33XX_PIN_MII1_RX_ER(MUX_MODE2, flags)
+#define AM33XX_MII1_RX_ER_I2C1_SCL(flags)				AM33XX_PIN_MII1_RX_ER(MUX_MODE3, flags)
+#define AM33XX_MII1_RX_ER_MCASP1_FSX(flags)				AM33XX_PIN_MII1_RX_ER(MUX_MODE4, flags)
+#define AM33XX_MII1_RX_ER_UART5_RTSN(flags)				AM33XX_PIN_MII1_RX_ER(MUX_MODE5, flags)
+#define AM33XX_MII1_RX_ER_UART2_TXD(flags)				AM33XX_PIN_MII1_RX_ER(MUX_MODE6, flags)
+#define AM33XX_MII1_RX_ER_GPIO3_2(flags)				AM33XX_PIN_MII1_RX_ER(MUX_MODE7, flags)
+
+#define AM33XX_MII1_RX_CLK_GMII1_RXCLK(flags)				AM33XX_PIN_MII1_RX_CLK(MUX_MODE0, flags)
+#define AM33XX_MII1_RX_CLK_UART2_TXD(flags)				AM33XX_PIN_MII1_RX_CLK(MUX_MODE1, flags)
+#define AM33XX_MII1_RX_CLK_RGMII1_RCLK(flags)				AM33XX_PIN_MII1_RX_CLK(MUX_MODE2, flags)
+#define AM33XX_MII1_RX_CLK_MMC0_DAT6(flags)				AM33XX_PIN_MII1_RX_CLK(MUX_MODE3, flags)
+#define AM33XX_MII1_RX_CLK_MMC1_DAT1(flags)				AM33XX_PIN_MII1_RX_CLK(MUX_MODE4, flags)
+#define AM33XX_MII1_RX_CLK_UART1_DSRN(flags)				AM33XX_PIN_MII1_RX_CLK(MUX_MODE5, flags)
+#define AM33XX_MII1_RX_CLK_MCASP0_FSX(flags)				AM33XX_PIN_MII1_RX_CLK(MUX_MODE6, flags)
+#define AM33XX_MII1_RX_CLK_GPIO3_10(flags)				AM33XX_PIN_MII1_RX_CLK(MUX_MODE7, flags)
+
+#define AM33XX_MII1_TX_CLK_GMII1_TXCLK(flags)				AM33XX_PIN_MII1_TX_CLK(MUX_MODE0, flags)
+#define AM33XX_MII1_TX_CLK_UART2_RXD(flags)				AM33XX_PIN_MII1_TX_CLK(MUX_MODE1, flags)
+#define AM33XX_MII1_TX_CLK_RGMII1_TCLK(flags)				AM33XX_PIN_MII1_TX_CLK(MUX_MODE2, flags)
+#define AM33XX_MII1_TX_CLK_MMC0_DAT7(flags)				AM33XX_PIN_MII1_TX_CLK(MUX_MODE3, flags)
+#define AM33XX_MII1_TX_CLK_MMC1_DAT0(flags)				AM33XX_PIN_MII1_TX_CLK(MUX_MODE4, flags)
+#define AM33XX_MII1_TX_CLK_UART1_DCDN(flags)				AM33XX_PIN_MII1_TX_CLK(MUX_MODE5, flags)
+#define AM33XX_MII1_TX_CLK_MCASP0_ACLKX(flags)				AM33XX_PIN_MII1_TX_CLK(MUX_MODE6, flags)
+#define AM33XX_MII1_TX_CLK_GPIO3_9(flags)				AM33XX_PIN_MII1_TX_CLK(MUX_MODE7, flags)
+
+#define AM33XX_MII1_COL_GMII1_COL(flags)				AM33XX_PIN_MII1_COL(MUX_MODE0, flags)
+#define AM33XX_MII1_COL_RMII2_REFCLK(flags)				AM33XX_PIN_MII1_COL(MUX_MODE1, flags)
+#define AM33XX_MII1_COL_SPI1_SCLK(flags)				AM33XX_PIN_MII1_COL(MUX_MODE2, flags)
+#define AM33XX_MII1_COL_UART5_RXD(flags)				AM33XX_PIN_MII1_COL(MUX_MODE3, flags)
+#define AM33XX_MII1_COL_MCASP1_AXR2(flags)				AM33XX_PIN_MII1_COL(MUX_MODE4, flags)
+#define AM33XX_MII1_COL_MMC2_DAT3(flags)				AM33XX_PIN_MII1_COL(MUX_MODE5, flags)
+#define AM33XX_MII1_COL_MCASP0_AXR2(flags)				AM33XX_PIN_MII1_COL(MUX_MODE6, flags)
+#define AM33XX_MII1_COL_GPIO3_0(flags)					AM33XX_PIN_MII1_COL(MUX_MODE7, flags)
+
+#define AM33XX_MII1_CRS_GMII1_CRS(flags)				AM33XX_PIN_MII1_CRS(MUX_MODE0, flags)
+#define AM33XX_MII1_CRS_RMII1_CRS_DV(flags)				AM33XX_PIN_MII1_CRS(MUX_MODE1, flags)
+#define AM33XX_MII1_CRS_SPI1_D0(flags)					AM33XX_PIN_MII1_CRS(MUX_MODE2, flags)
+#define AM33XX_MII1_CRS_I2C1_SDA(flags)					AM33XX_PIN_MII1_CRS(MUX_MODE3, flags)
+#define AM33XX_MII1_CRS_MCASP1_ACLKX(flags)				AM33XX_PIN_MII1_CRS(MUX_MODE4, flags)
+#define AM33XX_MII1_CRS_UART5_CTSN(flags)				AM33XX_PIN_MII1_CRS(MUX_MODE5, flags)
+#define AM33XX_MII1_CRS_UART2_RXD(flags)				AM33XX_PIN_MII1_CRS(MUX_MODE6, flags)
+#define AM33XX_MII1_CRS_GPIO3_1(flags)					AM33XX_PIN_MII1_CRS(MUX_MODE7, flags)
+
+#define AM33XX_MII1_RXD0_GMII1_RXD0(flags)				AM33XX_PIN_MII1_RXD0(MUX_MODE0, flags)
+#define AM33XX_MII1_RXD0_RMII1_RXD0(flags)				AM33XX_PIN_MII1_RXD0(MUX_MODE1, flags)
+#define AM33XX_MII1_RXD0_RGMII1_RD0(flags)				AM33XX_PIN_MII1_RXD0(MUX_MODE2, flags)
+#define AM33XX_MII1_RXD0_MCASP1_AHCLKX(flags)				AM33XX_PIN_MII1_RXD0(MUX_MODE3, flags)
+#define AM33XX_MII1_RXD0_MCASP1_AHCLKR(flags)				AM33XX_PIN_MII1_RXD0(MUX_MODE4, flags)
+#define AM33XX_MII1_RXD0_MCASP1_ACLKR(flags)				AM33XX_PIN_MII1_RXD0(MUX_MODE5, flags)
+#define AM33XX_MII1_RXD0_MCASP0_AXR3(flags)				AM33XX_PIN_MII1_RXD0(MUX_MODE6, flags)
+#define AM33XX_MII1_RXD0_GPIO2_21(flags)				AM33XX_PIN_MII1_RXD0(MUX_MODE7, flags)
+
+#define AM33XX_MII1_RXD1_GMII1_RXD1(flags)				AM33XX_PIN_MII1_RXD1(MUX_MODE0, flags)
+#define AM33XX_MII1_RXD1_RMII1_RXD1(flags)				AM33XX_PIN_MII1_RXD1(MUX_MODE1, flags)
+#define AM33XX_MII1_RXD1_RGMII1_RD1(flags)				AM33XX_PIN_MII1_RXD1(MUX_MODE2, flags)
+#define AM33XX_MII1_RXD1_MCASP1_AXR3(flags)				AM33XX_PIN_MII1_RXD1(MUX_MODE3, flags)
+#define AM33XX_MII1_RXD1_MCASP1_FSR(flags)				AM33XX_PIN_MII1_RXD1(MUX_MODE4, flags)
+#define AM33XX_MII1_RXD1_EQEP0_STROBE(flags)				AM33XX_PIN_MII1_RXD1(MUX_MODE5, flags)
+#define AM33XX_MII1_RXD1_MMC2_CLK(flags)				AM33XX_PIN_MII1_RXD1(MUX_MODE6, flags)
+#define AM33XX_MII1_RXD1_GPIO2_20(flags)				AM33XX_PIN_MII1_RXD1(MUX_MODE7, flags)
+
+#define AM33XX_MII1_RXD2_GMII1_RXD2(flags)				AM33XX_PIN_MII1_RXD2(MUX_MODE0, flags)
+#define AM33XX_MII1_RXD2_UART3_TXD(flags)				AM33XX_PIN_MII1_RXD2(MUX_MODE1, flags)
+#define AM33XX_MII1_RXD2_RGMII1_RD2(flags)				AM33XX_PIN_MII1_RXD2(MUX_MODE2, flags)
+#define AM33XX_MII1_RXD2_MMC0_DAT4(flags)				AM33XX_PIN_MII1_RXD2(MUX_MODE3, flags)
+#define AM33XX_MII1_RXD2_MMC1_DAT3(flags)				AM33XX_PIN_MII1_RXD2(MUX_MODE4, flags)
+#define AM33XX_MII1_RXD2_UART1_RIN(flags)				AM33XX_PIN_MII1_RXD2(MUX_MODE5, flags)
+#define AM33XX_MII1_RXD2_MCASP0_AXR1(flags)				AM33XX_PIN_MII1_RXD2(MUX_MODE6, flags)
+#define AM33XX_MII1_RXD2_GPIO2_19(flags)				AM33XX_PIN_MII1_RXD2(MUX_MODE7, flags)
+
+#define AM33XX_MII1_RXD3_GMII1_RXD3(flags)				AM33XX_PIN_MII1_RXD3(MUX_MODE0, flags)
+#define AM33XX_MII1_RXD3_UART3_RXD(flags)				AM33XX_PIN_MII1_RXD3(MUX_MODE1, flags)
+#define AM33XX_MII1_RXD3_RGMII1_RD3(flags)				AM33XX_PIN_MII1_RXD3(MUX_MODE2, flags)
+#define AM33XX_MII1_RXD3_MMC0_DAT5(flags)				AM33XX_PIN_MII1_RXD3(MUX_MODE3, flags)
+#define AM33XX_MII1_RXD3_MMC1_DAT2(flags)				AM33XX_PIN_MII1_RXD3(MUX_MODE4, flags)
+#define AM33XX_MII1_RXD3_UART1_DTRN(flags)				AM33XX_PIN_MII1_RXD3(MUX_MODE5, flags)
+#define AM33XX_MII1_RXD3_MCASP0_AXR0(flags)				AM33XX_PIN_MII1_RXD3(MUX_MODE6, flags)
+#define AM33XX_MII1_RXD3_GPIO2_18(flags)				AM33XX_PIN_MII1_RXD3(MUX_MODE7, flags)
+
+#define AM33XX_MII1_TXD0_GMII1_TXD0(flags)				AM33XX_PIN_MII1_TXD0(MUX_MODE0, flags)
+#define AM33XX_MII1_TXD0_RMII1_TXD0(flags)				AM33XX_PIN_MII1_TXD0(MUX_MODE1, flags)
+#define AM33XX_MII1_TXD0_RGMII1_TD0(flags)				AM33XX_PIN_MII1_TXD0(MUX_MODE2, flags)
+#define AM33XX_MII1_TXD0_MCASP1_AXR2(flags)				AM33XX_PIN_MII1_TXD0(MUX_MODE3, flags)
+#define AM33XX_MII1_TXD0_MCASP1_ACLKR(flags)				AM33XX_PIN_MII1_TXD0(MUX_MODE4, flags)
+#define AM33XX_MII1_TXD0_EQEP0B_IN(flags)				AM33XX_PIN_MII1_TXD0(MUX_MODE5, flags)
+#define AM33XX_MII1_TXD0_MMC1_CLK(flags)				AM33XX_PIN_MII1_TXD0(MUX_MODE6, flags)
+#define AM33XX_MII1_TXD0_GPIO0_28(flags)				AM33XX_PIN_MII1_TXD0(MUX_MODE7, flags)
+
+#define AM33XX_MII1_TXD1_GMII1_TXD1(flags)				AM33XX_PIN_MII1_TXD1(MUX_MODE0, flags)
+#define AM33XX_MII1_TXD1_RMII1_TXD1(flags)				AM33XX_PIN_MII1_TXD1(MUX_MODE1, flags)
+#define AM33XX_MII1_TXD1_RGMII1_TD1(flags)				AM33XX_PIN_MII1_TXD1(MUX_MODE2, flags)
+#define AM33XX_MII1_TXD1_MCASP1_FSR(flags)				AM33XX_PIN_MII1_TXD1(MUX_MODE3, flags)
+#define AM33XX_MII1_TXD1_MCASP1_AXR1(flags)				AM33XX_PIN_MII1_TXD1(MUX_MODE4, flags)
+#define AM33XX_MII1_TXD1_EQEP0A_IN(flags)				AM33XX_PIN_MII1_TXD1(MUX_MODE5, flags)
+#define AM33XX_MII1_TXD1_MMC1_CMD(flags)				AM33XX_PIN_MII1_TXD1(MUX_MODE6, flags)
+#define AM33XX_MII1_TXD1_GPIO0_21(flags)				AM33XX_PIN_MII1_TXD1(MUX_MODE7, flags)
+
+#define AM33XX_MII1_TXD2_GMII1_TXD2(flags)				AM33XX_PIN_MII1_TXD2(MUX_MODE0, flags)
+#define AM33XX_MII1_TXD2_DCAN0_RX(flags)				AM33XX_PIN_MII1_TXD2(MUX_MODE1, flags)
+#define AM33XX_MII1_TXD2_RGMII1_TD2(flags)				AM33XX_PIN_MII1_TXD2(MUX_MODE2, flags)
+#define AM33XX_MII1_TXD2_UART4_TXD(flags)				AM33XX_PIN_MII1_TXD2(MUX_MODE3, flags)
+#define AM33XX_MII1_TXD2_MCASP1_AXR0(flags)				AM33XX_PIN_MII1_TXD2(MUX_MODE4, flags)
+#define AM33XX_MII1_TXD2_MMC2_DAT2(flags)				AM33XX_PIN_MII1_TXD2(MUX_MODE5, flags)
+#define AM33XX_MII1_TXD2_MCASP0_AHCLKX(flags)				AM33XX_PIN_MII1_TXD2(MUX_MODE6, flags)
+#define AM33XX_MII1_TXD2_GPIO0_17(flags)				AM33XX_PIN_MII1_TXD2(MUX_MODE7, flags)
+
+#define AM33XX_MII1_TXD3_GMII1_TXD3(flags)				AM33XX_PIN_MII1_TXD3(MUX_MODE0, flags)
+#define AM33XX_MII1_TXD3_DCAN0_TX(flags)				AM33XX_PIN_MII1_TXD3(MUX_MODE1, flags)
+#define AM33XX_MII1_TXD3_RGMII1_TD3(flags)				AM33XX_PIN_MII1_TXD3(MUX_MODE2, flags)
+#define AM33XX_MII1_TXD3_UART4_RXD(flags)				AM33XX_PIN_MII1_TXD3(MUX_MODE3, flags)
+#define AM33XX_MII1_TXD3_MCASP1_FSX(flags)				AM33XX_PIN_MII1_TXD3(MUX_MODE4, flags)
+#define AM33XX_MII1_TXD3_MMC2_DAT1(flags)				AM33XX_PIN_MII1_TXD3(MUX_MODE5, flags)
+#define AM33XX_MII1_TXD3_MCASP0_FSR(flags)				AM33XX_PIN_MII1_TXD3(MUX_MODE6, flags)
+#define AM33XX_MII1_TXD3_GPIO0_16(flags)				AM33XX_PIN_MII1_TXD3(MUX_MODE7, flags)
+
+#define AM33XX_MMC0_CMD(flags)						AM33XX_PIN_MMC0_CMD(MUX_MODE0, flags)
+#define AM33XX_MMC0_CMD_GPMC_A25(flags)					AM33XX_PIN_MMC0_CMD(MUX_MODE1, flags)
+#define AM33XX_MMC0_CMD_UART3_RTSN(flags)				AM33XX_PIN_MMC0_CMD(MUX_MODE2, flags)
+#define AM33XX_MMC0_CMD_UART2_TXD(flags)				AM33XX_PIN_MMC0_CMD(MUX_MODE3, flags)
+#define AM33XX_MMC0_CMD_DCAN1_RX(flags)					AM33XX_PIN_MMC0_CMD(MUX_MODE4, flags)
+#define AM33XX_MMC0_CMD_PR1_PRU0_PRU_R30_13(flags)			AM33XX_PIN_MMC0_CMD(MUX_MODE5, flags)
+#define AM33XX_MMC0_CMD_PR1_PRU0_PRU_R31_13(flags)			AM33XX_PIN_MMC0_CMD(MUX_MODE6, flags)
+#define AM33XX_MMC0_CMD_GPIO2_31(flags)					AM33XX_PIN_MMC0_CMD(MUX_MODE7, flags)
+
+#define AM33XX_MMC0_CLK(flags)						AM33XX_PIN_MMC0_CLK(MUX_MODE0, flags)
+#define AM33XX_MMC0_CLK_GPMC_A24(flags)					AM33XX_PIN_MMC0_CLK(MUX_MODE1, flags)
+#define AM33XX_MMC0_CLK_UART3_CTSN(flags)				AM33XX_PIN_MMC0_CLK(MUX_MODE2, flags)
+#define AM33XX_MMC0_CLK_UART2_RXD(flags)				AM33XX_PIN_MMC0_CLK(MUX_MODE3, flags)
+#define AM33XX_MMC0_CLK_DCAN1_TX(flags)					AM33XX_PIN_MMC0_CLK(MUX_MODE4, flags)
+#define AM33XX_MMC0_CLK_PR1_PRU0_PRU_R30_12(flags)			AM33XX_PIN_MMC0_CLK(MUX_MODE5, flags)
+#define AM33XX_MMC0_CLK_PR1_PRU0_PRU_R31_12(flags)			AM33XX_PIN_MMC0_CLK(MUX_MODE6, flags)
+#define AM33XX_MMC0_CLK_GPIO2_30(flags)					AM33XX_PIN_MMC0_CLK(MUX_MODE7, flags)
+
+#define AM33XX_MMC0_DAT0(flags)						AM33XX_PIN_MMC0_DAT0(MUX_MODE0, flags)
+#define AM33XX_MMC0_DAT0_GPMC_A23(flags)				AM33XX_PIN_MMC0_DAT0(MUX_MODE1, flags)
+#define AM33XX_MMC0_DAT0_UART5_RTSN(flags)				AM33XX_PIN_MMC0_DAT0(MUX_MODE2, flags)
+#define AM33XX_MMC0_DAT0_UART3_TXD(flags)				AM33XX_PIN_MMC0_DAT0(MUX_MODE3, flags)
+#define AM33XX_MMC0_DAT0_UART1_RIN(flags)				AM33XX_PIN_MMC0_DAT0(MUX_MODE4, flags)
+#define AM33XX_MMC0_DAT0_PR1_PRU0_PRU_R30_11(flags)			AM33XX_PIN_MMC0_DAT0(MUX_MODE5, flags)
+#define AM33XX_MMC0_DAT0_PR1_PRU0_PRU_R31_11(flags)			AM33XX_PIN_MMC0_DAT0(MUX_MODE6, flags)
+#define AM33XX_MMC0_DAT0_GPIO2_29(flags)				AM33XX_PIN_MMC0_DAT0(MUX_MODE7, flags)
+
+#define AM33XX_MMC0_DAT1(flags)						AM33XX_PIN_MMC0_DAT1(MUX_MODE0, flags)
+#define AM33XX_MMC0_DAT1_GPMC_A22(flags)				AM33XX_PIN_MMC0_DAT1(MUX_MODE1, flags)
+#define AM33XX_MMC0_DAT1_UART5_CTSN(flags)				AM33XX_PIN_MMC0_DAT1(MUX_MODE2, flags)
+#define AM33XX_MMC0_DAT1_UART3_RXD(flags)				AM33XX_PIN_MMC0_DAT1(MUX_MODE3, flags)
+#define AM33XX_MMC0_DAT1_UART1_DTRN(flags)				AM33XX_PIN_MMC0_DAT1(MUX_MODE4, flags)
+#define AM33XX_MMC0_DAT1_PR1_PRU0_PRU_R30_10(flags)			AM33XX_PIN_MMC0_DAT1(MUX_MODE5, flags)
+#define AM33XX_MMC0_DAT1_PR1_PRU0_PRU_R31_10(flags)			AM33XX_PIN_MMC0_DAT1(MUX_MODE6, flags)
+#define AM33XX_MMC0_DAT1_GPIO2_28(flags)				AM33XX_PIN_MMC0_DAT1(MUX_MODE7, flags)
+
+#define AM33XX_MMC0_DAT2(flags)						AM33XX_PIN_MMC0_DAT2(MUX_MODE0, flags)
+#define AM33XX_MMC0_DAT2_GPMC_A21(flags)				AM33XX_PIN_MMC0_DAT2(MUX_MODE1, flags)
+#define AM33XX_MMC0_DAT2_UART4_RTSN(flags)				AM33XX_PIN_MMC0_DAT2(MUX_MODE2, flags)
+#define AM33XX_MMC0_DAT2_TIMER6(flags)					AM33XX_PIN_MMC0_DAT2(MUX_MODE3, flags)
+#define AM33XX_MMC0_DAT2_UART1_DSRN(flags)				AM33XX_PIN_MMC0_DAT2(MUX_MODE4, flags)
+#define AM33XX_MMC0_DAT2_PR1_PRU0_PRU_R30_9(flags)			AM33XX_PIN_MMC0_DAT2(MUX_MODE5, flags)
+#define AM33XX_MMC0_DAT2_PR1_PRU0_PRU_R31_9(flags)			AM33XX_PIN_MMC0_DAT2(MUX_MODE6, flags)
+#define AM33XX_MMC0_DAT2_GPIO2_27(flags)				AM33XX_PIN_MMC0_DAT2(MUX_MODE7, flags)
+
+#define AM33XX_MMC0_DAT3(flags)						AM33XX_PIN_MMC0_DAT3(MUX_MODE0, flags)
+#define AM33XX_MMC0_DAT3_GPMC_A20(flags)				AM33XX_PIN_MMC0_DAT3(MUX_MODE1, flags)
+#define AM33XX_MMC0_DAT3_UART4_CTSN(flags)				AM33XX_PIN_MMC0_DAT3(MUX_MODE2, flags)
+#define AM33XX_MMC0_DAT3_TIMER5(flags)					AM33XX_PIN_MMC0_DAT3(MUX_MODE3, flags)
+#define AM33XX_MMC0_DAT3_UART1_DCDN(flags)				AM33XX_PIN_MMC0_DAT3(MUX_MODE4, flags)
+#define AM33XX_MMC0_DAT3_PR1_PRU0_PRU_R30_8(flags)			AM33XX_PIN_MMC0_DAT3(MUX_MODE5, flags)
+#define AM33XX_MMC0_DAT3_PR1_PRU0_PRU_R31_8(flags)			AM33XX_PIN_MMC0_DAT3(MUX_MODE6, flags)
+#define AM33XX_MMC0_DAT3_GPIO2_26(flags)				AM33XX_PIN_MMC0_DAT3(MUX_MODE7, flags)
+
+#define AM33XX_RMII1_REF_CLK(flags)					AM33XX_PIN_RMII1_REF_CLK(MUX_MODE0, flags)
+#define AM33XX_RMII1_REF_CLK_XDMA_EVENT_INTR2(flags)			AM33XX_PIN_RMII1_REF_CLK(MUX_MODE1, flags)
+#define AM33XX_RMII1_REF_CLK_SPI1_CS0(flags)				AM33XX_PIN_RMII1_REF_CLK(MUX_MODE2, flags)
+#define AM33XX_RMII1_REF_CLK_UART5_TXD(flags)				AM33XX_PIN_RMII1_REF_CLK(MUX_MODE3, flags)
+#define AM33XX_RMII1_REF_CLK_MCASP1_AXR3(flags)				AM33XX_PIN_RMII1_REF_CLK(MUX_MODE4, flags)
+#define AM33XX_RMII1_REF_CLK_MMC0_POW(flags)				AM33XX_PIN_RMII1_REF_CLK(MUX_MODE5, flags)
+#define AM33XX_RMII1_REF_CLK_MCASP1_AHCLKX(flags)			AM33XX_PIN_RMII1_REF_CLK(MUX_MODE6, flags)
+#define AM33XX_RMII1_REF_CLK_GPIO0_29(flags)				AM33XX_PIN_RMII1_REF_CLK(MUX_MODE7, flags)
+
+#define AM33XX_SPI0_SCLK(flags)						AM33XX_PIN_SPI0_SCLK(MUX_MODE0, flags)
+#define AM33XX_SPI0_SCLK_UART2_RXD(flags)				AM33XX_PIN_SPI0_SCLK(MUX_MODE1, flags)
+#define AM33XX_SPI0_SCLK_I2C2_SDA(flags)				AM33XX_PIN_SPI0_SCLK(MUX_MODE2, flags)
+#define AM33XX_SPI0_SCLK_EHRPWM0A(flags)				AM33XX_PIN_SPI0_SCLK(MUX_MODE3, flags)
+#define AM33XX_SPI0_SCLK_PR1_UART0_CTS_N(flags)				AM33XX_PIN_SPI0_SCLK(MUX_MODE4, flags)
+#define AM33XX_SPI0_SCLK_PR1_EDIO_SOF(flags)				AM33XX_PIN_SPI0_SCLK(MUX_MODE5, flags)
+#define AM33XX_SPI0_SCLK_EMU2(flags)					AM33XX_PIN_SPI0_SCLK(MUX_MODE6, flags)
+#define AM33XX_SPI0_SCLK_GPIO0_2(flags)					AM33XX_PIN_SPI0_SCLK(MUX_MODE7, flags)
+
+#define AM33XX_SPI0_CS0(flags)						AM33XX_PIN_SPI0_CS0(MUX_MODE0, flags)
+#define AM33XX_SPI0_CS0_MMC2_SDWP(flags)				AM33XX_PIN_SPI0_CS0(MUX_MODE1, flags)
+#define AM33XX_SPI0_CS0_I2C1_SCL(flags)					AM33XX_PIN_SPI0_CS0(MUX_MODE2, flags)
+#define AM33XX_SPI0_CS0_EHRPWM0_SYNCI(flags)				AM33XX_PIN_SPI0_CS0(MUX_MODE3, flags)
+#define AM33XX_SPI0_CS0_PR1_UART0_TXD(flags)				AM33XX_PIN_SPI0_CS0(MUX_MODE4, flags)
+#define AM33XX_SPI0_CS0_PR1_EDIO_DATA_IN1(flags)			AM33XX_PIN_SPI0_CS0(MUX_MODE5, flags)
+#define AM33XX_SPI0_CS0_PR1_EDIO_DATA_OUT1(flags)			AM33XX_PIN_SPI0_CS0(MUX_MODE6, flags)
+#define AM33XX_SPI0_CS0_GPIO0_5(flags)					AM33XX_PIN_SPI0_CS0(MUX_MODE7, flags)
+
+#define AM33XX_SPI0_CS1(flags)						AM33XX_PIN_SPI0_CS1(MUX_MODE0, flags)
+#define AM33XX_SPI0_CS1_UART3_RXD(flags)				AM33XX_PIN_SPI0_CS1(MUX_MODE1, flags)
+#define AM33XX_SPI0_CS1_ECAP1_IN_PWM1_OUT(flags)			AM33XX_PIN_SPI0_CS1(MUX_MODE2, flags)
+#define AM33XX_SPI0_CS1_MMC0_POW(flags)					AM33XX_PIN_SPI0_CS1(MUX_MODE3, flags)
+#define AM33XX_SPI0_CS1_XDMA_EVENT_INTR2(flags)				AM33XX_PIN_SPI0_CS1(MUX_MODE4, flags)
+#define AM33XX_SPI0_CS1_MMC0_SDCD(flags)				AM33XX_PIN_SPI0_CS1(MUX_MODE5, flags)
+#define AM33XX_SPI0_CS1_EMU4(flags)					AM33XX_PIN_SPI0_CS1(MUX_MODE6, flags)
+#define AM33XX_SPI0_CS1_GPIO0_6(flags)					AM33XX_PIN_SPI0_CS1(MUX_MODE7, flags)
+
+#define AM33XX_SPI0_D0(flags)						AM33XX_PIN_SPI0_D0(MUX_MODE0, flags)
+#define AM33XX_SPI0_D0_UART2_TXD(flags)					AM33XX_PIN_SPI0_D0(MUX_MODE1, flags)
+#define AM33XX_SPI0_D0_I2C2_SCL(flags)					AM33XX_PIN_SPI0_D0(MUX_MODE2, flags)
+#define AM33XX_SPI0_D0_EHRPWM0B(flags)					AM33XX_PIN_SPI0_D0(MUX_MODE3, flags)
+#define AM33XX_SPI0_D0_PR1_UART0_RTS_N(flags)				AM33XX_PIN_SPI0_D0(MUX_MODE4, flags)
+#define AM33XX_SPI0_D0_PR1_EDIO_LATCH_IN(flags)				AM33XX_PIN_SPI0_D0(MUX_MODE5, flags)
+#define AM33XX_SPI0_D0_EMU3(flags)					AM33XX_PIN_SPI0_D0(MUX_MODE6, flags)
+#define AM33XX_SPI0_D0_GPIO0_3(flags)					AM33XX_PIN_SPI0_D0(MUX_MODE7, flags)
+
+#define AM33XX_SPI0_D1(flags)						AM33XX_PIN_SPI0_D1(MUX_MODE0, flags)
+#define AM33XX_SPI0_D1_MMC1_SDWP(flags)					AM33XX_PIN_SPI0_D1(MUX_MODE1, flags)
+#define AM33XX_SPI0_D1_I2C1_SDA(flags)					AM33XX_PIN_SPI0_D1(MUX_MODE2, flags)
+#define AM33XX_SPI0_D1_EHRPWM0_TRIPZONE_INPUT(flags)			AM33XX_PIN_SPI0_D1(MUX_MODE3, flags)
+#define AM33XX_SPI0_D1_PR1_UART0_RXD(flags)				AM33XX_PIN_SPI0_D1(MUX_MODE4, flags)
+#define AM33XX_SPI0_D1_PR1_EDIO_DATA_IN0(flags)				AM33XX_PIN_SPI0_D1(MUX_MODE5, flags)
+#define AM33XX_SPI0_D1_PR1_EDIO_DATA_OUT0(flags)			AM33XX_PIN_SPI0_D1(MUX_MODE6, flags)
+#define AM33XX_SPI0_D1_GPIO0_4(flags)					AM33XX_PIN_SPI0_D1(MUX_MODE7, flags)
+
+#define AM33XX_UART0_TXD(flags)						AM33XX_PIN_UART0_TXD(MUX_MODE0, flags)
+#define AM33XX_UART0_TXD_SPI1_CS1(flags)				AM33XX_PIN_UART0_TXD(MUX_MODE1, flags)
+#define AM33XX_UART0_TXD_DCAN0_RX(flags)				AM33XX_PIN_UART0_TXD(MUX_MODE2, flags)
+#define AM33XX_UART0_TXD_I2C2_SCL(flags)				AM33XX_PIN_UART0_TXD(MUX_MODE3, flags)
+#define AM33XX_UART0_TXD_ECAP1_IN_PWM1_OUT(flags)			AM33XX_PIN_UART0_TXD(MUX_MODE4, flags)
+#define AM33XX_UART0_TXD_PR1_PRU1_PRU_R30_15(flags)			AM33XX_PIN_UART0_TXD(MUX_MODE5, flags)
+#define AM33XX_UART0_TXD_PR1_PRU1_PRU_R31_15(flags)			AM33XX_PIN_UART0_TXD(MUX_MODE6, flags)
+#define AM33XX_UART0_TXD_GPIO1_11(flags)				AM33XX_PIN_UART0_TXD(MUX_MODE7, flags)
+
+#define AM33XX_UART0_CTSN(flags)					AM33XX_PIN_UART0_CTSN(MUX_MODE0, flags)
+#define AM33XX_UART0_CTSN_UART4_RXD(flags)				AM33XX_PIN_UART0_CTSN(MUX_MODE1, flags)
+#define AM33XX_UART0_CTSN_DCAN1_TX(flags)				AM33XX_PIN_UART0_CTSN(MUX_MODE2, flags)
+#define AM33XX_UART0_CTSN_I2C1_SDA(flags)				AM33XX_PIN_UART0_CTSN(MUX_MODE3, flags)
+#define AM33XX_UART0_CTSN_SPI1_D0(flags)				AM33XX_PIN_UART0_CTSN(MUX_MODE4, flags)
+#define AM33XX_UART0_CTSN_TIMER7(flags)					AM33XX_PIN_UART0_CTSN(MUX_MODE5, flags)
+#define AM33XX_UART0_CTSN_PR1_EDC_SYNC0_OUT(flags)			AM33XX_PIN_UART0_CTSN(MUX_MODE6, flags)
+#define AM33XX_UART0_CTSN_GPIO1_8(flags)				AM33XX_PIN_UART0_CTSN(MUX_MODE7, flags)
+
+#define AM33XX_UART0_RXD(flags)						AM33XX_PIN_UART0_RXD(MUX_MODE0, flags)
+#define AM33XX_UART0_RXD_SPI1_CS0(flags)				AM33XX_PIN_UART0_RXD(MUX_MODE1, flags)
+#define AM33XX_UART0_RXD_DCAN0_TX(flags)				AM33XX_PIN_UART0_RXD(MUX_MODE2, flags)
+#define AM33XX_UART0_RXD_I2C2_SDA(flags)				AM33XX_PIN_UART0_RXD(MUX_MODE3, flags)
+#define AM33XX_UART0_RXD_ECAP2_IN_PWM2_OUT(flags)			AM33XX_PIN_UART0_RXD(MUX_MODE4, flags)
+#define AM33XX_UART0_RXD_PR1_PRU1_PRU_R30_14(flags)			AM33XX_PIN_UART0_RXD(MUX_MODE5, flags)
+#define AM33XX_UART0_RXD_PR1_PRU1_PRU_R31_14(flags)			AM33XX_PIN_UART0_RXD(MUX_MODE6, flags)
+#define AM33XX_UART0_RXD_GPIO1_10(flags)				AM33XX_PIN_UART0_RXD(MUX_MODE7, flags)
+
+#define AM33XX_UART0_RTSN(flags)					AM33XX_PIN_UART0_RTSN(MUX_MODE0, flags)
+#define AM33XX_UART0_RTSN_UART4_TXD(flags)				AM33XX_PIN_UART0_RTSN(MUX_MODE1, flags)
+#define AM33XX_UART0_RTSN_DCAN1_RX(flags)				AM33XX_PIN_UART0_RTSN(MUX_MODE2, flags)
+#define AM33XX_UART0_RTSN_I2C1_SCL(flags)				AM33XX_PIN_UART0_RTSN(MUX_MODE3, flags)
+#define AM33XX_UART0_RTSN_SPI1_D1(flags)				AM33XX_PIN_UART0_RTSN(MUX_MODE4, flags)
+#define AM33XX_UART0_RTSN_SPI1_CS0(flags)				AM33XX_PIN_UART0_RTSN(MUX_MODE5, flags)
+#define AM33XX_UART0_RTSN_PR1_EDC_SYNC1_OUT(flags)			AM33XX_PIN_UART0_RTSN(MUX_MODE6, flags)
+#define AM33XX_UART0_RTSN_GPIO1_9(flags)				AM33XX_PIN_UART0_RTSN(MUX_MODE7, flags)
+
+#define AM33XX_UART1_TXD(flags)						AM33XX_PIN_UART1_TXD(MUX_MODE0, flags)
+#define AM33XX_UART1_TXD_MMC2_SDWP(flags)				AM33XX_PIN_UART1_TXD(MUX_MODE1, flags)
+#define AM33XX_UART1_TXD_DCAN1_RX(flags)				AM33XX_PIN_UART1_TXD(MUX_MODE2, flags)
+#define AM33XX_UART1_TXD_I2C1_SCL(flags)				AM33XX_PIN_UART1_TXD(MUX_MODE3, flags)
+#define AM33XX_UART1_TXD_PR1_UART0_TXD(flags)				AM33XX_PIN_UART1_TXD(MUX_MODE5, flags)
+#define AM33XX_UART1_TXD_PR1_PRU0_PRU_R31_16(flags)			AM33XX_PIN_UART1_TXD(MUX_MODE6, flags)
+#define AM33XX_UART1_TXD_GPIO0_15(flags)				AM33XX_PIN_UART1_TXD(MUX_MODE7, flags)
+
+#define AM33XX_UART1_RXD(flags)						AM33XX_PIN_UART1_RXD(MUX_MODE0, flags)
+#define AM33XX_UART1_RXD_MMC1_SDWP(flags)				AM33XX_PIN_UART1_RXD(MUX_MODE1, flags)
+#define AM33XX_UART1_RXD_DCAN1_TX(flags)				AM33XX_PIN_UART1_RXD(MUX_MODE2, flags)
+#define AM33XX_UART1_RXD_I2C1_SDA(flags)				AM33XX_PIN_UART1_RXD(MUX_MODE3, flags)
+#define AM33XX_UART1_RXD_PR1_UART0_RXD(flags)				AM33XX_PIN_UART1_RXD(MUX_MODE5, flags)
+#define AM33XX_UART1_RXD_PR1_PRU1_PRU_R31_16(flags)			AM33XX_PIN_UART1_RXD(MUX_MODE6, flags)
+#define AM33XX_UART1_RXD_GPIO0_14(flags)				AM33XX_PIN_UART1_RXD(MUX_MODE7, flags)
+
+#define AM33XX_UART1_RTSN(flags)					AM33XX_PIN_UART1_RTSN(MUX_MODE0, flags)
+#define AM33XX_UART1_RTSN_TIMER5(flags)					AM33XX_PIN_UART1_RTSN(MUX_MODE1, flags)
+#define AM33XX_UART1_RTSN_DCAN0_RX(flags)				AM33XX_PIN_UART1_RTSN(MUX_MODE2, flags)
+#define AM33XX_UART1_RTSN_I2C2_SCL(flags)				AM33XX_PIN_UART1_RTSN(MUX_MODE3, flags)
+#define AM33XX_UART1_RTSN_SPI1_CS1(flags)				AM33XX_PIN_UART1_RTSN(MUX_MODE4, flags)
+#define AM33XX_UART1_RTSN_PR1_UART0_RTS_N(flags)			AM33XX_PIN_UART1_RTSN(MUX_MODE5, flags)
+#define AM33XX_UART1_RTSN_PR1_EDC_LATCH1_IN(flags)			AM33XX_PIN_UART1_RTSN(MUX_MODE6, flags)
+#define AM33XX_UART1_RTSN_GPIO0_13(flags)				AM33XX_PIN_UART1_RTSN(MUX_MODE7, flags)
+
+#define AM33XX_UART1_CTSN(flags)					AM33XX_PIN_UART1_CTSN(MUX_MODE0, flags)
+#define AM33XX_UART1_CTSN_TIMER6(flags)					AM33XX_PIN_UART1_CTSN(MUX_MODE1, flags)
+#define AM33XX_UART1_CTSN_DCAN0_TX(flags)				AM33XX_PIN_UART1_CTSN(MUX_MODE2, flags)
+#define AM33XX_UART1_CTSN_I2C2_SDA(flags)				AM33XX_PIN_UART1_CTSN(MUX_MODE3, flags)
+#define AM33XX_UART1_CTSN_SPI1_CS0(flags)				AM33XX_PIN_UART1_CTSN(MUX_MODE4, flags)
+#define AM33XX_UART1_CTSN_PR1_UART0_CTS_N(flags)			AM33XX_PIN_UART1_CTSN(MUX_MODE5, flags)
+#define AM33XX_UART1_CTSN_PR1_EDC_LATCH0_IN(flags)			AM33XX_PIN_UART1_CTSN(MUX_MODE6, flags)
+#define AM33XX_UART1_CTSN_GPIO0_12(flags)				AM33XX_PIN_UART1_CTSN(MUX_MODE7, flags)
+
+#define AM33XX_XDMA_EVENT_INTR0(flags)					AM33XX_PIN_XDMA_EVENT_INTR0(MUX_MODE0, flags)
+#define AM33XX_XDMA_EVENT_INTR0_TIMER4(flags)				AM33XX_PIN_XDMA_EVENT_INTR0(MUX_MODE2, flags)
+#define AM33XX_XDMA_EVENT_INTR0_CLKOUT1(flags)				AM33XX_PIN_XDMA_EVENT_INTR0(MUX_MODE3, flags)
+#define AM33XX_XDMA_EVENT_INTR0_SPI1_CS1(flags)				AM33XX_PIN_XDMA_EVENT_INTR0(MUX_MODE4, flags)
+#define AM33XX_XDMA_EVENT_INTR0_PR1_PRU1_PRU_R31_16(flags)		AM33XX_PIN_XDMA_EVENT_INTR0(MUX_MODE5, flags)
+#define AM33XX_XDMA_EVENT_INTR0_EMU2(flags)				AM33XX_PIN_XDMA_EVENT_INTR0(MUX_MODE6, flags)
+#define AM33XX_XDMA_EVENT_INTR0_GPIO0_19(flags)				AM33XX_PIN_XDMA_EVENT_INTR0(MUX_MODE7, flags)
+
+#define AM33XX_XDMA_EVENT_INTR1(flags)					AM33XX_PIN_XDMA_EVENT_INTR1(MUX_MODE0, flags)
+#define AM33XX_XDMA_EVENT_INTR1_TCLKIN(flags)				AM33XX_PIN_XDMA_EVENT_INTR1(MUX_MODE2, flags)
+#define AM33XX_XDMA_EVENT_INTR1_CLKOUT2(flags)				AM33XX_PIN_XDMA_EVENT_INTR1(MUX_MODE3, flags)
+#define AM33XX_XDMA_EVENT_INTR1_TIMER7(flags)				AM33XX_PIN_XDMA_EVENT_INTR1(MUX_MODE4, flags)
+#define AM33XX_XDMA_EVENT_INTR1_PR1_PRU0_PRU_R31_16(flags)		AM33XX_PIN_XDMA_EVENT_INTR1(MUX_MODE5, flags)
+#define AM33XX_XDMA_EVENT_INTR1_EMU3(flags)				AM33XX_PIN_XDMA_EVENT_INTR1(MUX_MODE6, flags)
+#define AM33XX_XDMA_EVENT_INTR1_GPIO0_20(flags)				AM33XX_PIN_XDMA_EVENT_INTR1(MUX_MODE7, flags)
+
+#define AM33XX_NNMI(flags)						AM33XX_PIN_NNMI(MUX_MODE0, flags)
+
+#define AM33XX_TMS(flags)						AM33XX_PIN_TMS(MUX_MODE0, flags)
+#define AM33XX_TDI(flags)						AM33XX_PIN_TDI(MUX_MODE0, flags)
+#define AM33XX_TDO(flags)						AM33XX_PIN_TDO(MUX_MODE0, flags)
+#define AM33XX_TCK(flags)						AM33XX_PIN_TCK(MUX_MODE0, flags)
+#define AM33XX_TRSTN(flags)						AM33XX_PIN_TRSTN(MUX_MODE0, flags)
+
+#define AM33XX_USB0_DRVVBUS(flags)					AM33XX_PIN_USB0_DRVVBUS(MUX_MODE0, flags)
+#define AM33XX_USB0_DRVVBUS_GPIO0_18(flags)				AM33XX_PIN_USB0_DRVVBUS(MUX_MODE7, flags)
+
+#define AM33XX_USB1_DRVVBUS(flags)					AM33XX_PIN_USB1_DRVVBUS(MUX_MODE0, flags)
+#define AM33XX_USB1_DRVVBUS_GPIO3_13(flags)				AM33XX_PIN_USB1_DRVVBUS(MUX_MODE7, flags)
+
+#endif
diff --git a/arch/arm/boot/dts/am33xx.dtsi b/arch/arm/boot/dts/am33xx.dtsi
index f6ec85d58dd1..0cd931e1f14f 100644
--- a/arch/arm/boot/dts/am33xx.dtsi
+++ b/arch/arm/boot/dts/am33xx.dtsi
@@ -43,6 +43,7 @@ aliases {
 		mmc0 = &mmc1;
 		mmc1 = &mmc2;
 		mmc2 = &mmc3;
+		mdio-gpio0 = &bitbang_mdio0;
 	};
 
 	cpus {
@@ -160,6 +161,9 @@ target-module@140000 {
 			compatible = "ti,sysc-omap4-simple", "ti,sysc";
 			clocks = <&l3_aon_clkctrl AM3_L3_AON_DEBUGSS_CLKCTRL 0>;
 			clock-names = "fck";
+			ti,hwmods = "debugss";
+			ti,no-reset-on-init;
+			ti,no-idle;
 			#address-cells = <1>;
 			#size-cells = <1>;
 			ranges = <0x0 0x140000 0xec0000>;
diff --git a/arch/arm/boot/dts/am3505-pfc-750_8202.dts b/arch/arm/boot/dts/am3505-pfc-750_8202.dts
new file mode 100644
index 000000000000..c18b331f0532
--- /dev/null
+++ b/arch/arm/boot/dts/am3505-pfc-750_8202.dts
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you u7 redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+/dts-v1/;
+
+#include "am3505-pfc-750_820x.dtsi"
+#include "am3505-pfc-750_820x-ksz8863.dtsi"
+#include "am3505-pfc-750_820x-uart1.dtsi"
+#include "wago-devconf.dtsi"
+
+/ {
+	model = "WAGO PFC200 750-8202";
+	compatible = "wago,am3505-pfc-750_820x-000c", "wago,am3505-pfc", "ti,am3517-evm", "ti,am3517", "ti,omap3";
+
+};
diff --git a/arch/arm/boot/dts/am3505-pfc-750_8203.dts b/arch/arm/boot/dts/am3505-pfc-750_8203.dts
new file mode 100644
index 000000000000..a61971147333
--- /dev/null
+++ b/arch/arm/boot/dts/am3505-pfc-750_8203.dts
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+/dts-v1/;
+
+#include "am3505-pfc-750_820x.dtsi"
+#include "am3505-pfc-750_820x-ksz8863.dtsi"
+#include "am3505-pfc-750_820x-can.dtsi"
+#include "wago-devconf.dtsi"
+
+/ {
+	model = "WAGO PFC200 750-8203";
+	compatible = "wago,am3505-pfc-750_820x-000a", "wago,am3505-pfc", "ti,am3517-evm", "ti,am3517", "ti,omap3";
+
+};
+
+&hecc {
+	status = "okay";
+};
+
+&u7_g {
+	label = "can-green";
+};
+
+&u7_r {
+	label = "can-red";
+};
diff --git a/arch/arm/boot/dts/am3505-pfc-750_8204.dts b/arch/arm/boot/dts/am3505-pfc-750_8204.dts
new file mode 100644
index 000000000000..e3eebe89e2e7
--- /dev/null
+++ b/arch/arm/boot/dts/am3505-pfc-750_8204.dts
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+/dts-v1/;
+
+#include "am3505-pfc-750_820x.dtsi"
+#include "am3505-pfc-750_820x-ksz8863.dtsi"
+#include "am3505-pfc-750_820x-uart1.dtsi"
+#include "am3505-pfc-750_820x-can.dtsi"
+#include "wago-devconf.dtsi"
+
+/ {
+	model = "WAGO PFC200 750-8204";
+	compatible = "wago,am3505-pfc-750_820x-000e", "wago,am3505-pfc", "ti,am3517-evm", "ti,am3517", "ti,omap3";
+
+};
+
+&hecc {
+	status = "okay";
+};
+
+&u7_g {
+	label = "can-green";
+};
+
+&u7_r {
+	label = "can-red";
+};
diff --git a/arch/arm/boot/dts/am3505-pfc-750_8206.dts b/arch/arm/boot/dts/am3505-pfc-750_8206.dts
new file mode 100644
index 000000000000..9fbec794ddcb
--- /dev/null
+++ b/arch/arm/boot/dts/am3505-pfc-750_8206.dts
@@ -0,0 +1,51 @@
+/*
+ * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+/dts-v1/;
+
+#include "am3505-pfc-750_820x.dtsi"
+#include "am3505-pfc-750_820x-ksz8863.dtsi"
+#include "am3505-pfc-750_820x-uart1.dtsi"
+#include "am3505-pfc-750_820x-can.dtsi"
+#include "am3505-pfc-750_820x-dpc31.dtsi"
+#include "am3505-pfc-750_820x-musb.dtsi"
+#include "wago-devconf.dtsi"
+
+/ {
+	model = "WAGO PFC200 750-8206";
+	compatible = "wago,am3505-pfc-750_820x-000f", "wago,am3505-pfc", "ti,am3517-evm", "ti,am3517", "ti,omap3";
+
+};
+
+&hecc {
+	status = "okay";
+};
+
+&u6_g {
+	label = "bf-green";
+};
+
+&u6_r {
+	label = "bf-red";
+};
+
+&u5_g {
+	label = "dia-green";
+};
+
+&u5_r {
+	label = "dia-red";
+};
+
+
+&u7_g {
+	label = "can-green";
+};
+
+&u7_r {
+	label = "can-red";
+};
diff --git a/arch/arm/boot/dts/am3505-pfc-750_8207.dts b/arch/arm/boot/dts/am3505-pfc-750_8207.dts
new file mode 100644
index 000000000000..41870052bd23
--- /dev/null
+++ b/arch/arm/boot/dts/am3505-pfc-750_8207.dts
@@ -0,0 +1,103 @@
+/*
+ * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you u7 redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+/dts-v1/;
+
+#include "am3505-pfc-750_820x.dtsi"
+#include "am3505-pfc-750_820x-ksz8863.dtsi"
+#include "am3505-pfc-750_820x-uart1.dtsi"
+#include "am3505-pfc-750_820x-musb.dtsi"
+#include "wago-devconf.dtsi"
+
+/ {
+	model = "WAGO PFC200 750-8207";
+	compatible = "wago,am3505-pfc-750_820x-001c", "wago,am3505-pfc", "ti,am3517-evm", "ti,am3517", "ti,omap3";
+
+};
+
+&u7_g {
+	label = "usr-green";
+	gpios = <&gpio3 24 0>;
+	linux,default-trigger = "none";
+};
+
+&u7_r {
+	label = "usr-red";
+	gpios = <&gpio3 25 0>;
+	linux,default-trigger = "none";
+};
+
+&u1_g {
+	label = "net-green";
+	gpios = <&gpio3 22 0>;
+	linux,default-trigger = "none";
+};
+&u1_r {
+	label = "net-red";
+	gpios = <&gpio3 23 0>;
+	linux,default-trigger = "none";
+};
+
+&u2_g {
+	label = "s1-green";
+	gpios = <&gpio3 18 0>;
+	linux,default-trigger = "none";
+};
+
+&u2_r {
+	label = "s1-red";
+	gpios = <&gpio3 19 0>;
+	linux,default-trigger = "none";
+};
+
+&u3_g {
+	label = "s2-green";
+	gpios = <&gpio3 14 0>;
+	linux,default-trigger = "none";
+};
+
+&u3_r {
+	label = "s2-red";
+	gpios = <&gpio3 15 0>;
+	linux,default-trigger = "none";
+};
+
+&u4_g {
+	label = "s3-green";
+	gpios = <&gpio3 10 0>;
+	linux,default-trigger = "none";
+};
+
+&u4_r {
+	label = "s3-red";
+	gpios = <&gpio3 11 0>;
+	linux,default-trigger = "none";
+};
+
+&u5_g {
+	label = "s4-green";
+	gpios = <&gpio3 6 0>;
+	linux,default-trigger = "none";
+};
+
+&u5_r {
+	label = "s4-red";
+	gpios = <&gpio3 7 0>;
+	linux,default-trigger = "none";
+};
+
+&u6_g {
+	label = "s5-green";
+	gpios = <&gpio3 2 0>;
+	linux,default-trigger = "none";
+	};
+
+&u6_r {
+	label = "s5-red";
+	gpios = <&gpio3 3 0>;
+	linux,default-trigger = "none";
+};
diff --git a/arch/arm/boot/dts/am3505-pfc-750_820x-can.dtsi b/arch/arm/boot/dts/am3505-pfc-750_820x-can.dtsi
new file mode 100644
index 000000000000..f603b49b9ed7
--- /dev/null
+++ b/arch/arm/boot/dts/am3505-pfc-750_820x-can.dtsi
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+&omap3_pmx_core {
+	can_pins: pinmux_can_pins {
+		pinctrl-single,pins = <
+			/* CAN-LEDs */
+			0x154 (PIN_OUTPUT | MUX_MODE4)		          /* McBSP4_CLKX   -> CAN-RUN_green     GPIO_152 */
+			0x156 (PIN_OUTPUT | MUX_MODE4)		          /* McBSP4_DR     -> CAN-RUN_red       GPIO_153 */
+			0x158 (PIN_OUTPUT | MUX_MODE4)		          /* McBSP4_DX     -> CAN-ERR_green     GPIO_154 */
+			0x15a (PIN_OUTPUT | MUX_MODE4)		          /* McBSP4_FSX    -> CAN-ERR_red       GPIO_155 */
+			0x15c (PIN_OUTPUT | MUX_MODE4)		          /* McBSP1_CLKR   -> CAN-TX_green      GPIO_156 */
+			0x15e (PIN_OUTPUT | MUX_MODE4)		          /* McBSP1_FSR    -> CAN-TX_red        GPIO_157 */
+			0x160 (PIN_OUTPUT | MUX_MODE4)		          /* McBSP1_DX     -> CAN-RX_green      GPIO_158 */
+			0x162 (PIN_OUTPUT | MUX_MODE4)		          /* McBSP1_DR     -> CAN-RX_red        GPIO_159 */
+
+			/* CAN */
+			0x1e4 (PIN_OUTPUT | MUX_MODE0)		          /* HECC1_TXD     -> CAN_TxD */
+			0x1e6 (PIN_INPUT | MUX_MODE0)		          /* HECC1_RXD     -> CAN_RxD */
+		>;
+	};
+};
+
+&hecc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&can_pins>;
+};
diff --git a/arch/arm/boot/dts/am3505-pfc-750_820x-dpc31.dtsi b/arch/arm/boot/dts/am3505-pfc-750_820x-dpc31.dtsi
new file mode 100644
index 000000000000..3610bb20747f
--- /dev/null
+++ b/arch/arm/boot/dts/am3505-pfc-750_820x-dpc31.dtsi
@@ -0,0 +1,108 @@
+/*
+ * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/ {
+	/* dpc31 is on cs1 */
+	UIO_DPC31_XINT@0x1000000 {
+		compatible = "uio_pdrv_genirq";
+		reg = <0x1000000 0x4000>; /* 8k * 2 = 16k, needed because of 16Bit addressing */
+		interrupt-parent = <&gpio3>;
+		interrupts = <1 IRQ_TYPE_EDGE_FALLING>;	/* gpio3_1 / gpio_65 */
+	};
+
+	UIO_DPC31_SYNC@0x1000000 {
+		compatible = "uio_pdrv_genirq";
+		interrupt-parent = <&gpio6>;
+		interrupts = <1 IRQ_TYPE_EDGE_RISING>;	/* gpio6_1 / gpio_161 */
+	};
+
+	UIO_DPC31_DXOUT@0x1000000 {
+		compatible = "uio_pdrv_genirq";
+		interrupt-parent = <&gpio6>;
+		interrupts = <0 IRQ_TYPE_EDGE_RISING>;	/* gpio6_0 / gpio_160 */
+	};
+};
+
+&omap3_pmx_core {
+	dpc31_pins: pinmux_dpc31_pins {
+		pinctrl-single,pins = <
+		  /* gpmc */
+		  // OMAP3_CORE1_IOPAD(0x20b0, PIN_OUTPUT | MUX_MODE4) /* gpmc_ncs1.gpmc_ncs1     -> GPMC-nCS1-FB */
+		  // OMAP3_CORE1_IOPAD(0x20ce, PIN_INPUT | MUX_MODE0)  /* gpmc_wait1.gpmc_wait1 -> GPMC-WAIT1-DPC31 */
+		  /* gpios */
+		  OMAP3_CORE1_IOPAD(0x20D2, PIN_INPUT | MUX_MODE4)  /* gpmc_wait3.gpio3_1    -> SYS_nDMAREQ1
+								     * GPIO Interrupt (GPIO_65): DCP31 XINT (PG5)
+								     * Also useable for DMA transfers.
+								     */
+		  OMAP3_CORE1_IOPAD(0x2194, PIN_INPUT | MUX_MODE4)  /* mcbsp_clks.gpio6_0    -> FB-EEPROM-LOADED (= DPC31_DXCH)
+								     * GPIO Interrupt (GPIO_160): DPC31_DXCH, DCP31 IRR14 (PB3)
+								     * Active on new output data ... (optional)
+								     */
+		  OMAP3_CORE1_IOPAD(0x2196, PIN_OUTPUT | MUX_MODE4) /* mcbsp1_fsx.gpio6_1    -> FB-nSYNC (= DPC31_SYNC)
+								     * GPIO Interrupt (GPIO_161): DPC31_SYNC, DCP31 RES (PB2)
+								     * Fieldbus Sync Signal (optional)
+								     */
+		  OMAP3_CORE1_IOPAD(0x2198, PIN_OUTPUT | MUX_MODE4) /* mcbsp1_clkx.gpio6_2   -> FB-nRST (= nExt_RESET) --> GPIO_162 */
+		>;
+	};
+};
+
+/* #define PAC200_DPC31_GPIO__INT_SYS_NDMAREQ1        65: gpio3_1 */
+/* #define PAC200_DPC31_GPIO__INT_DXCH               160: gpio6_0 */
+/* #define PAC200_DPC31_GPIO__INT_FB_NSYNC           161: gpio6_1 */
+/* #define PAC200_DPC31_GPIO__RESET                  162: gpio6_2 */
+
+&wsysinit {
+	pinctrl-names = "default";
+	pinctrl-0 = <&dpc31_pins>;
+
+	dp,reset;
+	dp,gpio-rst = <&gpio6 2 GPIO_ACTIVE_HIGH>; /* dpc31 reset */
+};
+
+&gpmc {
+	dpc31: nor@1,0 {
+		reg = <1 0 0x1000000>; /* 8k * 2 = 16k, needed because of 16Bit addressing
+					* minimum is 16M - set it here */
+		bank-width = <2>; /* 1: 8bit, 2: 16bit */
+		gpmc,sync-clk-ps = <0>;
+
+		gpmc,cs-on-ns = <42>;
+		gpmc,cs-rd-off-ns = <144>;
+		gpmc,cs-wr-off-ns = <144>;
+
+		gpmc,adv-on-ns = <12>;
+		gpmc,adv-rd-off-ns = <156>;
+		gpmc,adv-wr-off-ns = <156>;
+
+		gpmc,oe-on-ns = <42>;
+		gpmc,oe-off-ns = <144>;
+
+		gpmc,we-on-ns = <42>;
+		gpmc,we-off-ns = <114>;
+
+		gpmc,rd-cycle-ns = <168>;
+		gpmc,wr-cycle-ns = <168>;
+
+		gpmc,access-ns = <150>;
+		gpmc,wr-access-ns = <54>;
+
+		gpmc,wr-data-mux-bus-ns = <18>;
+
+		gpmc,cycle2cycle-delay-ns = <0>;
+
+		gpmc,time-para-granularity;
+		gpmc,mux-add-data = <2>; /* address-data multiplexing mode */
+
+		gpmc,clk-activation-ns = <0>;
+		gpmc,wait-monitoring-ns = <0>;
+
+		#address-cells = <1>;
+		#size-cells = <1>;
+	};
+};
diff --git a/arch/arm/boot/dts/am3505-pfc-750_820x-ksz8863.dtsi b/arch/arm/boot/dts/am3505-pfc-750_820x-ksz8863.dtsi
new file mode 100644
index 000000000000..0e6e77bbe157
--- /dev/null
+++ b/arch/arm/boot/dts/am3505-pfc-750_820x-ksz8863.dtsi
@@ -0,0 +1,76 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/ {
+	swcfg_ksz8863: swcfg_ksz8863 {
+		compatible = "swcfg,ksz8863";
+		swcfg,mii-bus = <&bitbang_mdio0>;
+		swcfg,alias = "ksz8863";
+		swcfg,cpu_port = <2>;
+		swcfg,ports = <3>;
+		swcfg,vlans = <16>;
+		swcfg,switch = <&ksz8863_switch>;
+
+		status = "okay";
+	};
+};
+
+&omap3_pmx_core {
+	ksz8863_pins: pinmux_ksz8863_pins {
+		pinctrl-single,pins = <
+			0x134 (PIN_OUTPUT | MUX_MODE4) /* mmc2_dat4.gpio5_8 (gpio_136) nrst_switch */
+			OMAP3_CORE1_IOPAD(0x2168, PIN_INPUT | MUX_MODE4) /* mmc2_dat6.gpio5_10 (gpio_138) nintswitch */
+		>;
+	};
+};
+
+&bitbang_mdio0 {
+	ksz8863_switch: switch@0 {
+		compatible = "micrel,ksz8863";
+
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		pinctrl-names = "default";
+		pinctrl-0 = <&ksz8863_pins>;
+
+		ksz,reset-gpio = <&gpio5 8 GPIO_ACTIVE_LOW>;	/* gpio2_21: RMII2.EN-PHY */
+
+		reg = <0>;
+		dsa,member = <0 0>;
+
+		ksz,reset-switch;
+
+		status = "okay";
+
+		ports {
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			port@0 {
+				reg = <2>;
+				label = "ethX1";
+			};
+
+			port@1 {
+				reg = <1>;
+				label = "ethX2";
+			};
+
+			port@2 {
+				reg = <3>;
+				label = "cpu";
+				ethernet = <&davinci_emac>;
+				fixed-link {
+					speed = <100>;
+					full-duplex;
+				};
+			};
+		};
+	};
+};
diff --git a/arch/arm/boot/dts/am3505-pfc-750_820x-musb.dtsi b/arch/arm/boot/dts/am3505-pfc-750_820x-musb.dtsi
new file mode 100644
index 000000000000..88b337744a43
--- /dev/null
+++ b/arch/arm/boot/dts/am3505-pfc-750_820x-musb.dtsi
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+&omap3_pmx_core {
+	usb_otg_pins: pinmux_usb_otg_pins {
+		pinctrl-single,pins = <
+			/* USB OTG Mux Config */
+			0x1e2 (PIN_INPUT_PULLDOWN | MUX_MODE0)  /* usb0_drvvbus.usb0_drvvbus */
+			0x128 (PIN_OUTPUT | MUX_MODE4)          /* mmc2_clk.gpio5_2 - gpio_130: 3G Modem Reset */
+			0x12c (PIN_OUTPUT | MUX_MODE4)          /* mmc2_dat0.gpio5_4 - gpio_132: 3G Modem Power */
+		>;
+	};
+};
+
+&wsysinit {
+	modem,type = "3G";
+	modem,reset;
+	modem,gpio-rst = <&gpio5 2 GPIO_ACTIVE_HIGH>; /* 3G Modem Reset */
+};
+
+&am35x_otg_hs {
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&usb_otg_pins>;
+
+	multipoint = <1>;
+	num-eps = <16>;
+	ram-bits = <12>;
+
+	interface-type = <0>; 	/* ULPI */
+	mode = <1>;		/* HOST Mode */
+	power = <250>;		/* can supply 100mA when operating in host mode */
+};
diff --git a/arch/arm/boot/dts/am3505-pfc-750_820x-uart1.dtsi b/arch/arm/boot/dts/am3505-pfc-750_820x-uart1.dtsi
new file mode 100644
index 000000000000..8e0c8919f7ab
--- /dev/null
+++ b/arch/arm/boot/dts/am3505-pfc-750_820x-uart1.dtsi
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+&omap3_pmx_core {
+
+	uart1_rs_pins: pinmux_uart1_rs_pins {
+		pinctrl-single,pins = <
+			OMAP3_CORE1_IOPAD(0x21d2, PIN_OUTPUT | MUX_MODE4)	/* mcspi1_cs2.gpio6_16 (gpio_176) sel_rs232/485 */
+			0x150 (PIN_INPUT | MUX_MODE0)				/* uart1_cts.uart1_cts */
+			0x14e (PIN_OUTPUT | MUX_MODE0)				/* uart1_rts.uart1_rts */
+			0x152 (WAKEUP_EN | PIN_INPUT | MUX_MODE0)		/* uart1_rx.uart1_rx */
+			0x14c (PIN_OUTPUT | MUX_MODE0)				/* uart1_tx.uart1_tx */
+		>;
+	};
+};
+
+&uart1 {
+	compatible = "ti,omap3-uart-rtu";
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart1_rs_pins>;
+
+	rs485en-gpio = <&gpio6 16 GPIO_ACTIVE_LOW>;
+	rs485-rts-active-high;
+	/* rs485-rx-during-tx; */ // we only support 2-wire mode
+	rs485-rts-delay = <1 1>;
+	/* linux,rs485-enabled-at-boot-time; */
+};
diff --git a/arch/arm/boot/dts/am3505-pfc-750_820x.dtsi b/arch/arm/boot/dts/am3505-pfc-750_820x.dtsi
new file mode 100644
index 000000000000..e498716e1fce
--- /dev/null
+++ b/arch/arm/boot/dts/am3505-pfc-750_820x.dtsi
@@ -0,0 +1,678 @@
+/*
+ * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include "am3517.dtsi"
+
+/ {
+	compatible = "wago,am3505-pfc", "ti,am3517", "ti,omap3";
+
+	aliases {
+		mdio-gpio0 = &bitbang_mdio0;
+		ethernet0 = &davinci_emac;
+	};
+
+	memory {
+		device_type = "memory";
+		reg = <0x80000000 0x10000000>; /* 256 MB */
+	};
+
+	vmmc_fixed: vmmc {
+		compatible = "regulator-fixed";
+		regulator-name = "vmmc_fixed";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+	};
+
+	/* common init entries */
+	wsysinit: wsysinit_init {
+		status = "okay";
+		compatible = "wago,sysinit";
+
+		tty,service   = "ttyO2";
+		tty,rs232-485 = "ttyO0";
+
+		board,variant = "pfc200";
+
+		/* sysclock adjustments,
+		   empirical values */
+		adjtimex,tick = <10083>;
+		adjtimex,frequency = <2000000>;
+	};
+
+	bitbang_mdio0: gpio_mdio {
+		status = "okay";
+		compatible = "virtual,mdio-gpio";
+		#address-cells = <1>;
+		#size-cells = <0>;
+	};
+
+	/*
+	   this name of the gpio-keys device is a
+	   historical heritage from 3.6.11 kernel.
+	   the device-name is checked in omsd. So we
+	   need to adapt this configuration
+	*/
+	PAC-Operating-Mode-Switch {
+		compatible = "gpio-keys";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		autorepeat;
+
+		run {
+			label = "RUN";
+			gpios = <&gpio3 26 GPIO_ACTIVE_LOW>; /* BAS_RUN GPIO 90 */
+			linux,code = <1>;
+			linux,input-type = <5>;  /* EV_SW */
+			debounce-interval = <1>; /* debounce ticks interval in msecs */
+		};
+
+		stop {
+			label = "STOP";
+			gpios = <&gpio3 27 GPIO_ACTIVE_LOW>; /* BAS_RUN GPIO 91 */
+			linux,code = <2>;
+			linux,input-type = <5>;  /* EV_SW */
+			debounce-interval = <1>; /* debounce ticks interval in msecs */
+		};
+
+		reset {
+			label = "RESET";
+			gpios = <&gpio3 28 GPIO_ACTIVE_LOW>; /* BAS_RUN GPIO 92 */
+			linux,code = <3>;
+			linux,input-type = <1>;  /* EV_KEY */
+			debounce-interval = <1>; /* debounce ticks interval in msecs */
+		};
+
+		reset_all {
+			label = "RESET_ALL";
+			gpios = <&gpio3 29 GPIO_ACTIVE_HIGH>; /* BAS_RUN GPIO 93 */
+			linux,code = <4>;
+			linux,input-type = <1>;  /* EV_KEY */
+			debounce-interval = <1>; /* debounce ticks interval in msecs */
+		};
+
+	};
+
+	/* nvram is on cs2 */
+	UIO_NVRAM@0x2000000 {
+		compatible = "uio_pdrv_genirq";
+		reg = <0x2000000 0x20000>; /* 128k */
+	};
+
+	leds: gpio-leds {
+		compatible = "gpio-leds";
+
+		u1_g: u1-green@0 {
+			label = "u1-green";
+			gpios = <&gpio3 22 0>;
+			linux,default-trigger = "none";
+		};
+
+		u1_r: u1-red@1 {
+			label = "u1-red";
+			gpios = <&gpio3 23 0>;
+			linux,default-trigger = "none";
+		};
+
+		u2_g: u2-green@2 {
+			label = "u2-green";
+			gpios = <&gpio3 18 0>;
+			linux,default-trigger = "none";
+		};
+
+		u2_r: u2-red@3 {
+			label = "u2-red";
+			gpios = <&gpio3 19 0>;
+			linux,default-trigger = "none";
+		};
+
+		u3_g: u3-green@4 {
+			label = "u3-green";
+			gpios = <&gpio3 14 0>;
+			linux,default-trigger = "none";
+		};
+
+		u3_r: u3-red@5 {
+			label = "u3-red";
+			gpios = <&gpio3 15 0>;
+			linux,default-trigger = "none";
+		};
+
+		u4_g: u4-green@6 {
+			label = "u4-green";
+			gpios = <&gpio3 10 0>;
+			linux,default-trigger = "none";
+		};
+
+		u4_r: u4-red@7 {
+			label = "u4-red";
+			gpios = <&gpio3 11 0>;
+			linux,default-trigger = "none";
+		};
+
+		u5_g: u5-green@8 {
+			label = "u5-green";
+			gpios = <&gpio3 6 0>;
+			linux,default-trigger = "none";
+		};
+
+		u5_r: u5-red@9 {
+			label = "u5-red";
+			gpios = <&gpio3 7 0>;
+			linux,default-trigger = "none";
+		};
+
+		u6_g: u6-green@10 {
+			label = "u6-green";
+			gpios = <&gpio3 2 0>;
+			linux,default-trigger = "none";
+			};
+
+		u6_r: u6-red@11 {
+			label = "u6-red";
+			gpios = <&gpio3 3 0>;
+			linux,default-trigger = "none";
+		};
+
+		sys_g: sys-green@12 {
+			label = "sys-green";
+			gpios = <&gpio3 4 0>;
+			linux,default-trigger = "timer";
+		};
+
+		sys_r: sys-red@13 {
+			label = "sys-red";
+			gpios = <&gpio3 5 0>;
+			linux,default-trigger = "timer";
+		};
+
+
+		run_g: run-green@14 {
+			label = "run-green";
+			gpios = <&gpio3 8 0>;
+			linux,default-trigger = "none";
+		};
+
+		run_r: run-red@15 {
+			label = "run-red";
+			gpios = <&gpio3 9 0>;
+			linux,default-trigger = "none";
+		};
+
+
+		io_g: io-green@16 {
+			label = "io-green";
+			gpios = <&gpio3 12 0>;
+			linux,default-trigger = "none";
+		};
+
+		io_r: io-red@17 {
+			label = "io-red";
+			gpios = <&gpio3 13 0>;
+			linux,default-trigger = "none";
+		};
+
+
+		ms_g: ms-green@18 {
+			label = "ms-green";
+			gpios = <&gpio3 16 0>;
+			linux,default-trigger = "none";
+		};
+
+		ms_r: ms-red@19 {
+			label = "ms-red";
+			gpios = <&gpio3 17 0>;
+			linux,default-trigger = "none";
+		};
+
+
+		ns_g: ns-green@20 {
+			label = "ns-green";
+			gpios = <&gpio3 20 0>;
+			linux,default-trigger = "none";
+		};
+
+		ns_r: ns-red@21 {
+			label = "ns-red";
+			gpios = <&gpio3 21 0>;
+			linux,default-trigger = "none";
+		};
+
+		u7_g: u7-green@22 {
+			label = "u7-green";
+			gpios = <&gpio3 24 0>;
+			linux,default-trigger = "none";
+		};
+
+		u7_r: u7-red@23 {
+			label = "u7-red";
+			gpios = <&gpio3 25 0>;
+			linux,default-trigger = "none";
+		};
+	};
+
+	watchdog: watchdog {
+		/* XC6124 */
+		compatible = "linux,wdt-gpio";
+		pinctrl-names = "default";
+		pinctrl-0 = <&watchdog_pins>;
+
+		en-gpios = <&gpio6 3 GPIO_ACTIVE_LOW>; /* 163 - EN */
+		gpios = <&gpio6 4 GPIO_ACTIVE_LOW>;   /* 164 - WDI */
+
+		hw_algo = "toggle";
+		hw_margin_ms = <1600>;
+		status = "okay";
+
+		rt-prio = <91>;
+	};
+};
+
+&omap3_pmx_core {
+	pinctrl-names = "default";
+	pinctrl-0 = <
+		&led_pins
+	>;
+
+	uart2_pins: pinmux_uart2_pins {
+		pinctrl-single,pins = <
+			OMAP3_CORE1_IOPAD(0x217a, WAKEUP_EN | PIN_INPUT | MUX_MODE0) /* uart2_rx.uart2_rx */
+			OMAP3_CORE1_IOPAD(0x2178, PIN_OUTPUT | MUX_MODE0)	     /* uart2_tx.uart2_tx */
+		>;
+	};
+
+	mcspi1_pins: pinmux_mcspi1_pins {
+		pinctrl-single,pins = <
+			OMAP3_CORE1_IOPAD(0x21c8, PIN_INPUT | MUX_MODE0) /* mcspi1_clk.mcspi1_clk */
+			OMAP3_CORE1_IOPAD(0x21ca, PIN_OUTPUT | MUX_MODE0) /* mcspi1_simo.mcspi1_simo */
+			OMAP3_CORE1_IOPAD(0x21cc, PIN_INPUT | MUX_MODE0) /* mcspi1_somi.mcspi1_somi */
+			OMAP3_CORE1_IOPAD(0x21ce, PIN_OUTPUT | MUX_MODE0) /* mcspi1_cs0.mcspi1_cs0 */
+		>;
+	};
+
+	kbus_pins: pinmux_kbus_pins {
+		pinctrl-single,pins = <
+			OMAP3_CORE1_IOPAD(0x21ea, PIN_OUTPUT | MUX_MODE4) /* ccdc_vd.gpio4_1     -> KBus-nIRQ_GPIO97 */
+
+			OMAP3_CORE1_IOPAD(0x21ec, PIN_INPUT | MUX_MODE4)  /* ccdc_wen.gpio4_2    -> KBus-ErrSt0_GPIO98 */
+			OMAP3_CORE1_IOPAD(0x21ee, PIN_INPUT | MUX_MODE4)  /* ccdc_data0.gpio4_3  -> KBus-ErrSt1_GPIO99 */
+			OMAP3_CORE1_IOPAD(0x21f0, PIN_INPUT | MUX_MODE4)  /* ccdc_data1.gpio4_4  -> KBus-ErrSt2_GPIO100 */
+			OMAP3_CORE1_IOPAD(0x21f2, PIN_INPUT | MUX_MODE4)  /* ccdc_data2.gpio4_5  -> KBus-ErrSt3_GPIO101 */
+
+			OMAP3_CORE1_IOPAD(0x21f4, PIN_INPUT | MUX_MODE4)  /* ccdc_data3.gpio4_6  -> KBus-nErr_GPIO102 */
+			OMAP3_CORE1_IOPAD(0x21f6, PIN_OUTPUT | MUX_MODE4) /* ccdc_data4.gpio4_7  -> KBus-CmdSel_GPIO103 */
+			OMAP3_CORE1_IOPAD(0x21f8, PIN_INPUT | MUX_MODE4)  /* ccdc_data5.gpio4_8  -> KBus-nRDY_GPIO104 */
+			OMAP3_CORE1_IOPAD(0x21fa, PIN_OUTPUT | MUX_MODE4) /* ccdc_data6.gpio4_9  -> KBus-nRST_GPIO105 */
+			OMAP3_CORE1_IOPAD(0x21fc, PIN_INPUT | MUX_MODE4)  /* ccdc_data7.gpio4_10 -> KBus-nSync_GPIO106 */
+		>;
+	};
+
+	led_pins: pinmux_led_pins {
+		pinctrl-single,pins = <
+			OMAP3_CORE1_IOPAD(0x20d4, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_pclk.gpio_66: led_1_1_green */
+			OMAP3_CORE1_IOPAD(0x20d6, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_hsync.gpio_67: led_1_1_red */
+			OMAP3_CORE1_IOPAD(0x20d8, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_vsync.gpio_68: led_1_2_green */
+			OMAP3_CORE1_IOPAD(0x20da, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_acbias.gpio_69: led_1_2_red */
+
+			OMAP3_CORE1_IOPAD(0x20dc, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data0.gpio_70: led_2_1_green */
+			OMAP3_CORE1_IOPAD(0x20de, PIN_OUTPUT_PULLDOWN | MUX_MODE4)	    /* dss_data1.gpio_71: led_2_1_red */
+			OMAP3_CORE1_IOPAD(0x20e0, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data2.gpio_72: led_2_2_green */
+			OMAP3_CORE1_IOPAD(0x20e2, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data3.gpio_73: led_2_2_red */
+
+			OMAP3_CORE1_IOPAD(0x20e4, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data4.gpio_74: led_3_1_green */
+			OMAP3_CORE1_IOPAD(0x20e6, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data5.gpio_75: led_3_1_red */
+			OMAP3_CORE1_IOPAD(0x20e8, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data6.gpio_76: led_3_2_green */
+			OMAP3_CORE1_IOPAD(0x20ea, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data7.gpio_77: led_3_2_red */
+
+			OMAP3_CORE1_IOPAD(0x20ec, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data8.gpio_78: led_4_1_green */
+			OMAP3_CORE1_IOPAD(0x20ee, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data9.gpio_79: led_4_1_red */
+			OMAP3_CORE1_IOPAD(0x20f0, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data10.gpio_80: led_4_2_green */
+			OMAP3_CORE1_IOPAD(0x20f2, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data11.gpio_81: led_4_2_red */
+
+			OMAP3_CORE1_IOPAD(0x20f4, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data12.gpio_82: led_5_1_green */
+			OMAP3_CORE1_IOPAD(0x20f6, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data13.gpio_83: led_5_1_red */
+			OMAP3_CORE1_IOPAD(0x20f8, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data14.gpio_84: led_5_2_green */
+			OMAP3_CORE1_IOPAD(0x20fa, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data15.gpio_85: led_5_2_red */
+
+			OMAP3_CORE1_IOPAD(0x20fc, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data16.gpio_86: led_6_1_green */
+			OMAP3_CORE1_IOPAD(0x20fe, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data17.gpio_87: led_6_1_red */
+			OMAP3_CORE1_IOPAD(0x2100, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data18.gpio_88: led_6_2_green */
+			OMAP3_CORE1_IOPAD(0x2102, PIN_OUTPUT_PULLDOWN | MUX_MODE4)  /* dss_data19.gpio_89: led_6_2_red */
+		>;
+	};
+
+	emac_pins: pinmux_emac_pins {
+		pinctrl-single,pins = <
+			OMAP3_CORE1_IOPAD(0x2202, PIN_INPUT | MUX_MODE0)           /* rmii_rxd0.rmii_rxd0           */
+			OMAP3_CORE1_IOPAD(0x2204, PIN_INPUT | MUX_MODE0)           /* rmii_rxd1.rmii_rxd1           */
+			OMAP3_CORE1_IOPAD(0x2206, PIN_INPUT | MUX_MODE0)           /* rmii_crs_dv.rmii_crs_dv       */
+			OMAP3_CORE1_IOPAD(0x2208, PIN_INPUT | MUX_MODE0)           /* rmii_rxer.rmii_rxer           */
+			OMAP3_CORE1_IOPAD(0x220a, PIN_OUTPUT_PULLUP | MUX_MODE0)   /* rmii_txd0.rmii_txd0           */
+			OMAP3_CORE1_IOPAD(0x220c, PIN_INPUT | MUX_MODE0)           /* rmii_txd1.rmii_txd1           */
+			OMAP3_CORE1_IOPAD(0x220e, PIN_INPUT | MUX_MODE0)           /* rmii_txen.rmii_txen           */
+			OMAP3_CORE1_IOPAD(0x2210, PIN_INPUT | MUX_MODE0)           /* rmii_50mhz_clk.rmii_50mhz_clk */
+		>;
+	};
+
+	gpio_bitbang_mdio_pins: pinmux_gpio_bitbang_mdio_pins {
+		pinctrl-single,pins = <
+			/* MDIO */
+			OMAP3_CORE1_IOPAD(0x21fe, PIN_INPUT_PULLUP  | MUX_MODE4) /* rmii_mdio_data.gpio4_11 (gpio_107) */
+			OMAP3_CORE1_IOPAD(0x2200, PIN_OUTPUT_PULLUP | MUX_MODE4) /* rmii_mdio_clk.gpio4_12 (gpio_108)  */
+		>;
+	};
+
+	gpio_bitbang_mdio_sleep_pins: pinmux_gpio_bitbang_mdio_sleep_pins {
+		pinctrl-single,pins = <
+			/* MDIO reset value */
+			OMAP3_CORE1_IOPAD(0x21fe, PIN_INPUT_PULLUP   | MUX_MODE4)  /* rmii_mdio_data.rmii_mdio_data */
+			OMAP3_CORE1_IOPAD(0x2200, PIN_INPUT_PULLDOWN | MUX_MODE4)   /* rmii_mdio_clk.rmii_mdio_clk   */
+		>;
+	};
+
+	/* For all pins: offset is 0x48002030 */
+	mmc1_pins: pinmux_mmc1_pins {
+		pinctrl-single,pins = <
+			OMAP3_CORE1_IOPAD(0x2144, PIN_INPUT_PULLUP | MUX_MODE0)	/* sdmmc1_clk.sdmmc1_clk */
+			OMAP3_CORE1_IOPAD(0x2146, PIN_INPUT_PULLUP | MUX_MODE0)	/* sdmmc1_cmd.sdmmc1_cmd */
+			OMAP3_CORE1_IOPAD(0x2148, PIN_INPUT_PULLUP | MUX_MODE0)	/* sdmmc1_dat0.sdmmc1_dat0 */
+			OMAP3_CORE1_IOPAD(0x214a, PIN_INPUT_PULLUP | MUX_MODE0)	/* sdmmc1_dat1.sdmmc1_dat1 */
+			OMAP3_CORE1_IOPAD(0x214c, PIN_INPUT_PULLUP | MUX_MODE0)	/* sdmmc1_dat2.sdmmc1_dat2 */
+			OMAP3_CORE1_IOPAD(0x214e, PIN_INPUT_PULLUP | MUX_MODE0)	/* sdmmc1_dat3.sdmmc1_dat3 */
+
+			OMAP3_CORE1_IOPAD(0x213C, PIN_INPUT_PULLUP | MUX_MODE4) /* mcbsp2_fsx.gpio116 CD */
+			OMAP3_CORE1_IOPAD(0x2140, PIN_INPUT_PULLUP | MUX_MODE4) /* mcbsp2_dr.gpio118 WP */
+		>;
+	};
+
+	gpmc_pins: pinmux_gpmc_pins {
+		pinctrl-single,pins = <
+			OMAP3_CORE1_IOPAD(0x207a, PIN_OUTPUT_PULLUP | MUX_MODE0)	/* gpmc_a1.gpmc_a1 */
+			OMAP3_CORE1_IOPAD(0x207c, PIN_OUTPUT_PULLUP | MUX_MODE0)	/* gpmc_a2.gpmc_a2 */
+			OMAP3_CORE1_IOPAD(0x207e, PIN_OUTPUT_PULLUP | MUX_MODE0)	/* gpmc_a3.gpmc_a3 */
+			OMAP3_CORE1_IOPAD(0x2080, PIN_OUTPUT_PULLUP | MUX_MODE0)	/* gpmc_a4.gpmc_a4 */
+			OMAP3_CORE1_IOPAD(0x2082, PIN_OUTPUT_PULLUP | MUX_MODE0)	/* gpmc_a5.gpmc_a5 */
+			OMAP3_CORE1_IOPAD(0x2084, PIN_OUTPUT_PULLUP | MUX_MODE0)	/* gpmc_a6.gpmc_a6 */
+			OMAP3_CORE1_IOPAD(0x2086, PIN_OUTPUT_PULLUP | MUX_MODE0)	/* gpmc_a7.gpmc_a7 */
+			OMAP3_CORE1_IOPAD(0x2088, PIN_OUTPUT_PULLUP | MUX_MODE0)	/* gpmc_a8.gpmc_a8 */
+			OMAP3_CORE1_IOPAD(0x208a, PIN_OUTPUT_PULLUP | MUX_MODE0)	/* gpmc_a9.gpmc_a9 */
+			OMAP3_CORE1_IOPAD(0x208c, PIN_OUTPUT_PULLUP | MUX_MODE0)	/* gpmc_a10.gpmc_a10 */
+
+			OMAP3_CORE1_IOPAD(0x209c, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_d7.gpmc_d7 */
+			OMAP3_CORE1_IOPAD(0x209e, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_d8.gpmc_d8 */
+			OMAP3_CORE1_IOPAD(0x20a0, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_d10.gpmc_d9  */
+			OMAP3_CORE1_IOPAD(0x20a2, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_d11.gpmc_d10 */
+			OMAP3_CORE1_IOPAD(0x20a4, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_d12.gpmc_d11 */
+			OMAP3_CORE1_IOPAD(0x20a6, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_d13.gpmc_d12 */
+			OMAP3_CORE1_IOPAD(0x20a8, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_d14.gpmc_d13 */
+			OMAP3_CORE1_IOPAD(0x20aa, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_d15.gpmc_d14 */
+
+			OMAP3_CORE1_IOPAD(0x20ae, PIN_OUTPUT_PULLUP | MUX_MODE0)	/* gpmc_ncs0.gpmc_ncs0 */
+			OMAP3_CORE1_IOPAD(0x20b0, PIN_OUTPUT_PULLUP | MUX_MODE0)	/* gpmc_ncs1.gpmc_ncs1 */
+			OMAP3_CORE1_IOPAD(0x20b2, PIN_OUTPUT_PULLUP | MUX_MODE0)	/* gpmc_ncs2.gpmc_ncs2 */
+			OMAP3_CORE1_IOPAD(0x20bc, PIN_OUTPUT_PULLUP | MUX_MODE0)	/* gpmc_clk.gpmc_clk */
+
+			OMAP3_CORE1_IOPAD(0x20c0, PIN_OUTPUT | MUX_MODE0)	/* gpmc_nadv_ale.gpmc_nadv_ale */
+			OMAP3_CORE1_IOPAD(0x20c2, PIN_OUTPUT | MUX_MODE0)	/* gpmc_noe.gpmc_noe */
+			OMAP3_CORE1_IOPAD(0x20c4, PIN_OUTPUT | MUX_MODE0)	/* gpmc_nwe */
+
+			OMAP3_CORE1_IOPAD(0x20c6, PIN_OUTPUT_PULLUP | MUX_MODE0)/* gpmc_nbe0_cle.gpmc_nbe0_cle */
+
+			OMAP3_CORE1_IOPAD(0x20c8, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_nbe1.gpmc_nbe1 */
+			OMAP3_CORE1_IOPAD(0x20ca, PIN_INPUT | MUX_MODE0)	/* gpmc_nwp.gpmc_nwp */
+
+			OMAP3_CORE1_IOPAD(0x20cc, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_wait0.gpmc_wait0 */
+			OMAP3_CORE1_IOPAD(0x20ce, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_wait1.gpmc_wait1 */
+			OMAP3_CORE1_IOPAD(0x20d0, PIN_INPUT_PULLUP | MUX_MODE4)	/* gpmc_wait2.gpio_64 */
+		>;
+	};
+
+	watchdog_pins: pinmux_watchdog_pins {
+		pinctrl-single,pins = <
+			OMAP3_CORE1_IOPAD(0x219a, PIN_OUTPUT | MUX_MODE4) /* uart3_cts_rctx.gpio6_3, nWDG_EN_GPIO163 */
+			OMAP3_CORE1_IOPAD(0x219c, PIN_OUTPUT | MUX_MODE4) /* uart3_rts_sd.gpio6_4, WDG_TRG_GPIO164 */
+		>;
+	};
+};
+
+&bitbang_mdio0 {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&gpio_bitbang_mdio_pins>;
+	pinctrl-1 = <&gpio_bitbang_mdio_sleep_pins>;
+	gpios = <&gpio4 12 0	/* 0: mdc  */
+		&gpio4 11 0>;   /* 1: mdio */
+};
+
+&davinci_emac {
+	status = "okay";
+	fixed-link {
+		speed = <100>;
+		full-duplex;
+	};
+};
+
+&uart1 {
+	status = "disabled";
+};
+
+&uart2 { /* KBUS Firmware download */
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart2_pins>;
+};
+
+&i2c1 {
+	clock-frequency = <400000>;
+};
+
+&i2c2 {
+	clock-frequency = <400000>;
+
+	rtc_r2221t@32 {
+		compatible = "ricoh,r2221tl";
+		reg = <0x32>;
+
+		interrupt-parent = <&gpio1>;
+		interrupts = <1 IRQ_TYPE_LEVEL_LOW>;
+		trim-data = <0 0 13>;
+	};
+
+
+	eeprom: 24c512@54 {
+		compatible = "atmel,24c512";
+		reg = <0x54>;
+
+		pagesize = <128>;
+		wp-gpios = <&gpio6 10 GPIO_ACTIVE_HIGH>;
+	};
+};
+
+&i2c3 {
+	status = "disabled";
+	clock-frequency = <400000>;
+};
+
+&mmc1 {
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&mmc1_pins>;
+	vmmc-supply = <&vmmc_fixed>;
+	bus-width = <4>;
+	wp-gpios = <&gpio4 22 GPIO_ACTIVE_HIGH>;
+	cd-gpios = <&gpio4 20 GPIO_ACTIVE_HIGH>;
+	cd-inverted;
+	cd-debounce-delay-ms = <7>;
+};
+
+&mmc2 {
+	status = "disabled";
+};
+
+&mmc3 {
+	status = "disabled";
+};
+
+&mcspi1 {
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&mcspi1_pins>;
+	spi-rt;
+	spi-rt-prio = <81>;
+
+	kbus0: kbus@0 {	/* KBUS on cs0 */
+		compatible = "wago,spi-kbus";
+		status = "okay";
+		pinctrl-names = "default";
+		pinctrl-0 = <&kbus_pins>;
+		reg = <0>;
+		spi-max-frequency = <10000000>; /* FIXME */
+		kbus,dma-boost; /* this enables dma boosting */
+		kbus,dma-boost-prio   = <85>;
+		kbus,dma-boost-irq-thread = "omap-dma";
+		kbus,dma-default-prio = <50>;
+
+		kbus,reset-on-boot;
+
+		/*
+		 * announce used tty-device in /sys/class/wago/system.
+		 * is needed to link this device to /dev/ttyKbus
+		 */
+		kbus,tty-device = "ttyO1"; /* corresponds to &uart2*/
+
+
+		/* some should be active low, keep all to high for compatibility reasons */
+		kbus,nrst-gpios   = <&gpio4  9 GPIO_ACTIVE_LOW>;
+		kbus,nsync-gpios  = <&gpio4 10 GPIO_ACTIVE_HIGH>;
+		kbus,cmdsel-gpios = <&gpio4  7 GPIO_ACTIVE_HIGH>;
+		kbus,nirq-gpios   = <&gpio4  1 GPIO_ACTIVE_HIGH>;
+		kbus,nerr-gpios   = <&gpio4  6 GPIO_ACTIVE_HIGH>;
+
+		kbus,errst-gpios  = <&gpio4  2 GPIO_ACTIVE_HIGH    /* 0..2 */
+				    &gpio4  3 GPIO_ACTIVE_HIGH
+				    &gpio4  4 GPIO_ACTIVE_HIGH>; /* On pfc200 we have one more:
+								  * &gpio4  4 GPIO_ACTIVE_HIGH
+								  * but keep it in sync with pfc100
+								  */
+
+		kbus,nrdy-gpios   = <&gpio4  8 GPIO_ACTIVE_HIGH>;
+	};
+};
+
+&gpmc {
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&gpmc_pins>;
+	num-cs = <3>;
+	num-waitpins = <4>;
+	ranges = <
+		0 0 0x08000000 0x01000000	/* CS0: NAND, 16M */
+		1 0 0x01000000 0x01000000	/* CS1: FB/DPC31, 16M */
+		2 0 0x02000000 0x01000000	/* CS2: NVRAM, 16M */
+	>;
+
+	nand: nand@0,0 {
+		compatible = "ti,omap2-nand";
+		reg = <0 0 4>; /* CS0, offset 0, IO size 4 */
+		nand-bus-width = <8>;
+		ti,nand-ecc-opt = "bch8";
+		gpmc,device-nand = "true";
+		gpmc,device-width = <1>;
+
+		gpmc,sync-clk-ps = <0>;
+		gpmc,cs-on-ns = <0>;
+		gpmc,cs-rd-off-ns = <36>;
+		gpmc,cs-wr-off-ns = <36>;
+		gpmc,adv-on-ns = <6>;
+		gpmc,adv-rd-off-ns = <24>;
+		gpmc,adv-wr-off-ns = <36>;
+		gpmc,we-on-ns = <0>;
+		gpmc,we-off-ns = <30>;
+		gpmc,oe-on-ns = <0>;
+		gpmc,oe-off-ns = <48>;
+		gpmc,access-ns = <54>;
+		gpmc,rd-cycle-ns = <72>;
+		gpmc,wr-cycle-ns = <72>;
+
+		gpmc,wait-pin = <0>;
+		gpmc,wait-on-read;
+		gpmc,wait-on-write;
+		gpmc,bus-turnaround-ns = <0>;
+		gpmc,cycle2cycle-delay-ns = <0>;
+		gpmc,clk-activation-ns = <0>;
+		gpmc,wait-monitoring-ns = <0>;
+
+		gpmc,wr-access-ns = <30>;
+		gpmc,wr-data-mux-bus-ns = <0>;
+
+		#address-cells = <1>;
+		#size-cells = <1>;
+	};
+
+	nvram: nor@2,0 { /* NVRAM Device 128k */
+		reg = <2 0 0x01000000>;
+		gpmc,device-width = <2>;
+
+		bank-width = <2>; /* 1: 8bit, 2: 16bit */
+		gpmc,sync-clk-ps = <0>;
+
+		gpmc,cs-on-ns = <12>;
+		gpmc,cs-rd-off-ns = <54>;
+		gpmc,cs-wr-off-ns = <30>;
+
+		gpmc,adv-on-ns = <6>;
+		gpmc,adv-rd-off-ns = <54>;
+		gpmc,adv-wr-off-ns = <30>;
+
+		gpmc,oe-on-ns = <12>;
+		gpmc,oe-off-ns = <54>;
+
+		gpmc,we-on-ns = <12>;
+		gpmc,we-off-ns = <30>;
+
+		gpmc,rd-cycle-ns = <54>;
+		gpmc,wr-cycle-ns = <30>;
+
+		gpmc,access-ns = <48>;
+
+		gpmc,wr-access-ns = <18>;
+		gpmc,wr-data-mux-bus-ns = <12>;
+
+		gpmc,time-para-granularity;
+		gpmc,mux-add-data = <2>; /* address-data multiplexing mode */
+
+		gpmc,clk-activation-ns = <0>;
+		gpmc,wait-monitoring-ns = <0>;
+
+		gpmc,cycle2cycle-delay-ns = <0>;
+
+		#address-cells = <1>;
+		#size-cells = <1>;
+	};
+};
+
+&usbhshost {
+	status = "disabled";
+};
+
+&sham {
+	status = "disabled";
+};
+
+&gpio3 {
+	ti,no-reset-on-init;
+};
+
+&counter32k {
+	status = "okay";
+};
+
+&wdt2 {
+	ti,no-reset-on-init;
+	ti,no-idle;
+};
+
+/include/ "pxc-nandparts.dtsi"
diff --git a/arch/arm/boot/dts/am3517.dtsi b/arch/arm/boot/dts/am3517.dtsi
index de33c4f89f33..42937307e536 100644
--- a/arch/arm/boot/dts/am3517.dtsi
+++ b/arch/arm/boot/dts/am3517.dtsi
@@ -51,14 +51,17 @@ opp100-600000000 {
 		};
 	};
 
-	ocp@68000000 {
+	am35x_ocp: ocp@68000000 {
 		am35x_otg_hs: am35x_otg_hs@5c040000 {
-			compatible = "ti,omap3-musb";
+			compatible = "ti,musb-am35x";
 			ti,hwmods = "am35x_otg_hs";
 			status = "disabled";
 			reg = <0x5c040000 0x1000>;
 			interrupts = <71>;
 			interrupt-names = "mc";
+			multipoint = <1>;
+			num-eps = <16>;
+			ram-bits = <12>;
 		};
 
 		davinci_emac: ethernet@5c000000 {
diff --git a/arch/arm/boot/dts/imx6q-ec-752_8303.dts b/arch/arm/boot/dts/imx6q-ec-752_8303.dts
new file mode 100644
index 000000000000..10dbfbd1f96f
--- /dev/null
+++ b/arch/arm/boot/dts/imx6q-ec-752_8303.dts
@@ -0,0 +1,31 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2020 elrest GmbH
+ */
+
+/dts-v1/;
+
+#include "imx6q-ec.dtsi"
+
+/ {
+	compatible = "wago,imx6q-vtpctp-762_4xxx-1010", \
+				"wago,imx6q-ec-752_8303", "fsl,imx6q";
+	wsysinit_init {
+		board,variant = "EC752";
+	};
+};
+
+&hdmi {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_hdmi>;
+	status = "okay";
+};
+
+&usbotg {
+	dr_mode = "otg";
+	status = "okay";
+};
+
+&cc_logic_usb_c {
+	status = "okay";
+};
diff --git a/arch/arm/boot/dts/imx6q-ec.dtsi b/arch/arm/boot/dts/imx6q-ec.dtsi
new file mode 100644
index 000000000000..74630580acbe
--- /dev/null
+++ b/arch/arm/boot/dts/imx6q-ec.dtsi
@@ -0,0 +1,983 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2020 elrest GmbH
+ */
+
+#include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/input/input.h>
+
+#include "imx6q.dtsi"
+#include "imx6q-vtpctp-ksz8863.dtsi"
+
+/ {
+	model = "EC Quad Board";
+
+	memory {
+		reg = <0x10000000 0x80000000>;
+	};
+
+	aliases {
+		mxcfb0 = &mxcfb1;
+		mdio-gpio0 = &bitbang_mdio0;
+		mmc0 = &usdhc1;
+		mmc1 = &usdhc3;
+		ethernet1 = &fec;
+	};
+
+	wsysinit_init {
+		compatible = "wago,sysinit";
+		add-sysfs-entries;
+
+		tty,service   = "ttymxc0";
+		tty,rs232-485 = "ttymxc1";
+
+		board,variant = "EC";
+
+		/* sysclock adjustments, empirical values */
+		adjtimex,tick = <10000>;
+		adjtimex,frequency = <2000000>;
+	};
+
+	regulators {
+		compatible = "simple-bus";
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		reg_1p5v: 1p5v {
+			compatible = "regulator-fixed";
+			regulator-name = "1P5V";
+			regulator-min-microvolt = <1500000>;
+			regulator-max-microvolt = <1500000>;
+			regulator-always-on;
+		};
+
+		reg_1p8v: 1p8v {
+			compatible = "regulator-fixed";
+			regulator-name = "1P8V";
+			regulator-min-microvolt = <1800000>;
+			regulator-max-microvolt = <1800000>;
+			regulator-always-on;
+		};
+
+		reg_2p5v: 2p5v {
+			compatible = "regulator-fixed";
+			regulator-name = "2P5V";
+			regulator-min-microvolt = <2500000>;
+			regulator-max-microvolt = <2500000>;
+			regulator-always-on;
+		};
+
+		reg_2p8v: 2p8v {
+			compatible = "regulator-fixed";
+			regulator-name = "2P8V";
+			regulator-min-microvolt = <2800000>;
+			regulator-max-microvolt = <2800000>;
+			regulator-always-on;
+		};
+
+		reg_3p3v: 3p3v {
+			compatible = "regulator-fixed";
+			regulator-name = "3P3V";
+			regulator-min-microvolt = <3300000>;
+			regulator-max-microvolt = <3300000>;
+			regulator-always-on;
+		};
+
+		reg_usb_otg_vbus: regulator@0 {
+			compatible = "regulator-fixed";
+			reg = <0>;
+			regulator-name = "usb_otg_vbus";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			gpio = <&gpio4 15 GPIO_ACTIVE_LOW>;
+			enable-active-high;
+		};
+
+		reg_usb_h1_vbus: regulator@1 {
+			compatible = "regulator-fixed";
+			reg = <1>;
+			regulator-name = "usb_h1_vbus";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			regulator-always-on;
+		};
+
+	};
+
+	sound {
+		compatible = "fsl,imx6dl-vtpctp-sgtl5000",
+					 "fsl,imx-audio-sgtl5000";
+		model = "imx6dl-vtpctp-sgtl5000";
+		ssi-controller = <&ssi1>;
+		audio-codec = <&codec>;
+		audio-routing =
+		"Headphone Jack", "HP_OUT";
+		mux-int-port = <1>;
+		mux-ext-port = <4>;
+	};
+
+	mxcfb1: fb@0 {
+		compatible = "fsl,mxc_sdc_fb";
+		disp_dev = "ldb";
+		interface_pix_fmt = "RGB666";
+		default_bpp = <24>;
+		int_clk = <0>;
+		late_init = <0>;
+		status = "okay";
+	};
+
+	backlight_leds {
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_reg_lcd_3v3>;
+		compatible = "gpio-leds";
+
+		rs-sel {
+			gpios = <&gpio6 9 GPIO_ACTIVE_HIGH>;
+			default-state = "off";
+		};
+
+		sys-red {
+			gpios = <&gpio2 4 GPIO_ACTIVE_HIGH>;
+			default-state = "off";
+		};
+
+		sys-green {
+			gpios = <&gpio2 5 GPIO_ACTIVE_HIGH>;
+			default-state = "off";
+		};
+
+		sys-blue {
+			gpios = <&gpio2 6 GPIO_ACTIVE_HIGH>;
+			default-state = "off";
+		};
+
+		led-rd-ovrd {
+			gpios = <&gpio5 18 GPIO_ACTIVE_HIGH>;
+			default-state = "off";
+		};
+
+		led-srvr-wd-imx6 {
+			gpios = <&gpio5 19 GPIO_ACTIVE_HIGH>;
+			default-state = "off";
+		};
+
+		en-led-rd-srvr-ndw {
+			gpios = <&gpio2 16 GPIO_ACTIVE_LOW>;
+			default-state = "off";
+		};
+		beeper {
+			gpios = <&gpio2 7 GPIO_ACTIVE_HIGH>;
+			default-state = "oneshot";
+		};
+	};
+
+	v4l2_cap_1 {
+		compatible = "fsl,imx6q-v4l2-capture";
+		ipu_id = <0>;
+		csi_id = <1>;
+		mclk_source = <0>;
+		status = "okay";
+	};
+
+	v4l2_out {
+		compatible = "fsl,mxc_v4l2_output";
+		status = "okay";
+	};
+
+	susp-signals {
+		compatible = "fsl,susp-signals";
+		gpios = <&gpio1 5 GPIO_ACTIVE_LOW>;
+	};
+
+	PAC-Operating-Mode-Switch {
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_bas>;
+		compatible = "gpio-keys";
+		status = "okay";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		autorepeat;
+
+		run {
+			label = "RUN";
+			gpios = <&gpio2 12 GPIO_ACTIVE_LOW>; /* GPIO 44 */
+			linux,code = <1>;
+			linux,input-type = <EV_SW>;
+			debounce-interval = <1>; /* debounce in msecs */
+		};
+
+		stop {
+			label = "STOP";
+			gpios = <&gpio2 13 GPIO_ACTIVE_LOW>; /* GPIO 45 */
+			linux,code = <2>;
+			linux,input-type = <EV_SW>;
+			debounce-interval = <1>; /* debounce in msecs */
+		};
+
+		reset {
+			label = "RESET";
+			gpios = <&gpio2 15 GPIO_ACTIVE_LOW>; /* GPIO 47 */
+			linux,code = <3>;
+			linux,input-type = <EV_KEY>;
+			debounce-interval = <1>; /* debounce in msecs */
+		};
+
+		reset_all {
+			label = "RESET_ALL";
+			gpios = <&gpio4 7 GPIO_ACTIVE_LOW>; /* GPIO 103 */
+			linux,code = <4>;
+			linux,input-type = <EV_KEY>;
+			debounce-interval = <1>; /* debounce in msecs */
+		};
+
+	};
+
+	bitbang_mdio0: gpio_mdio {
+		compatible = "virtual,mdio-gpio";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		##status = "okay";
+	};
+
+	rmii_clk_ext: rmii_clk {
+		compatible = "fixed-clock";
+		#clock-cells = <0>;
+		clock-frequency = <50000000>;
+	};
+};
+
+&audmux {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_audmux>;
+	status = "okay";
+};
+
+&clks {
+	fsl,ldb-di0-parent = <&clks IMX6QDL_CLK_PLL2_PFD0_352M>;
+	fsl,ldb-di1-parent = <&clks IMX6QDL_CLK_PLL2_PFD0_352M>;
+
+	assigned-clocks = <&clks IMX6QDL_CLK_CKO2>;
+	assigned-clock-rates = <12000000>;
+};
+
+&fec {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_enet>;
+	phy-mode = "rmii";
+
+	clocks = <&clks IMX6QDL_CLK_ENET>,
+		 <&clks IMX6QDL_CLK_ENET>,
+		 <&rmii_clk_ext>;
+	clock-names = "ipg", "ahb", "ptp";
+
+	status = "okay";
+	fixed-link {
+		speed = <100>;
+		full-duplex;
+	};
+
+	mdio: mdio@0 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+	};
+};
+
+&i2c2 {
+	clock-frequency = <400000>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c2>;
+	status = "okay";
+
+	pmic: pf0100@8 {
+		compatible = "fsl,pfuze100";
+		reg = <0x08>;
+		interrupt-parent = <&gpio7>;
+		interrupts = <12 8>;
+
+		regulators {
+
+			/* VDD_ARM */
+			sw1a_reg: sw1ab {
+				regulator-min-microvolt = <1400000>;
+				regulator-max-microvolt = <1875000>;
+				regulator-boot-on;
+				regulator-always-on;
+				regulator-ramp-delay = <6250>;
+			};
+
+			/* VDD_SOC */
+			sw1c_reg: sw1c {
+				regulator-min-microvolt = <1400000>;
+				regulator-max-microvolt = <1875000>;
+				regulator-boot-on;
+				regulator-always-on;
+				regulator-ramp-delay = <6250>;
+			};
+
+			 /* VDD_HIGH */
+			sw2_reg: sw2 {
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			 /* VDD_DDR */
+			sw3a_reg: sw3a {
+				regulator-min-microvolt = <1350000>;
+				regulator-max-microvolt = <1350000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			 /* VDD_DDR */
+			sw3b_reg: sw3b {
+				regulator-min-microvolt = <1350000>;
+				regulator-max-microvolt = <1350000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			/* VDD_1P8 */
+			sw4_reg: sw4 {
+				regulator-min-microvolt = <800000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-always-off;
+			};
+
+			swbst_reg: swbst {
+				regulator-min-microvolt = <5000000>;
+				regulator-max-microvolt = <5150000>;
+			};
+
+			snvs_reg: vsnvs {
+				regulator-min-microvolt = <1000000>;
+				regulator-max-microvolt = <3000000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			vref_reg: vrefddr {
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			vgen3_reg: vgen3 {
+				regulator-min-microvolt = <2500000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-always-on;
+			};
+
+			vgen4_reg: vgen4 {
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+				regulator-always-on;
+			};
+
+
+			vgen5_reg: vgen5 {
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-always-on;
+			};
+
+			/* supply voltage for eMMC */
+			vgen6_reg: vgen6 {
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+		};
+	};
+
+	lm75: lm75@49 {
+		compatible = "national,lm75";
+		reg = <0x49>;
+	};
+
+	eeprom: m24c512@54 {
+		compatible = "st,24c512", "at24";
+		reg = <0x54>;
+	};
+
+	rtc_r2221t@32 {
+		compatible = "ricoh,r2221tl";
+		reg = <0x32>;
+
+		interrupt-parent = <&gpio1>;
+		interrupts = <4 IRQ_TYPE_LEVEL_LOW>;
+	};
+
+	pca9552@61 {
+		compatible = "nxp,pca9552";
+		status = "okay";
+		reg = <0x61>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		sys-red-back@3 {
+			label = "sys-red-back";
+			reg = <3>;
+			linux,default-trigger = "none";
+		};
+
+		sys-green-back@4 {
+			label = "sys-green-back";
+			reg = <4>;
+			linux,default-trigger = "none";
+		};
+
+		sys-blue-back@5 {
+			label = "sys-blue-back";
+			reg = <5>;
+			linux,default-trigger = "none";
+		};
+
+		run-green@8 {
+			label = "run-green";
+			reg = <8>;
+			linux,default-trigger = "none";
+		};
+
+		run-red@9 {
+			label = "run-red";
+			reg = <9>;
+			linux,default-trigger = "none";
+		};
+
+		can-green@10 {
+			label = "can-green";
+			reg = <10>;
+			linux,default-trigger = "none";
+		};
+
+		can-red@11 {
+			label = "can-red";
+			reg = <11>;
+			linux,default-trigger = "none";
+		};
+
+		h11-green@12 {
+			label = "h11-green";
+			reg = <12>;
+			linux,default-trigger = "none";
+		};
+
+		h11-red@13 {
+			label = "h11-red";
+			reg = <13>;
+			linux,default-trigger = "none";
+		};
+
+		h12-green@14 {
+			label = "h12-green";
+			reg = <14>;
+			linux,default-trigger = "none";
+		};
+
+		h12-red@15 {
+			label = "h12-red";
+			reg = <15>;
+			linux,default-trigger = "none";
+		};
+	};
+
+	cc_logic_usb_c: cclogic@1e {
+		compatible = "nxp,ptn5150";
+		reg = <0x1e>;
+		int-gpio = <&gpio1 3 GPIO_ACTIVE_HIGH>;
+		vbus-gpio = <&gpio1 24 GPIO_ACTIVE_HIGH>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&ptn5150_pins>;
+	};
+
+};
+
+&i2c3 {
+	clock-frequency = <400000>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c3>;
+	status = "okay";
+
+	codec: sgtl5000@a {
+		compatible = "fsl,sgtl5000";
+		reg = <0x0a>;
+		clocks = <&clks IMX6QDL_CLK_CKO2>;
+		/* sysclk = <12000000>; */
+		VDDD-supply = <&reg_1p8v>;
+		VDDA-supply = <&reg_3p3v>;
+		VDDIO-supply = <&reg_3p3v>;
+	};
+};
+
+&iomuxc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_hog>;
+
+	imx6qdl-qmx6 {
+		pinctrl_hog: hoggrp {
+			fsl,pins = <
+				/* RTC-NINT */
+				MX6QDL_PAD_GPIO_4__GPIO1_IO04		0x1b0b0
+				/* RGMII Phy Interrupt */
+				MX6QDL_PAD_EIM_D23__GPIO3_IO23	0x80000000
+				/* EEPROM WP GPIO23 */
+				MX6QDL_PAD_ENET_REF_CLK__GPIO1_IO23	0x1b0b0
+				/* PCAP-BRIDGE-NRESET */
+				MX6QDL_PAD_NANDF_RB0__GPIO6_IO10	0x1b0b0
+				/* BEEPER_ON */
+				MX6QDL_PAD_NANDF_D7__GPIO2_IO07		0x1b0b0
+				/* AIO_NREST */
+				MX6QDL_PAD_EIM_A24__GPIO5_IO04		0x0b0b1
+				/* PMIC-NINTB */
+				MX6QDL_PAD_GPIO_17__GPIO7_IO12		0x0b0b1
+			>;
+		};
+
+		pinctrl_audmux: audmuxgrp {
+			fsl,pins = <
+				MX6QDL_PAD_SD2_DAT0__AUD4_RXD		0x130b0
+				MX6QDL_PAD_SD2_DAT3__AUD4_TXC		0x00008
+				MX6QDL_PAD_SD2_DAT2__AUD4_TXD		0x00008
+				MX6QDL_PAD_SD2_DAT1__AUD4_TXFS		0x00008
+				MX6QDL_PAD_NANDF_CS2__CCM_CLKO2		0x00008
+			>;
+		};
+
+		pinctrl_ecspi4: ecspi4grp {
+			fsl,pins = <
+				MX6QDL_PAD_EIM_D22__ECSPI4_MISO	0x100b1
+				MX6QDL_PAD_EIM_D28__ECSPI4_MOSI	0x100b1
+				MX6QDL_PAD_EIM_D21__ECSPI4_SCLK	0x100b1
+				/* CS0 */
+				MX6QDL_PAD_EIM_D20__GPIO3_IO20	0x1b0b0
+				/* CS1 */
+				MX6QDL_PAD_EIM_D24__GPIO3_IO24	0x1b0b0
+			>;
+		};
+
+		pinctrl_enet: enetgrp {
+			fsl,pins = <
+			MX6QDL_PAD_ENET_RXD0__ENET_RX_DATA0	0x1b0b0
+			MX6QDL_PAD_ENET_RXD1__ENET_RX_DATA1	0x1b0b0
+			MX6QDL_PAD_ENET_CRS_DV__ENET_RX_EN	0x1b0b0
+			MX6QDL_PAD_ENET_TXD0__ENET_TX_DATA0 0x1b088
+			MX6QDL_PAD_ENET_TXD1__ENET_TX_DATA1	0x1b088
+			MX6QDL_PAD_ENET_TX_EN__ENET_TX_EN	0x1b088
+			MX6QDL_PAD_GPIO_16__ENET_REF_CLK	0x4001b0a8
+			>;
+		};
+
+		pinctrl_flexcan1: flexcan1grp {
+			fsl,pins = <
+			MX6QDL_PAD_KEY_ROW2__FLEXCAN1_RX	0x80000000
+			MX6QDL_PAD_KEY_COL2__FLEXCAN1_TX	0x80000000
+			>;
+		};
+
+		pinctrl_i2c2: i2c2grp {
+			fsl,pins = <
+				MX6QDL_PAD_KEY_COL3__I2C2_SCL	0x4001b8b1
+				MX6QDL_PAD_KEY_ROW3__I2C2_SDA	0x4001b8b1
+			>;
+		};
+
+		pinctrl_i2c3: i2c3grp {
+			fsl,pins = <
+				MX6QDL_PAD_EIM_D17__I2C3_SCL	0x4001b8b1
+				MX6QDL_PAD_EIM_D18__I2C3_SDA	0x4001b8b1
+			>;
+		};
+
+		pinctrl_uart1: uart1grp {
+			fsl,pins = <
+				MX6QDL_PAD_CSI0_DAT11__UART1_RX_DATA	0x1b0b0
+				MX6QDL_PAD_CSI0_DAT10__UART1_TX_DATA	0x1b0b0
+			>;
+		};
+
+		pinctrl_uart2: uart2grp {
+			fsl,pins = <
+				MX6QDL_PAD_EIM_D26__UART2_TX_DATA	0x1b0b0
+				MX6QDL_PAD_EIM_D27__UART2_RX_DATA	0x1b0b0
+				MX6QDL_PAD_EIM_D29__GPIO3_IO29		0x1b0b0
+				MX6QDL_PAD_SD4_DAT6__UART2_CTS_B	0x1b0b0
+			>;
+		};
+
+		pinctrl_usbotg: usbotggrp {
+			fsl,pins = <
+				/* OTG_ID */
+				MX6QDL_PAD_ENET_RX_ER__USB_OTG_ID	0x1b0b1
+				/* OTG_OC */
+				MX6QDL_PAD_KEY_COL4__USB_OTG_OC		0x1b0b1
+				/* OTG_PWR */
+				MX6QDL_PAD_KEY_ROW4__GPIO4_IO15		0x130b0
+			>;
+		};
+
+		pinctrl_usdhc1: usdhc1grp {
+			fsl,pins = <
+				MX6QDL_PAD_SD1_CMD__SD1_CMD		0x17059
+				MX6QDL_PAD_SD1_CLK__SD1_CLK		0x10059
+				MX6QDL_PAD_SD1_DAT0__SD1_DATA0	0x17059
+				MX6QDL_PAD_SD1_DAT1__SD1_DATA1	0x17059
+				MX6QDL_PAD_SD1_DAT2__SD1_DATA2	0x17059
+				MX6QDL_PAD_SD1_DAT3__SD1_DATA3	0x17059
+				/* CD */
+				MX6QDL_PAD_GPIO_1__SD1_CD_B		0x1b0b0
+				/* SD-CARD.EN */
+				MX6QDL_PAD_SD4_CMD__GPIO7_IO09	0x1b0b0
+			>;
+		};
+
+		pinctrl_usdhc3: usdhc3grp {
+			fsl,pins = <
+				MX6QDL_PAD_SD3_CMD__SD3_CMD		0x17051
+				MX6QDL_PAD_SD3_CLK__SD3_CLK		0x10051
+				MX6QDL_PAD_SD3_DAT0__SD3_DATA0		0x17051
+				MX6QDL_PAD_SD3_DAT1__SD3_DATA1		0x17051
+				MX6QDL_PAD_SD3_DAT2__SD3_DATA2		0x17051
+				MX6QDL_PAD_SD3_DAT3__SD3_DATA3		0x17051
+				MX6QDL_PAD_SD3_DAT4__SD3_DATA4		0x17051
+				MX6QDL_PAD_SD3_DAT5__SD3_DATA5		0x17051
+				MX6QDL_PAD_SD3_DAT6__SD3_DATA6		0x17051
+				MX6QDL_PAD_SD3_DAT7__SD3_DATA7		0x17051
+			>;
+		};
+
+		pinctrl_reg_lcd_3v3: lpinctrl_reg_lcd_3v3grp {
+			fsl,pins = <
+			/* RS-SEL */
+			MX6QDL_PAD_NANDF_WP_B__GPIO6_IO09	0x1b0b0
+			/* CAPTAST_NRESET */
+			MX6QDL_PAD_NANDF_D3__GPIO2_IO03		0x1b0b0
+			/* LED-RD-ON */
+			MX6QDL_PAD_NANDF_D4__GPIO2_IO04		0x1b0b0
+			/* LED-GN-ON */
+			MX6QDL_PAD_NANDF_D5__GPIO2_IO05		0x1b0b0
+			/* LED-BL-ON */
+			MX6QDL_PAD_NANDF_D6__GPIO2_IO06		0x1b0b0
+			/* EN-LED-SRVR-NWD */
+			MX6QDL_PAD_EIM_A22__GPIO2_IO16		0x1b0b0
+			/* LED-RD-OVRD */
+			MX6QDL_PAD_CSI0_PIXCLK__GPIO5_IO18	0x1b0b0
+			/* LED-SRVR-WD-IMX6 */
+			MX6QDL_PAD_CSI0_MCLK__GPIO5_IO19	0x1b0b0
+			>;
+		};
+
+		pinctrl_bas: basgrp {
+			fsl,pins = <
+				/* BAS-NRUN */
+				MX6QDL_PAD_SD4_DAT4__GPIO2_IO12	0x1b0b0
+				/* BAS-NSTOP */
+				MX6QDL_PAD_SD4_DAT5__GPIO2_IO13	0x1b0b0
+				/* BAS-NRESET */
+				MX6QDL_PAD_SD4_DAT7__GPIO2_IO15	0x1b0b0
+				/* RESET-ALL */
+				MX6QDL_PAD_KEY_ROW0__GPIO4_IO07	0x1b0b0
+			>;
+		};
+
+		pinctrl_ksz8863: pinctrl_ksz8863grp {
+			fsl,pins = <
+				/* phy-reset */
+				MX6QDL_PAD_KEY_ROW1__GPIO4_IO09	0x1B0B0
+				/* phy-irq */
+				MX6QDL_PAD_GPIO_6__GPIO1_IO06	0x000b1
+			>;
+		};
+
+		gpio_bitbang_mdio_pins: pinmux_gpio_bitbang_mdio_pins {
+			fsl,pins = <
+				/* MDIO */
+				MX6QDL_PAD_ENET_MDIO__GPIO1_IO22	0x1b0b0
+				MX6QDL_PAD_ENET_MDC__GPIO1_IO31		0x1b0b0
+			>;
+		};
+
+		gpio_bitbang_mdio_sleep_pins: pinmux_gpio_bitbang_mdio_sleep {
+			fsl,pins = <
+				/* MDIO reset value */
+				MX6QDL_PAD_ENET_MDIO__GPIO1_IO22	0x1b0b0
+				MX6QDL_PAD_ENET_MDC__GPIO1_IO31		0x1b0b0
+			>;
+		};
+
+		pinctrl_weim: weimnorgrp {
+			fsl,pins = <
+			MX6QDL_PAD_EIM_CS1__EIM_CS1_B		0x17051
+			MX6QDL_PAD_EIM_CS0__EIM_CS0_B		0x17051
+			MX6QDL_PAD_EIM_EB0__EIM_EB0_B		0x17051
+			MX6QDL_PAD_EIM_EB1__EIM_EB1_B		0x17051
+			MX6QDL_PAD_EIM_EB3__EIM_EB3_B		0x17051
+			MX6QDL_PAD_EIM_LBA__EIM_LBA_B		0x17051
+			MX6QDL_PAD_EIM_OE__EIM_OE_B			0x17051
+			MX6QDL_PAD_EIM_RW__EIM_RW			0x17051
+			MX6QDL_PAD_EIM_WAIT__GPIO5_IO00		0x17051
+			MX6QDL_PAD_EIM_BCLK__EIM_BCLK		0x17051
+			MX6QDL_PAD_CSI0_DATA_EN__EIM_DATA00	0x17049
+			MX6QDL_PAD_CSI0_VSYNC__EIM_DATA01	0x17049
+			MX6QDL_PAD_CSI0_DAT4__EIM_DATA02	0x17049
+			MX6QDL_PAD_CSI0_DAT5__EIM_DATA03	0x17049
+			MX6QDL_PAD_CSI0_DAT6__EIM_DATA04	0x17049
+			MX6QDL_PAD_CSI0_DAT7__EIM_DATA05	0x17049
+			MX6QDL_PAD_CSI0_DAT8__EIM_DATA06	0x17049
+			MX6QDL_PAD_CSI0_DAT9__EIM_DATA07	0x17049
+			MX6QDL_PAD_CSI0_DAT12__EIM_DATA08	0x17049
+			MX6QDL_PAD_CSI0_DAT13__EIM_DATA09	0x17049
+			MX6QDL_PAD_CSI0_DAT14__EIM_DATA10	0x17049
+			MX6QDL_PAD_CSI0_DAT15__EIM_DATA11	0x17049
+			MX6QDL_PAD_CSI0_DAT16__EIM_DATA12	0x17049
+			MX6QDL_PAD_CSI0_DAT17__EIM_DATA13	0x17049
+			MX6QDL_PAD_CSI0_DAT18__EIM_DATA14	0x17049
+			MX6QDL_PAD_CSI0_DAT19__EIM_DATA15	0x17049
+			MX6QDL_PAD_EIM_DA0__EIM_AD00		0x17051
+			MX6QDL_PAD_EIM_DA1__EIM_AD01		0x17051
+			MX6QDL_PAD_EIM_DA2__EIM_AD02		0x17051
+			MX6QDL_PAD_EIM_DA3__EIM_AD03		0x17051
+			MX6QDL_PAD_EIM_DA4__EIM_AD04		0x17051
+			MX6QDL_PAD_EIM_DA5__EIM_AD05		0x17051
+			MX6QDL_PAD_EIM_DA6__EIM_AD06		0x17051
+			MX6QDL_PAD_EIM_DA7__EIM_AD07		0x17051
+			MX6QDL_PAD_EIM_DA8__EIM_AD08		0x17051
+			MX6QDL_PAD_EIM_DA9__EIM_AD09		0x17051
+			MX6QDL_PAD_EIM_DA10__EIM_AD10		0x17051
+			MX6QDL_PAD_EIM_DA11__EIM_AD11		0x17051
+			MX6QDL_PAD_EIM_DA12__EIM_AD12		0x17051
+			MX6QDL_PAD_EIM_DA13__EIM_AD13		0x17051
+			MX6QDL_PAD_EIM_DA14__EIM_AD14		0x17051
+			MX6QDL_PAD_EIM_DA15__EIM_AD15		0x17051
+			MX6QDL_PAD_EIM_A16__EIM_ADDR16		0x17051
+			MX6QDL_PAD_EIM_A17__EIM_ADDR17		0x17051
+			MX6QDL_PAD_EIM_A18__EIM_ADDR18		0x17051
+			MX6QDL_PAD_EIM_A19__EIM_ADDR19		0x17051
+			MX6QDL_PAD_EIM_A20__EIM_ADDR20		0x17051
+			>;
+		};
+
+		pinctrl_dio_spi: dio_spi_grp {
+			fsl,pins = <
+				MX6QDL_PAD_EIM_D19__GPIO3_IO19	0x1b0b0
+				MX6QDL_PAD_NANDF_D0__GPIO2_IO00	0x1b0b0
+			>;
+		};
+
+		pinctrl_hdmi: hdmigrp {
+			fsl,pins = <
+				MX6QDL_PAD_EIM_A25__HDMI_TX_CEC_LINE	0x1f8b0
+				MX6QDL_PAD_EIM_EB2__HDMI_TX_DDC_SCL	\
+				0x4001b8b1
+				MX6QDL_PAD_EIM_D16__HDMI_TX_DDC_SDA	\
+				0x4001b8b1
+			>;
+		};
+
+		ptn5150_pins: pinmux_ptn5150_pins {
+			fsl,pins = <
+				/* IRQ USB-C */
+				MX6QDL_PAD_GPIO_3__GPIO1_IO03	0x1b0b0
+			>;
+		};
+
+	};
+};
+
+&audmux {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_audmux>;
+	status = "okay";
+};
+
+&can1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_flexcan1>;
+	status = "okay";
+};
+
+&gpc {
+	/* use ldo-bypass, u-boot will check it and configure */
+	fsl,ldo-bypass = <1>;
+	fsl,wdog-reset = <1>;
+};
+
+&dcic1 {
+	dcic_id = <0>;
+	dcic_mux = "dcic-hdmi";
+	status = "okay";
+};
+
+&dcic2 {
+	dcic_id = <1>;
+	dcic_mux = "dcic-lvds1";
+	status = "okay";
+};
+
+&snvs_poweroff {
+	status = "okay";
+};
+
+&ssi1 {
+	fsl,mode = "i2s-slave";
+	status = "okay";
+};
+
+&uart1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart1>;
+	status = "okay";
+};
+
+&uart2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart2>;
+	status = "okay";
+	rs485-rts-active-high;
+	rs485-rx-during-tx;
+	uart-has-rtscts;
+	rts-gpios = <&gpio3 29 GPIO_ACTIVE_HIGH>;
+	linux,rs485-enabled-at-boot-time;
+};
+
+&usbh1 {
+	vbus-supply = <&reg_usb_h1_vbus>;
+	status = "okay";
+};
+
+&usbotg {
+	vbus-supply = <&reg_usb_otg_vbus>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usbotg>;
+	disable-over-current;
+	status = "okay";
+};
+
+&usdhc1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usdhc1>;
+	/* cd-gpios = <&gpio7 9 GPIO_ACTIVE_LOW>; */
+	no-1-8-v;
+	keep-power-in-suspend;
+	enable-sdio-wakeup;
+	vmmc-supply = <&reg_3p3v>;
+	status = "okay";
+};
+
+&usdhc3 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usdhc3>;
+	non-removable;
+	bus-width = <8>;
+	no-1-8-v;
+	keep-power-in-suspend;
+	enable-sdio-wakeup;
+	vmmc-supply = <&reg_3p3v>;
+	status = "okay";
+};
+
+&bitbang_mdio0 {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&gpio_bitbang_mdio_pins>;
+	pinctrl-1 = <&gpio_bitbang_mdio_sleep_pins>;
+	gpios = <&gpio1 31 0	/* 0: mdc  */
+	&gpio1 22 0>;			/* 1: mdio */
+	status = "okay";
+};
+
+&weim {
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_weim>;
+	#address-cells = <2>;
+	#size-cells = <1>;
+	ranges = <
+		0 0 0x08000000 0x04000000
+		1 0 0x0C000000 0x04000000 >;
+	fsl,weim-cs-gpr = <&gpr>;
+
+	UIO_NVRAM@1,0 {
+		compatible = "uio_pdrv_genirq";
+		reg = <1 0x0 0x20000>;
+		fsl,weim-cs-timing = <
+			0x007184B1 0x00001010
+			0x0F780000 0x00000008
+			0x04F00040 0x00000000 >;
+	};
+};
+
+&reg_arm {
+	vin-supply = <&sw1a_reg>;
+	regulator-allow-bypass;
+	regulator-min-microvolt = <1225000>;
+};
+
+&reg_soc {
+	vin-supply = <&sw1c_reg>;
+	regulator-allow-bypass;
+	regulator-min-microvolt = <1225000>;
+};
+
+&reg_pu {
+	regulator-allow-bypass;
+	regulator-min-microvolt = <1225000>;
+};
+
+&cpu0 {
+	operating-points = <
+		/* kHz  uV */
+		1200000 1400000
+		996000  1400000
+		852000  1400000
+		792000  1400000
+		396000  1400000
+	>;
+	fsl,soc-operating-points = <
+		/* ARM kHz SOC-PU uV */
+		1200000 1400000
+		996000  1400000
+		852000  1400000
+		792000  1400000
+		396000  1400000
+	>;
+};
+
+&ecspi4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_ecspi4>;
+	fsl,spi-num-chipselects = <2>;
+	cs-gpios = <
+		&gpio3 20 0
+		&gpio3 24 0
+	>;
+	status = "okay";
+
+	di0_spi: dio_spi@1 {
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_dio_spi>;
+		compatible = "dio_spi";
+		reg = <1>;
+		spi-cpol;
+		spi-max-frequency = <1000000>;
+		gpio-load = <&gpio3 19 GPIO_ACTIVE_HIGH>;
+		gpio-reset = <&gpio2 0 GPIO_ACTIVE_HIGH>;
+	};
+};
+
+&cpu0 {
+	arm-supply = <&sw1a_reg>;
+	soc-supply = <&sw1c_reg>;
+};
+
+&swcfg_ksz8863 {
+	status = "okay";
+};
+
+&bitbang_mdio0 {
+	status = "okay";
+};
+
+&ksz8863_switch {
+	status = "okay";
+};
diff --git a/arch/arm/boot/dts/imx6q-vtpctp-0004.dts b/arch/arm/boot/dts/imx6q-vtpctp-0004.dts
new file mode 100644
index 000000000000..61a5afba365c
--- /dev/null
+++ b/arch/arm/boot/dts/imx6q-vtpctp-0004.dts
@@ -0,0 +1,106 @@
+/*
+ * Copyright (C) 2017 elrest GmbH
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/dts-v1/;
+
+#include "imx6q-vtpctp.dtsi"
+
+/ {
+	compatible = "wago,imx6q-vtpctp-762_4xxx-1000", "wago,imx6q-vtpctp", "fsl,imx6q";
+
+	reg_display: regulator-display {
+		compatible = "regulator-fixed";
+		regulator-name = "display-supply";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		regulator-always-on;
+	};
+
+	display: display@di0 {
+		compatible = "fsl,imx-parallel-display";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_ipu_disp>;
+		interface-pix-fmt = "rgb24";
+		status = "okay";
+
+		port@0 {
+			reg = <0>;
+
+			parallel_display_in: endpoint {
+				remote-endpoint = <&ipu1_di0_disp0>;
+			};
+		};
+
+		port@1 {
+			reg = <1>;
+
+			lcd_display_out: endpoint {
+				remote-endpoint = <&lcd_panel_in>;
+			};
+		};
+	};
+
+	lcd_panel: lcd-panel {
+		compatible = "dataimage,fg040321duswmg01";
+		backlight = <&backlight>;
+		power-supply = <&reg_display>;
+
+		port {
+			lcd_panel_in: endpoint {
+				remote-endpoint = <&lcd_display_out>;
+			};
+		};
+	};
+};
+
+&ipu1_di0_disp0 {
+	remote-endpoint = <&parallel_display_in>;
+};
+
+&ecspi4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_ecspi4>;
+	fsl,spi-num-chipselects = <2>;
+	cs-gpios = <
+		&gpio3 20 0
+		&gpio5 2 0
+	>;
+	status = "okay";
+
+	/* touch controller */
+	touch:	tsc2046@0 {
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_tsc2046>;
+
+		compatible = "ti,tsc2046";
+		vcc-supply = <&tsc2046reg>;
+
+		reg = <0>;	/* CS0 */
+		spi-max-frequency = <125000>;
+
+		interrupt-parent = <&gpio1>;
+		interrupts = <3 IRQ_TYPE_EDGE_FALLING>;
+		pendown-gpio = <&gpio1 3 GPIO_ACTIVE_LOW>;
+
+		ti,keep-vref-on;
+		ti,vref-delay-usecs = <100>;
+
+		ti,x-min = /bits/ 16 <0x0>;
+		ti,x-max = /bits/ 16 <0x0ffff>;
+		ti,y-min = /bits/ 16 <0x0>;
+		ti,y-max = /bits/ 16 <0x0ffff>;
+
+		ti,x-plate-ohms = /bits/ 16 <150>;
+		ti,y-plate-ohms = /bits/ 16 <80>;
+		ti,pressure-max = /bits/ 16 <1000>;
+
+		wakeup-source;
+	};
+};
diff --git a/arch/arm/boot/dts/imx6q-vtpctp-0005.dts b/arch/arm/boot/dts/imx6q-vtpctp-0005.dts
new file mode 100644
index 000000000000..b9c508c53d48
--- /dev/null
+++ b/arch/arm/boot/dts/imx6q-vtpctp-0005.dts
@@ -0,0 +1,85 @@
+/*
+ * Copyright (C) 2017 elrest GmbH
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/dts-v1/;
+
+#include "imx6q-vtpctp.dtsi"
+
+/ {
+	compatible = "wago,imx6q-vtpctp-762_4xxx-1001", "wago,imx6q-vtpctp", "fsl,imx6q";
+};
+
+/* 5" Display */
+&ldb {
+	status = "okay";
+	lvds-channel@0 {
+		fsl,data-mapping = "spwg";
+		fsl,data-width = <18>;
+		primary;
+		status = "okay";
+
+		display-timings {
+			native-mode = <&timing0>;
+			timing0: hsd100pxn1 {
+				clock-frequency = <25000000>;
+				hactive = <640>;
+				vactive = <480>;
+				hback-porch = <114>;
+				hfront-porch = <16>;
+				vback-porch = <32>;
+				vfront-porch = <10>;
+				hsync-len = <30>;
+				vsync-len = <3>;
+				hsync-active = <0>;
+				vsync-active = <0>;
+				de-active    = <1>;
+			};
+		};
+	};
+};
+
+&ecspi4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_ecspi4>;
+	fsl,spi-num-chipselects = <2>;
+	cs-gpios = <
+		&gpio3 20 0
+		&gpio5 2 0
+	>;
+	status = "okay";
+
+	/* touch controller */
+	touch:	tsc2046@0 {
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_tsc2046>;
+
+		compatible = "ti,tsc2046";
+		vcc-supply = <&tsc2046reg>;
+
+		reg = <0>;	/* CS0 */
+		spi-max-frequency = <100000>;
+
+		interrupt-parent = <&gpio1>;
+		interrupts = <3 IRQ_TYPE_EDGE_FALLING>;
+		pendown-gpio = <&gpio1 3 GPIO_ACTIVE_LOW>;
+
+		ti,keep-vref-on;
+		ti,vref-delay-usecs = <100>;
+
+		ti,x-min = /bits/ 16 <0x0>;
+		ti,x-max = /bits/ 16 <0x0ffff>;
+		ti,y-min = /bits/ 16 <0x0>;
+		ti,y-max = /bits/ 16 <0x0ffff>;
+
+		ti,x-plate-ohms = /bits/ 16 <600>;
+		ti,y-plate-ohms = /bits/ 16 <300>;
+		ti,pressure-max = /bits/ 16 <1000>;
+
+		wakeup-source;
+	};
+};
diff --git a/arch/arm/boot/dts/imx6q-vtpctp-0007.dts b/arch/arm/boot/dts/imx6q-vtpctp-0007.dts
new file mode 100644
index 000000000000..1c2c66774fd8
--- /dev/null
+++ b/arch/arm/boot/dts/imx6q-vtpctp-0007.dts
@@ -0,0 +1,86 @@
+/*
+ * Copyright (C) 2017 elrest GmbH
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/dts-v1/;
+
+#include "imx6q-vtpctp.dtsi"
+
+/ {
+	compatible = "wago,imx6q-vtpctp-762_4xxx-1002", "wago,imx6q-vtpctp", "fsl,imx6q";
+};
+
+/* 7" Display */
+&ldb {
+	status = "okay";
+
+	lvds-channel@0 {
+		fsl,data-mapping = "spwg";
+		fsl,data-width = <24>;
+		primary;
+		status = "okay";
+
+		display-timings {
+			native-mode = <&timing0>;
+			timing0: hsd100pxn1 {
+				clock-frequency = <33260000>;
+				hactive = <800>;
+				vactive = <480>;
+				hback-porch = <205>;
+				hfront-porch = <20>;
+				vback-porch = <26>;
+				vfront-porch = <5>;
+				hsync-len = <10>;
+				vsync-len = <10>;
+				hsync-active = <0>;
+				vsync-active = <0>;
+				de-active    = <1>;
+			};
+		};
+	};
+};
+
+&ecspi4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_ecspi4>;
+	fsl,spi-num-chipselects = <2>;
+	cs-gpios = <
+		&gpio3 20 0
+		&gpio5 2 0
+	>;
+	status = "okay";
+
+	/* touch controller */
+	touch:	tsc2046@0 {
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_tsc2046>;
+
+		compatible = "ti,tsc2046";
+		vcc-supply = <&tsc2046reg>;
+
+		reg = <0>;	/* CS0 */
+		spi-max-frequency = <100000>;
+
+		interrupt-parent = <&gpio1>;
+		interrupts = <3 IRQ_TYPE_EDGE_FALLING>;
+		pendown-gpio = <&gpio1 3 GPIO_ACTIVE_LOW>;
+
+		ti,keep-vref-on;
+		ti,vref-delay-usecs = <600>;
+
+		ti,x-min = /bits/ 16 <0x0>;
+		ti,x-max = /bits/ 16 <0x0ffff>;
+		ti,y-min = /bits/ 16 <0x0>;
+		ti,y-max = /bits/ 16 <0x0ffff>;
+
+		ti,x-plate-ohms = /bits/ 16 <600>;
+		ti,y-plate-ohms = /bits/ 16 <300>;
+		ti,pressure-max = /bits/ 16 <1000>;
+
+		wakeup-source;
+	};
+};
diff --git a/arch/arm/boot/dts/imx6q-vtpctp-0010.dts b/arch/arm/boot/dts/imx6q-vtpctp-0010.dts
new file mode 100644
index 000000000000..cfb0f1a1717a
--- /dev/null
+++ b/arch/arm/boot/dts/imx6q-vtpctp-0010.dts
@@ -0,0 +1,102 @@
+/*
+ * Copyright (C) 2017 elrest GmbH
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/dts-v1/;
+
+#include "imx6q-vtpctp.dtsi"
+
+/ {
+	compatible = "wago,imx6q-vtpctp-762_4xxx-1003", "wago,imx6q-vtpctp", "fsl,imx6q";
+};
+
+&ldb {
+	status = "okay";
+
+	lvds-channel@0 {
+		fsl,data-mapping = "spwg";
+		fsl,data-width = <24>;
+		primary;
+		status = "okay";
+
+		display-timings {
+			native-mode = <&timing0>;
+			timing0: hsd100pxn1 {
+				clock-frequency = <71100000>;
+				hactive = <1280>;
+				vactive = <800>;
+				hback-porch = <160>;
+				hfront-porch = <190>;
+				vback-porch = <23>;
+				vfront-porch = <33>;
+				hsync-len = <60>;
+				vsync-len = <15>;
+				hsync-active = <0>;
+				vsync-active = <0>;
+				de-active    = <1>;
+			};
+		};
+	};
+};
+
+&ecspi4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_ecspi4>;
+	fsl,spi-num-chipselects = <2>;
+	cs-gpios = <
+		&gpio3 20 0
+		&gpio5 2 0
+	>;
+	status = "okay";
+
+	/* touch controller */
+	touch:	tsc2046@0 {
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_tsc2046>;
+
+		compatible = "ti,tsc2046";
+		vcc-supply = <&tsc2046reg>;
+
+		reg = <0>;	/* CS0 */
+		spi-max-frequency = <50000>;
+
+		interrupt-parent = <&gpio1>;
+		interrupts = <3 IRQ_TYPE_EDGE_FALLING>;
+		pendown-gpio = <&gpio1 3 GPIO_ACTIVE_LOW>;
+
+		ti,keep-vref-on;
+		ti,vref-delay-usecs = <400>;
+
+		ti,x-min = /bits/ 16 <0x0>;
+		ti,x-max = /bits/ 16 <0x0ffff>;
+		ti,y-min = /bits/ 16 <0x0>;
+		ti,y-max = /bits/ 16 <0x0ffff>;
+
+		ti,x-plate-ohms = /bits/ 16 <500>;
+		ti,y-plate-ohms = /bits/ 16 <300>;
+		ti,pressure-max = /bits/ 16 <1000>;
+
+		wakeup-source;
+	};
+};
+
+&clks {
+	assigned-clocks = <&clks IMX6QDL_CLK_LDB_DI0_SEL>,
+			  <&clks IMX6QDL_CLK_LDB_DI1_SEL>,
+			  <&clks IMX6QDL_CLK_IPU1_DI0_PRE_SEL>,
+			  <&clks IMX6QDL_CLK_IPU1_DI1_PRE_SEL>,
+			  <&clks IMX6QDL_CLK_IPU2_DI0_PRE_SEL>,
+			  <&clks IMX6QDL_CLK_IPU2_DI1_PRE_SEL>,
+			  <&clks IMX6QDL_CLK_CKO2>;
+	assigned-clock-parents = <&clks IMX6QDL_CLK_PLL2_PFD2_396M>,
+				 <&clks IMX6QDL_CLK_PLL2_PFD2_396M>,
+				 <&clks IMX6QDL_CLK_PLL2_PFD2_396M>,
+				 <&clks IMX6QDL_CLK_PLL2_PFD2_396M>,
+				 <&clks IMX6QDL_CLK_PLL2_PFD2_396M>,
+				 <&clks IMX6QDL_CLK_PLL2_PFD2_396M>;
+	assigned-clock-rates =  <0>, <0>, <0>, <0>, <0>, <0>, <12000000>;
+};
diff --git a/arch/arm/boot/dts/imx6q-vtpctp-0015.dts b/arch/arm/boot/dts/imx6q-vtpctp-0015.dts
new file mode 100644
index 000000000000..7212872d6342
--- /dev/null
+++ b/arch/arm/boot/dts/imx6q-vtpctp-0015.dts
@@ -0,0 +1,107 @@
+/*
+ * Copyright (C) 2017 elrest GmbH
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/dts-v1/;
+
+#include "imx6q-vtpctp.dtsi"
+
+/ {
+	compatible = "wago,imx6q-vtpctp-762_4xxx-1008", "wago,imx6q-vtpctp", "fsl,imx6q";
+};
+
+/*
+ * 15,6" Display Dual-Channel LVDS Panel settings for
+ * Ampire AM-19201080FTZQW-A1215HVN05 Color TFT 1920x1080
+ */
+&ldb {
+	fsl,dual-channel;
+	status = "okay";
+
+	lvds-channel@0 {
+		fsl,data-mapping = "spwg";
+		fsl,data-width = <24>;
+		status = "okay";
+		display-timings {
+			native-mode = <&timing0>;
+			timing0: g24hw01 {
+				/* 60 Hz */
+				clock-frequency = <137313000>;
+				hactive = <1920>;
+				vactive = <1080>;
+				hback-porch = <148>;
+				hfront-porch = <0>;
+				vback-porch = <11>;
+				vfront-porch = <0>;
+				hsync-len = <22>;
+				vsync-len = <4>;
+				hsync-active = <0>;
+				vsync-active = <0>;
+				de-active = <1>;
+				pixelclk-active = <0>;
+			};
+		};
+	};
+};
+
+&ecspi4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_ecspi4>;
+	fsl,spi-num-chipselects = <2>;
+	cs-gpios = <
+		&gpio3 20 0
+		&gpio5 2 0
+	>;
+	status = "okay";
+
+	/* touch controller */
+	touch:	tsc2046@0 {
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_tsc2046>;
+
+		compatible = "ti,tsc2046";
+		vcc-supply = <&tsc2046reg>;
+
+		reg = <0>;	/* CS0 */
+		spi-max-frequency = <20000>;
+
+		interrupt-parent = <&gpio1>;
+		interrupts = <3 IRQ_TYPE_EDGE_FALLING>;
+		pendown-gpio = <&gpio1 3 GPIO_ACTIVE_LOW>;
+
+		ti,keep-vref-on;
+		ti,vref-delay-usecs = <400>;
+
+		ti,x-min = /bits/ 16 <0x0>;
+		ti,x-max = /bits/ 16 <0x0ffff>;
+		ti,y-min = /bits/ 16 <0x0>;
+		ti,y-max = /bits/ 16 <0x0ffff>;
+
+		ti,x-plate-ohms = /bits/ 16 <650>;
+		ti,y-plate-ohms = /bits/ 16 <300>;
+		ti,pressure-max = /bits/ 16 <1000>;
+
+		wakeup-source;
+	};
+};
+
+&clks {
+	assigned-clocks = <&clks IMX6QDL_CLK_LDB_DI0_SEL>,
+			  <&clks IMX6QDL_CLK_LDB_DI1_SEL>,
+			  <&clks IMX6QDL_CLK_IPU1_DI0_PRE_SEL>,
+			  <&clks IMX6QDL_CLK_IPU1_DI1_PRE_SEL>,
+			  <&clks IMX6QDL_CLK_IPU2_DI0_PRE_SEL>,
+			  <&clks IMX6QDL_CLK_IPU2_DI1_PRE_SEL>,
+			  <&clks IMX6QDL_CLK_CKO2>;
+	assigned-clock-parents = <&clks IMX6QDL_CLK_PLL2_PFD2_396M>,
+				 <&clks IMX6QDL_CLK_PLL2_PFD2_396M>,
+				 <&clks IMX6QDL_CLK_PLL2_PFD2_396M>,
+				 <&clks IMX6QDL_CLK_PLL2_PFD2_396M>,
+				 <&clks IMX6QDL_CLK_PLL2_PFD2_396M>,
+				 <&clks IMX6QDL_CLK_PLL2_PFD2_396M>;
+	assigned-clock-rates =  <0>, <0>, <0>, <0>, <0>, <0>, <12000000>;
+};
diff --git a/arch/arm/boot/dts/imx6q-vtpctp-0021.dts b/arch/arm/boot/dts/imx6q-vtpctp-0021.dts
new file mode 100644
index 000000000000..dc2e34c5765f
--- /dev/null
+++ b/arch/arm/boot/dts/imx6q-vtpctp-0021.dts
@@ -0,0 +1,106 @@
+/*
+ * Copyright (C) 2017 elrest GmbH
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/dts-v1/;
+
+#include "imx6q-vtpctp.dtsi"
+
+/ {
+	compatible = "wago,imx6q-vtpctp-762_4xxx-1009", "wago,imx6q-vtpctp", "fsl,imx6q";
+};
+
+/*
+ * 21,5" Display Dual-Channel LVDS Panel settings for
+ * AUO T215HVN05 24-inch Color TFT 1920x1080
+ */
+&ldb {
+	fsl,dual-channel;
+	status = "okay";
+
+	lvds-channel@0 {
+		fsl,data-mapping = "spwg";
+		fsl,data-width = <24>;
+		status = "okay";
+		display-timings {
+			native-mode = <&timing0>;
+			timing0: g24hw01 {
+				clock-frequency = <136278000>;
+				hactive = <1920>;
+				vactive = <1080>;
+				hback-porch = <22>;
+				hfront-porch = <22>;
+				vback-porch = <12>;
+				vfront-porch = <12>;
+				hsync-len = <46>;
+				vsync-len = <26>;
+				hsync-active = <0>;
+				vsync-active = <0>;
+				de-active = <1>;
+				pixelclk-active = <1>;
+			};
+		};
+	};
+};
+
+&ecspi4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_ecspi4>;
+	fsl,spi-num-chipselects = <2>;
+	cs-gpios = <
+		&gpio3 20 0
+		&gpio5 2 0
+	>;
+	status = "okay";
+
+	/* touch controller */
+	touch:	tsc2046@0 {
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_tsc2046>;
+
+		compatible = "ti,tsc2046";
+		vcc-supply = <&tsc2046reg>;
+
+		reg = <0>;	/* CS0 */
+		spi-max-frequency = <15000>;
+
+		interrupt-parent = <&gpio1>;
+		interrupts = <3 IRQ_TYPE_EDGE_FALLING>;
+		pendown-gpio = <&gpio1 3 GPIO_ACTIVE_LOW>;
+
+		ti,keep-vref-on;
+		ti,vref-delay-usecs = <600>;
+
+		ti,x-min = /bits/ 16 <0x0>;
+		ti,x-max = /bits/ 16 <0x0ffff>;
+		ti,y-min = /bits/ 16 <0x0>;
+		ti,y-max = /bits/ 16 <0x0ffff>;
+
+		ti,x-plate-ohms = /bits/ 16 <650>;
+		ti,y-plate-ohms = /bits/ 16 <300>;
+		ti,pressure-max = /bits/ 16 <1000>;
+
+		wakeup-source;
+	};
+};
+
+&clks {
+	assigned-clocks = <&clks IMX6QDL_CLK_LDB_DI0_SEL>,
+			  <&clks IMX6QDL_CLK_LDB_DI1_SEL>,
+			  <&clks IMX6QDL_CLK_IPU1_DI0_PRE_SEL>,
+			  <&clks IMX6QDL_CLK_IPU1_DI1_PRE_SEL>,
+			  <&clks IMX6QDL_CLK_IPU2_DI0_PRE_SEL>,
+			  <&clks IMX6QDL_CLK_IPU2_DI1_PRE_SEL>,
+			  <&clks IMX6QDL_CLK_CKO2>;
+	assigned-clock-parents = <&clks IMX6QDL_CLK_PLL2_PFD2_396M>,
+				 <&clks IMX6QDL_CLK_PLL2_PFD2_396M>,
+				 <&clks IMX6QDL_CLK_PLL2_PFD2_396M>,
+				 <&clks IMX6QDL_CLK_PLL2_PFD2_396M>,
+				 <&clks IMX6QDL_CLK_PLL2_PFD2_396M>,
+				 <&clks IMX6QDL_CLK_PLL2_PFD2_396M>;
+	assigned-clock-rates =  <0>, <0>, <0>, <0>, <0>, <0>, <12000000>;
+};
diff --git a/arch/arm/boot/dts/imx6q-vtpctp-ksz8863.dtsi b/arch/arm/boot/dts/imx6q-vtpctp-ksz8863.dtsi
new file mode 100644
index 000000000000..9c8c50d9f4fc
--- /dev/null
+++ b/arch/arm/boot/dts/imx6q-vtpctp-ksz8863.dtsi
@@ -0,0 +1,77 @@
+/*
+ * Copyright (C) 2020 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/ {
+	bitbang_mdio0: gpio_mdio {
+		status = "disabled";
+		compatible = "virtual,mdio-gpio";
+		#address-cells = <1>;
+		#size-cells = <0>;
+	};
+
+	swcfg_ksz8863: swcfg_ksz8863 {
+		status = "disabled";
+		compatible = "swcfg,ksz8863";
+
+		swcfg,mii-bus = <&bitbang_mdio0>;
+		swcfg,alias = "ksz8863";
+		swcfg,cpu_port = <2>;
+		swcfg,ports = <3>;
+		swcfg,vlans = <16>;
+		swcfg,switch = <&ksz8863_switch>;
+	};
+};
+
+&bitbang_mdio0 {
+	ksz8863_switch: switch@0 {
+		status = "disabled";
+		compatible = "micrel,ksz8863";
+
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_ksz8863>;
+
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		ksz,reset-gpio = <&gpio2 21 GPIO_ACTIVE_LOW>;
+
+		reg = <0>;
+		dsa,member = <0 0>;
+		dsa,enable-on-boot;
+
+		ksz,reset-switch;
+		ksz,disable-internal-ldo;
+
+		ports {
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			port@0 {
+				reg = <2>;
+				label = "ethX1";
+				phy-pwrdown;
+			};
+
+			port@1 {
+				reg = <1>;
+				label = "ethX2";
+				phy-pwrdown;
+			};
+
+			port@2 {
+				reg = <3>;
+				label = "cpu";
+				ethernet = <&fec>;
+				fixed-link {
+					speed = <100>;
+					full-duplex;
+				};
+			};
+		};
+	};
+};
diff --git a/arch/arm/boot/dts/imx6q-vtpctp.dtsi b/arch/arm/boot/dts/imx6q-vtpctp.dtsi
new file mode 100644
index 000000000000..c48b7182c7e1
--- /dev/null
+++ b/arch/arm/boot/dts/imx6q-vtpctp.dtsi
@@ -0,0 +1,1153 @@
+/*
+ * Copyright (C) 2020 WAGO Kontakttechnik GmbH & Co. KG - https://www.wago.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/input/input.h>
+
+#include "imx6q.dtsi"
+#include "imx6q-vtpctp-ksz8863.dtsi"
+
+/ {
+	model = "VTPCTP Quad Board";
+
+	memory {
+		reg = <0x10000000 0x80000000>;
+	};
+
+	aliases {
+		mxcfb0 = &mxcfb1;
+		mdio-gpio0 = &bitbang_mdio0;
+		mmc0 = &usdhc1;
+		mmc1 = &usdhc3;
+		ethernet1 = &fec;
+	};
+
+	wsysinit_init {
+		compatible = "wago,sysinit";
+		add-sysfs-entries;
+
+		tty,service   = "ttymxc0";
+		tty,rs232-485 = "ttymxc1";
+
+		board,variant = "TP600";
+
+		/* sysclock adjustments, empirical values */
+		adjtimex,tick = <10000>;
+		adjtimex,frequency = <2000000>;
+	};
+
+	regulators {
+		compatible = "simple-bus";
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		reg_1p5v: 1p5v {
+			compatible = "regulator-fixed";
+			regulator-name = "1P5V";
+			regulator-min-microvolt = <1500000>;
+			regulator-max-microvolt = <1500000>;
+			regulator-always-on;
+		};
+
+		reg_1p8v: 1p8v {
+			compatible = "regulator-fixed";
+			regulator-name = "1P8V";
+			regulator-min-microvolt = <1800000>;
+			regulator-max-microvolt = <1800000>;
+			regulator-always-on;
+		};
+
+		reg_2p5v: 2p5v {
+			compatible = "regulator-fixed";
+			regulator-name = "2P5V";
+			regulator-min-microvolt = <2500000>;
+			regulator-max-microvolt = <2500000>;
+			regulator-always-on;
+		};
+
+		reg_2p8v: 2p8v {
+			compatible = "regulator-fixed";
+			regulator-name = "2P8V";
+			regulator-min-microvolt = <2800000>;
+			regulator-max-microvolt = <2800000>;
+			regulator-always-on;
+		};
+
+		reg_3p3v: 3p3v {
+			compatible = "regulator-fixed";
+			regulator-name = "3P3V";
+			regulator-min-microvolt = <3300000>;
+			regulator-max-microvolt = <3300000>;
+			regulator-always-on;
+		};
+
+		reg_usb_otg_vbus: regulator@0 {
+			compatible = "regulator-fixed";
+			reg = <0>;
+			regulator-name = "usb_otg_vbus";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			gpio = <&gpio4 15 GPIO_ACTIVE_LOW>;
+			enable-active-high;
+		};
+
+		reg_usb_h1_vbus: regulator@1 {
+			compatible = "regulator-fixed";
+			reg = <1>;
+			regulator-name = "usb_h1_vbus";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			regulator-always-on;
+		};
+
+		reg_lvds_backlight_3v3: regulator@3 {
+			compatible = "regulator-fixed";
+			regulator-name = "lvds-3v3";
+			regulator-min-microvolt = <3300000>;
+			regulator-max-microvolt = <3300000>;
+			regulator-always-on;
+		};
+
+	};
+
+	tsc2046reg: tsc2046-reg {
+		compatible = "regulator-fixed";
+		regulator-name = "tsc2046-reg";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+	};
+
+	sound {
+		compatible = "fsl,imx6dl-vtpctp-sgtl5000",
+					 "fsl,imx-audio-sgtl5000";
+		model = "imx6dl-vtpctp-sgtl5000";
+		ssi-controller = <&ssi1>;
+		audio-codec = <&codec>;
+		audio-routing =
+		"Headphone Jack", "HP_OUT";
+		mux-int-port = <1>;
+		mux-ext-port = <4>;
+	};
+
+	mxcfb1: fb@0 {
+		compatible = "fsl,mxc_sdc_fb";
+		disp_dev = "ldb";
+		interface_pix_fmt = "RGB666";
+		default_bpp = <24>;
+		int_clk = <0>;
+		late_init = <0>;
+		status = "okay";
+	};
+
+	backlight: backlight {
+		compatible = "pwm-backlight";
+		pwms = <&pwm3 0 50512>;
+		brightness-levels =
+			< 0   1   2   3   4   5   6   7   8   9
+			 10  11  12  13  14  15  16  17  18  19
+			 20  21  22  23  24  25  26  27  28  29
+			 30  31  32  33  34  35  36  37  38  39
+			 40  41  42  43  44  45  46  47  48  49
+			 50  51  52  53  54  55  56  57  58  59
+			 60  61  62  63  64  65  66  67  68  69
+			 70  71  72  73  74  75  76  77  78  79
+			 80  81  82  83  84  85  86  87  88  89
+			 90  91  92  93  94  95  96  97  98  99
+			100 101 102 103 104 105 106 107 108 109
+			110 111 112 113 114 115 116 117 118 119
+			120 121 122 123 124 125 126 127 128 129
+			130 131 132 133 134 135 136 137 138 139
+			140 141 142 143 144 145 146 147 148 149
+			150 151 152 153 154 155 156 157 158 159
+			160 161 162 163 164 165 166 167 168 169
+			170 171 172 173 174 175 176 177 178 179
+			180 181 182 183 184 185 186 187 188 189
+			190 191 192 193 194 195 196 197 198 199
+			200 201 202 203 204 205 206 207 208 209
+			210 211 212 213 214 215 216 217 218 219
+			220 221 222 223 224 225 226 227 228 229
+			230 231 232 233 234 235 236 237 238 239
+			240 241 242 243 244 245 246 247 248 249
+			250 251 252 253 254 255>;
+		default-brightness-level = <0>;
+		power-supply = <&reg_lvds_backlight_3v3>;
+		status = "okay";
+	};
+
+	backlight_leds {
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_reg_lcd_3v3>;
+		compatible = "gpio-leds";
+
+		vled-on {
+			gpios = <&gpio2 11 GPIO_ACTIVE_HIGH>;
+			default-state = "on";
+		};
+
+		light-on {
+			gpios = <&gpio2 8 GPIO_ACTIVE_HIGH>;
+			default-state = "on";
+		};
+
+		vlcd-on {
+			gpios = <&gpio6 11 GPIO_ACTIVE_HIGH>;
+			default-state = "on";
+		};
+
+		captast-nreset {
+			gpios = <&gpio2 3 GPIO_ACTIVE_HIGH>;
+			default-state = "on";
+		};
+
+		pcap-bridge-nreset {
+			gpios = <&gpio6 10 GPIO_ACTIVE_HIGH>;
+			default-state = "on";
+		};
+
+		rs-sel {
+			gpios = <&gpio6 9 GPIO_ACTIVE_HIGH>;
+			default-state = "off";
+		};
+
+		sys-red {
+			gpios = <&gpio2 4 GPIO_ACTIVE_HIGH>;
+			default-state = "off";
+		};
+
+		sys-green {
+			gpios = <&gpio2 5 GPIO_ACTIVE_HIGH>;
+			default-state = "off";
+		};
+
+		sys-blue {
+			gpios = <&gpio2 6 GPIO_ACTIVE_HIGH>;
+			default-state = "off";
+		};
+
+		led-rd-ovrd {
+			gpios = <&gpio5 18 GPIO_ACTIVE_HIGH>;
+			default-state = "off";
+		};
+
+		led-srvr-wd-imx6 {
+			gpios = <&gpio5 19 GPIO_ACTIVE_HIGH>;
+			default-state = "off";
+		};
+
+		en-led-rd-srvr-ndw {
+			gpios = <&gpio2 16 GPIO_ACTIVE_LOW>;
+			default-state = "off";
+		};
+		beeper {
+			gpios = <&gpio2 7 GPIO_ACTIVE_HIGH>;
+			default-state = "oneshot";
+		};
+	};
+
+	v4l2_cap_1 {
+		compatible = "fsl,imx6q-v4l2-capture";
+		ipu_id = <0>;
+		csi_id = <1>;
+		mclk_source = <0>;
+		status = "okay";
+	};
+
+	v4l2_out {
+		compatible = "fsl,mxc_v4l2_output";
+		status = "okay";
+	};
+
+	susp-signals {
+		compatible = "fsl,susp-signals";
+		gpios = <&gpio1 5 GPIO_ACTIVE_LOW>;
+	};
+
+	PAC-Operating-Mode-Switch {
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_bas>;
+		compatible = "gpio-keys";
+		status = "okay";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		autorepeat;
+
+		run {
+			label = "RUN";
+			gpios = <&gpio2 12 GPIO_ACTIVE_LOW>; /* GPIO 44 */
+			linux,code = <1>;
+			linux,input-type = <EV_SW>;
+			debounce-interval = <1>; /* debounce in msecs */
+		};
+
+		stop {
+			label = "STOP";
+			gpios = <&gpio2 13 GPIO_ACTIVE_LOW>; /* GPIO 45 */
+			linux,code = <2>;
+			linux,input-type = <EV_SW>;
+			debounce-interval = <1>; /* debounce in msecs */
+		};
+
+		reset {
+			label = "RESET";
+			gpios = <&gpio2 15 GPIO_ACTIVE_LOW>; /* GPIO 47 */
+			linux,code = <3>;
+			linux,input-type = <EV_KEY>;
+			debounce-interval = <1>; /* debounce in msecs */
+		};
+
+		reset_all {
+			label = "RESET_ALL";
+			gpios = <&gpio4 7 GPIO_ACTIVE_LOW>; /* GPIO 103 */
+			linux,code = <4>;
+			linux,input-type = <EV_KEY>;
+			debounce-interval = <1>; /* debounce in msecs */
+		};
+
+	};
+
+	bitbang_mdio0: gpio_mdio {
+		compatible = "virtual,mdio-gpio";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		##status = "okay";
+	};
+
+	rmii_clk_ext: rmii_clk {
+		compatible = "fixed-clock";
+		#clock-cells = <0>;
+		clock-frequency = <50000000>;
+	};
+};
+
+&audmux {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_audmux>;
+	status = "okay";
+};
+
+&clks {
+	fsl,ldb-di0-parent = <&clks IMX6QDL_CLK_PLL2_PFD0_352M>;
+	fsl,ldb-di1-parent = <&clks IMX6QDL_CLK_PLL2_PFD0_352M>;
+
+	assigned-clocks = <&clks IMX6QDL_CLK_CKO2>;
+	assigned-clock-rates = <12000000>;
+};
+
+&fec {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_enet>;
+	phy-mode = "rmii";
+
+	clocks = <&clks IMX6QDL_CLK_ENET>,
+		 <&clks IMX6QDL_CLK_ENET>,
+		 <&rmii_clk_ext>;
+	clock-names = "ipg", "ahb", "ptp";
+
+	status = "okay";
+	fixed-link {
+		speed = <100>;
+		full-duplex;
+	};
+
+	mdio: mdio@0 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+	};
+};
+
+&i2c2 {
+	clock-frequency = <400000>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c2>;
+	status = "okay";
+
+	pmic: pf0100@8 {
+		compatible = "fsl,pfuze100";
+		reg = <0x08>;
+		interrupt-parent = <&gpio7>;
+		interrupts = <12 8>;
+
+		regulators {
+
+			/* VDD_ARM */
+			sw1a_reg: sw1ab {
+				regulator-min-microvolt = <1400000>;
+				regulator-max-microvolt = <1875000>;
+				regulator-boot-on;
+				regulator-always-on;
+				regulator-ramp-delay = <6250>;
+			};
+
+			/* VDD_SOC */
+			sw1c_reg: sw1c {
+				regulator-min-microvolt = <1400000>;
+				regulator-max-microvolt = <1875000>;
+				regulator-boot-on;
+				regulator-always-on;
+				regulator-ramp-delay = <6250>;
+			};
+
+			 /* VDD_HIGH */
+			sw2_reg: sw2 {
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			 /* VDD_DDR */
+			sw3a_reg: sw3a {
+				regulator-min-microvolt = <1350000>;
+				regulator-max-microvolt = <1350000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			 /* VDD_DDR */
+			sw3b_reg: sw3b {
+				regulator-min-microvolt = <1350000>;
+				regulator-max-microvolt = <1350000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			/* VDD_1P8 */
+			sw4_reg: sw4 {
+				regulator-min-microvolt = <800000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-always-off;
+			};
+
+			swbst_reg: swbst {
+				regulator-min-microvolt = <5000000>;
+				regulator-max-microvolt = <5150000>;
+			};
+
+			snvs_reg: vsnvs {
+				regulator-min-microvolt = <1000000>;
+				regulator-max-microvolt = <3000000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			vref_reg: vrefddr {
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			vgen3_reg: vgen3 {
+				regulator-min-microvolt = <2500000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-always-on;
+			};
+
+			vgen4_reg: vgen4 {
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+				regulator-always-on;
+			};
+
+
+			vgen5_reg: vgen5 {
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-always-on;
+			};
+
+			/* supply voltage for eMMC */
+			vgen6_reg: vgen6 {
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <1800000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+		};
+	};
+
+	lm75: lm75@49 {
+		compatible = "national,lm75";
+		reg = <0x49>;
+	};
+
+	eeprom: m24c512@54 {
+		compatible = "st,24c512", "at24";
+		reg = <0x54>;
+	};
+
+	rtc_r2221t@32 {
+		compatible = "ricoh,r2221tl";
+		reg = <0x32>;
+
+		interrupt-parent = <&gpio1>;
+		interrupts = <4 IRQ_TYPE_LEVEL_LOW>;
+	};
+
+	pca9552@61 {
+		compatible = "nxp,pca9552";
+		status = "okay";
+		reg = <0x61>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		sys-red-back@3 {
+			label = "sys-red-back";
+			reg = <3>;
+			linux,default-trigger = "none";
+		};
+
+		sys-green-back@4 {
+			label = "sys-green-back";
+			reg = <4>;
+			linux,default-trigger = "none";
+		};
+
+		sys-blue-back@5 {
+			label = "sys-blue-back";
+			reg = <5>;
+			linux,default-trigger = "none";
+		};
+
+		run-green@8 {
+			label = "run-green";
+			reg = <8>;
+			linux,default-trigger = "none";
+		};
+
+		run-red@9 {
+			label = "run-red";
+			reg = <9>;
+			linux,default-trigger = "none";
+		};
+
+		can-green@10 {
+			label = "can-green";
+			reg = <10>;
+			linux,default-trigger = "none";
+		};
+
+		can-red@11 {
+			label = "can-red";
+			reg = <11>;
+			linux,default-trigger = "none";
+		};
+
+		h11-green@12 {
+			label = "h11-green";
+			reg = <12>;
+			linux,default-trigger = "none";
+		};
+
+		h11-red@13 {
+			label = "h11-red";
+			reg = <13>;
+			linux,default-trigger = "none";
+		};
+
+		h12-green@14 {
+			label = "h12-green";
+			reg = <14>;
+			linux,default-trigger = "none";
+		};
+
+		h12-red@15 {
+			label = "h12-red";
+			reg = <15>;
+			linux,default-trigger = "none";
+		};
+	};
+
+};
+
+&i2c3 {
+	clock-frequency = <400000>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c3>;
+	status = "okay";
+
+	codec: sgtl5000@a {
+		compatible = "fsl,sgtl5000";
+		reg = <0x0a>;
+		clocks = <&clks IMX6QDL_CLK_CKO2>;
+		/* sysclk = <12000000>; */
+		VDDD-supply = <&reg_1p8v>;
+		VDDA-supply = <&reg_3p3v>;
+		VDDIO-supply = <&reg_3p3v>;
+	};
+
+	qt1070: keyboard@1b {
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_qt1070_irq>;
+		compatible = "qt1070";
+		reg = <0x1b>;
+		interrupt-parent = <&gpio4>;
+		interrupts = <8 IRQ_TYPE_LEVEL_LOW>;
+		wakeup-source;
+		at,threshold = /bits/ 8 <14>;
+		at,ave_aks = /bits/ 8 <129>;
+		at,di = /bits/ 8 <12>;
+		at,active_keys = /bits/ 8 <24>;
+	};
+
+	si1142: si1142@5a {
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_si1142_irq>;
+		compatible = "si1142";
+		reg = <0x5a>;
+		interrupt-parent = <&gpio1>;
+		interrupts = <0 IRQ_TYPE_LEVEL_LOW>;
+		wakeup-source;
+	};
+
+	pca9552@60 {
+		compatible = "nxp,pca9552";
+		status = "okay";
+		reg = <0x60>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		bright-minus@9 {
+			label = "bright-minus";
+			reg = <9>;
+			linux,default-trigger = "oneshot";
+		};
+
+		bright-plus@8 {
+			label = "bright-plus";
+			reg = <8>;
+			linux,default-trigger = "oneshot";
+		};
+	};
+};
+
+&iomuxc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_hog>;
+
+	imx6qdl-qmx6 {
+		pinctrl_hog: hoggrp {
+			fsl,pins = <
+				/* RTC-NINT */
+				MX6QDL_PAD_GPIO_4__GPIO1_IO04		0x1b0b0
+				/* RGMII Phy Interrupt */
+				MX6QDL_PAD_EIM_D23__GPIO3_IO23	0x80000000
+				/* EEPROM WP GPIO23 */
+				MX6QDL_PAD_ENET_REF_CLK__GPIO1_IO23	0x1b0b0
+				/* PCAP-BRIDGE-NRESET */
+				MX6QDL_PAD_NANDF_RB0__GPIO6_IO10	0x1b0b0
+				/* BEEPER_ON */
+				MX6QDL_PAD_NANDF_D7__GPIO2_IO07		0x1b0b0
+				/* AIO_NREST */
+				MX6QDL_PAD_EIM_A24__GPIO5_IO04		0x0b0b1
+				/* PMIC-NINTB */
+				MX6QDL_PAD_GPIO_17__GPIO7_IO12		0x0b0b1
+			>;
+		};
+
+		pinctrl_audmux: audmuxgrp {
+			fsl,pins = <
+				MX6QDL_PAD_SD2_DAT0__AUD4_RXD		0x130b0
+				MX6QDL_PAD_SD2_DAT3__AUD4_TXC		0x00008
+				MX6QDL_PAD_SD2_DAT2__AUD4_TXD		0x00008
+				MX6QDL_PAD_SD2_DAT1__AUD4_TXFS		0x00008
+				MX6QDL_PAD_NANDF_CS2__CCM_CLKO2		0x00008
+			>;
+		};
+
+		pinctrl_ecspi4: ecspi4grp {
+			fsl,pins = <
+				MX6QDL_PAD_EIM_D22__ECSPI4_MISO	0x100b1
+				MX6QDL_PAD_EIM_D28__ECSPI4_MOSI	0x100b1
+				MX6QDL_PAD_EIM_D21__ECSPI4_SCLK	0x100b1
+				/* CS0 */
+				MX6QDL_PAD_EIM_D20__GPIO3_IO20	0x1b0b0
+				/* CS1 */
+				MX6QDL_PAD_EIM_A25__GPIO5_IO02	0x1b0b0
+			>;
+		};
+
+		pinctrl_enet: enetgrp {
+			fsl,pins = <
+			MX6QDL_PAD_ENET_RXD0__ENET_RX_DATA0	0x1b0b0
+			MX6QDL_PAD_ENET_RXD1__ENET_RX_DATA1	0x1b0b0
+			MX6QDL_PAD_ENET_CRS_DV__ENET_RX_EN	0x1b0b0
+			MX6QDL_PAD_ENET_TXD0__ENET_TX_DATA0 0x1b088
+			MX6QDL_PAD_ENET_TXD1__ENET_TX_DATA1	0x1b088
+			MX6QDL_PAD_ENET_TX_EN__ENET_TX_EN	0x1b088
+			MX6QDL_PAD_GPIO_16__ENET_REF_CLK	0x4001b0a8
+			>;
+		};
+
+		pinctrl_flexcan1: flexcan1grp {
+			fsl,pins = <
+			MX6QDL_PAD_KEY_ROW2__FLEXCAN1_RX	0x80000000
+			MX6QDL_PAD_KEY_COL2__FLEXCAN1_TX	0x80000000
+			>;
+		};
+
+		pinctrl_i2c2: i2c2grp {
+			fsl,pins = <
+				MX6QDL_PAD_KEY_COL3__I2C2_SCL	0x4001b8b1
+				MX6QDL_PAD_KEY_ROW3__I2C2_SDA	0x4001b8b1
+			>;
+		};
+
+		pinctrl_i2c3: i2c3grp {
+			fsl,pins = <
+				MX6QDL_PAD_EIM_D17__I2C3_SCL	0x4001b8b1
+				MX6QDL_PAD_EIM_D18__I2C3_SDA	0x4001b8b1
+			>;
+		};
+
+		pinctrl_uart1: uart1grp {
+			fsl,pins = <
+				MX6QDL_PAD_CSI0_DAT11__UART1_RX_DATA	0x1b0b0
+				MX6QDL_PAD_CSI0_DAT10__UART1_TX_DATA	0x1b0b0
+			>;
+		};
+
+		pinctrl_uart2: uart2grp {
+			fsl,pins = <
+				MX6QDL_PAD_EIM_D26__UART2_TX_DATA	0x1b0b0
+				MX6QDL_PAD_EIM_D27__UART2_RX_DATA	0x1b0b0
+				MX6QDL_PAD_EIM_D29__GPIO3_IO29		0x1b0b0
+				MX6QDL_PAD_SD4_DAT6__UART2_CTS_B	0x1b0b0
+			>;
+		};
+
+		pinctrl_usbotg: usbotggrp {
+			fsl,pins = <
+				/* OTG_ID */
+				MX6QDL_PAD_ENET_RX_ER__USB_OTG_ID	0x1b0b1
+				/* OTG_OC */
+				MX6QDL_PAD_KEY_COL4__USB_OTG_OC		0x1b0b1
+				/* OTG_PWR */
+				MX6QDL_PAD_KEY_ROW4__GPIO4_IO15		0x130b0
+			>;
+		};
+
+		pinctrl_usdhc1: usdhc1grp {
+			fsl,pins = <
+				MX6QDL_PAD_SD1_CMD__SD1_CMD		0x17059
+				MX6QDL_PAD_SD1_CLK__SD1_CLK		0x10059
+				MX6QDL_PAD_SD1_DAT0__SD1_DATA0	0x17059
+				MX6QDL_PAD_SD1_DAT1__SD1_DATA1	0x17059
+				MX6QDL_PAD_SD1_DAT2__SD1_DATA2	0x17059
+				MX6QDL_PAD_SD1_DAT3__SD1_DATA3	0x17059
+				/* CD */
+				MX6QDL_PAD_GPIO_1__SD1_CD_B		0x1b0b0
+				/* SD-CARD.EN */
+				MX6QDL_PAD_SD4_CMD__GPIO7_IO09	0x1b0b0
+			>;
+		};
+
+		pinctrl_usdhc3: usdhc3grp {
+			fsl,pins = <
+				MX6QDL_PAD_SD3_CMD__SD3_CMD		0x17051
+				MX6QDL_PAD_SD3_CLK__SD3_CLK		0x10051
+				MX6QDL_PAD_SD3_DAT0__SD3_DATA0		0x17051
+				MX6QDL_PAD_SD3_DAT1__SD3_DATA1		0x17051
+				MX6QDL_PAD_SD3_DAT2__SD3_DATA2		0x17051
+				MX6QDL_PAD_SD3_DAT3__SD3_DATA3		0x17051
+				MX6QDL_PAD_SD3_DAT4__SD3_DATA4		0x17051
+				MX6QDL_PAD_SD3_DAT5__SD3_DATA5		0x17051
+				MX6QDL_PAD_SD3_DAT6__SD3_DATA6		0x17051
+				MX6QDL_PAD_SD3_DAT7__SD3_DATA7		0x17051
+			>;
+		};
+
+		pinctrl_reg_lcd_3v3: lpinctrl_reg_lcd_3v3grp {
+			fsl,pins = <
+			/* LCD-CTRL.LIGHT-ON */
+			MX6QDL_PAD_SD4_DAT0__GPIO2_IO08	0x80000000
+			/* LCD-CTRL.VLED-ON */
+			MX6QDL_PAD_SD4_DAT3__GPIO2_IO11	0x80000000
+			/* LCD-CTRL.VLCD-ON */
+			MX6QDL_PAD_NANDF_CS0__GPIO6_IO11	0x80000000
+			/* RS-SEL */
+			MX6QDL_PAD_NANDF_WP_B__GPIO6_IO09	0x1b0b0
+			/* CAPTAST_NRESET */
+			MX6QDL_PAD_NANDF_D3__GPIO2_IO03		0x1b0b0
+			/* LED-RD-ON */
+			MX6QDL_PAD_NANDF_D4__GPIO2_IO04		0x1b0b0
+			/* LED-GN-ON */
+			MX6QDL_PAD_NANDF_D5__GPIO2_IO05		0x1b0b0
+			/* LED-BL-ON */
+			MX6QDL_PAD_NANDF_D6__GPIO2_IO06		0x1b0b0
+			/* EN-LED-SRVR-NWD */
+			MX6QDL_PAD_EIM_A22__GPIO2_IO16		0x1b0b0
+			/* LED-RD-OVRD */
+			MX6QDL_PAD_CSI0_PIXCLK__GPIO5_IO18	0x1b0b0
+			/* LED-SRVR-WD-IMX6 */
+			MX6QDL_PAD_CSI0_MCLK__GPIO5_IO19	0x1b0b0
+			>;
+		};
+
+		pinctrl_pwm3: pwm3grp {
+			fsl,pins = <
+				MX6QDL_PAD_SD4_DAT1__PWM3_OUT	0x1b0b0
+			>;
+		};
+
+		pinctrl_bas: basgrp {
+			fsl,pins = <
+				/* BAS-NRUN */
+				MX6QDL_PAD_SD4_DAT4__GPIO2_IO12	0x1b0b0
+				/* BAS-NSTOP */
+				MX6QDL_PAD_SD4_DAT5__GPIO2_IO13	0x1b0b0
+				/* BAS-NRESET */
+				MX6QDL_PAD_SD4_DAT7__GPIO2_IO15	0x1b0b0
+				/* RESET-ALL */
+				MX6QDL_PAD_KEY_ROW0__GPIO4_IO07	0x1b0b0
+			>;
+		};
+
+		pinctrl_ksz8863: pinctrl_ksz8863grp {
+			fsl,pins = <
+				/* phy-reset */
+				MX6QDL_PAD_KEY_ROW1__GPIO4_IO09	0x1B0B0
+				/* phy-irq */
+				MX6QDL_PAD_GPIO_6__GPIO1_IO06	0x000b1
+			>;
+		};
+
+		gpio_bitbang_mdio_pins: pinmux_gpio_bitbang_mdio_pins {
+			fsl,pins = <
+				/* MDIO */
+				MX6QDL_PAD_ENET_MDIO__GPIO1_IO22	0x1b0b0
+				MX6QDL_PAD_ENET_MDC__GPIO1_IO31		0x1b0b0
+			>;
+		};
+
+		gpio_bitbang_mdio_sleep_pins: pinmux_gpio_bitbang_mdio_sleep {
+			fsl,pins = <
+				/* MDIO reset value */
+				MX6QDL_PAD_ENET_MDIO__GPIO1_IO22	0x1b0b0
+				MX6QDL_PAD_ENET_MDC__GPIO1_IO31		0x1b0b0
+			>;
+		};
+
+		/* pins for tsc2046 pendown */
+		pinctrl_tsc2046: tsc2046grp {
+			fsl,pins = <
+				/* tsc2046 PENDOWN */
+				MX6QDL_PAD_GPIO_3__GPIO1_IO03 0x1b0b0
+			>;
+		};
+
+		pinctrl_qt1070_irq: qt1070_irqgrp {
+			fsl,pins = <
+				MX6QDL_PAD_KEY_COL1__GPIO4_IO08 0x1b0b0
+			>;
+		};
+
+		pinctrl_si1142_irq: si1142_irqgrp {
+			fsl,pins = <
+				MX6QDL_PAD_GPIO_0__GPIO1_IO00 0x1b0b0
+			>;
+		};
+
+		pinctrl_weim: weimnorgrp {
+			fsl,pins = <
+			MX6QDL_PAD_EIM_CS1__EIM_CS1_B		0x17051
+			MX6QDL_PAD_EIM_CS0__EIM_CS0_B		0x17051
+			MX6QDL_PAD_EIM_EB0__EIM_EB0_B		0x17051
+			MX6QDL_PAD_EIM_EB1__EIM_EB1_B		0x17051
+			MX6QDL_PAD_EIM_EB2__EIM_EB2_B		0x17051
+			MX6QDL_PAD_EIM_EB3__EIM_EB3_B		0x17051
+			MX6QDL_PAD_EIM_LBA__EIM_LBA_B		0x17051
+			MX6QDL_PAD_EIM_OE__EIM_OE_B			0x17051
+			MX6QDL_PAD_EIM_RW__EIM_RW			0x17051
+			MX6QDL_PAD_EIM_WAIT__GPIO5_IO00		0x17051
+			MX6QDL_PAD_EIM_BCLK__EIM_BCLK		0x17051
+			MX6QDL_PAD_CSI0_DATA_EN__EIM_DATA00	0x17049
+			MX6QDL_PAD_CSI0_VSYNC__EIM_DATA01	0x17049
+			MX6QDL_PAD_CSI0_DAT4__EIM_DATA02	0x17049
+			MX6QDL_PAD_CSI0_DAT5__EIM_DATA03	0x17049
+			MX6QDL_PAD_CSI0_DAT6__EIM_DATA04	0x17049
+			MX6QDL_PAD_CSI0_DAT7__EIM_DATA05	0x17049
+			MX6QDL_PAD_CSI0_DAT8__EIM_DATA06	0x17049
+			MX6QDL_PAD_CSI0_DAT9__EIM_DATA07	0x17049
+			MX6QDL_PAD_CSI0_DAT12__EIM_DATA08	0x17049
+			MX6QDL_PAD_CSI0_DAT13__EIM_DATA09	0x17049
+			MX6QDL_PAD_CSI0_DAT14__EIM_DATA10	0x17049
+			MX6QDL_PAD_CSI0_DAT15__EIM_DATA11	0x17049
+			MX6QDL_PAD_CSI0_DAT16__EIM_DATA12	0x17049
+			MX6QDL_PAD_CSI0_DAT17__EIM_DATA13	0x17049
+			MX6QDL_PAD_CSI0_DAT18__EIM_DATA14	0x17049
+			MX6QDL_PAD_CSI0_DAT19__EIM_DATA15	0x17049
+			MX6QDL_PAD_EIM_DA0__EIM_AD00		0x17051
+			MX6QDL_PAD_EIM_DA1__EIM_AD01		0x17051
+			MX6QDL_PAD_EIM_DA2__EIM_AD02		0x17051
+			MX6QDL_PAD_EIM_DA3__EIM_AD03		0x17051
+			MX6QDL_PAD_EIM_DA4__EIM_AD04		0x17051
+			MX6QDL_PAD_EIM_DA5__EIM_AD05		0x17051
+			MX6QDL_PAD_EIM_DA6__EIM_AD06		0x17051
+			MX6QDL_PAD_EIM_DA7__EIM_AD07		0x17051
+			MX6QDL_PAD_EIM_DA8__EIM_AD08		0x17051
+			MX6QDL_PAD_EIM_DA9__EIM_AD09		0x17051
+			MX6QDL_PAD_EIM_DA10__EIM_AD10		0x17051
+			MX6QDL_PAD_EIM_DA11__EIM_AD11		0x17051
+			MX6QDL_PAD_EIM_DA12__EIM_AD12		0x17051
+			MX6QDL_PAD_EIM_DA13__EIM_AD13		0x17051
+			MX6QDL_PAD_EIM_DA14__EIM_AD14		0x17051
+			MX6QDL_PAD_EIM_DA15__EIM_AD15		0x17051
+			MX6QDL_PAD_EIM_A16__EIM_ADDR16		0x17051
+			MX6QDL_PAD_EIM_A17__EIM_ADDR17		0x17051
+			MX6QDL_PAD_EIM_A18__EIM_ADDR18		0x17051
+			MX6QDL_PAD_EIM_A19__EIM_ADDR19		0x17051
+			MX6QDL_PAD_EIM_A20__EIM_ADDR20		0x17051
+			>;
+		};
+
+		pinctrl_ipu_disp: ipudisp1grp {
+			fsl,pins = <
+			MX6QDL_PAD_DI0_DISP_CLK__IPU1_DI0_DISP_CLK	0x00008
+			MX6QDL_PAD_DISP0_DAT0__IPU1_DISP0_DATA00	0x00008
+			MX6QDL_PAD_DISP0_DAT1__IPU1_DISP0_DATA01	0x00008
+			MX6QDL_PAD_DISP0_DAT2__IPU1_DISP0_DATA02	0x00008
+			MX6QDL_PAD_DISP0_DAT3__IPU1_DISP0_DATA03	0x00008
+			MX6QDL_PAD_DISP0_DAT4__IPU1_DISP0_DATA04	0x00008
+			MX6QDL_PAD_DISP0_DAT5__IPU1_DISP0_DATA05	0x00008
+			MX6QDL_PAD_DISP0_DAT6__IPU1_DISP0_DATA06	0x00008
+			MX6QDL_PAD_DISP0_DAT7__IPU1_DISP0_DATA07	0x00008
+			MX6QDL_PAD_DISP0_DAT8__IPU1_DISP0_DATA08	0x00008
+			MX6QDL_PAD_DISP0_DAT9__IPU1_DISP0_DATA09	0x00008
+			MX6QDL_PAD_DISP0_DAT10__IPU1_DISP0_DATA10	0x00008
+			MX6QDL_PAD_DISP0_DAT11__IPU1_DISP0_DATA11	0x00008
+			MX6QDL_PAD_DISP0_DAT12__IPU1_DISP0_DATA12	0x00008
+			MX6QDL_PAD_DISP0_DAT13__IPU1_DISP0_DATA13	0x00008
+			MX6QDL_PAD_DISP0_DAT14__IPU1_DISP0_DATA14	0x00008
+			MX6QDL_PAD_DISP0_DAT15__IPU1_DISP0_DATA15	0x00008
+			MX6QDL_PAD_DISP0_DAT16__IPU1_DISP0_DATA16	0x00008
+			MX6QDL_PAD_DISP0_DAT17__IPU1_DISP0_DATA17	0x00008
+			MX6QDL_PAD_DISP0_DAT18__IPU1_DISP0_DATA18	0x00008
+			MX6QDL_PAD_DISP0_DAT19__IPU1_DISP0_DATA19	0x00008
+			MX6QDL_PAD_DISP0_DAT20__IPU1_DISP0_DATA20	0x00008
+			MX6QDL_PAD_DISP0_DAT21__IPU1_DISP0_DATA21	0x00008
+			MX6QDL_PAD_DISP0_DAT22__IPU1_DISP0_DATA22	0x00008
+			MX6QDL_PAD_DISP0_DAT23__IPU1_DISP0_DATA23	0x00008
+			MX6QDL_PAD_DI0_PIN2__IPU1_DI0_PIN02		0x00008
+			MX6QDL_PAD_DI0_PIN3__IPU1_DI0_PIN03		0x00008
+			MX6QDL_PAD_DI0_PIN15__IPU1_DI0_PIN15	0x00008
+			>;
+		};
+
+		pinctrl_dio_spi: dio_spi_grp {
+			fsl,pins = <
+				MX6QDL_PAD_EIM_D19__GPIO3_IO19	0x1b0b0
+				MX6QDL_PAD_NANDF_D0__GPIO2_IO00	0x1b0b0
+			>;
+		};
+
+	};
+};
+
+&audmux {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_audmux>;
+	status = "okay";
+};
+
+&can1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_flexcan1>;
+	status = "okay";
+};
+
+&gpc {
+	/* use ldo-bypass, u-boot will check it and configure */
+	fsl,ldo-bypass = <1>;
+	fsl,wdog-reset = <1>;
+};
+
+&pwm3 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pwm3>;
+	#pwm-cells = <2>;
+	status = "okay";
+};
+
+&dcic1 {
+	dcic_id = <0>;
+	dcic_mux = "dcic-hdmi";
+	status = "okay";
+};
+
+&dcic2 {
+	dcic_id = <1>;
+	dcic_mux = "dcic-lvds1";
+	status = "okay";
+};
+
+&snvs_poweroff {
+	status = "okay";
+};
+
+&ssi1 {
+	fsl,mode = "i2s-slave";
+	status = "okay";
+};
+
+&uart1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart1>;
+	status = "okay";
+};
+
+&uart2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart2>;
+	status = "okay";
+	rs485-rts-active-high;
+	rs485-rx-during-tx;
+	uart-has-rtscts;
+	rts-gpios = <&gpio3 29 GPIO_ACTIVE_HIGH>;
+	linux,rs485-enabled-at-boot-time;
+};
+
+&usbh1 {
+	vbus-supply = <&reg_usb_h1_vbus>;
+	status = "okay";
+};
+
+&usbotg {
+	vbus-supply = <&reg_usb_otg_vbus>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usbotg>;
+	disable-over-current;
+	status = "okay";
+};
+
+&usdhc1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usdhc1>;
+	/* cd-gpios = <&gpio7 9 GPIO_ACTIVE_LOW>; */
+	no-1-8-v;
+	keep-power-in-suspend;
+	enable-sdio-wakeup;
+	vmmc-supply = <&reg_3p3v>;
+	status = "okay";
+};
+
+&usdhc3 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usdhc3>;
+	non-removable;
+	bus-width = <8>;
+	no-1-8-v;
+	keep-power-in-suspend;
+	enable-sdio-wakeup;
+	vmmc-supply = <&reg_3p3v>;
+	status = "okay";
+};
+
+&bitbang_mdio0 {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&gpio_bitbang_mdio_pins>;
+	pinctrl-1 = <&gpio_bitbang_mdio_sleep_pins>;
+	gpios = <&gpio1 31 0	/* 0: mdc  */
+	&gpio1 22 0>;			/* 1: mdio */
+	status = "okay";
+};
+
+&weim {
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_weim>;
+	#address-cells = <2>;
+	#size-cells = <1>;
+	ranges = <
+		0 0 0x08000000 0x04000000
+		1 0 0x0C000000 0x04000000 >;
+	fsl,weim-cs-gpr = <&gpr>;
+
+	UIO_NVRAM@1,0 {
+		compatible = "uio_pdrv_genirq";
+		reg = <1 0x0 0x20000>;
+		fsl,weim-cs-timing = <
+			0x007184B1 0x00001010
+			0x0F780000 0x00000008
+			0x04F00040 0x00000000 >;
+	};
+};
+
+&reg_arm {
+	vin-supply = <&sw1a_reg>;
+	regulator-allow-bypass;
+	regulator-min-microvolt = <1225000>;
+};
+
+&reg_soc {
+	vin-supply = <&sw1c_reg>;
+	regulator-allow-bypass;
+	regulator-min-microvolt = <1225000>;
+};
+
+&reg_pu {
+	regulator-allow-bypass;
+	regulator-min-microvolt = <1225000>;
+};
+
+&cpu0 {
+	operating-points = <
+		/* kHz  uV */
+		1200000 1400000
+		996000  1400000
+		852000  1400000
+		792000  1400000
+		396000  1400000
+	>;
+	fsl,soc-operating-points = <
+		/* ARM kHz SOC-PU uV */
+		1200000 1400000
+		996000  1400000
+		852000  1400000
+		792000  1400000
+		396000  1400000
+	>;
+};
+
+&ecspi4 {
+	di0_spi: dio_spi@1 {
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_dio_spi>;
+		compatible = "dio_spi";
+		reg = <1>;
+		spi-cpol;
+		spi-max-frequency = <1000000>;
+		gpio-load = <&gpio3 19 GPIO_ACTIVE_HIGH>;
+		gpio-reset = <&gpio2 0 GPIO_ACTIVE_HIGH>;
+	};
+};
+
+&cpu0 {
+	arm-supply = <&sw1a_reg>;
+	soc-supply = <&sw1c_reg>;
+};
+
+&swcfg_ksz8863 {
+	status = "okay";
+};
+
+&bitbang_mdio0 {
+	status = "okay";
+};
+
+&ksz8863_switch {
+	status = "okay";
+};
+
+/delete-node/ &ipu1_di0_hdmi;
+/delete-node/ &hdmi_mux_0;
+/delete-node/ &ipu1_di1_hdmi;
+/delete-node/ &hdmi_mux_1;
+
+/delete-node/ &ipu2_di0_hdmi;
+/delete-node/ &hdmi_mux_2;
+/delete-node/ &ipu2_di1_hdmi;
+/delete-node/ &hdmi_mux_3;
diff --git a/arch/arm/boot/dts/pxc-nandparts.dtsi b/arch/arm/boot/dts/pxc-nandparts.dtsi
new file mode 100644
index 000000000000..034a880424f8
--- /dev/null
+++ b/arch/arm/boot/dts/pxc-nandparts.dtsi
@@ -0,0 +1,60 @@
+/*
+ * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+&nand {
+		/* 4 x 128k MLOs */
+		partition@0 {
+			label = "mlo0";
+			reg = <0x0 0x20000>;
+		};
+
+		partition@1 {
+			label = "mlo1";
+			reg = <0x20000 0x20000>;
+		};
+
+		partition@2 {
+			label = "mlo2";
+			reg = <0x40000 0x20000>;
+		};
+
+		partition@3 {
+			label = "mlo3";
+			reg = <0x60000 0x20000>;
+		};
+
+		/* 16 x 128k: 4 x stage2 (4x128k) */
+		partition@4 {
+			label = "boot0";
+			reg = <0x80000 0x80000>;
+		};
+
+		partition@5 {
+			label = "boot1";
+			reg = <0x100000 0x80000>;
+		};
+
+		partition@6 {
+			label = "boot2";
+			reg = <0x180000 0x80000>;
+		};
+
+		partition@7 {
+			label = "boot3";
+			reg = <0x200000 0x80000>;
+		};
+
+		partition@8 {
+			label = "ubidata";
+			/*
+			 * Size 0x0 extends partition to
+			 * end of nand flash.
+			 */
+			reg = <0x280000 0x0>;
+		};
+};
diff --git a/arch/arm/boot/dts/stm32mp151-cc100-pinctrl.dtsi b/arch/arm/boot/dts/stm32mp151-cc100-pinctrl.dtsi
new file mode 100644
index 000000000000..83b48dc74211
--- /dev/null
+++ b/arch/arm/boot/dts/stm32mp151-cc100-pinctrl.dtsi
@@ -0,0 +1,490 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)
+/*
+ * Copyright (C) STMicroelectronics 2017 - All Rights Reserved
+ * Author: Ludovic Barre <ludovic.barre@st.com> for STMicroelectronics.
+ */
+#include <dt-bindings/pinctrl/stm32-pinfunc.h>
+
+&pinctrl {
+	adc12_ain_pins_a: adc12-ain-0 {
+		pins {
+			pinmux = <STM32_PINMUX('C', 3, ANALOG)>, /* ADC1_INP13 -> ADC1-IN1 */
+					 <STM32_PINMUX('B', 1, ANALOG)>, /* ADC1_INP5  -> ADC1-RE1 */
+					 <STM32_PINMUX('A', 3, ANALOG)>, /* ADC1_INP15 -> ADC1-RE2 */
+					 <STM32_PINMUX('A', 6, ANALOG)>; /* ADC2_INP3  -> ADC2-IN1 */
+		};
+	};
+
+	dac_ch1_pins_a: dac-ch1-0 {
+		pins {
+			pinmux = <STM32_PINMUX('A', 4, ANALOG)>;
+		};
+	};
+
+	dac_ch2_pins_a: dac-ch2-0 {
+		pins {
+			pinmux = <STM32_PINMUX('A', 5, ANALOG)>;
+		};
+	};
+
+	eth1_pins_a: eth1_a-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('A', 1, AF11)>, /* ETH1_REF_CLK */
+					 <STM32_PINMUX('B', 13, AF11)>, /* ETH1_TXD1 */
+					 <STM32_PINMUX('G', 13, AF11)>; /* ETH1_TXD0 */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <1>;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('A', 7, AF11)>, /* ETH1_CRS_DV */
+					 <STM32_PINMUX('C', 4, AF11)>, /* ETH1_RXD0 */
+					 <STM32_PINMUX('C', 5, AF11)>; /* ETH1_RXD1 */
+			bias-disable;
+		};
+		pins3 {
+			pinmux = <STM32_PINMUX('B', 11, AF11)>; /* ETH1_TX_EN */
+		};
+	};
+
+	eth1_sleep_pins_a: eth1_sleep_a-0 {
+		pins {
+			pinmux = <STM32_PINMUX('A', 1, ANALOG)>, /* ETH1_REF_CLK */
+					 <STM32_PINMUX('A', 7, ANALOG)>, /* ETH1_CRS_DV */
+					 <STM32_PINMUX('B', 11, ANALOG)>, /* ETH1_TX_EN */
+					 <STM32_PINMUX('B', 13, ANALOG)>, /* ETH1_TXD1 */
+					 <STM32_PINMUX('C', 4, ANALOG)>, /* ETH1_RXD0 */
+					 <STM32_PINMUX('C', 5, ANALOG)>, /* ETH1_RXD1 */
+					 <STM32_PINMUX('G', 13, ANALOG)>; /* ETH1_TXD0 */
+		};
+	};
+
+	i2c2_pins_a: i2c2-0 {
+		pins {
+			pinmux = <STM32_PINMUX('H', 4, AF4)>, /* I2C2_SCL */
+				 <STM32_PINMUX('G', 15, AF4)>; /* I2C2_SDA */
+			bias-disable;
+			drive-open-drain;
+			slew-rate = <0>;
+		};
+	};
+
+	i2c2_sleep_pins_a: i2c2-sleep-0 {
+		pins {
+			pinmux = <STM32_PINMUX('H', 4, ANALOG)>, /* I2C2_SCL */
+				 <STM32_PINMUX('G', 15, ANALOG)>; /* I2C2_SDA */
+		};
+	};
+
+	sdmmc1_b4_pins_a: sdmmc1-b4-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
+				 <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
+				 <STM32_PINMUX('E', 6, AF8)>, /* SDMMC1_D2 */
+				 <STM32_PINMUX('C', 11, AF12)>, /* SDMMC1_D3 */
+				 <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
+			slew-rate = <1>;
+			drive-push-pull;
+			bias-disable;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
+			slew-rate = <2>;
+			drive-push-pull;
+			bias-disable;
+		};
+	};
+
+	sdmmc1_b4_od_pins_a: sdmmc1-b4-od-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
+				 <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
+				 <STM32_PINMUX('E', 6, AF8)>, /* SDMMC1_D2 */
+				 <STM32_PINMUX('C', 11, AF12)>; /* SDMMC1_D3 */
+			slew-rate = <1>;
+			drive-push-pull;
+			bias-disable;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
+			slew-rate = <2>;
+			drive-push-pull;
+			bias-disable;
+		};
+		pins3 {
+			pinmux = <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
+			slew-rate = <1>;
+			drive-open-drain;
+			bias-disable;
+		};
+	};
+
+	sdmmc1_b4_sleep_pins_a: sdmmc1-b4-sleep-0 {
+		pins {
+			pinmux = <STM32_PINMUX('C', 8, ANALOG)>, /* SDMMC1_D0 */
+				 <STM32_PINMUX('C', 9, ANALOG)>, /* SDMMC1_D1 */
+				 <STM32_PINMUX('E', 6, ANALOG)>, /* SDMMC1_D2 */
+				 <STM32_PINMUX('C', 11, ANALOG)>, /* SDMMC1_D3 */
+				 <STM32_PINMUX('C', 12, ANALOG)>, /* SDMMC1_CK */
+				 <STM32_PINMUX('D', 2, ANALOG)>; /* SDMMC1_CMD */
+		};
+	};
+
+	sdmmc1_dir_pins_a: sdmmc1-dir-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('F', 2, AF11)>, /* SDMMC1_D0DIR */
+				 <STM32_PINMUX('C', 7, AF8)>, /* SDMMC1_D123DIR */
+				 <STM32_PINMUX('B', 9, AF11)>; /* SDMMC1_CDIR */
+			slew-rate = <1>;
+			drive-push-pull;
+			bias-pull-up;
+		};
+		pins2{
+			pinmux = <STM32_PINMUX('E', 4, AF8)>; /* SDMMC1_CKIN */
+			bias-pull-up;
+		};
+	};
+
+	sdmmc1_dir_sleep_pins_a: sdmmc1-dir-sleep-0 {
+		pins {
+			pinmux = <STM32_PINMUX('F', 2, ANALOG)>, /* SDMMC1_D0DIR */
+				 <STM32_PINMUX('C', 7, ANALOG)>, /* SDMMC1_D123DIR */
+				 <STM32_PINMUX('B', 9, ANALOG)>, /* SDMMC1_CDIR */
+				 <STM32_PINMUX('E', 4, ANALOG)>; /* SDMMC1_CKIN */
+		};
+	};
+
+	sdmmc2_b4_pins_a: sdmmc2-b4-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
+				 <STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
+				 <STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
+				 <STM32_PINMUX('B', 4, AF9)>, /* SDMMC2_D3 */
+				 <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
+			slew-rate = <1>;
+			drive-push-pull;
+			bias-pull-up;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
+			slew-rate = <2>;
+			drive-push-pull;
+			bias-pull-up;
+		};
+	};
+
+	sdmmc2_b4_od_pins_a: sdmmc2-b4-od-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
+				 <STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
+				 <STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
+				 <STM32_PINMUX('B', 4, AF9)>; /* SDMMC2_D3 */
+			slew-rate = <1>;
+			drive-push-pull;
+			bias-pull-up;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
+			slew-rate = <2>;
+			drive-push-pull;
+			bias-pull-up;
+		};
+		pins3 {
+			pinmux = <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
+			slew-rate = <1>;
+			drive-open-drain;
+			bias-pull-up;
+		};
+	};
+
+	sdmmc2_b4_sleep_pins_a: sdmmc2-b4-sleep-0 {
+		pins {
+			pinmux = <STM32_PINMUX('B', 14, ANALOG)>, /* SDMMC2_D0 */
+				 <STM32_PINMUX('B', 15, ANALOG)>, /* SDMMC2_D1 */
+				 <STM32_PINMUX('B', 3, ANALOG)>, /* SDMMC2_D2 */
+				 <STM32_PINMUX('B', 4, ANALOG)>, /* SDMMC2_D3 */
+				 <STM32_PINMUX('E', 3, ANALOG)>, /* SDMMC2_CK */
+				 <STM32_PINMUX('G', 6, ANALOG)>; /* SDMMC2_CMD */
+		};
+	};
+
+	sdmmc2_b4_pins_b: sdmmc2-b4-1 {
+		pins1 {
+			pinmux = <STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
+				 <STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
+				 <STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
+				 <STM32_PINMUX('B', 4, AF9)>, /* SDMMC2_D3 */
+				 <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
+			slew-rate = <1>;
+			drive-push-pull;
+			bias-disable;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
+			slew-rate = <2>;
+			drive-push-pull;
+			bias-disable;
+		};
+	};
+
+	sdmmc2_b4_od_pins_b: sdmmc2-b4-od-1 {
+		pins1 {
+			pinmux = <STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
+				 <STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
+				 <STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
+				 <STM32_PINMUX('B', 4, AF9)>; /* SDMMC2_D3 */
+			slew-rate = <1>;
+			drive-push-pull;
+			bias-disable;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
+			slew-rate = <2>;
+			drive-push-pull;
+			bias-disable;
+		};
+		pins3 {
+			pinmux = <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
+			slew-rate = <1>;
+			drive-open-drain;
+			bias-disable;
+		};
+	};
+
+	sdmmc2_d47_pins_a: sdmmc2-d47-0 {
+		pins {
+			pinmux = <STM32_PINMUX('E', 4, AF9)>, /* SDMMC2_D4 */
+				 <STM32_PINMUX('B', 9, AF10)>, /* SDMMC2_D5 */
+				 <STM32_PINMUX('E', 5, AF9)>, /* SDMMC2_D6 */
+				 <STM32_PINMUX('D', 3, AF9)>; /* SDMMC2_D7 */
+			slew-rate = <1>;
+			drive-push-pull;
+			bias-pull-up;
+		};
+	};
+
+	sdmmc2_d47_sleep_pins_a: sdmmc2-d47-sleep-0 {
+		pins {
+			pinmux = <STM32_PINMUX('E', 4, ANALOG)>, /* SDMMC2_D4 */
+				 <STM32_PINMUX('B', 9, ANALOG)>, /* SDMMC2_D5 */
+				 <STM32_PINMUX('E', 5, ANALOG)>, /* SDMMC2_D6 */
+				 <STM32_PINMUX('D', 3, ANALOG)>; /* SDMMC2_D7 */
+		};
+	};
+
+	spi5_pins_a: spi5-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('F', 7, AF5)>, /* SPI5_SCK */
+				 <STM32_PINMUX('J', 10, AF5)>; /* SPI5_MOSI */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <0>;
+		};
+
+		pins2 {
+			pinmux = <STM32_PINMUX('H', 7, AF5)>; /* SPI5_MISO */
+			bias-disable;
+		};
+	};
+
+	uart4_pins_a: uart4_a-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('G', 11, AF6)>; /* UART4_TX */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <0>;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('B', 2, AF8)>; /* UART4_RX */
+			bias-disable;
+		};
+	};
+
+	uart4_idle_pins_a: uart4_idle_pins_a {
+		pins1 {
+			pinmux = <STM32_PINMUX('G', 11, AF6)>; /* UART4_TX */
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('B', 2, AF8)>; /* UART4_RX */
+			bias-disable;
+		};
+	};
+
+	uart4_sleep_pins_a: uart4_sleep_a-0 {
+		pins {
+			pinmux = <STM32_PINMUX('G', 11, ANALOG)>, /* UART4_TX */
+					 <STM32_PINMUX('B', 2, ANALOG)>; /* UART4_RX */
+		};
+	};
+
+	usbotg_hs_pins_a: usbotg-hs-0 {
+		pins {
+			pinmux = <STM32_PINMUX('A', 10, ANALOG)>; /* OTG_ID */
+		};
+	};
+
+	i2c4_pins_a: i2c4-0 {
+		pins {
+			pinmux = <STM32_PINMUX('H', 11, AF4)>, /* I2C4_SCL */
+					 <STM32_PINMUX('H', 12, AF4)>; /* I2C4_SDA */
+			bias-disable;
+			drive-open-drain;
+			slew-rate = <0>;
+		};
+	};
+
+	i2c4_pins_a_sleep: i2c4-1 {
+		pins {
+			pinmux = <STM32_PINMUX('H', 11, AF4)>, /* I2C4_SCL */
+					 <STM32_PINMUX('H', 12, AF4)>; /* I2C4_SDA */
+		};
+	};
+
+	/* FMC pin configuration inspired by arch/arm/boot/dts/stm32mp15-pinctrl.dtsi */
+	fmc_pins_a: fmc-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('D', 7, AF12)>, /* FMC.NCS */
+				<STM32_PINMUX('D', 4, AF12)>, /* FMC.NOE */
+				<STM32_PINMUX('D', 5, AF12)>, /* FMC.NRW */
+				<STM32_PINMUX('E', 0, AF12)>, /* FMC.NEB0 */
+				<STM32_PINMUX('E', 1, AF12)>, /* FMC.NEB1 */
+				<STM32_PINMUX('F', 0, AF12)>, /* FMC.A0 */
+				<STM32_PINMUX('F', 1, AF12)>, /* FMC.A1 */
+				<STM32_PINMUX('F', 2, AF12)>, /* FMC.A2 */
+				<STM32_PINMUX('F', 3, AF12)>, /* FMC.A3 */
+				<STM32_PINMUX('F', 4, AF12)>, /* FMC.A4 */
+				<STM32_PINMUX('F', 5, AF12)>, /* FMC.A5 */
+				<STM32_PINMUX('F', 12, AF12)>, /* FMC.A6 */
+				<STM32_PINMUX('F', 13, AF12)>, /* FMC.A7 */
+				<STM32_PINMUX('F', 14, AF12)>, /* FMC.A8 */
+				<STM32_PINMUX('F', 15, AF12)>, /* FMC.A9 */
+				<STM32_PINMUX('G', 0, AF12)>, /* FMC.A10 */
+				<STM32_PINMUX('G', 1, AF12)>, /* FMC.A11 */
+				<STM32_PINMUX('G', 2, AF12)>, /* FMC.A12 */
+				<STM32_PINMUX('G', 3, AF12)>, /* FMC.A13 */
+				<STM32_PINMUX('G', 4, AF12)>, /* FMC.A14 */
+				<STM32_PINMUX('G', 5, AF12)>, /* FMC.A15 */
+				<STM32_PINMUX('D', 11, AF12)>, /* FMC.A16 */
+				<STM32_PINMUX('D', 12, AF12)>, /* FMC.A17 */
+				<STM32_PINMUX('D', 13, AF12)>, /* FMC.A18 */
+				<STM32_PINMUX('D', 14, AF12)>, /* FMC.D0 */
+				<STM32_PINMUX('D', 15, AF12)>, /* FMC.D1 */
+				<STM32_PINMUX('D', 0, AF12)>, /* FMC.D2 */
+				<STM32_PINMUX('D', 1, AF12)>, /* FMC.D3 */
+				<STM32_PINMUX('E', 7, AF12)>, /* FMC.D4 */
+				<STM32_PINMUX('E', 8, AF12)>, /* FMC.D5 */
+				<STM32_PINMUX('E', 9, AF12)>, /* FMC.D6 */
+				<STM32_PINMUX('E', 10, AF12)>, /* FMC.D7 */
+				<STM32_PINMUX('E', 11, AF12)>, /* FMC.D8 */
+				<STM32_PINMUX('E', 12, AF12)>, /* FMC.D9 */
+				<STM32_PINMUX('E', 13, AF12)>, /* FMC.D10 */
+				<STM32_PINMUX('E', 14, AF12)>, /* FMC.D11 */
+				<STM32_PINMUX('E', 15, AF12)>, /* FMC.D12 */
+				<STM32_PINMUX('D', 8, AF12)>, /* FMC.D13 */
+				<STM32_PINMUX('D', 9, AF12)>, /* FMC.D14 */
+				<STM32_PINMUX('D', 10, AF12)>; /* FMC.D15 */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <1>;
+		};
+		pins2 {
+                        pinmux = <STM32_PINMUX('D', 6, AF12)>; /* FMC_NWAIT */
+                        bias-pull-up;
+                };
+	};
+
+	fmc_sleep_pins_a: fmc-sleep-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('D', 7, ANALOG)>, /* FMC.NCS */
+				<STM32_PINMUX('D', 4, ANALOG)>, /* FMC.NOE */
+				<STM32_PINMUX('D', 5, ANALOG)>, /* FMC.NRW */
+				<STM32_PINMUX('E', 0, ANALOG)>, /* FMC.NEB0 */
+				<STM32_PINMUX('E', 1, ANALOG)>, /* FMC.NEB1 */
+				<STM32_PINMUX('F', 0, ANALOG)>, /* FMC.A0 */
+				<STM32_PINMUX('F', 1, ANALOG)>, /* FMC.A1 */
+				<STM32_PINMUX('F', 2, ANALOG)>, /* FMC.A2 */
+				<STM32_PINMUX('F', 3, ANALOG)>, /* FMC.A3 */
+				<STM32_PINMUX('F', 4, ANALOG)>, /* FMC.A4 */
+				<STM32_PINMUX('F', 5, ANALOG)>, /* FMC.A5 */
+				<STM32_PINMUX('F', 12, ANALOG)>, /* FMC.A6 */
+				<STM32_PINMUX('F', 13, ANALOG)>, /* FMC.A7 */
+				<STM32_PINMUX('F', 14, ANALOG)>, /* FMC.A8 */
+				<STM32_PINMUX('F', 15, ANALOG)>, /* FMC.A9 */
+				<STM32_PINMUX('G', 0, ANALOG)>, /* FMC.A10 */
+				<STM32_PINMUX('G', 1, ANALOG)>, /* FMC.A11 */
+				<STM32_PINMUX('G', 2, ANALOG)>, /* FMC.A12 */
+				<STM32_PINMUX('G', 3, ANALOG)>, /* FMC.A13 */
+				<STM32_PINMUX('G', 4, ANALOG)>, /* FMC.A14 */
+				<STM32_PINMUX('G', 5, ANALOG)>, /* FMC.A15 */
+				<STM32_PINMUX('D', 11, ANALOG)>, /* FMC.A16 */
+				<STM32_PINMUX('D', 12, ANALOG)>, /* FMC.A17 */
+				<STM32_PINMUX('D', 13, ANALOG)>, /* FMC.A18 */
+				<STM32_PINMUX('D', 14, ANALOG)>, /* FMC.D0 */
+				<STM32_PINMUX('D', 15, ANALOG)>, /* FMC.D1 */
+				<STM32_PINMUX('D', 0, ANALOG)>, /* FMC.D2 */
+				<STM32_PINMUX('D', 1, ANALOG)>, /* FMC.D3 */
+				<STM32_PINMUX('E', 7, ANALOG)>, /* FMC.D4 */
+				<STM32_PINMUX('E', 8, ANALOG)>, /* FMC.D5 */
+				<STM32_PINMUX('E', 9, ANALOG)>, /* FMC.D6 */
+				<STM32_PINMUX('E', 10, ANALOG)>, /* FMC.D7 */
+				<STM32_PINMUX('E', 11, ANALOG)>, /* FMC.D8 */
+				<STM32_PINMUX('E', 12, ANALOG)>, /* FMC.D9 */
+				<STM32_PINMUX('E', 13, ANALOG)>, /* FMC.D10 */
+				<STM32_PINMUX('E', 14, ANALOG)>, /* FMC.D11 */
+				<STM32_PINMUX('E', 15, ANALOG)>, /* FMC.D12 */
+				<STM32_PINMUX('D', 8, ANALOG)>, /* FMC.D13 */
+				<STM32_PINMUX('D', 9, ANALOG)>, /* FMC.D14 */
+				<STM32_PINMUX('D', 10, ANALOG)>, /* FMC.D15 */
+				<STM32_PINMUX('D', 6, ANALOG)>; /* FMC_NWAIT */
+		};
+	};
+};
+
+&pinctrl_z {
+	usart1_pins_a: usart1-0 {
+		pins1 {
+			pinmux = <STM32_PINMUX('Z', 7, AF7)>; /* USART1_TX */
+			bias-disable;
+			drive-push-pull;
+			slew-rate = <0>;
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('Z', 6, AF7)>,  /* USART1_RX  */
+					 <STM32_PINMUX('Z', 5, AF7)>;  /* USART1_RTS DIR */
+			bias-disable;
+		};
+		/* The UART CTS (PZ3) is connected to RS485-NRE. The linux
+		 * drivers does not support RS485-NRE, only driver enable
+		 * (RS485-DIR) is used. The RS485-DIR is connected to both DE
+		 * and nRE -> therefore, the CTS (RS485-NRE) is forced to 0.
+		 */
+		pins3 {
+			pinmux = <STM32_PINMUX('Z', 3, GPIO)>;  /* USART1_CTS NRE */
+			output-low;
+		};
+	};
+
+	usart1_idle_pins_a: usart1_idle_pins_a {
+		pins1 {
+			pinmux = <STM32_PINMUX('Z', 7, AF7)>; /* USART1_TX */
+		};
+		pins2 {
+			pinmux = <STM32_PINMUX('Z', 6, AF7)>,  /* USART1_RX  */
+					 <STM32_PINMUX('Z', 5, AF7)>;  /* USART1_RTS DIR */
+		};
+		/* see usart1_pins_a */
+		pins3 {
+			pinmux = <STM32_PINMUX('Z', 3, GPIO)>;  /* USART1_CTS NRE */
+			output-low;
+		};
+	};
+
+	usart1_sleep_pins_a: usart1_sleep_a-0 {
+		pins {
+			pinmux = <STM32_PINMUX('Z', 7, ANALOG)>, /* USART1_TX */
+					 <STM32_PINMUX('Z', 6, ANALOG)>, /* USART1_RX */
+					 <STM32_PINMUX('Z', 3, ANALOG)>, /* USART1_CTS NRE */
+					 <STM32_PINMUX('Z', 5, ANALOG)>; /* USART1_RTS DIR */
+		};
+	};
+};
diff --git a/arch/arm/boot/dts/stm32mp151-cc100.dts b/arch/arm/boot/dts/stm32mp151-cc100.dts
new file mode 100644
index 000000000000..21516714e757
--- /dev/null
+++ b/arch/arm/boot/dts/stm32mp151-cc100.dts
@@ -0,0 +1,107 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)
+/*
+ * Copyright (C) STMicroelectronics 2017 - All Rights Reserved
+ * Author: Ludovic Barre <ludovic.barre@st.com> for STMicroelectronics.
+ */
+/dts-v1/;
+
+#include "stm32mp151.dtsi"
+#include "stm32mp151-cc100.dtsi"
+#include "wago-devconf.dtsi"
+
+/ {
+	model = "CC100-751-9301";
+	compatible = "wago,stm32mp151-cc100-751_9301-1011", "wago,stm32mp151-cc100", "st,stm32mp151";
+
+	memory@c0000000 {
+		reg = <0xC0000000 0x20000000>; /* 512MB RAM */
+	};
+
+	chosen {
+		stdout-path = " serial0:115200n8";
+	};
+
+	usb_phy_tuning: usb-phy-tuning {
+		st,hs-dc-level = <2>;
+		st,fs-rftime-tuning;
+		st,hs-rftime-reduction;
+		st,hs-current-trim = <15>;
+		st,hs-impedance-trim = <1>;
+		st,squelch-level = <3>;
+		st,hs-rx-offset = <2>;
+		st,no-lsfs-sc;
+	};
+
+};
+
+&wsysinit {
+	board,variant = "CC100";
+	status = "okay";
+};
+
+&spi5 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&spi5_pins_a>;
+	cs-gpios = <&gpioh 5 0>;
+	status = "okay";
+	/delete-property/dmas;
+	/delete-property/dma-names;
+
+	din0_spi: din_spi@0 {
+		compatible = "din_spi";
+		reg = <0>;
+		spi-cpol;
+		spi-max-frequency = <1000000>;
+		gpio-load = <&gpioz 1 GPIO_ACTIVE_LOW>;
+		gpio-tok = <&gpioz 0 GPIO_ACTIVE_LOW>;
+		leds-gpios = <&gpioj 13 GPIO_ACTIVE_HIGH>,
+			<&gpioj 14 GPIO_ACTIVE_HIGH>,
+			<&gpiok 3 GPIO_ACTIVE_HIGH>,
+			<&gpiok 7 GPIO_ACTIVE_HIGH>,
+			<&gpiok 6 GPIO_ACTIVE_HIGH>,
+			<&gpioi 14 GPIO_ACTIVE_HIGH>,
+			<&gpioi 12 GPIO_ACTIVE_HIGH>,
+			<&gpioi 13 GPIO_ACTIVE_HIGH>;
+	};
+};
+
+&usbotg_hs {
+        compatible = "st,stm32mp15-hsotg", "snps,dwc2";
+        pinctrl-names = "default";
+        pinctrl-0 = <&usbotg_hs_pins_a>;   /* configure OTG_ID pin */
+        phys = <&usbphyc_port1 0>;         /* 0: UTMI switch selects the OTG controller */
+        phy-names = "usb2-phy";
+        vbus-supply = <&vbus_otg>;
+        dr_mode = "peripheral";
+        status = "okay";
+};
+
+&usbphyc {
+	status = "okay";
+};
+
+&usbphyc_port0 {
+	st,phy-tuning = <&usb_phy_tuning>;
+	phy-supply = <&vdd_usb>;
+	vdda1v1-supply = <&reg11>;
+	vdda1v8-supply = <&reg18>;
+};
+
+&usbphyc_port1 {
+	st,phy-tuning = <&usb_phy_tuning>;
+	phy-supply = <&vdd_usb>;
+	vdda1v1-supply = <&reg11>;
+	vdda1v8-supply = <&reg18>;
+};
+
+&bitbang_mdio0 {
+	status = "okay";
+};
+
+&ksz8863_switch {
+	status = "okay";
+};
+
+&swcfg_ksz8863 {
+	status = "okay";
+};
diff --git a/arch/arm/boot/dts/stm32mp151-cc100.dtsi b/arch/arm/boot/dts/stm32mp151-cc100.dtsi
new file mode 100644
index 000000000000..a7308ea7df0e
--- /dev/null
+++ b/arch/arm/boot/dts/stm32mp151-cc100.dtsi
@@ -0,0 +1,660 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
+/*
+ * Copyright (C) 2020 elrest GmbH
+ */
+
+#include "stm32mp151.dtsi"
+#include "stm32mp151-cc100-pinctrl.dtsi"
+#include "stm32mp15xxaa-pinctrl.dtsi"
+#include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/mfd/st,stpmic1.h>
+#include <dt-bindings/input/gpio-keys.h>
+#include <dt-bindings/input/input.h>
+
+/ {
+	aliases {
+		serial0 = &uart4;
+		serial1 = &usart1;
+		ethernet0 = &ethernet0;
+		mdio-gpio0 = &bitbang_mdio0;
+		i2c0 = &i2c4;
+		i2c1 = &i2c2;
+	};
+
+	reserved-memory {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		ranges;
+
+		retram: retram@0x38000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x38000000 0x10000>;
+			no-map;
+		};
+
+		mcuram: mcuram@0x30000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x30000000 0x40000>;
+			no-map;
+		};
+
+		mcuram2: mcuram2@0x10000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10000000 0x40000>;
+			no-map;
+		};
+
+		vdev0vring0: vdev0vring0@10040000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10040000 0x2000>;
+			no-map;
+		};
+
+		vdev0vring1: vdev0vring1@10042000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10042000 0x2000>;
+			no-map;
+		};
+
+		vdev0buffer: vdev0buffer@10044000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10044000 0x4000>;
+			no-map;
+		};
+
+	};
+
+	sram: sram@10050000 {
+		compatible = "mmio-sram";
+		reg = <0x10050000 0x10000>;
+		#address-cells = <1>;
+		#size-cells = <1>;
+		ranges = <0 0x10050000 0x10000>;
+
+		dma_pool: dma_pool@0 {
+			reg = <0x0 0x10000>;
+			pool;
+		};
+	};
+
+	led {
+		compatible = "gpio-leds";
+		u1-red {
+			label = "u1-red";
+			gpios = <&gpioi 10 GPIO_ACTIVE_HIGH>;
+			default-state = "off";
+		};
+		u1-green {
+			label = "u1-green";
+			gpios = <&gpioj 1 GPIO_ACTIVE_HIGH>;
+			default-state = "off";
+		};
+		sys-red {
+			label = "sys-red";
+			gpios = <&gpioa 13 GPIO_ACTIVE_LOW>;
+			linux,default-trigger = "timer";
+		};
+		sys-green {
+			label = "sys-green";
+			gpios = <&gpioa 14 GPIO_ACTIVE_LOW>;
+			linux,default-trigger = "timer";
+		};
+		run-red {
+			label = "run-red";
+			gpios = <&gpiob 12 GPIO_ACTIVE_HIGH>;
+			default-state = "off";
+		};
+		run-green {
+			label = "run-green";
+			gpios = <&gpiob 0 GPIO_ACTIVE_HIGH>;
+			default-state = "off";
+		};
+		led-mmc {
+			label = "led-mmc";
+			gpios = <&gpiog 10 GPIO_ACTIVE_HIGH>;
+			linux,default-trigger = "mmc0";
+		};
+	};
+
+	PAC-Operating-Mode-Switch {
+		compatible = "gpio-keys";
+		status = "okay";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		autorepeat;
+
+		run {
+			label = "RUN";
+			gpios = <&gpioj 6 GPIO_ACTIVE_LOW>; /* GPIO J 6 */
+			linux,code = <1>;
+			linux,input-type = <EV_SW>;
+			debounce-interval = <1>; /* debounce in msecs */
+		};
+
+		stop {
+			label = "STOP";
+			gpios = <&gpioa 8 GPIO_ACTIVE_LOW>; /* GPIO A 8 */
+			linux,code = <2>;
+			linux,input-type = <EV_SW>;
+			debounce-interval = <1>; /* debounce in msecs */
+		};
+
+		reset {
+			label = "RESET";
+			gpios = <&gpioi 11 GPIO_ACTIVE_LOW>; /* GPIO I 11 */
+			linux,code = <3>;
+			linux,input-type = <1>;
+			debounce-interval = <1>; /* debounce in msecs */
+		};
+
+		reset_all {
+			label = "RESET_ALL";
+			gpios = <&gpioz 4 GPIO_ACTIVE_LOW>; /* GPIO Z 4 */
+			linux,code = <4>;
+			linux,input-type = <1>;
+			debounce-interval = <1>; /* debounce in msecs */
+		};
+	};
+
+	sd_switch: regulator-sd_switch {
+		compatible = "regulator-fixed";
+		regulator-name = "sd_switch";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		regulator-type = "voltage";
+		regulator-always-on;
+		enable-active-high;
+
+		gpio = <&gpioi 4 GPIO_ACTIVE_HIGH>;
+	};
+
+	vrs5v: regulator-rs485-5v {
+		compatible = "regulator-fixed";
+		regulator-name = "rs485-5v";
+		regulator-min-microvolt = <5000000>;
+		regulator-max-microvolt = <5000000>;
+		regulator-type = "voltage";
+		regulator-always-on;
+		enable-active-high;
+
+		gpio = <&gpioh 14 GPIO_ACTIVE_HIGH>;
+	};
+
+	vref: regulator-vref {
+		compatible = "regulator-fixed";
+		regulator-name = "vref";
+		regulator-min-microvolt = <2500000>;
+		regulator-max-microvolt = <2500000>;
+		regulator-type = "voltage";
+		regulator-always-on;
+		vin-supply = <&vdda>;
+	};
+
+	wsysinit: wsysinit_init {
+		compatible = "wago,sysinit";
+		add-sysfs-entries;
+
+		tty,service   = "ttySTM0";
+		tty,rs232-485 = "ttySTM1";
+
+		/* sysclock adjustments, empirical values */
+		adjtimex,tick = <10000>;
+		adjtimex,frequency = <200000>;
+	};
+
+	dout_drv {
+		compatible = "elrest,dout_drv";
+		douts-gpios = <&gpioh 10 GPIO_ACTIVE_HIGH>,     /* bit 0 */
+			<&gpioi 8  GPIO_ACTIVE_HIGH>,
+			<&gpioi 2  GPIO_ACTIVE_HIGH>,
+			<&gpioi 6  GPIO_ACTIVE_HIGH>;
+		leds-gpios = <&gpioj 15 GPIO_ACTIVE_HIGH>,      /* bit 0 LED */
+			<&gpioj 12 GPIO_ACTIVE_HIGH>,
+			<&gpiok 5 GPIO_ACTIVE_HIGH>,
+			<&gpiok 4 GPIO_ACTIVE_HIGH>;
+		status = "okay";
+	};
+
+	bitbang_mdio0: gpio_mdio {
+		compatible = "virtual,mdio-gpio";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		gpios = <
+			&gpioc 1 0	/* 0: mdc  */
+			&gpioa 2 0	/* 1: mdio */
+		>;
+		status = "disabled";
+	};
+
+	swcfg_ksz8863: swcfg_ksz8863 {
+		compatible = "swcfg,ksz8863";
+		status = "disabled";
+
+		swcfg,mii-bus = <&bitbang_mdio0>;
+		swcfg,alias = "ksz8863";
+		swcfg,cpu_port = <2>;
+		swcfg,ports = <3>;
+		swcfg,vlans = <16>;
+		swcfg,switch = <&ksz8863_switch>;
+	};
+
+};
+
+&bitbang_mdio0 {
+	ksz8863_switch: switch@0 {
+		compatible = "micrel,ksz8863";
+		//micrel,rmii-reference-clock-select-25mhz;
+
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		ksz,reset-gpio =  <&gpiog 7 GPIO_ACTIVE_LOW>;
+
+		reg = <0>;
+		dsa,member = <0 0>;
+		dsa,enable-on-boot;
+
+		ksz,reset-switch;
+		//ksz,disable-internal-ldo;
+
+		phy-mode = "rmii";
+
+		interrupt-parent = <&gpiog>;
+		interrupts = <12 IRQ_TYPE_LEVEL_LOW>;
+
+		status = "okay";
+
+		ports {
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			port@0 {
+				reg = <1>;
+				label = "ethX1";
+				phy-mode = "rmii";
+				phy-pwrdown;
+			};
+
+			port@1 {
+				reg = <2>;
+				label = "ethX2";
+				phy-mode = "rmii";
+				phy-pwrdown;
+			};
+
+			port@2 {
+				reg = <3>;
+				label = "cpu";
+				phy-mode = "rmii";
+				ethernet = <&ethernet0>;
+				fixed-link {
+					speed = <100>;
+					full-duplex;
+				};
+			};
+		};
+	};
+
+};
+
+&ethernet0 {
+	status = "okay";
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&eth1_pins_a>;
+	pinctrl-1 = <&eth1_sleep_pins_a>;
+	phy-mode = "rmii";
+	max-speed = <100>;
+
+	fixed-link {
+		speed = <100>;
+		full-duplex;
+	};
+};
+
+&adc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&adc12_ain_pins_a>;
+	vdd-supply = <&vdd>;
+	vdda-supply = <&vdda>;
+	vref-supply = <&vref>;
+	status = "okay";
+
+	adc1: adc@0 {
+		st,adc-channels = <1 5 13 15>;
+		st,min-sample-time-nsecs = <10000>;
+		assigned-resolution-bits = <16>;
+		status = "okay";
+	};
+
+	adc2: adc@100 {
+		st,adc-channels = <0 3>;
+		st,min-sample-time-nsecs = <10000>;
+		assigned-resolution-bits = <16>;
+		status = "okay";
+	};
+};
+
+&dac {
+	pinctrl-names = "default";
+	pinctrl-0 = <&dac_ch1_pins_a &dac_ch2_pins_a>;
+	vref-supply = <&vref>;
+	status = "okay";
+	dac1: dac@1 {
+		status = "okay";
+	};
+	dac2: dac@2 {
+		status = "okay";
+	};
+};
+
+&cpu0{
+	cpu-supply = <&vddcore>;
+};
+
+&dma1 {
+	sram = <&dma_pool>;
+};
+
+&dma2 {
+	sram = <&dma_pool>;
+};
+
+&dts {
+	status = "okay";
+};
+
+&i2c2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c2_pins_a>;
+	i2c-scl-rising-time-ns = <185>;
+	i2c-scl-falling-time-ns = <20>;
+	status = "okay";
+	/delete-property/dmas;
+	/delete-property/dma-names;
+
+	rtc_r2221t@32 {
+		compatible = "ricoh,r2221tl";
+		reg = <0x32>;
+	};
+};
+
+&i2c4 {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&i2c4_pins_a>;
+	pinctrl-1 = <&i2c4_pins_a_sleep>;
+	i2c-scl-rising-time-ns = <185>;
+	i2c-scl-falling-time-ns = <20>;
+	clock-frequency = <400000>;
+	status = "okay";
+	/* spare dmas for other usage */
+	/delete-property/dmas;
+	/delete-property/dma-names;
+
+	eeprom: m24c512@54 {
+		compatible = "st,24c512", "at24";
+		reg = <0x54>;
+	};
+
+	pmic: stpmic@33 {
+		compatible = "st,stpmic1";
+		reg = <0x33>;
+		interrupts-extended = <&gpioa 0 IRQ_TYPE_EDGE_FALLING>;
+		interrupt-controller;
+		#interrupt-cells = <2>;
+
+		regulators {
+			compatible = "st,stpmic1-regulators";
+
+			ldo1-supply = <&v3v3>;
+			ldo2-supply = <&v3v3>;
+			ldo3-supply = <&vdd_ddr>;
+			ldo5-supply = <&v3v3>;
+			ldo6-supply = <&v3v3>;
+			pwr_sw1-supply = <&bst_out>;
+			pwr_sw2-supply = <&bst_out>;
+
+			vddcore: buck1 {
+				regulator-name = "vddcore";
+				regulator-min-microvolt = <1200000>;
+				regulator-max-microvolt = <1350000>;
+				regulator-always-on;
+				regulator-initial-mode = <0>;
+				regulator-over-current-protection;
+			};
+
+			vdd_ddr: buck2 {
+				regulator-name = "vdd_ddr";
+				regulator-min-microvolt = <1350000>;
+				regulator-max-microvolt = <1350000>;
+				regulator-always-on;
+				regulator-initial-mode = <0>;
+				regulator-over-current-protection;
+			};
+
+			vdd: buck3 {
+				regulator-name = "vdd";
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-always-on;
+				st,mask-reset;
+				regulator-initial-mode = <0>;
+				regulator-over-current-protection;
+			};
+
+			v3v3: buck4 {
+				regulator-name = "v3v3";
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-always-on;
+				regulator-over-current-protection;
+				regulator-initial-mode = <0>;
+			};
+
+			vtt_ddr: ldo3 {
+				regulator-name = "vtt_ddr";
+				regulator-min-microvolt = <500000>;
+				regulator-max-microvolt = <750000>;
+				regulator-always-on;
+				regulator-over-current-protection;
+			};
+
+			vdd_usb: ldo4 {
+				regulator-name = "vdd_usb";
+				regulator-min-microvolt = <3300000>;
+				regulator-max-microvolt = <3300000>;
+				interrupts = <IT_CURLIM_LDO4 0>;
+				regulator-boot-on;
+			};
+
+			vdd_sd: ldo5 {
+				regulator-name = "vdd_sd";
+				regulator-min-microvolt = <2900000>;
+				regulator-max-microvolt = <2900000>;
+				interrupts = <IT_CURLIM_LDO5 0>;
+				regulator-boot-on;
+			};
+
+			vdda: ldo6 {
+				regulator-name = "vdda";
+				regulator-min-microvolt = <2900000>;
+				regulator-max-microvolt = <2900000>;
+				regulator-always-on;
+				interrupts = <IT_CURLIM_LDO6 0>;
+			};
+
+			vref_ddr: vref_ddr {
+				regulator-name = "vref_ddr";
+				regulator-always-on;
+				regulator-over-current-protection;
+			};
+
+			bst_out: boost {
+				regulator-name = "bst_out";
+				interrupts = <IT_OCP_BOOST 0>;
+			};
+
+			vbus_otg: pwr_sw1 {
+				regulator-name = "vbus_otg";
+				interrupts = <IT_OCP_OTG 0>;
+				regulator-active-discharge;
+			};
+
+			vbus_sw: pwr_sw2 {
+				regulator-name = "vbus_sw";
+				interrupts = <IT_OCP_SWOUT 0>;
+				regulator-active-discharge;
+			};
+		};
+
+		pmic_watchdog: watchdog {
+			compatible = "st,stpmic1-wdt";
+			status = "okay";
+		};
+	};
+
+	lm75: lm75@49 {
+		compatible = "national,lm75";
+		reg = <0x49>;
+	};
+};
+
+
+&ipcc {
+	status = "okay";
+};
+
+&iwdg2 {
+	timeout-sec = <32>;
+	status = "okay";
+};
+
+&m4_rproc {
+	memory-region = <&retram>, <&mcuram>, <&mcuram2>, <&vdev0vring0>,
+			<&vdev0vring1>, <&vdev0buffer>;
+	mboxes = <&ipcc 0>, <&ipcc 1>, <&ipcc 2>;
+	mbox-names = "vq0", "vq1", "shutdown";
+	interrupt-parent = <&exti>;
+	interrupts = <68 1>;
+	interrupt-names = "wdg";
+	wakeup-source;
+	recovery;
+	status = "okay";
+};
+
+&pwr_regulators {
+	vdd-supply = <&vdd>;
+	vdd_3v3_usbfs-supply = <&vdd_usb>;
+};
+
+&rng1 {
+	status = "okay";
+};
+
+&rtc {
+	status = "disabled";
+};
+
+&sdmmc1 {
+	arm,primecell-periphid = <0x00253180>;
+	pinctrl-names = "default", "opendrain", "sleep";
+	pinctrl-0 = <&sdmmc1_b4_pins_a>;
+	pinctrl-1 = <&sdmmc1_b4_od_pins_a>;
+	pinctrl-2 = <&sdmmc1_b4_sleep_pins_a>;
+	broken-cd;
+	disable-wp;
+	st,neg-edge;
+	bus-width = <4>;
+	vmmc-supply = <&v3v3>;
+	status = "okay";
+};
+
+&sdmmc2 {
+	pinctrl-names = "default", "opendrain", "sleep";
+	pinctrl-0 = <&sdmmc2_b4_pins_a &sdmmc2_d47_pins_a>;
+	pinctrl-1 = <&sdmmc2_b4_od_pins_a &sdmmc2_d47_pins_a>;
+	pinctrl-2 = <&sdmmc2_b4_sleep_pins_a &sdmmc2_d47_sleep_pins_a>;
+	non-removable;
+	no-sd;
+	no-sdio;
+	st,neg-edge;
+	bus-width = <8>;
+	vmmc-supply = <&v3v3>;
+	vqmmc-supply = <&v3v3>;
+	mmc-ddr-3_3v;
+	status = "okay";
+};
+
+&uart4 {
+	pinctrl-names = "default", "sleep", "idle";
+	pinctrl-0 = <&uart4_pins_a>;
+	pinctrl-1 = <&uart4_sleep_pins_a>;
+	pinctrl-2 = <&uart4_idle_pins_a>;
+	/delete-property/dmas;
+	/delete-property/dma-names;
+	//uart-has-rtscts;
+	//cts-gpios = <&gpioa 15 GPIO_ACTIVE_LOW>;
+	//rts-gpios = <&gpioa 15 GPIO_ACTIVE_LOW>;
+	status = "okay";
+};
+
+&usart1 {
+	pinctrl-names = "default", "sleep", "idle";
+	pinctrl-0 = <&usart1_pins_a>;
+	pinctrl-1 = <&usart1_idle_pins_a>;
+	pinctrl-2 = <&usart1_sleep_pins_a>;
+	/delete-property/dmas;
+	/delete-property/dma-names;
+	/* Disable uart HW control - the HW control control use CTS as input,
+	 * but the CC-100 use CTS as output RS485 NRE signal -> the HW control
+	 * and uart-has-rtscts are disabled.
+	 */
+	//uart-has-rtscts;
+	/delete-property/st,hw-flow-ctrl;
+
+        rs485-rts-active-high;
+	rs485-rts-delay = <1 1>;    /* tPZH, tPZL = 100ns */
+	/* The Wago patch sync-with-topic-rg-next-vtpctp-5.10-9b893ae5a174.patch
+	 * removes the TIOCGRS485 and TIOCSRS485 and the RS485 cannot be
+	 * therefore control by ioctls -> it is enabled by default here.
+	 */
+	linux,rs485-enabled-at-boot-time;
+
+	status = "okay";
+};
+
+&fmc {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&fmc_pins_a>;
+	pinctrl-1 = <&fmc_sleep_pins_a>;
+	status = "okay";
+
+	/* nvSRAM connected to the FMC (use UIO driver as in TP600) */
+	nvsram@0,0 {
+		compatible = "uio_pdrv_genirq";
+		/* 128kB nvSRAM -> the beginning of the first subbunks of bank 1 */
+		reg = <0 0x0 0x20000>;
+		linux,uio-name = "UIO_NVRAM";
+
+		/* assynchronous SRAM mode */
+		st,fmc2-ebi-cs-transaction-type = <0>;
+
+		st,fmc2-ebi-cs-buswidth = <16>;
+
+		/* The BWTR registers are not used in assynchronous SRAM mode
+		 * (EXTMOD = 0). The timing settings are shared for read and
+		 * write. The write specific settings can be omitted (this
+		 * applies to all ebi-cs-write DTS properties).
+		 *
+		 * The address and data hold time are set to minimal value
+		 * to ensure the address/data are not released before the
+		 * read/write enable at the nvSRAM interface (due to potential
+		 * difference of signal delays between processor and nvSRAM).
+		 */
+		st,fmc2-ebi-cs-byte-lane-setup-ns = <0>;
+		st,fmc2-ebi-cs-address-setup-ns = <5>;
+		st,fmc2-ebi-cs-address-hold-ns = <1>;
+		st,fmc2-ebi-cs-data-setup-ns = <20>;
+		st,fmc2-ebi-cs-data-hold-ns = <1>;
+		st,fmc2-ebi-cs-bus-turnaround-ns = <0>;
+	};
+};
diff --git a/arch/arm/boot/dts/wago-devconf.dtsi b/arch/arm/boot/dts/wago-devconf.dtsi
new file mode 100644
index 000000000000..7966c2315582
--- /dev/null
+++ b/arch/arm/boot/dts/wago-devconf.dtsi
@@ -0,0 +1,117 @@
+/*
+ * Copyright (C) 2019 WAGO Kontakttechnik GmbH & Co. KG
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/*
+ * The DEVCONF field is used by the bootloader to identify, verify and choose
+ * the right boot configuration for the device. See bootchoser and BLSPEC
+ * documentation in barebox for more information.
+ *
+ * The DEVCONF field is a 16-bit value stored in the EEPROM of each device as a
+ * 16-bit value.
+ *
+ * 0x1fe |---------------------------------------|
+ *       |          DEVCONF Byte 0 (Low Byte)    |
+ *       | ------------------------------------- |
+ *       |          DEVCONF Byte 1 (High Byte)   |
+ * 0x200 |---------------------------------------|
+ *
+ * NOTE:
+ * The DEVCONF field contains CONF suffix. In legacy format was this a kind of
+ * "configuration" of device. In current format it is more a device
+ * identification. The name DEVCONF of this field is not apply anymore. But we
+ * decided not to rename it, becaus this field name already established in many
+ * applications and documentations outsite of kernel.
+ *
+ * ============== CURRENT FORMAT ===============================================
+ *
+ *   15  14  13  12  11  10  9  8  7  6  5  4  3  2  1  0
+ *    |   |   |   |   |   |  |  |  |  |  |  |  |  |  |  |
+ *    y   y   y   |   z   z  z  z  z  z  z  z  z  z  z  z
+ *                |
+ *                NEW DEVCONF FORMAT (has to be set to 1)
+ *
+ *    y: hardware revision (started by 0 for each device)
+ *    z: device id (see list below)
+ *
+ * | Device ID (hex) | Device description |
+ * |-----------------|--------------------|
+ * |            1000 |   VTP  4" 762-4xxx |
+ * |            1001 |   VTP  5" 762-4xxx |
+ * |            1002 |   VTP  7" 762-4xxx |
+ * |            1003 |   VTP 10" 762-4xxx |
+ * |            1004 |       PFC 750-8211 |
+ * |            1006 |       PFC 750-8217 |
+ * |            1007 |       PFC 750-8210 |
+ * |            3005 |       PFC 763-3301 |
+ * |            1008 |   VTP 15" 762-4xxx |
+ * |            1009 |   VTP 21" 762-4xxx |
+ * |            1010 |        EC 752-8303 |
+ * |            1011 |     CC100 751-9301 |
+ * |-----------------|--------------------|
+ *
+ * ============== LEGACY FORMAT ================================================
+ *
+ * This format is deprecated and should not be used for new devices.
+ *
+ *   15  14  13  12  11  10  9  8  7  6  5  4  3  2  1  0
+ *    |   |   |   |   |   |  |  |  |  |  |  |  |  |  |  |
+ *    |   x   x   |   x   x  |  |  |  |  |  |  |  |  PROFIBUS_SL
+ *    |           |          |  |  |  |  |  |  |  |  CAN
+ *    |           |          |  |  |  |  |  |  |  RS232_485
+ *    |           |          |  |  |  |  |  |  ETHERNET_IP
+ *    |           |          |  |  |  |  |  3G_MODEM
+ *    |           |          |  |  |  |  DIP_SWITCH
+ *    |           |          |  |  |  PROFIBUS_DPM
+ *    |           |          |  |   USB
+ *    |           |          |  MARVELL_SWITCH
+ *    |           |          LWL
+ *    |           NEW DEVCONF FORMAT (for legacy format have to be set to 0)
+ *    DISPLAY (AM35XX based displays)
+ *
+ *   x: reserved for future use (has to be set to 0)
+ *
+ * Following devices are using the deprecated DEVCONF format:
+ *
+ * PFC 200 V1 (AM3505)
+ *
+ * | Device ID (hex) | Device description |
+ * |-----------------|--------------------|
+ * |            000c |           750-8202 |
+ * |            000a |           750-8203 |
+ * |            000e |           750-8204 |
+ * |            000f |           750-8206 |
+ * |            001c |           750-8207 |
+ * |-----------------|--------------------|
+ *
+ * PFC 100 (AM335X)
+ *
+ * | Device ID (hex) | Device description |
+ * |-----------------|--------------------|
+ * |            0028 |      750-8100/8101 |
+ * |            000c |           750-8102 |
+ * |-----------------|--------------------|
+ *
+ * PFC 200 v2 (AM335X)
+ *
+ * | Device ID (hex) | Device description |
+ * |-----------------|--------------------|
+ * |            004e |           750-8208 |
+ * |-----------------|--------------------|
+ *
+ * PFC 200 v3 (AM335X)
+ *
+ * | Device ID (hex) | Device description |
+ * |-----------------|--------------------|
+ * |            000c |           750-8212 |
+ * |            000a |           750-8213 |
+ * |            000e |           750-8214 |
+ * |            0182 |           750-8215 |
+ * |            000f |           750-8216 |
+ * |-----------------|--------------------|
+ *
+ */
diff --git a/arch/arm/configs/am3xxx_pfc_generic_defconfig b/arch/arm/configs/am3xxx_pfc_generic_defconfig
new file mode 100644
index 000000000000..a7d337af03f9
--- /dev/null
+++ b/arch/arm/configs/am3xxx_pfc_generic_defconfig
@@ -0,0 +1,394 @@
+CONFIG_KERNEL_LZO=y
+# CONFIG_SWAP is not set
+CONFIG_SYSVIPC=y
+CONFIG_POSIX_MQUEUE=y
+CONFIG_HIGH_RES_TIMERS=y
+CONFIG_BPF_SYSCALL=y
+CONFIG_BPF_JIT=y
+CONFIG_PREEMPT_RT=y
+CONFIG_IKCONFIG=y
+CONFIG_IKCONFIG_PROC=y
+CONFIG_CGROUPS=y
+CONFIG_MEMCG=y
+CONFIG_BLK_CGROUP=y
+CONFIG_CGROUP_SCHED=y
+CONFIG_CFS_BANDWIDTH=y
+CONFIG_CGROUP_PIDS=y
+CONFIG_CGROUP_FREEZER=y
+CONFIG_CGROUP_DEVICE=y
+CONFIG_CGROUP_CPUACCT=y
+CONFIG_CGROUP_PERF=y
+CONFIG_CGROUP_BPF=y
+CONFIG_NAMESPACES=y
+CONFIG_USER_NS=y
+CONFIG_EXPERT=y
+CONFIG_PERF_EVENTS=y
+# CONFIG_COMPAT_BRK is not set
+CONFIG_OMAP_RESET_CLOCKS=y
+CONFIG_ARCH_OMAP3=y
+CONFIG_ARCH_OMAP4=y
+CONFIG_SOC_AM33XX=y
+CONFIG_WAGO_SYSTEM_BASED_STARTUP=y
+CONFIG_IRQ_PRIORITY_TABLE=y
+# CONFIG_SOC_OMAP3430 is not set
+# CONFIG_SOC_TI81XX is not set
+CONFIG_ARM_THUMBEE=y
+CONFIG_SWP_EMULATE=y
+CONFIG_UACCESS_WITH_MEMCPY=y
+# CONFIG_ATAGS is not set
+CONFIG_KEXEC=y
+CONFIG_CPU_FREQ=y
+CONFIG_CPUFREQ_DT=y
+# CONFIG_SUSPEND is not set
+CONFIG_MODULES=y
+CONFIG_MODULE_FORCE_LOAD=y
+CONFIG_MODULE_UNLOAD=y
+CONFIG_MODULE_FORCE_UNLOAD=y
+CONFIG_MODVERSIONS=y
+CONFIG_MODULE_SRCVERSION_ALL=y
+CONFIG_BLK_DEV_BSGLIB=y
+CONFIG_BLK_DEV_INTEGRITY=y
+CONFIG_BLK_DEV_THROTTLING=y
+CONFIG_PARTITION_ADVANCED=y
+CONFIG_MAC_PARTITION=y
+# CONFIG_MQ_IOSCHED_KYBER is not set
+CONFIG_BINFMT_MISC=y
+# CONFIG_COMPACTION is not set
+CONFIG_NET=y
+CONFIG_PACKET=y
+CONFIG_UNIX=y
+CONFIG_XFRM_USER=y
+CONFIG_NET_KEY=y
+CONFIG_NET_KEY_MIGRATE=y
+CONFIG_XDP_SOCKETS=y
+CONFIG_INET=y
+CONFIG_IP_MULTICAST=y
+CONFIG_IP_ADVANCED_ROUTER=y
+CONFIG_IP_MULTIPLE_TABLES=y
+CONFIG_IP_PNP=y
+CONFIG_IP_PNP_DHCP=y
+CONFIG_IP_PNP_BOOTP=y
+CONFIG_IP_PNP_RARP=y
+CONFIG_IP_MROUTE=y
+CONFIG_IP_MROUTE_MULTIPLE_TABLES=y
+CONFIG_IP_PIMSM_V1=y
+CONFIG_IP_PIMSM_V2=y
+CONFIG_SYN_COOKIES=y
+CONFIG_INET_AH=y
+CONFIG_INET_ESP=y
+CONFIG_INET_IPCOMP=y
+CONFIG_TCP_CONG_ADVANCED=y
+# CONFIG_TCP_CONG_BIC is not set
+# CONFIG_TCP_CONG_WESTWOOD is not set
+# CONFIG_TCP_CONG_HTCP is not set
+# CONFIG_IPV6 is not set
+CONFIG_NETFILTER=y
+CONFIG_NF_CONNTRACK=y
+CONFIG_NF_CONNTRACK_MARK=y
+CONFIG_NF_CONNTRACK_FTP=y
+CONFIG_NF_CONNTRACK_SNMP=y
+CONFIG_NF_CONNTRACK_TFTP=y
+CONFIG_NF_CT_NETLINK=y
+CONFIG_NETFILTER_XT_TARGET_HL=m
+CONFIG_NETFILTER_XT_TARGET_TCPMSS=y
+CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y
+CONFIG_NETFILTER_XT_MATCH_CONNLIMIT=y
+CONFIG_NETFILTER_XT_MATCH_CONNTRACK=y
+CONFIG_NETFILTER_XT_MATCH_ESP=y
+CONFIG_NETFILTER_XT_MATCH_IPRANGE=y
+CONFIG_NETFILTER_XT_MATCH_IPVS=m
+CONFIG_NETFILTER_XT_MATCH_LIMIT=y
+CONFIG_NETFILTER_XT_MATCH_MAC=y
+CONFIG_NETFILTER_XT_MATCH_MARK=y
+CONFIG_NETFILTER_XT_MATCH_POLICY=y
+CONFIG_IP_VS=m
+CONFIG_IP_VS_PROTO_TCP=y
+CONFIG_IP_VS_PROTO_UDP=y
+CONFIG_IP_VS_RR=m
+CONFIG_IP_VS_WRR=m
+CONFIG_IP_VS_NFCT=y
+CONFIG_IP_NF_IPTABLES=y
+CONFIG_IP_NF_MATCH_AH=y
+CONFIG_IP_NF_FILTER=y
+CONFIG_IP_NF_TARGET_REJECT=y
+CONFIG_IP_NF_NAT=y
+CONFIG_IP_NF_TARGET_MASQUERADE=y
+CONFIG_IP_NF_TARGET_REDIRECT=y
+CONFIG_IP_NF_MANGLE=y
+CONFIG_IP_NF_RAW=y
+CONFIG_BRIDGE_NF_EBTABLES=y
+CONFIG_BRIDGE_EBT_BROUTE=y
+CONFIG_BRIDGE_EBT_T_FILTER=y
+CONFIG_BRIDGE_EBT_T_NAT=y
+CONFIG_BRIDGE_EBT_IP=y
+CONFIG_BRIDGE_EBT_LIMIT=y
+CONFIG_BRIDGE_EBT_LOG=y
+CONFIG_BRIDGE=y
+CONFIG_BRIDGE_VLAN_FILTERING=y
+CONFIG_NET_DSA=y
+CONFIG_VLAN_8021Q=m
+CONFIG_VLAN_8021Q_GVRP=y
+CONFIG_NET_SCHED=y
+CONFIG_NET_SCH_HTB=y
+CONFIG_NET_SCH_HFSC=y
+CONFIG_NET_SCH_PRIO=y
+CONFIG_NET_SCH_TBF=y
+CONFIG_NET_SCH_CODEL=y
+CONFIG_NET_SCH_FQ_CODEL=y
+CONFIG_NET_CLS_BASIC=y
+CONFIG_NET_CLS_TCINDEX=y
+CONFIG_NET_CLS_ROUTE4=y
+CONFIG_NET_CLS_FW=y
+CONFIG_NET_CLS_U32=y
+CONFIG_CLS_U32_PERF=y
+CONFIG_CLS_U32_MARK=y
+CONFIG_NET_CLS_RSVP=y
+CONFIG_NET_CLS_FLOW=y
+CONFIG_NET_CLS_CGROUP=m
+CONFIG_NET_EMATCH=y
+CONFIG_NET_EMATCH_CMP=y
+CONFIG_NET_EMATCH_NBYTE=y
+CONFIG_NET_EMATCH_U32=y
+CONFIG_NET_EMATCH_META=y
+CONFIG_NET_EMATCH_TEXT=y
+CONFIG_NET_CLS_ACT=y
+CONFIG_NET_ACT_POLICE=y
+CONFIG_NET_ACT_GACT=y
+CONFIG_GACT_PROB=y
+CONFIG_NET_ACT_MIRRED=y
+CONFIG_NET_ACT_IPT=y
+CONFIG_NET_ACT_NAT=y
+CONFIG_NET_ACT_PEDIT=y
+CONFIG_NET_ACT_SKBEDIT=y
+CONFIG_NET_ACT_CSUM=y
+CONFIG_NETLINK_DIAG=y
+CONFIG_CGROUP_NET_PRIO=y
+CONFIG_CAN=y
+# CONFIG_CAN_GW is not set
+CONFIG_CAN_VCAN=y
+CONFIG_CAN_TI_HECC=y
+CONFIG_CAN_C_CAN=y
+CONFIG_CAN_C_CAN_PLATFORM=y
+CONFIG_AF_RXRPC=y
+# CONFIG_WIRELESS is not set
+CONFIG_DEVTMPFS=y
+CONFIG_DEVTMPFS_MOUNT=y
+CONFIG_OMAP_OCP2SCP=y
+CONFIG_CONNECTOR=y
+CONFIG_MTD=y
+CONFIG_MTD_CMDLINE_PARTS=y
+CONFIG_MTD_BLOCK=y
+CONFIG_MTD_CFI=y
+CONFIG_MTD_CFI_INTELEXT=y
+CONFIG_MTD_RAW_NAND=y
+CONFIG_MTD_NAND_OMAP2=y
+CONFIG_MTD_NAND_OMAP_BCH=y
+CONFIG_MTD_NAND_PLATFORM=y
+CONFIG_MTD_NAND_ECC_SW_BCH=y
+CONFIG_MTD_UBI=y
+CONFIG_MTD_UBI_FASTMAP=y
+CONFIG_BLK_DEV_LOOP=y
+CONFIG_TI_SN74LV165A=y
+CONFIG_EEPROM_AT24=y
+CONFIG_SCSI=y
+# CONFIG_SCSI_PROC_FS is not set
+CONFIG_BLK_DEV_SD=y
+CONFIG_SCSI_SCAN_ASYNC=y
+# CONFIG_SCSI_LOWLEVEL is not set
+CONFIG_NETDEVICES=y
+CONFIG_DUMMY=m
+CONFIG_MACVLAN=m
+CONFIG_IPVLAN=m
+CONFIG_VXLAN=m
+CONFIG_TUN=y
+CONFIG_VETH=m
+CONFIG_NET_DSA_KSZ8863=y
+CONFIG_NET_DSA_MV88E6XXX=y
+# CONFIG_NET_VENDOR_BROADCOM is not set
+# CONFIG_NET_VENDOR_CIRRUS is not set
+# CONFIG_NET_VENDOR_FARADAY is not set
+# CONFIG_NET_VENDOR_INTEL is not set
+# CONFIG_NET_VENDOR_MARVELL is not set
+# CONFIG_NET_VENDOR_MICROCHIP is not set
+# CONFIG_NET_VENDOR_NATSEMI is not set
+# CONFIG_NET_VENDOR_SEEQ is not set
+# CONFIG_NET_VENDOR_SMSC is not set
+# CONFIG_NET_VENDOR_STMICRO is not set
+CONFIG_TI_DAVINCI_EMAC=y
+CONFIG_TI_CPSW=y
+CONFIG_TI_CPSW_SWITCHDEV=y
+CONFIG_TI_CPTS=y
+# CONFIG_NET_VENDOR_WIZNET is not set
+CONFIG_SWCONFIG=y
+CONFIG_INTEL_XWAY_PHY=y
+CONFIG_MARVELL_PHY=y
+CONFIG_MICREL_PHY=y
+CONFIG_SWCFG_KSZ8863=y
+CONFIG_SWCFG_MV88E6321=y
+CONFIG_MDIO_BITBANG=y
+CONFIG_MDIO_GPIO=y
+CONFIG_PPP=y
+CONFIG_PPP_DEFLATE=y
+CONFIG_PPP_FILTER=y
+CONFIG_PPP_MPPE=y
+CONFIG_PPP_MULTILINK=y
+CONFIG_PPP_ASYNC=y
+CONFIG_PPP_SYNC_TTY=y
+CONFIG_USB_USBNET=y
+# CONFIG_USB_NET_AX8817X is not set
+# CONFIG_USB_NET_AX88179_178A is not set
+# CONFIG_USB_NET_CDCETHER is not set
+# CONFIG_USB_NET_CDC_NCM is not set
+# CONFIG_USB_NET_NET1080 is not set
+# CONFIG_USB_NET_CDC_SUBSET is not set
+# CONFIG_USB_NET_ZAURUS is not set
+CONFIG_USB_NET_QMI_WWAN=y
+# CONFIG_WLAN is not set
+CONFIG_INPUT_EVDEV=y
+# CONFIG_KEYBOARD_ATKBD is not set
+CONFIG_KEYBOARD_GPIO=y
+# CONFIG_INPUT_MOUSE is not set
+# CONFIG_SERIO is not set
+# CONFIG_LEGACY_PTYS is not set
+CONFIG_SERIAL_OMAP=y
+CONFIG_SERIAL_OMAP_RTU=y
+CONFIG_SERIAL_OMAP_CONSOLE=y
+CONFIG_HW_RANDOM=y
+# CONFIG_I2C_COMPAT is not set
+CONFIG_I2C_CHARDEV=y
+CONFIG_I2C_MUX=y
+CONFIG_I2C_MUX_PCA9541=y
+CONFIG_I2C_MUX_PCA954x=y
+CONFIG_SPI=y
+CONFIG_SPI_OMAP24XX=y
+CONFIG_SPI_KBUS=y
+CONFIG_SPI_SPIDEV=y
+CONFIG_PINCTRL_SINGLE=y
+CONFIG_GPIO_SYSFS=y
+CONFIG_GPIO_PCA953X=y
+CONFIG_GPIO_PCA953X_IRQ=y
+CONFIG_GPIO_PCF857X=y
+CONFIG_GPIO_TWL4030=y
+# CONFIG_HWMON is not set
+CONFIG_WATCHDOG=y
+CONFIG_GPIO_WATCHDOG=y
+CONFIG_OMAP_WATCHDOG=y
+CONFIG_MFD_TI_AM335X_TSCADC=y
+CONFIG_MFD_TPS65218=y
+CONFIG_MFD_TPS65910=y
+CONFIG_REGULATOR_PBIAS=y
+CONFIG_REGULATOR_TPS65218=y
+CONFIG_REGULATOR_TPS65910=y
+# CONFIG_HID_GENERIC is not set
+# CONFIG_USB_HID is not set
+CONFIG_USB=y
+CONFIG_USB_ANNOUNCE_NEW_DEVICES=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_EHCI_ROOT_HUB_TT=y
+CONFIG_USB_OHCI_HCD=y
+CONFIG_USB_STORAGE=y
+CONFIG_USB_UAS=y
+CONFIG_USB_MUSB_HDRC=y
+CONFIG_USB_MUSB_HOST=y
+CONFIG_USB_MUSB_OMAP2PLUS=y
+CONFIG_USB_MUSB_AM35X=y
+CONFIG_USB_MUSB_DSPS=y
+CONFIG_USB_INVENTRA_DMA=y
+CONFIG_USB_TI_CPPI41_DMA=y
+CONFIG_USB_SERIAL=y
+CONFIG_USB_SERIAL_QUALCOMM=y
+CONFIG_USB_SERIAL_OPTION=y
+CONFIG_NOP_USB_XCEIV=y
+CONFIG_AM335X_PHY_USB=y
+CONFIG_USB_ULPI=y
+CONFIG_USB_GADGET=y
+CONFIG_MMC=y
+CONFIG_MMC_SDHCI=y
+CONFIG_MMC_SDHCI_PLTFM=y
+CONFIG_MMC_OMAP_HS=y
+CONFIG_MMC_SDHCI_OMAP=y
+CONFIG_NEW_LEDS=y
+CONFIG_LEDS_CLASS=y
+CONFIG_LEDS_GPIO=y
+CONFIG_LEDS_PCA955X=y
+CONFIG_LEDS_TRIGGERS=y
+CONFIG_LEDS_TRIGGER_TIMER=y
+CONFIG_LEDS_TRIGGER_ONESHOT=y
+CONFIG_LEDS_TRIGGER_HEARTBEAT=y
+CONFIG_LEDS_TRIGGER_GPIO=y
+CONFIG_LEDS_TRIGGER_DEFAULT_ON=y
+CONFIG_LEDS_TRIGGER_TRANSIENT=y
+CONFIG_RTC_CLASS=y
+CONFIG_RTC_DRV_RS5C372=y
+CONFIG_RTC_DRV_ISL1208=y
+CONFIG_DMADEVICES=y
+CONFIG_ASYNC_TX_DMA=y
+CONFIG_UIO=y
+CONFIG_UIO_PDRV_GENIRQ=y
+# CONFIG_VIRTIO_MENU is not set
+# CONFIG_VHOST_MENU is not set
+# CONFIG_IOMMU_SUPPORT is not set
+CONFIG_PWM=y
+CONFIG_PWM_TIECAP=y
+CONFIG_PWM_TIEHRPWM=y
+CONFIG_OMAP_USB2=y
+CONFIG_EXT4_FS=y
+CONFIG_EXT4_FS_POSIX_ACL=y
+CONFIG_EXT4_FS_SECURITY=y
+CONFIG_FANOTIFY=y
+CONFIG_FUSE_FS=y
+CONFIG_CUSE=m
+CONFIG_OVERLAY_FS=y
+CONFIG_MSDOS_FS=y
+CONFIG_VFAT_FS=y
+CONFIG_NTFS_FS=y
+CONFIG_NTFS_RW=y
+CONFIG_TMPFS=y
+CONFIG_TMPFS_POSIX_ACL=y
+CONFIG_CONFIGFS_FS=y
+CONFIG_UBIFS_FS=y
+CONFIG_UBIFS_FS_ADVANCED_COMPR=y
+# CONFIG_UBIFS_FS_ZLIB is not set
+# CONFIG_UBIFS_FS_ZSTD is not set
+# CONFIG_UBIFS_FS_XATTR is not set
+CONFIG_SQUASHFS=y
+CONFIG_NFS_FS=y
+CONFIG_NFS_V3_ACL=y
+CONFIG_NFS_V4=y
+CONFIG_ROOT_NFS=y
+CONFIG_NLS_CODEPAGE_437=y
+CONFIG_NLS_ISO8859_1=y
+CONFIG_NLS_UTF8=y
+CONFIG_CRYPTO_USER=y
+CONFIG_CRYPTO_CCM=y
+CONFIG_CRYPTO_XCBC=y
+CONFIG_CRYPTO_XXHASH=y
+CONFIG_CRYPTO_BLAKE2B=y
+CONFIG_CRYPTO_MICHAEL_MIC=y
+CONFIG_CRYPTO_BLOWFISH=y
+CONFIG_CRYPTO_CAMELLIA=y
+CONFIG_CRYPTO_CAST5=y
+CONFIG_CRYPTO_CAST6=y
+CONFIG_CRYPTO_SERPENT=y
+CONFIG_CRYPTO_TWOFISH=y
+CONFIG_CRYPTO_ANSI_CPRNG=y
+CONFIG_CRYPTO_USER_API_HASH=y
+CONFIG_CRYPTO_USER_API_SKCIPHER=y
+CONFIG_CRYPTO_DEV_OMAP=y
+CONFIG_CRYPTO_DEV_OMAP_SHAM=y
+CONFIG_CRYPTO_DEV_OMAP_AES=y
+CONFIG_CRYPTO_DEV_OMAP_DES=y
+CONFIG_ASYMMETRIC_KEY_TYPE=y
+CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y
+CONFIG_X509_CERTIFICATE_PARSER=y
+CONFIG_CRC_ITU_T=y
+CONFIG_CRC7=y
+CONFIG_XZ_DEC=y
+CONFIG_PRINTK_TIME=y
+CONFIG_DYNAMIC_DEBUG=y
+CONFIG_DEBUG_INFO=y
+CONFIG_MAGIC_SYSRQ=y
+CONFIG_DEBUG_FS=y
+CONFIG_FUNCTION_TRACER=y
+# CONFIG_UPROBE_EVENTS is not set
+# CONFIG_RUNTIME_TESTING_MENU is not set
diff --git a/arch/arm/configs/imx6_vtpctp_defconfig b/arch/arm/configs/imx6_vtpctp_defconfig
new file mode 100644
index 000000000000..80a212a2ac91
--- /dev/null
+++ b/arch/arm/configs/imx6_vtpctp_defconfig
@@ -0,0 +1,453 @@
+CONFIG_KERNEL_LZO=y
+# CONFIG_SWAP is not set
+CONFIG_SYSVIPC=y
+CONFIG_POSIX_MQUEUE=y
+CONFIG_HIGH_RES_TIMERS=y
+CONFIG_BPF_SYSCALL=y
+CONFIG_BPF_JIT=y
+CONFIG_PREEMPT_RT=y
+CONFIG_IKCONFIG=y
+CONFIG_IKCONFIG_PROC=y
+CONFIG_CGROUPS=y
+CONFIG_MEMCG=y
+CONFIG_BLK_CGROUP=y
+CONFIG_CGROUP_SCHED=y
+CONFIG_CFS_BANDWIDTH=y
+CONFIG_CGROUP_PIDS=y
+CONFIG_CGROUP_FREEZER=y
+CONFIG_CGROUP_DEVICE=y
+CONFIG_CGROUP_CPUACCT=y
+CONFIG_CGROUP_PERF=y
+CONFIG_CGROUP_BPF=y
+CONFIG_NAMESPACES=y
+CONFIG_USER_NS=y
+CONFIG_EXPERT=y
+# CONFIG_SLUB_DEBUG is not set
+# CONFIG_COMPAT_BRK is not set
+CONFIG_PROFILING=y
+CONFIG_ARCH_MXC=y
+CONFIG_SOC_IMX6Q=y
+CONFIG_SOC_IMX6SL=y
+CONFIG_SOC_IMX6SX=y
+CONFIG_WAGO_SYSTEM_BASED_STARTUP=y
+CONFIG_IRQ_PRIORITY_TABLE=y
+CONFIG_ARM_THUMBEE=y
+# CONFIG_ARM_ERRATA_643719 is not set
+CONFIG_SMP=y
+CONFIG_VMSPLIT_2G=y
+CONFIG_HIGHMEM=y
+# CONFIG_HIGHPTE is not set
+CONFIG_FORCE_MAX_ZONEORDER=14
+CONFIG_UACCESS_WITH_MEMCPY=y
+# CONFIG_ATAGS is not set
+CONFIG_CPU_FREQ=y
+CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE=y
+CONFIG_CPUFREQ_DT=y
+CONFIG_ARM_IMX6Q_CPUFREQ=y
+CONFIG_VFP=y
+CONFIG_NEON=y
+CONFIG_KERNEL_MODE_NEON=y
+CONFIG_KPROBES=y
+CONFIG_MODULES=y
+CONFIG_MODULE_FORCE_LOAD=y
+CONFIG_MODULE_UNLOAD=y
+CONFIG_MODULE_FORCE_UNLOAD=y
+CONFIG_MODVERSIONS=y
+CONFIG_MODULE_SRCVERSION_ALL=y
+CONFIG_BLK_DEV_BSGLIB=y
+CONFIG_BLK_DEV_INTEGRITY=y
+CONFIG_BLK_DEV_THROTTLING=y
+CONFIG_PARTITION_ADVANCED=y
+CONFIG_MAC_PARTITION=y
+CONFIG_BINFMT_MISC=y
+CONFIG_NET=y
+CONFIG_PACKET=y
+CONFIG_UNIX=y
+CONFIG_XFRM_USER=y
+CONFIG_NET_KEY=y
+CONFIG_NET_KEY_MIGRATE=y
+CONFIG_XDP_SOCKETS=y
+CONFIG_INET=y
+CONFIG_IP_MULTICAST=y
+CONFIG_IP_ADVANCED_ROUTER=y
+CONFIG_IP_MULTIPLE_TABLES=y
+CONFIG_IP_PNP=y
+CONFIG_IP_PNP_DHCP=y
+CONFIG_IP_PNP_BOOTP=y
+CONFIG_IP_PNP_RARP=y
+CONFIG_IP_MROUTE=y
+CONFIG_IP_MROUTE_MULTIPLE_TABLES=y
+CONFIG_IP_PIMSM_V1=y
+CONFIG_IP_PIMSM_V2=y
+CONFIG_SYN_COOKIES=y
+CONFIG_INET_AH=y
+CONFIG_INET_ESP=y
+CONFIG_INET_IPCOMP=y
+CONFIG_TCP_CONG_ADVANCED=y
+# CONFIG_TCP_CONG_BIC is not set
+# CONFIG_TCP_CONG_WESTWOOD is not set
+# CONFIG_TCP_CONG_HTCP is not set
+CONFIG_IPV6_ROUTER_PREF=y
+CONFIG_IPV6_ROUTE_INFO=y
+CONFIG_IPV6_OPTIMISTIC_DAD=y
+CONFIG_INET6_AH=m
+CONFIG_INET6_ESP=m
+CONFIG_INET6_IPCOMP=m
+CONFIG_IPV6_MIP6=m
+CONFIG_IPV6_SIT=m
+CONFIG_IPV6_MULTIPLE_TABLES=y
+CONFIG_IPV6_SUBTREES=y
+CONFIG_IPV6_MROUTE=y
+CONFIG_IPV6_MROUTE_MULTIPLE_TABLES=y
+CONFIG_IPV6_PIMSM_V2=y
+CONFIG_NETFILTER=y
+CONFIG_NF_CONNTRACK=y
+CONFIG_NF_CONNTRACK_MARK=y
+CONFIG_NF_CONNTRACK_FTP=y
+CONFIG_NF_CONNTRACK_SNMP=y
+CONFIG_NF_CONNTRACK_TFTP=y
+CONFIG_NF_CT_NETLINK=y
+CONFIG_NETFILTER_XT_TARGET_HL=m
+CONFIG_NETFILTER_XT_TARGET_TCPMSS=y
+CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y
+CONFIG_NETFILTER_XT_MATCH_CONNLIMIT=y
+CONFIG_NETFILTER_XT_MATCH_CONNTRACK=y
+CONFIG_NETFILTER_XT_MATCH_ESP=y
+CONFIG_NETFILTER_XT_MATCH_IPRANGE=y
+CONFIG_NETFILTER_XT_MATCH_IPVS=m
+CONFIG_NETFILTER_XT_MATCH_LIMIT=y
+CONFIG_NETFILTER_XT_MATCH_MAC=y
+CONFIG_NETFILTER_XT_MATCH_MARK=y
+CONFIG_NETFILTER_XT_MATCH_POLICY=y
+CONFIG_IP_VS=m
+CONFIG_IP_VS_PROTO_TCP=y
+CONFIG_IP_VS_PROTO_UDP=y
+CONFIG_IP_VS_RR=m
+CONFIG_IP_VS_WRR=m
+CONFIG_IP_VS_NFCT=y
+CONFIG_IP_NF_IPTABLES=y
+CONFIG_IP_NF_MATCH_AH=y
+CONFIG_IP_NF_FILTER=y
+CONFIG_IP_NF_TARGET_REJECT=y
+CONFIG_IP_NF_NAT=y
+CONFIG_IP_NF_TARGET_MASQUERADE=y
+CONFIG_IP_NF_TARGET_REDIRECT=y
+CONFIG_IP_NF_MANGLE=y
+CONFIG_IP_NF_RAW=y
+CONFIG_BRIDGE_NF_EBTABLES=y
+CONFIG_BRIDGE_EBT_BROUTE=y
+CONFIG_BRIDGE_EBT_T_FILTER=y
+CONFIG_BRIDGE_EBT_T_NAT=y
+CONFIG_BRIDGE_EBT_IP=y
+CONFIG_BRIDGE_EBT_LIMIT=y
+CONFIG_BRIDGE_EBT_LOG=y
+CONFIG_BRIDGE=y
+CONFIG_NET_DSA=y
+CONFIG_NET_SCHED=y
+CONFIG_NET_SCH_HTB=y
+CONFIG_NET_SCH_HFSC=y
+CONFIG_NET_SCH_PRIO=y
+CONFIG_NET_SCH_TBF=y
+CONFIG_NET_SCH_CODEL=y
+CONFIG_NET_SCH_FQ_CODEL=y
+CONFIG_NET_CLS_BASIC=y
+CONFIG_NET_CLS_TCINDEX=y
+CONFIG_NET_CLS_ROUTE4=y
+CONFIG_NET_CLS_FW=y
+CONFIG_NET_CLS_U32=y
+CONFIG_CLS_U32_PERF=y
+CONFIG_CLS_U32_MARK=y
+CONFIG_NET_CLS_RSVP=y
+CONFIG_NET_CLS_FLOW=y
+CONFIG_NET_CLS_CGROUP=m
+CONFIG_NET_EMATCH=y
+CONFIG_NET_EMATCH_CMP=y
+CONFIG_NET_EMATCH_NBYTE=y
+CONFIG_NET_EMATCH_U32=y
+CONFIG_NET_EMATCH_META=y
+CONFIG_NET_EMATCH_TEXT=y
+CONFIG_NET_CLS_ACT=y
+CONFIG_NET_ACT_POLICE=y
+CONFIG_NET_ACT_GACT=y
+CONFIG_GACT_PROB=y
+CONFIG_NET_ACT_MIRRED=y
+CONFIG_NET_ACT_IPT=y
+CONFIG_NET_ACT_NAT=y
+CONFIG_NET_ACT_PEDIT=y
+CONFIG_NET_ACT_SKBEDIT=y
+CONFIG_NET_ACT_CSUM=y
+CONFIG_NETLINK_DIAG=y
+CONFIG_CGROUP_NET_PRIO=y
+CONFIG_CAN=y
+CONFIG_CAN_FLEXCAN=y
+CONFIG_CAN_M_CAN=y
+# CONFIG_WIRELESS is not set
+CONFIG_DEVTMPFS=y
+CONFIG_DEVTMPFS_MOUNT=y
+# CONFIG_STANDALONE is not set
+CONFIG_IMX_WEIM=y
+CONFIG_CONNECTOR=y
+CONFIG_BLK_DEV_LOOP=y
+CONFIG_BLK_DEV_RAM=y
+CONFIG_BLK_DEV_RAM_SIZE=65536
+# CONFIG_ENCSW is not set
+CONFIG_EEPROM_AT24=y
+CONFIG_EEPROM_AT25=y
+CONFIG_SCSI=y
+# CONFIG_SCSI_PROC_FS is not set
+CONFIG_BLK_DEV_SD=y
+# CONFIG_SCSI_LOWLEVEL is not set
+CONFIG_NETDEVICES=y
+CONFIG_DUMMY=m
+CONFIG_MACVLAN=m
+CONFIG_IPVLAN=m
+CONFIG_VXLAN=m
+CONFIG_TUN=y
+CONFIG_VETH=m
+CONFIG_NET_DSA_KSZ8863=y
+# CONFIG_NET_VENDOR_AMAZON is not set
+# CONFIG_NET_VENDOR_ARC is not set
+# CONFIG_NET_VENDOR_BROADCOM is not set
+# CONFIG_NET_VENDOR_CIRRUS is not set
+# CONFIG_NET_VENDOR_EZCHIP is not set
+# CONFIG_NET_VENDOR_FARADAY is not set
+CONFIG_FSL_PQ_MDIO=y
+CONFIG_FSL_XGMAC_MDIO=y
+# CONFIG_NET_VENDOR_HISILICON is not set
+# CONFIG_NET_VENDOR_INTEL is not set
+# CONFIG_NET_VENDOR_MARVELL is not set
+# CONFIG_NET_VENDOR_MICREL is not set
+# CONFIG_NET_VENDOR_MICROCHIP is not set
+# CONFIG_NET_VENDOR_NATSEMI is not set
+# CONFIG_NET_VENDOR_NETRONOME is not set
+# CONFIG_NET_VENDOR_QUALCOMM is not set
+# CONFIG_NET_VENDOR_RENESAS is not set
+# CONFIG_NET_VENDOR_ROCKER is not set
+# CONFIG_NET_VENDOR_SAMSUNG is not set
+# CONFIG_NET_VENDOR_SEEQ is not set
+# CONFIG_NET_VENDOR_SMSC is not set
+# CONFIG_NET_VENDOR_STMICRO is not set
+# CONFIG_NET_VENDOR_SYNOPSYS is not set
+# CONFIG_NET_VENDOR_VIA is not set
+# CONFIG_NET_VENDOR_WIZNET is not set
+CONFIG_SWCONFIG=y
+CONFIG_MICREL_PHY=y
+CONFIG_SWCFG_KSZ8863=y
+CONFIG_MDIO_BITBANG=y
+CONFIG_MDIO_GPIO=y
+CONFIG_PPP=y
+CONFIG_PPP_DEFLATE=y
+CONFIG_PPP_FILTER=y
+CONFIG_PPP_MPPE=y
+CONFIG_PPP_MULTILINK=y
+CONFIG_PPP_ASYNC=y
+CONFIG_PPP_SYNC_TTY=y
+CONFIG_USB_USBNET=y
+# CONFIG_USB_NET_AX8817X is not set
+# CONFIG_USB_NET_AX88179_178A is not set
+# CONFIG_USB_NET_CDC_NCM is not set
+# CONFIG_USB_NET_NET1080 is not set
+CONFIG_USB_NET_RNDIS_HOST=y
+# CONFIG_USB_NET_CDC_SUBSET is not set
+# CONFIG_USB_NET_ZAURUS is not set
+# CONFIG_WLAN is not set
+CONFIG_INPUT_MOUSEDEV=y
+CONFIG_INPUT_EVDEV=y
+CONFIG_KEYBOARD_QT1070=m
+CONFIG_KEYBOARD_GPIO=y
+CONFIG_MOUSE_PS2_ELANTECH=y
+CONFIG_INPUT_TOUCHSCREEN=y
+CONFIG_TOUCHSCREEN_ADS7846=y
+CONFIG_TOUCHSCREEN_PIXCIR=y
+CONFIG_TOUCHSCREEN_USB_COMPOSITE=y
+# CONFIG_TOUCHSCREEN_USB_EGALAX is not set
+# CONFIG_TOUCHSCREEN_USB_PANJIT is not set
+# CONFIG_TOUCHSCREEN_USB_3M is not set
+# CONFIG_TOUCHSCREEN_USB_ITM is not set
+# CONFIG_TOUCHSCREEN_USB_ETURBO is not set
+# CONFIG_TOUCHSCREEN_USB_GUNZE is not set
+# CONFIG_TOUCHSCREEN_USB_DMC_TSC10 is not set
+# CONFIG_TOUCHSCREEN_USB_IRTOUCH is not set
+# CONFIG_TOUCHSCREEN_USB_IDEALTEK is not set
+# CONFIG_TOUCHSCREEN_USB_GENERAL_TOUCH is not set
+# CONFIG_TOUCHSCREEN_USB_GOTOP is not set
+# CONFIG_TOUCHSCREEN_USB_JASTEC is not set
+# CONFIG_TOUCHSCREEN_USB_ELO is not set
+# CONFIG_TOUCHSCREEN_USB_E2I is not set
+# CONFIG_TOUCHSCREEN_USB_ZYTRONIC is not set
+# CONFIG_TOUCHSCREEN_USB_ETT_TC45USB is not set
+# CONFIG_TOUCHSCREEN_USB_NEXIO is not set
+# CONFIG_SERIO_SERPORT is not set
+CONFIG_VT_HW_CONSOLE_BINDING=y
+# CONFIG_LEGACY_PTYS is not set
+CONFIG_SERIAL_IMX=y
+CONFIG_SERIAL_IMX_CONSOLE=y
+# CONFIG_SERIAL_OMAP_MODBUS is not set
+# CONFIG_I2C_COMPAT is not set
+CONFIG_I2C_CHARDEV=y
+# CONFIG_I2C_HELPER_AUTO is not set
+CONFIG_I2C_IMX=y
+CONFIG_SPI=y
+CONFIG_SPI_IMX=y
+CONFIG_SPI_SPIDEV=y
+CONFIG_GPIO_SYSFS=y
+CONFIG_GPIO_MXC=y
+CONFIG_GPIO_PCA953X=y
+CONFIG_GPIO_PCA953X_IRQ=y
+CONFIG_POWER_SUPPLY=y
+CONFIG_SENSORS_LM75=y
+CONFIG_CPU_THERMAL=y
+CONFIG_IMX_THERMAL=y
+CONFIG_WATCHDOG=y
+CONFIG_WATCHDOG_SYSFS=y
+CONFIG_GPIO_WATCHDOG=y
+CONFIG_IMX2_WDT=y
+CONFIG_REGULATOR=y
+CONFIG_REGULATOR_FIXED_VOLTAGE=y
+CONFIG_REGULATOR_ANATOP=y
+CONFIG_REGULATOR_PFUZE100=y
+CONFIG_IMX_IPUV3_CORE=y
+CONFIG_DRM=y
+CONFIG_DRM_PANEL_SIMPLE=y
+CONFIG_DRM_IMX=y
+CONFIG_DRM_IMX_PARALLEL_DISPLAY=y
+CONFIG_DRM_IMX_LDB=y
+CONFIG_DRM_IMX_HDMI=y
+CONFIG_DRM_ETNAVIV=y
+CONFIG_FB=y
+CONFIG_LCD_CLASS_DEVICE=y
+CONFIG_LCD_PLATFORM=y
+CONFIG_BACKLIGHT_PWM=y
+CONFIG_SOUND=y
+CONFIG_SND=y
+# CONFIG_SND_SPI is not set
+# CONFIG_SND_USB is not set
+CONFIG_SND_SOC=y
+CONFIG_SND_IMX_SOC=y
+CONFIG_SND_SOC_IMX_SGTL5000=y
+CONFIG_HIDRAW=y
+CONFIG_HID_MULTITOUCH=y
+CONFIG_HID_MULTITOUCH_DISABLE_SINGLETOUCH_EVENTS=y
+CONFIG_I2C_HID_OF=y
+CONFIG_USB_OTG=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_EHCI_FSL=y
+CONFIG_USB_OHCI_HCD=y
+CONFIG_USB_STORAGE=y
+CONFIG_USB_CHIPIDEA=y
+CONFIG_USB_CHIPIDEA_UDC=y
+CONFIG_USB_CHIPIDEA_HOST=y
+CONFIG_USB_SERIAL=y
+CONFIG_USB_SERIAL_QUALCOMM=y
+CONFIG_USB_SERIAL_OPTION=y
+CONFIG_NOP_USB_XCEIV=y
+CONFIG_USB_MXS_PHY=y
+CONFIG_USB_ULPI=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_GADGET_VBUS_DRAW=500
+CONFIG_USB_CONFIGFS=m
+CONFIG_USB_CONFIGFS_ACM=y
+CONFIG_USB_CONFIGFS_NCM=y
+CONFIG_USB_CONFIGFS_ECM=y
+CONFIG_USB_CONFIGFS_ECM_SUBSET=y
+CONFIG_USB_CONFIGFS_RNDIS=y
+CONFIG_USB_CONFIGFS_EEM=y
+CONFIG_USB_CONFIGFS_MASS_STORAGE=y
+CONFIG_MMC=y
+CONFIG_MMC_SDHCI=y
+CONFIG_MMC_SDHCI_PLTFM=y
+CONFIG_MMC_SDHCI_ESDHC_IMX=y
+CONFIG_NEW_LEDS=y
+CONFIG_LEDS_CLASS=y
+CONFIG_LEDS_GPIO=y
+CONFIG_LEDS_PCA955X=y
+CONFIG_LEDS_TRIGGERS=y
+CONFIG_LEDS_TRIGGER_TIMER=y
+CONFIG_LEDS_TRIGGER_ONESHOT=y
+CONFIG_LEDS_TRIGGER_HEARTBEAT=y
+CONFIG_LEDS_TRIGGER_BACKLIGHT=y
+CONFIG_LEDS_TRIGGER_GPIO=y
+CONFIG_LEDS_TRIGGER_DEFAULT_ON=y
+CONFIG_LEDS_TRIGGER_TRANSIENT=y
+CONFIG_RTC_CLASS=y
+CONFIG_RTC_DRV_RS5C372=y
+CONFIG_DMADEVICES=y
+CONFIG_IMX_SDMA=y
+CONFIG_MXS_DMA=y
+CONFIG_UIO=y
+CONFIG_UIO_PDRV_GENIRQ=y
+CONFIG_UIO_DMEM_GENIRQ=y
+CONFIG_UIO_PRUSS=y
+CONFIG_STAGING=y
+CONFIG_STAGING_MEDIA=y
+CONFIG_EXTCON_PTN5150=m
+CONFIG_IIO=y
+CONFIG_IIO_BUFFER_CB=y
+CONFIG_IIO_TRIGGERED_BUFFER=y
+CONFIG_IIO_SW_DEVICE=y
+CONFIG_IIO_SW_TRIGGER=y
+CONFIG_SI1145=m
+CONFIG_IIO_HRTIMER_TRIGGER=y
+CONFIG_PWM=y
+CONFIG_PWM_IMX27=y
+CONFIG_NVMEM_IMX_IIM=y
+CONFIG_NVMEM_IMX_OCOTP=y
+CONFIG_EXT4_FS=y
+CONFIG_EXT4_FS_POSIX_ACL=y
+CONFIG_EXT4_FS_SECURITY=y
+CONFIG_FANOTIFY=y
+CONFIG_FUSE_FS=y
+CONFIG_OVERLAY_FS=y
+CONFIG_MSDOS_FS=y
+CONFIG_VFAT_FS=y
+CONFIG_NTFS_FS=y
+CONFIG_NTFS_RW=y
+CONFIG_TMPFS_POSIX_ACL=y
+CONFIG_SQUASHFS=y
+CONFIG_NFS_FS=y
+CONFIG_NFS_V3_ACL=y
+CONFIG_NFS_V4=y
+CONFIG_ROOT_NFS=y
+CONFIG_NLS_DEFAULT="437"
+CONFIG_NLS_CODEPAGE_437=y
+CONFIG_NLS_ISO8859_1=y
+CONFIG_NLS_UTF8=y
+CONFIG_SECURITY=y
+CONFIG_SECURITYFS=y
+CONFIG_CRYPTO_USER=y
+CONFIG_CRYPTO_CCM=y
+CONFIG_CRYPTO_XCBC=y
+CONFIG_CRYPTO_XXHASH=y
+CONFIG_CRYPTO_BLAKE2B=y
+CONFIG_CRYPTO_MICHAEL_MIC=y
+CONFIG_CRYPTO_BLOWFISH=y
+CONFIG_CRYPTO_CAMELLIA=y
+CONFIG_CRYPTO_CAST5=y
+CONFIG_CRYPTO_CAST6=y
+CONFIG_CRYPTO_SERPENT=y
+CONFIG_CRYPTO_TWOFISH=y
+CONFIG_CRYPTO_ANSI_CPRNG=y
+CONFIG_CRYPTO_USER_API_HASH=y
+CONFIG_CRYPTO_USER_API_SKCIPHER=y
+CONFIG_CRYPTO_DEV_FSL_CAAM=y
+CONFIG_CRYPTO_DEV_SAHARA=y
+CONFIG_ASYMMETRIC_KEY_TYPE=y
+CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y
+CONFIG_X509_CERTIFICATE_PARSER=y
+CONFIG_CRC_ITU_T=y
+CONFIG_CRC7=y
+CONFIG_XZ_DEC=y
+# CONFIG_XZ_DEC_X86 is not set
+# CONFIG_XZ_DEC_POWERPC is not set
+# CONFIG_XZ_DEC_IA64 is not set
+# CONFIG_XZ_DEC_ARM is not set
+# CONFIG_XZ_DEC_ARMTHUMB is not set
+# CONFIG_XZ_DEC_SPARC is not set
+CONFIG_CMA_SIZE_MBYTES=320
+CONFIG_PRINTK_TIME=y
+CONFIG_DYNAMIC_DEBUG=y
+# CONFIG_DEBUG_BUGVERBOSE is not set
+CONFIG_MAGIC_SYSRQ=y
+CONFIG_DEBUG_FS=y
+# CONFIG_SCHED_DEBUG is not set
+CONFIG_FUNCTION_TRACER=y
diff --git a/arch/arm/configs/stm32mp1_defconfig b/arch/arm/configs/stm32mp1_defconfig
new file mode 100644
index 000000000000..bb1a0c48becc
--- /dev/null
+++ b/arch/arm/configs/stm32mp1_defconfig
@@ -0,0 +1,553 @@
+CONFIG_KERNEL_LZO=y
+CONFIG_SYSVIPC=y
+CONFIG_POSIX_MQUEUE=y
+CONFIG_NO_HZ=y
+CONFIG_HIGH_RES_TIMERS=y
+CONFIG_BPF_SYSCALL=y
+CONFIG_BPF_JIT=y
+CONFIG_PREEMPT_RT=y
+CONFIG_BSD_PROCESS_ACCT=y
+CONFIG_BSD_PROCESS_ACCT_V3=y
+CONFIG_TASKSTATS=y
+CONFIG_TASK_DELAY_ACCT=y
+CONFIG_TASK_XACCT=y
+CONFIG_TASK_IO_ACCOUNTING=y
+CONFIG_IKCONFIG=y
+CONFIG_IKCONFIG_PROC=y
+CONFIG_LOG_BUF_SHIFT=18
+CONFIG_CGROUPS=y
+CONFIG_MEMCG=y
+CONFIG_BLK_CGROUP=y
+CONFIG_CGROUP_SCHED=y
+CONFIG_CFS_BANDWIDTH=y
+CONFIG_CGROUP_PIDS=y
+CONFIG_CGROUP_FREEZER=y
+CONFIG_CPUSETS=y
+CONFIG_CGROUP_DEVICE=y
+CONFIG_CGROUP_CPUACCT=y
+CONFIG_CGROUP_PERF=y
+CONFIG_CGROUP_BPF=y
+CONFIG_NAMESPACES=y
+CONFIG_RELAY=y
+CONFIG_BOOT_CONFIG=y
+CONFIG_CC_OPTIMIZE_FOR_SIZE=y
+CONFIG_EXPERT=y
+CONFIG_KALLSYMS_ALL=y
+# CONFIG_SLUB_DEBUG is not set
+# CONFIG_COMPAT_BRK is not set
+CONFIG_PROFILING=y
+CONFIG_WAGO_SYSTEM_BASED_STARTUP=y
+CONFIG_IRQ_PRIORITY_TABLE=y
+CONFIG_ARCH_STM32=y
+CONFIG_ARM_THUMBEE=y
+CONFIG_PL310_ERRATA_588369=y
+CONFIG_PL310_ERRATA_727915=y
+CONFIG_PL310_ERRATA_753970=y
+CONFIG_PL310_ERRATA_769419=y
+CONFIG_ARM_ERRATA_430973=y
+CONFIG_ARM_ERRATA_720789=y
+CONFIG_ARM_ERRATA_754322=y
+CONFIG_ARM_ERRATA_754327=y
+CONFIG_ARM_ERRATA_764369=y
+CONFIG_ARM_ERRATA_775420=y
+CONFIG_ARM_ERRATA_798181=y
+CONFIG_SMP=y
+CONFIG_MCPM=y
+CONFIG_NR_CPUS=16
+CONFIG_HOTPLUG_CPU=y
+CONFIG_HIGHMEM=y
+CONFIG_FORCE_MAX_ZONEORDER=12
+CONFIG_DEPRECATED_PARAM_STRUCT=y
+CONFIG_ARM_APPENDED_DTB=y
+CONFIG_ARM_ATAG_DTB_COMPAT=y
+CONFIG_CPU_FREQ=y
+CONFIG_CPU_FREQ_STAT=y
+CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE=y
+CONFIG_CPUFREQ_DT=y
+CONFIG_CPU_IDLE=y
+CONFIG_ARM_CPUIDLE=y
+CONFIG_VFP=y
+CONFIG_NEON=y
+CONFIG_KERNEL_MODE_NEON=y
+# CONFIG_SUSPEND is not set
+CONFIG_PM=y
+CONFIG_PM_DEBUG=y
+CONFIG_ARM_CRYPTO=y
+CONFIG_CRYPTO_SHA1_ARM_NEON=y
+CONFIG_CRYPTO_SHA1_ARM_CE=m
+CONFIG_CRYPTO_SHA2_ARM_CE=m
+CONFIG_CRYPTO_SHA256_ARM=y
+CONFIG_CRYPTO_SHA512_ARM=y
+CONFIG_CRYPTO_AES_ARM=m
+CONFIG_CRYPTO_AES_ARM_BS=y
+CONFIG_CRYPTO_AES_ARM_CE=m
+CONFIG_CRYPTO_GHASH_ARM_CE=m
+CONFIG_CRYPTO_CRC32_ARM_CE=m
+CONFIG_CRYPTO_CHACHA20_NEON=m
+CONFIG_KPROBES=y
+CONFIG_MODULES=y
+CONFIG_MODULE_FORCE_LOAD=y
+CONFIG_MODULE_UNLOAD=y
+CONFIG_MODULE_FORCE_UNLOAD=y
+CONFIG_MODVERSIONS=y
+CONFIG_MODULE_SRCVERSION_ALL=y
+CONFIG_BLK_DEV_BSGLIB=y
+CONFIG_BLK_DEV_INTEGRITY=y
+CONFIG_BLK_DEV_THROTTLING=y
+CONFIG_PARTITION_ADVANCED=y
+CONFIG_MAC_PARTITION=y
+CONFIG_CMDLINE_PARTITION=y
+CONFIG_CMA=y
+CONFIG_NET=y
+CONFIG_PACKET=y
+CONFIG_PACKET_DIAG=m
+CONFIG_UNIX=y
+CONFIG_UNIX_DIAG=m
+CONFIG_XFRM_USER=y
+CONFIG_NET_KEY=y
+CONFIG_NET_KEY_MIGRATE=y
+CONFIG_INET=y
+CONFIG_IP_MULTICAST=y
+CONFIG_IP_ADVANCED_ROUTER=y
+CONFIG_IP_MULTIPLE_TABLES=y
+CONFIG_IP_PNP=y
+CONFIG_IP_PNP_DHCP=y
+CONFIG_IP_PNP_BOOTP=y
+CONFIG_IP_PNP_RARP=y
+CONFIG_NET_IPIP=m
+CONFIG_NET_IPGRE_DEMUX=m
+CONFIG_NET_IPGRE=m
+CONFIG_IP_MROUTE=y
+CONFIG_IP_MROUTE_MULTIPLE_TABLES=y
+CONFIG_IP_PIMSM_V1=y
+CONFIG_IP_PIMSM_V2=y
+CONFIG_SYN_COOKIES=y
+CONFIG_INET_AH=y
+CONFIG_INET_ESP=y
+CONFIG_INET_IPCOMP=y
+CONFIG_INET_UDP_DIAG=m
+CONFIG_TCP_CONG_ADVANCED=y
+# CONFIG_TCP_CONG_BIC is not set
+# CONFIG_TCP_CONG_CUBIC is not set
+# CONFIG_TCP_CONG_WESTWOOD is not set
+# CONFIG_TCP_CONG_HTCP is not set
+CONFIG_TCP_CONG_HSTCP=m
+CONFIG_TCP_CONG_HYBLA=m
+CONFIG_TCP_CONG_SCALABLE=m
+CONFIG_TCP_CONG_LP=m
+CONFIG_TCP_CONG_VENO=m
+CONFIG_TCP_CONG_YEAH=m
+CONFIG_TCP_CONG_ILLINOIS=m
+CONFIG_IPV6_ROUTER_PREF=y
+CONFIG_IPV6_ROUTE_INFO=y
+CONFIG_IPV6_OPTIMISTIC_DAD=y
+CONFIG_INET6_AH=m
+CONFIG_INET6_ESP=m
+CONFIG_INET6_IPCOMP=m
+CONFIG_IPV6_MIP6=m
+CONFIG_IPV6_SIT=m
+CONFIG_IPV6_GRE=m
+CONFIG_IPV6_MULTIPLE_TABLES=y
+CONFIG_IPV6_SUBTREES=y
+CONFIG_IPV6_MROUTE=y
+CONFIG_IPV6_MROUTE_MULTIPLE_TABLES=y
+CONFIG_IPV6_PIMSM_V2=y
+CONFIG_NETFILTER=y
+CONFIG_NF_CONNTRACK=y
+CONFIG_NF_CONNTRACK_FTP=y
+CONFIG_NF_CONNTRACK_SNMP=y
+CONFIG_NF_CONNTRACK_TFTP=y
+CONFIG_NF_CT_NETLINK=y
+CONFIG_NETFILTER_XT_TARGET_CONNMARK=m
+CONFIG_NETFILTER_XT_TARGET_HL=y
+CONFIG_NETFILTER_XT_TARGET_TCPMSS=y
+CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=m
+CONFIG_NETFILTER_XT_MATCH_CONNLIMIT=y
+CONFIG_NETFILTER_XT_MATCH_CONNMARK=m
+CONFIG_NETFILTER_XT_MATCH_CONNTRACK=y
+CONFIG_NETFILTER_XT_MATCH_ECN=y
+CONFIG_NETFILTER_XT_MATCH_ESP=y
+CONFIG_NETFILTER_XT_MATCH_HL=y
+CONFIG_NETFILTER_XT_MATCH_IPRANGE=y
+CONFIG_NETFILTER_XT_MATCH_IPVS=m
+# CONFIG_NETFILTER_XT_MATCH_L2TP is not set
+CONFIG_NETFILTER_XT_MATCH_LIMIT=y
+CONFIG_NETFILTER_XT_MATCH_MAC=y
+CONFIG_NETFILTER_XT_MATCH_MARK=y
+CONFIG_NETFILTER_XT_MATCH_POLICY=y
+CONFIG_IP_VS=m
+CONFIG_IP_VS_PROTO_TCP=y
+CONFIG_IP_VS_PROTO_UDP=y
+CONFIG_IP_VS_RR=m
+CONFIG_IP_VS_WRR=m
+CONFIG_IP_VS_NFCT=y
+CONFIG_IP_NF_IPTABLES=y
+CONFIG_IP_NF_MATCH_AH=y
+CONFIG_IP_NF_MATCH_ECN=m
+CONFIG_IP_NF_MATCH_RPFILTER=m
+CONFIG_IP_NF_MATCH_TTL=m
+CONFIG_IP_NF_FILTER=y
+CONFIG_IP_NF_TARGET_REJECT=y
+CONFIG_IP_NF_NAT=y
+CONFIG_IP_NF_TARGET_MASQUERADE=y
+CONFIG_IP_NF_TARGET_REDIRECT=m
+CONFIG_IP_NF_MANGLE=y
+CONFIG_IP_NF_TARGET_ECN=m
+CONFIG_IP_NF_TARGET_TTL=m
+CONFIG_IP_NF_RAW=y
+CONFIG_IP_NF_SECURITY=m
+CONFIG_IP_NF_ARPTABLES=m
+CONFIG_IP_NF_ARPFILTER=m
+CONFIG_IP_NF_ARP_MANGLE=m
+CONFIG_IP6_NF_IPTABLES=m
+CONFIG_IP6_NF_MATCH_AH=m
+CONFIG_IP6_NF_MATCH_EUI64=m
+CONFIG_IP6_NF_MATCH_FRAG=m
+CONFIG_IP6_NF_MATCH_OPTS=m
+CONFIG_IP6_NF_MATCH_HL=m
+CONFIG_IP6_NF_MATCH_IPV6HEADER=m
+CONFIG_IP6_NF_MATCH_MH=m
+CONFIG_IP6_NF_MATCH_RPFILTER=m
+CONFIG_IP6_NF_MATCH_RT=m
+CONFIG_IP6_NF_TARGET_HL=m
+CONFIG_IP6_NF_FILTER=m
+CONFIG_IP6_NF_TARGET_REJECT=m
+CONFIG_IP6_NF_MANGLE=m
+CONFIG_IP6_NF_RAW=m
+CONFIG_IP6_NF_SECURITY=m
+CONFIG_BRIDGE_NF_EBTABLES=y
+CONFIG_BRIDGE_EBT_BROUTE=y
+CONFIG_BRIDGE_EBT_T_FILTER=y
+CONFIG_BRIDGE_EBT_T_NAT=y
+CONFIG_BRIDGE_EBT_IP=y
+CONFIG_BRIDGE_EBT_LIMIT=y
+CONFIG_BRIDGE_EBT_LOG=y
+CONFIG_L2TP=m
+CONFIG_BRIDGE=y
+CONFIG_BRIDGE_VLAN_FILTERING=y
+CONFIG_NET_DSA=y
+CONFIG_VLAN_8021Q=m
+CONFIG_VLAN_8021Q_GVRP=y
+CONFIG_NET_SCHED=y
+CONFIG_NET_SCH_HTB=y
+CONFIG_NET_SCH_HFSC=y
+CONFIG_NET_SCH_PRIO=y
+CONFIG_NET_SCH_TBF=y
+CONFIG_NET_SCH_CODEL=y
+CONFIG_NET_SCH_FQ_CODEL=y
+CONFIG_NET_CLS_BASIC=y
+CONFIG_NET_CLS_TCINDEX=y
+CONFIG_NET_CLS_ROUTE4=y
+CONFIG_NET_CLS_FW=y
+CONFIG_NET_CLS_U32=y
+CONFIG_CLS_U32_PERF=y
+CONFIG_CLS_U32_MARK=y
+CONFIG_NET_CLS_RSVP=y
+CONFIG_NET_CLS_FLOW=y
+CONFIG_NET_CLS_CGROUP=m
+CONFIG_NET_EMATCH=y
+CONFIG_NET_EMATCH_CMP=y
+CONFIG_NET_EMATCH_NBYTE=y
+CONFIG_NET_EMATCH_U32=y
+CONFIG_NET_EMATCH_META=y
+CONFIG_NET_EMATCH_TEXT=y
+CONFIG_NET_CLS_ACT=y
+CONFIG_NET_ACT_POLICE=y
+CONFIG_NET_ACT_GACT=y
+CONFIG_GACT_PROB=y
+CONFIG_NET_ACT_MIRRED=y
+CONFIG_NET_ACT_IPT=y
+CONFIG_NET_ACT_NAT=y
+CONFIG_NET_ACT_PEDIT=y
+CONFIG_NET_ACT_SKBEDIT=y
+CONFIG_NET_ACT_CSUM=y
+CONFIG_NETLINK_DIAG=y
+CONFIG_NET_L3_MASTER_DEV=y
+CONFIG_CGROUP_NET_PRIO=y
+# CONFIG_WIRELESS is not set
+CONFIG_DEVTMPFS=y
+CONFIG_DEVTMPFS_MOUNT=y
+CONFIG_MTD=y
+CONFIG_MTD_CMDLINE_PARTS=y
+CONFIG_MTD_BLOCK=y
+CONFIG_MTD_SPI_NOR=y
+CONFIG_MTD_UBI=y
+CONFIG_OF_OVERLAY=y
+CONFIG_BLK_DEV_LOOP=y
+CONFIG_BLK_DEV_RAM=y
+CONFIG_BLK_DEV_RAM_SIZE=65536
+CONFIG_VIRTIO_BLK=y
+CONFIG_ICS932S401=y
+CONFIG_SRAM=y
+# CONFIG_ENCSW is not set
+CONFIG_DOUT_DRV=y
+CONFIG_DIN_SPI_DRV=y
+CONFIG_EEPROM_AT24=y
+CONFIG_EEPROM_93CX6=y
+CONFIG_SCSI=y
+# CONFIG_SCSI_PROC_FS is not set
+# CONFIG_SCSI_LOWLEVEL is not set
+CONFIG_NETDEVICES=y
+CONFIG_TUN=y
+CONFIG_VETH=y
+CONFIG_NET_DSA_KSZ8863=y
+# CONFIG_NET_VENDOR_ALACRITECH is not set
+# CONFIG_NET_VENDOR_AMAZON is not set
+# CONFIG_NET_VENDOR_AQUANTIA is not set
+# CONFIG_NET_VENDOR_ARC is not set
+# CONFIG_NET_VENDOR_BROADCOM is not set
+# CONFIG_NET_VENDOR_CADENCE is not set
+# CONFIG_NET_VENDOR_CAVIUM is not set
+# CONFIG_NET_VENDOR_CIRRUS is not set
+# CONFIG_NET_VENDOR_CORTINA is not set
+# CONFIG_NET_VENDOR_EZCHIP is not set
+# CONFIG_NET_VENDOR_FARADAY is not set
+# CONFIG_NET_VENDOR_GOOGLE is not set
+# CONFIG_NET_VENDOR_HISILICON is not set
+# CONFIG_NET_VENDOR_HUAWEI is not set
+# CONFIG_NET_VENDOR_INTEL is not set
+# CONFIG_NET_VENDOR_MARVELL is not set
+# CONFIG_NET_VENDOR_MELLANOX is not set
+# CONFIG_NET_VENDOR_MICREL is not set
+# CONFIG_NET_VENDOR_MICROCHIP is not set
+# CONFIG_NET_VENDOR_MICROSEMI is not set
+# CONFIG_NET_VENDOR_NATSEMI is not set
+# CONFIG_NET_VENDOR_NETRONOME is not set
+# CONFIG_NET_VENDOR_NI is not set
+# CONFIG_NET_VENDOR_PENSANDO is not set
+# CONFIG_NET_VENDOR_QUALCOMM is not set
+# CONFIG_NET_VENDOR_RENESAS is not set
+# CONFIG_NET_VENDOR_ROCKER is not set
+# CONFIG_NET_VENDOR_SAMSUNG is not set
+# CONFIG_NET_VENDOR_SEEQ is not set
+# CONFIG_NET_VENDOR_SOLARFLARE is not set
+# CONFIG_NET_VENDOR_SMSC is not set
+# CONFIG_NET_VENDOR_SOCIONEXT is not set
+CONFIG_STMMAC_ETH=y
+CONFIG_DWMAC_DWC_QOS_ETH=y
+# CONFIG_NET_VENDOR_SYNOPSYS is not set
+# CONFIG_NET_VENDOR_VIA is not set
+# CONFIG_NET_VENDOR_WIZNET is not set
+# CONFIG_NET_VENDOR_XILINX is not set
+CONFIG_SWCONFIG=y
+CONFIG_LED_TRIGGER_PHY=y
+CONFIG_MICREL_PHY=y
+CONFIG_MICROCHIP_PHY=y
+CONFIG_SWCFG_KSZ8863=y
+CONFIG_MDIO_BITBANG=y
+CONFIG_MDIO_GPIO=y
+# CONFIG_USB_NET_DRIVERS is not set
+# CONFIG_WLAN is not set
+CONFIG_NET_FAILOVER=y
+CONFIG_INPUT_MATRIXKMAP=y
+CONFIG_INPUT_EVDEV=y
+# CONFIG_KEYBOARD_ATKBD is not set
+CONFIG_KEYBOARD_GPIO=y
+# CONFIG_INPUT_MOUSE is not set
+CONFIG_SERIO_AMBAKMI=y
+CONFIG_SERIO_LIBPS2=y
+CONFIG_VT_HW_CONSOLE_BINDING=y
+CONFIG_SERIAL_8250=y
+CONFIG_SERIAL_8250_CONSOLE=y
+CONFIG_SERIAL_8250_EXTENDED=y
+CONFIG_SERIAL_8250_SHARE_IRQ=y
+CONFIG_SERIAL_OF_PLATFORM=y
+# CONFIG_SERIAL_OMAP_MODBUS is not set
+CONFIG_SERIAL_STM32=y
+CONFIG_SERIAL_STM32_CONSOLE=y
+CONFIG_SERIAL_DEV_BUS=y
+CONFIG_TTY_PRINTK=y
+CONFIG_VIRTIO_CONSOLE=y
+CONFIG_HW_RANDOM=y
+CONFIG_I2C=y
+CONFIG_I2C_CHARDEV=y
+CONFIG_I2C_ARB_GPIO_CHALLENGE=m
+CONFIG_I2C_MUX_PCA954x=y
+CONFIG_I2C_MUX_PINCTRL=y
+CONFIG_I2C_DEMUX_PINCTRL=y
+CONFIG_I2C_NOMADIK=y
+CONFIG_I2C_STM32F7=y
+CONFIG_I2C_SLAVE_EEPROM=y
+CONFIG_SPI=y
+CONFIG_SPI_STM32=y
+CONFIG_SPI_STM32_QSPI=y
+CONFIG_SPI_SPIDEV=y
+CONFIG_SPMI=y
+CONFIG_PINCTRL_SINGLE=y
+CONFIG_GPIO_SYSFS=y
+CONFIG_GPIO_DWAPB=y
+CONFIG_GPIO_SYSCON=y
+CONFIG_POWER_RESET=y
+CONFIG_POWER_RESET_BRCMKONA=y
+CONFIG_POWER_RESET_BRCMSTB=y
+CONFIG_POWER_RESET_GPIO=y
+CONFIG_POWER_RESET_GPIO_RESTART=y
+CONFIG_POWER_RESET_SYSCON=y
+CONFIG_POWER_RESET_SYSCON_POWEROFF=y
+CONFIG_BATTERY_SBS=y
+CONFIG_BATTERY_MAX17040=m
+CONFIG_BATTERY_MAX17042=m
+CONFIG_SENSORS_IIO_HWMON=y
+CONFIG_SENSORS_LM90=y
+CONFIG_SENSORS_LM95245=y
+CONFIG_SENSORS_NTC_THERMISTOR=m
+CONFIG_SENSORS_PWM_FAN=m
+CONFIG_SENSORS_INA2XX=m
+CONFIG_THERMAL=y
+CONFIG_CPU_THERMAL=y
+CONFIG_ST_THERMAL_MEMMAP=y
+CONFIG_WATCHDOG=y
+CONFIG_XILINX_WATCHDOG=y
+CONFIG_ARM_SP805_WATCHDOG=y
+CONFIG_DW_WATCHDOG=y
+CONFIG_STPMIC1_WATCHDOG=y
+CONFIG_BCMA=y
+CONFIG_BCMA_HOST_SOC=y
+CONFIG_BCMA_DRIVER_GMAC_CMN=y
+CONFIG_BCMA_DRIVER_GPIO=y
+CONFIG_MFD_STM32_LPTIMER=y
+CONFIG_MFD_STPMIC1=y
+CONFIG_REGULATOR=y
+CONFIG_REGULATOR_DEBUG=y
+CONFIG_REGULATOR_FIXED_VOLTAGE=y
+CONFIG_REGULATOR_VIRTUAL_CONSUMER=y
+CONFIG_REGULATOR_USERSPACE_CONSUMER=y
+CONFIG_REGULATOR_GPIO=y
+CONFIG_REGULATOR_PWM=y
+CONFIG_REGULATOR_STM32_BOOSTER=y
+CONFIG_REGULATOR_STM32_VREFBUF=y
+CONFIG_REGULATOR_STM32_PWR=y
+CONFIG_REGULATOR_STPMIC1=y
+CONFIG_REGULATOR_VCTRL=y
+# CONFIG_HID_GENERIC is not set
+CONFIG_USB=y
+CONFIG_USB_DWC2=y
+CONFIG_USB_DWC2_PERIPHERAL=y
+CONFIG_NOP_USB_XCEIV=y
+CONFIG_USB_GPIO_VBUS=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_CONFIGFS=m
+CONFIG_USB_CONFIGFS_NCM=y
+CONFIG_USB_CONFIGFS_ECM=y
+CONFIG_USB_CONFIGFS_ECM_SUBSET=y
+CONFIG_USB_CONFIGFS_RNDIS=y
+CONFIG_USB_CONFIGFS_EEM=y
+CONFIG_USB_ETH=m
+CONFIG_TYPEC=y
+CONFIG_TYPEC_TCPM=y
+CONFIG_TYPEC_TCPCI=y
+CONFIG_TYPEC_UCSI=y
+CONFIG_MMC=y
+CONFIG_MMC_BLOCK_MINORS=16
+CONFIG_MMC_ARMMMCI=y
+CONFIG_MMC_SDHCI=y
+CONFIG_MMC_SDHCI_PLTFM=y
+CONFIG_MMC_CQHCI=y
+CONFIG_NEW_LEDS=y
+CONFIG_LEDS_CLASS=y
+CONFIG_LEDS_GPIO=y
+CONFIG_LEDS_PWM=y
+CONFIG_LEDS_TRIGGERS=y
+CONFIG_LEDS_TRIGGER_TIMER=y
+CONFIG_LEDS_TRIGGER_ONESHOT=y
+CONFIG_LEDS_TRIGGER_HEARTBEAT=y
+CONFIG_LEDS_TRIGGER_GPIO=y
+CONFIG_LEDS_TRIGGER_DEFAULT_ON=y
+CONFIG_LEDS_TRIGGER_TRANSIENT=y
+CONFIG_LEDS_TRIGGER_PANIC=y
+CONFIG_RTC_CLASS=y
+CONFIG_RTC_DRV_RS5C372=y
+CONFIG_RTC_DRV_STM32=y
+CONFIG_DMADEVICES=y
+CONFIG_FSL_EDMA=y
+CONFIG_PL330_DMA=y
+CONFIG_STM32_DMA=y
+CONFIG_STM32_DMAMUX=y
+CONFIG_STM32_MDMA=y
+CONFIG_DW_DMAC=y
+CONFIG_SYNC_FILE=y
+CONFIG_UIO=y
+CONFIG_UIO_PDRV_GENIRQ=y
+CONFIG_VIRTIO_MMIO=y
+CONFIG_STAGING=y
+CONFIG_STAGING_BOARD=y
+CONFIG_MAILBOX=y
+CONFIG_PL320_MBOX=y
+CONFIG_RPMSG_VIRTIO=m
+CONFIG_SOC_BRCMSTB=y
+CONFIG_PM_DEVFREQ=y
+CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND=m
+CONFIG_MEMORY=y
+CONFIG_STM32_FMC2_EBI=y
+CONFIG_IIO=y
+CONFIG_IIO_BUFFER_CB=y
+CONFIG_IIO_SW_DEVICE=y
+CONFIG_IIO_SW_TRIGGER=y
+CONFIG_STM32_ADC_CORE=y
+CONFIG_STM32_ADC=y
+CONFIG_STM32_DAC=y
+CONFIG_MPU3050_I2C=y
+CONFIG_IIO_HRTIMER_TRIGGER=y
+CONFIG_PWM=y
+CONFIG_PHY_STM32_USBPHYC=y
+CONFIG_NVMEM_STM32_ROMEM=y
+CONFIG_EXT4_FS=y
+CONFIG_EXT4_FS_POSIX_ACL=y
+CONFIG_EXT4_FS_SECURITY=y
+CONFIG_FANOTIFY=y
+CONFIG_QUOTA=y
+# CONFIG_PRINT_QUOTA_WARNING is not set
+CONFIG_QFMT_V2=y
+CONFIG_AUTOFS4_FS=m
+CONFIG_FUSE_FS=y
+CONFIG_CUSE=m
+CONFIG_OVERLAY_FS=y
+CONFIG_MSDOS_FS=y
+CONFIG_VFAT_FS=y
+CONFIG_NTFS_FS=y
+CONFIG_NTFS_RW=y
+CONFIG_TMPFS=y
+CONFIG_TMPFS_POSIX_ACL=y
+CONFIG_SQUASHFS=y
+CONFIG_NFS_FS=y
+CONFIG_NFS_V3_ACL=y
+CONFIG_NFS_V4=y
+CONFIG_NFS_SWAP=y
+CONFIG_ROOT_NFS=y
+CONFIG_NLS_DEFAULT="437"
+CONFIG_NLS_CODEPAGE_437=y
+CONFIG_NLS_ISO8859_1=y
+CONFIG_NLS_UTF8=y
+CONFIG_SECURITY=y
+CONFIG_SECURITYFS=y
+CONFIG_CRYPTO_USER=y
+CONFIG_CRYPTO_CCM=y
+CONFIG_CRYPTO_XCBC=y
+CONFIG_CRYPTO_MICHAEL_MIC=y
+CONFIG_CRYPTO_BLOWFISH=y
+CONFIG_CRYPTO_CAMELLIA=y
+CONFIG_CRYPTO_CAST5=y
+CONFIG_CRYPTO_CAST6=y
+CONFIG_CRYPTO_SERPENT=y
+CONFIG_CRYPTO_TWOFISH=y
+CONFIG_CRYPTO_ANSI_CPRNG=y
+CONFIG_CRYPTO_USER_API_HASH=y
+CONFIG_CRYPTO_USER_API_SKCIPHER=y
+CONFIG_ASYMMETRIC_KEY_TYPE=y
+CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y
+CONFIG_X509_CERTIFICATE_PARSER=y
+CONFIG_CRC_T10DIF=y
+CONFIG_CRC_ITU_T=y
+CONFIG_CRC7=y
+CONFIG_PRINTK_TIME=y
+CONFIG_DYNAMIC_DEBUG=y
+# CONFIG_DEBUG_BUGVERBOSE is not set
+CONFIG_MAGIC_SYSRQ=y
+CONFIG_DEBUG_FS=y
+# CONFIG_SCHED_DEBUG is not set
+CONFIG_SCHEDSTATS=y
+CONFIG_STACKTRACE=y
+# CONFIG_FTRACE is not set
+CONFIG_UNWINDER_FRAME_POINTER=y
+CONFIG_DEBUG_LL=y
+CONFIG_EARLY_PRINTK=y
diff --git a/arch/arm/include/asm/atomic.h b/arch/arm/include/asm/atomic.h
index db8512d9a918..e03bc8277260 100644
--- a/arch/arm/include/asm/atomic.h
+++ b/arch/arm/include/asm/atomic.h
@@ -25,7 +25,7 @@
 #define arch_atomic_read(v)	READ_ONCE((v)->counter)
 #define arch_atomic_set(v,i)	WRITE_ONCE(((v)->counter), (i))
 
-#if __LINUX_ARM_ARCH__ >= 6
+#if __LINUX_ARM_ARCH__ >= 6 && !defined(CONFIG_ARCH_OMAP3)
 
 /*
  * ARMv6 UP and SMP safe atomic ops.  We use load exclusive and
diff --git a/arch/arm/include/asm/cmpxchg.h b/arch/arm/include/asm/cmpxchg.h
index 4dfe538dfc68..2c9e40000ad8 100644
--- a/arch/arm/include/asm/cmpxchg.h
+++ b/arch/arm/include/asm/cmpxchg.h
@@ -6,7 +6,8 @@
 #include <linux/prefetch.h>
 #include <asm/barrier.h>
 
-#if defined(CONFIG_CPU_SA1100) || defined(CONFIG_CPU_SA110)
+#if defined(CONFIG_CPU_SA1100) || defined(CONFIG_CPU_SA110) || \
+	defined(CONFIG_ARCH_OMAP3)
 /*
  * On the StrongARM, "swp" is terminally broken since it bypasses the
  * cache totally.  This means that the cache becomes inconsistent, and,
@@ -32,14 +33,14 @@ static inline unsigned long __xchg(unsigned long x, volatile void *ptr, int size
 #ifdef swp_is_buggy
 	unsigned long flags;
 #endif
-#if __LINUX_ARM_ARCH__ >= 6
+#if __LINUX_ARM_ARCH__ >= 6 && !defined(CONFIG_ARCH_OMAP3)
 	unsigned int tmp;
 #endif
 
 	prefetchw((const void *)ptr);
 
 	switch (size) {
-#if __LINUX_ARM_ARCH__ >= 6
+#if __LINUX_ARM_ARCH__ >= 6 && !defined(CONFIG_ARCH_OMAP3)
 #ifndef CONFIG_CPU_V6 /* MIN ARCH >= V6K */
 	case 1:
 		asm volatile("@	__xchg1\n"
@@ -121,7 +122,7 @@ static inline unsigned long __xchg(unsigned long x, volatile void *ptr, int size
 
 #include <asm-generic/cmpxchg-local.h>
 
-#if __LINUX_ARM_ARCH__ < 6
+#if __LINUX_ARM_ARCH__ < 6 || defined(CONFIG_ARCH_OMAP3)
 /* min ARCH < ARMv6 */
 
 #ifdef CONFIG_SMP
diff --git a/arch/arm/include/asm/spinlock.h b/arch/arm/include/asm/spinlock.h
index f610a773f2be..41ffe2593c96 100644
--- a/arch/arm/include/asm/spinlock.h
+++ b/arch/arm/include/asm/spinlock.h
@@ -6,6 +6,10 @@
 #error SMP not supported on pre-ARMv6 CPUs
 #endif
 
+#if defined(CONFIG_ARCH_OMAP3)
+#error Cant use spinlocks
+#endif
+
 #include <linux/prefetch.h>
 #include <asm/barrier.h>
 #include <asm/processor.h>
diff --git a/arch/arm/include/asm/spinlock_types.h b/arch/arm/include/asm/spinlock_types.h
index 5976958647fe..0c14b36ef101 100644
--- a/arch/arm/include/asm/spinlock_types.h
+++ b/arch/arm/include/asm/spinlock_types.h
@@ -2,7 +2,7 @@
 #ifndef __ASM_SPINLOCK_TYPES_H
 #define __ASM_SPINLOCK_TYPES_H
 
-#ifndef __LINUX_SPINLOCK_TYPES_H
+#ifndef __LINUX_SPINLOCK_TYPES_RAW_H
 # error "please don't include this file directly"
 #endif
 
diff --git a/arch/arm/include/asm/thread_info.h b/arch/arm/include/asm/thread_info.h
index 9a18da3e10cc..2fa63d96a4f0 100644
--- a/arch/arm/include/asm/thread_info.h
+++ b/arch/arm/include/asm/thread_info.h
@@ -52,6 +52,7 @@ struct cpu_context_save {
 struct thread_info {
 	unsigned long		flags;		/* low level flags */
 	int			preempt_count;	/* 0 => preemptable, <0 => bug */
+	int			preempt_lazy_count; /* 0 => preemptable, <0 => bug */
 	struct task_struct	*task;		/* main task structure */
 	__u32			cpu;		/* cpu */
 	__u32			cpu_domain;	/* cpu domain */
@@ -134,6 +135,7 @@ extern int vfp_restore_user_hwstate(struct user_vfp *,
 #define TIF_SYSCALL_TRACEPOINT	6	/* syscall tracepoint instrumentation */
 #define TIF_SECCOMP		7	/* seccomp syscall filtering active */
 #define TIF_NOTIFY_SIGNAL	8	/* signal notifications exist */
+#define TIF_NEED_RESCHED_LAZY	9
 
 #define TIF_USING_IWMMXT	17
 #define TIF_MEMDIE		18	/* is terminating due to OOM killer */
@@ -148,6 +150,7 @@ extern int vfp_restore_user_hwstate(struct user_vfp *,
 #define _TIF_SYSCALL_TRACEPOINT	(1 << TIF_SYSCALL_TRACEPOINT)
 #define _TIF_SECCOMP		(1 << TIF_SECCOMP)
 #define _TIF_NOTIFY_SIGNAL	(1 << TIF_NOTIFY_SIGNAL)
+#define _TIF_NEED_RESCHED_LAZY	(1 << TIF_NEED_RESCHED_LAZY)
 #define _TIF_USING_IWMMXT	(1 << TIF_USING_IWMMXT)
 
 /* Checks for any syscall work in entry-common.S */
@@ -157,7 +160,8 @@ extern int vfp_restore_user_hwstate(struct user_vfp *,
 /*
  * Change these and you break ASM code in entry-common.S
  */
-#define _TIF_WORK_MASK		(_TIF_NEED_RESCHED | _TIF_SIGPENDING | \
+#define _TIF_WORK_MASK		(_TIF_NEED_RESCHED | _TIF_NEED_RESCHED_LAZY | \
+				 _TIF_SIGPENDING | \
 				 _TIF_NOTIFY_RESUME | _TIF_UPROBE | \
 				 _TIF_NOTIFY_SIGNAL)
 
diff --git a/arch/arm/include/asm/timex.h b/arch/arm/include/asm/timex.h
index 7c3b3671d6c2..7983ff4a1dac 100644
--- a/arch/arm/include/asm/timex.h
+++ b/arch/arm/include/asm/timex.h
@@ -10,6 +10,49 @@
 #define _ASMARM_TIMEX_H
 
 typedef unsigned long cycles_t;
-#define get_cycles()	({ cycles_t c; read_current_timer(&c) ? 0 : c; })
+
+static inline void random_get_entropy_init(u32 values[3])
+{
+	/* in general enable all counters (including cycle counter)
+	 *  reset all counters to zero.
+	 *  reset cycle counter to zero.
+	 */
+	int32_t value = 1 | 2 | 4 | 16;
+
+	asm volatile("MRC p15, 0, %0, c9, c12, 0\t\n" : "=r"(values[0])::);
+	asm volatile("MRC p15, 0, %0, c9, c12, 1\t\n" : "=r"(values[1])::);
+	asm volatile("MRC p15, 0, %0, c9, c12, 3\t\n" : "=r"(values[2])::);
+
+	// program the performance-counter control-register:
+	asm volatile("MCR p15, 0, %0, c9, c12, 0\t\n" ::"r"(value));
+
+	// enable all counters:
+	asm volatile("MCR p15, 0, %0, c9, c12, 1\t\n" ::"r"(0x8000000f));
+
+	// clear overflows:
+	asm volatile("MCR p15, 0, %0, c9, c12, 3\t\n" ::"r"(0x8000000f));
+}
+
+static inline void random_get_entropy_deinit(u32 values[3])
+{
+	asm volatile("MCR p15, 0, %0, c9, c12, 0\t\n" ::"r"(values[0]) :);
+	asm volatile("MCR p15, 0, %0, c9, c12, 1\t\n" ::"r"(values[1]) :);
+	asm volatile("MCR p15, 0, %0, c9, c12, 3\t\n" ::"r"(values[2]) :);
+}
+
+#ifndef random_get_entropy
+#define random_get_entropy()                                                   \
+	({                                                                     \
+		cycles_t c;                                                    \
+		asm volatile("MRC p15, 0, %0, c9, c13, 0\n\t" : "=r"(c)::);    \
+		c;                                                             \
+	})
+#endif
+
+#define get_cycles()                                                           \
+	({                                                                     \
+		cycles_t c;                                                    \
+		read_current_timer(&c) ? 0 : c;                                \
+	})
 
 #endif
diff --git a/arch/arm/kernel/asm-offsets.c b/arch/arm/kernel/asm-offsets.c
index a646a3f6440f..beb09d74684f 100644
--- a/arch/arm/kernel/asm-offsets.c
+++ b/arch/arm/kernel/asm-offsets.c
@@ -43,6 +43,7 @@ int main(void)
   BLANK();
   DEFINE(TI_FLAGS,		offsetof(struct thread_info, flags));
   DEFINE(TI_PREEMPT,		offsetof(struct thread_info, preempt_count));
+  DEFINE(TI_PREEMPT_LAZY,	offsetof(struct thread_info, preempt_lazy_count));
   DEFINE(TI_TASK,		offsetof(struct thread_info, task));
   DEFINE(TI_CPU,		offsetof(struct thread_info, cpu));
   DEFINE(TI_CPU_DOMAIN,		offsetof(struct thread_info, cpu_domain));
diff --git a/arch/arm/kernel/entry-armv.S b/arch/arm/kernel/entry-armv.S
index d8e28abd468c..6eef0eb99fe6 100644
--- a/arch/arm/kernel/entry-armv.S
+++ b/arch/arm/kernel/entry-armv.S
@@ -206,11 +206,18 @@ __irq_svc:
 
 #ifdef CONFIG_PREEMPTION
 	ldr	r8, [tsk, #TI_PREEMPT]		@ get preempt count
-	ldr	r0, [tsk, #TI_FLAGS]		@ get flags
 	teq	r8, #0				@ if preempt count != 0
+	bne	1f				@ return from exeption
+	ldr	r0, [tsk, #TI_FLAGS]		@ get flags
+	tst	r0, #_TIF_NEED_RESCHED		@ if NEED_RESCHED is set
+	blne	svc_preempt			@ preempt!
+
+	ldr	r8, [tsk, #TI_PREEMPT_LAZY]	@ get preempt lazy count
+	teq	r8, #0				@ if preempt lazy count != 0
 	movne	r0, #0				@ force flags to 0
-	tst	r0, #_TIF_NEED_RESCHED
+	tst	r0, #_TIF_NEED_RESCHED_LAZY
 	blne	svc_preempt
+1:
 #endif
 
 	svc_exit r5, irq = 1			@ return from exception
@@ -225,8 +232,14 @@ svc_preempt:
 1:	bl	preempt_schedule_irq		@ irq en/disable is done inside
 	ldr	r0, [tsk, #TI_FLAGS]		@ get new tasks TI_FLAGS
 	tst	r0, #_TIF_NEED_RESCHED
+	bne	1b
+	tst	r0, #_TIF_NEED_RESCHED_LAZY
 	reteq	r8				@ go again
-	b	1b
+	ldr	r0, [tsk, #TI_PREEMPT_LAZY]	@ get preempt lazy count
+	teq	r0, #0				@ if preempt lazy count != 0
+	beq	1b
+	ret	r8				@ go again
+
 #endif
 
 __und_fault:
diff --git a/arch/arm/kernel/signal.c b/arch/arm/kernel/signal.c
index a41e27ace391..1e29cec7716f 100644
--- a/arch/arm/kernel/signal.c
+++ b/arch/arm/kernel/signal.c
@@ -607,7 +607,8 @@ do_work_pending(struct pt_regs *regs, unsigned int thread_flags, int syscall)
 	 */
 	trace_hardirqs_off();
 	do {
-		if (likely(thread_flags & _TIF_NEED_RESCHED)) {
+		if (likely(thread_flags & (_TIF_NEED_RESCHED |
+					   _TIF_NEED_RESCHED_LAZY))) {
 			schedule();
 		} else {
 			if (unlikely(!user_mode(regs)))
diff --git a/arch/arm/kernel/smp.c b/arch/arm/kernel/smp.c
index 842427ff2b3c..b943e2df9540 100644
--- a/arch/arm/kernel/smp.c
+++ b/arch/arm/kernel/smp.c
@@ -667,9 +667,7 @@ static void do_handle_IPI(int ipinr)
 		break;
 
 	case IPI_CPU_BACKTRACE:
-		printk_deferred_enter();
 		nmi_cpu_backtrace(get_irq_regs());
-		printk_deferred_exit();
 		break;
 
 	default:
diff --git a/arch/arm/lib/bitops.h b/arch/arm/lib/bitops.h
index 95bd35991288..1698a0aaf487 100644
--- a/arch/arm/lib/bitops.h
+++ b/arch/arm/lib/bitops.h
@@ -2,7 +2,7 @@
 #include <asm/assembler.h>
 #include <asm/unwind.h>
 
-#if __LINUX_ARM_ARCH__ >= 6
+#if __LINUX_ARM_ARCH__ >= 6 && !defined(CONFIG_ARCH_OMAP3)
 	.macro	bitop, name, instr
 ENTRY(	\name		)
 UNWIND(	.fnstart	)
diff --git a/arch/arm/mach-imx/Makefile b/arch/arm/mach-imx/Makefile
index d1506ef7a537..e4d16879c539 100644
--- a/arch/arm/mach-imx/Makefile
+++ b/arch/arm/mach-imx/Makefile
@@ -68,3 +68,5 @@ obj-$(CONFIG_SOC_IMX53) += mach-imx53.o
 obj-$(CONFIG_SOC_VF610) += mach-vf610.o
 
 obj-$(CONFIG_SOC_LS1021A) += mach-ls1021a.o
+
+obj-$(CONFIG_WAGO_SYSTEM_BASED_STARTUP) += ../mach-omap2/wsysinit.o
diff --git a/arch/arm/mach-omap2/Kconfig b/arch/arm/mach-omap2/Kconfig
index 02c253de9b6e..faff984b5464 100644
--- a/arch/arm/mach-omap2/Kconfig
+++ b/arch/arm/mach-omap2/Kconfig
@@ -119,10 +119,22 @@ config ARCH_OMAP2PLUS
 	help
 	  Systems based on OMAP2, OMAP3, OMAP4 or OMAP5
 
+config WAGO_SYSTEM_BASED_STARTUP
+	bool "Wago System based startup code"
+	help
+	 Enable Wago System based startup code
+
+config IRQ_PRIORITY_TABLE
+	bool "Enable IRQ thread priority lookup"
+	help
+	 By this feature it is possible to assign custom irq thread priorities
+	 while they are created (RT_PREEMT). The flag IRQF_THREAD_TBL_LOOKUP
+	 trigger a table lookup which may succeed or fail.
+
 config OMAP_INTERCONNECT_BARRIER
 	bool
 	select ARM_HEAVY_MB
-	
+
 
 if ARCH_OMAP2PLUS
 
diff --git a/arch/arm/mach-omap2/Makefile b/arch/arm/mach-omap2/Makefile
index 8306ad686bc8..902d6ca67df6 100644
--- a/arch/arm/mach-omap2/Makefile
+++ b/arch/arm/mach-omap2/Makefile
@@ -230,3 +230,5 @@ targets += pm-asm-offsets.s
 clean-files += pm-asm-offsets.h
 
 obj-$(CONFIG_OMAP_IOMMU)		+= omap-iommu.o
+
+obj-$(CONFIG_WAGO_SYSTEM_BASED_STARTUP)  += wsysinit.o
diff --git a/arch/arm/mach-omap2/pdata-quirks.c b/arch/arm/mach-omap2/pdata-quirks.c
index 765809b214e7..4594c95f1bba 100644
--- a/arch/arm/mach-omap2/pdata-quirks.c
+++ b/arch/arm/mach-omap2/pdata-quirks.c
@@ -32,6 +32,7 @@
 #include "omap_device.h"
 #include "omap-secure.h"
 #include "soc.h"
+#include <linux/usb/musb.h>
 
 static struct omap_hsmmc_platform_data __maybe_unused mmc_pdata[2];
 
@@ -162,6 +163,58 @@ static void __init omap3_evm_legacy_init(void)
 	hsmmc2_internal_input_clk();
 }
 
+static struct omap_musb_board_data musb_board_data = {
+	.interface_type		= MUSB_INTERFACE_ULPI,
+	.mode			= MUSB_OTG,
+	.power			= 100,
+	.set_phy_power		= am35x_musb_phy_power,
+	.clear_irq		= am35x_musb_clear_irq,
+	.set_mode		= am35x_set_mode,
+	.reset			= am35x_musb_reset,
+};
+
+static struct musb_hdrc_config musb_config = {
+	.multipoint	= 1,
+	.dyn_fifo	= 1,
+	.num_eps	= 16,
+	.ram_bits	= 12,
+};
+
+static struct musb_hdrc_platform_data musb_plat = {
+	.mode		= MUSB_OTG,
+
+	/* .clock is set dynamically */
+	.config		= &musb_config,
+
+	/* REVISIT charge pump on TWL4030 can supply up to
+	 * 100 mA ... but this value is board-specific, like
+	 * "mode", and should be passed to usb_musb_init().
+	 */
+	.power		= 250,			/* up to 100 mA */
+
+	.board_data = &musb_board_data,
+	.clock = "ick",
+};
+
+static __init void am3517_evm_musb_init(void)
+{
+	u32 devconf2;
+
+	/*
+	 * Set up USB clock/mode in the DEVCONF2 register.
+	 */
+	devconf2 = omap_ctrl_readl(AM35XX_CONTROL_DEVCONF2);
+
+	/* USB2.0 PHY reference clock is 13 MHz */
+	devconf2 &= ~(CONF2_REFFREQ | CONF2_OTGMODE | CONF2_PHY_GPIOMODE);
+	devconf2 |=  CONF2_REFFREQ_13MHZ | CONF2_SESENDEN | CONF2_VBDTCTEN
+			| CONF2_DATPOL;
+
+	omap_ctrl_writel(devconf2, AM35XX_CONTROL_DEVCONF2);
+
+	pr_debug("%s: devconf2 = 0x%08x.\n", __func__, devconf2);
+}
+
 static void am35xx_enable_emac_int(void)
 {
 	u32 v;
@@ -231,6 +284,7 @@ static void __init omap3_sbc_t3517_legacy_init(void)
 static void __init am3517_evm_legacy_init(void)
 {
 	am35xx_emac_reset();
+	am3517_evm_musb_init();
 }
 
 static void __init nokia_n900_legacy_init(void)
@@ -492,6 +546,7 @@ static struct of_dev_auxdata omap_auxdata_lookup[] = {
 	OF_DEV_AUXDATA("ti,davinci_mdio", 0x5c030000, "davinci_mdio.0", NULL),
 	OF_DEV_AUXDATA("ti,am3517-emac", 0x5c000000, "davinci_emac.0",
 		       &am35xx_emac_pdata),
+	OF_DEV_AUXDATA("ti,musb-am35x", 0x5c040000, "musb-am35x.0", &musb_plat),
 	OF_DEV_AUXDATA("nokia,n900-rom-rng", 0, NULL, rx51_secure_rng_call),
 	/* McBSP modules with sidetone core */
 #if IS_ENABLED(CONFIG_SND_SOC_OMAP_MCBSP)
diff --git a/arch/arm/mach-omap2/wsysinit.c b/arch/arm/mach-omap2/wsysinit.c
new file mode 100644
index 000000000000..1f9961313546
--- /dev/null
+++ b/arch/arm/mach-omap2/wsysinit.c
@@ -0,0 +1,361 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Wago System Init Functions
+ *
+ * Copyright (C) 2014 WAGO Automation
+ *
+ * Author: Heinrich Toews
+ */
+#undef DEBUG
+
+#include <linux/irq.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/err.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+#include <linux/of_gpio.h>
+#include <linux/kobject.h>
+#include <linux/fs.h>
+#include <linux/timex.h>
+#include <asm/mach-types.h>
+#include <linux/delay.h>
+
+#ifdef CONFIG_IRQ_PRIORITY_TABLE
+#include <linux/wsysinit-prio.h>
+#endif
+
+#ifdef CONFIG_ARCH_OMAP3
+#include "soc.h"
+#endif
+
+#define	DEVICE_NAME		"wsysinit-drv"
+
+#define RESET_TIME_QUECTEL_UC20_G 200
+
+struct wsysinit_settings {
+	bool dp_reset;
+	bool modem_reset;
+	int dp_gpio_rst;
+	int modem_gpio_rst;
+	bool dp_alow;
+	const char *tty_service;
+	const char *tty_rs232_485;
+	const char *modem;
+	int drvvbus_gpio;
+	const char *board_variant;
+	u32 adjtimex_tick;
+	u32 adjtimex_frequency;
+};
+
+static struct wsysinit_settings wsysinitset = { 0,};
+
+static struct of_device_id wsysinit_dt_ids[] = {
+	{ .compatible = "wago,sysinit" },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, wsysinit_dt_ids);
+
+static int dp_trig_reset(struct wsysinit_settings *ps)
+{
+	/* check if value is valid */
+	if (ps == NULL || !gpio_is_valid(ps->dp_gpio_rst))
+		return -EINVAL;
+
+	gpiod_set_value_cansleep(gpio_to_desc(ps->dp_gpio_rst), 1);
+	mdelay(100);
+	gpiod_set_value_cansleep(gpio_to_desc(ps->dp_gpio_rst), 0);
+
+	pr_info("DPx resetted (pin is active %s)!\n", ps->dp_alow ? "low" : "high");
+
+	return 0;
+}
+
+static int modem_reset(struct wsysinit_settings *ps)
+{
+	if (ps == NULL || !gpio_is_valid(ps->modem_gpio_rst))
+		return -EINVAL;
+
+	gpiod_set_value_cansleep(gpio_to_desc(ps->modem_gpio_rst), 1);
+	mdelay(RESET_TIME_QUECTEL_UC20_G);
+	gpiod_set_value_cansleep(gpio_to_desc(ps->modem_gpio_rst), 0);
+
+	return 0;
+}
+
+static ssize_t dp_sysfs_trig_reset(struct device *dev,
+				   struct device_attribute *attr,
+				   const char *buf,
+				   size_t count)
+{
+	u32 val = simple_strtoul(buf, NULL, 10);
+
+	/* check if value is valid */
+	if (val != 1)
+		return -EINVAL;
+
+	dp_trig_reset(&wsysinitset);
+
+	return count;
+}
+
+static ssize_t modem_sysfs_reset(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf,
+				size_t count)
+{
+	u32 val = simple_strtoul(buf, NULL, 10);
+
+	if (val != 1)
+		return -EINVAL;
+
+	/* Return value omitted, because is of no value for the user of the command */
+	(void)modem_reset(&wsysinitset);
+
+	return count;
+}
+
+static int wsysinit_init_probe_dt(struct platform_device *pdev)
+{
+	int ret;
+	struct device_node *np = pdev->dev.of_node;
+	enum of_gpio_flags flags;
+	struct __kernel_timex tmx = {0};
+
+	wsysinitset.dp_reset = of_property_read_bool(np, "dp,reset");
+	wsysinitset.dp_gpio_rst = of_get_named_gpio_flags(np, "dp,gpio-rst", 0, &flags);
+	if (wsysinitset.dp_gpio_rst == -EPROBE_DEFER)
+		return -EPROBE_DEFER;
+
+	if (wsysinitset.dp_gpio_rst >= 0) {
+		int rqflags = 0;
+
+		wsysinitset.dp_alow = (flags & OF_GPIO_ACTIVE_LOW) ? 1 : 0;
+
+		if (wsysinitset.dp_alow) /* FLAG_ACTIVE_LOW ?? */
+			rqflags |= GPIOF_ACTIVE_LOW | GPIOF_OUT_INIT_LOW;
+		else
+			rqflags |= GPIOF_OUT_INIT_HIGH;
+
+		ret = devm_gpio_request_one(&pdev->dev, wsysinitset.dp_gpio_rst,
+					    rqflags | GPIOF_EXPORT_DIR_FIXED, /*   */
+					    "Profibus Reset Pin");
+		if (ret < 0) {
+			dev_err(&pdev->dev, "failed to claim DP reset pin\n");
+			return ret;
+		}
+
+		if (wsysinitset.dp_reset)
+			dp_trig_reset(&wsysinitset);
+
+	} else if (wsysinitset.dp_reset) {
+		dev_err(&pdev->dev, "failed to find DP gpio reset signal!\n");
+		return -1;
+	}
+
+	wsysinitset.modem_reset = of_property_read_bool(np, "modem,reset");
+	wsysinitset.modem_gpio_rst = of_get_named_gpio_flags(np, "modem,gpio-rst", 0, &flags);
+	if (wsysinitset.modem_gpio_rst == -EPROBE_DEFER)
+		return -EPROBE_DEFER;
+
+	if (wsysinitset.modem_gpio_rst >= 0) {
+		ret = devm_gpio_request_one(&pdev->dev, wsysinitset.modem_gpio_rst,
+						GPIOF_EXPORT_DIR_FIXED,
+						"Modem Reset Pin");
+		if (ret < 0) {
+			dev_err(&pdev->dev, "failed to claim modem reset pin\n");
+			return ret;
+		}
+
+		if (wsysinitset.modem_reset)
+			modem_reset(&wsysinitset);
+
+		/* devm_gpio_free(&pdev->dev, wsysinitset.dp_gpio_rst); */
+	} else if (wsysinitset.modem_reset) {
+		dev_err(&pdev->dev, "failed to find modem reset signal!\n");
+		return -1;
+	}
+
+	if (of_property_read_string(np, "modem,type", &wsysinitset.modem))
+		wsysinitset.modem = NULL;
+
+	if (of_property_read_string(np, "tty,service", &wsysinitset.tty_service))
+		wsysinitset.tty_service = NULL;
+
+	if (of_property_read_string(np, "tty,rs232-485", &wsysinitset.tty_rs232_485))
+		wsysinitset.tty_rs232_485 = NULL;
+
+	if (of_property_read_string(np, "board,variant", &wsysinitset.board_variant))
+		wsysinitset.board_variant = NULL;
+
+	if (!of_property_read_u32(np, "adjtimex,tick", &wsysinitset.adjtimex_tick)) {
+		tmx.modes |= ADJ_TICK;
+		tmx.tick = (__kernel_long_t) wsysinitset.adjtimex_tick;
+	}
+
+	if (!of_property_read_u32(np, "adjtimex,frequency", &wsysinitset.adjtimex_frequency)) {
+		tmx.modes |= ADJ_FREQUENCY;
+		tmx.freq = (__kernel_long_t) wsysinitset.adjtimex_frequency;
+	}
+
+	if (tmx.modes) {
+		do_adjtimex(&tmx);
+
+		pr_debug("%s: adjtimex: tick %u, frequency %u\n", __func__,
+			 wsysinitset.adjtimex_tick, wsysinitset.adjtimex_frequency);
+	}
+
+	return 0;
+}
+
+/* WSYSINIT Specific Kernel Parameters */
+
+char *__wsysinit_bootversion = NULL;
+core_param(bootversion, __wsysinit_bootversion, charp, 0);
+EXPORT_SYMBOL(__wsysinit_bootversion);
+
+/* WSYSINIT SYSFS Init */
+
+static dev_t wsysinit_sysfs_dev;
+struct class* wsysinit_sysfs_class = NULL;
+struct device* wsysinit_sysfs_device = NULL;
+EXPORT_SYMBOL(wsysinit_sysfs_class);
+EXPORT_SYMBOL(wsysinit_sysfs_device);
+
+ssize_t wsysinit_sysfs_bootversion_show(struct device* dev, struct device_attribute* attr, char* buf)
+{
+	if (__wsysinit_bootversion)
+		sprintf (buf, "%s\n", __wsysinit_bootversion);
+	else
+		sprintf (buf, "unknown\n");
+	return strlen(buf);
+}
+
+ssize_t wsysinit_sysfs_tty_service_show(struct device* dev, struct device_attribute* attr, char* buf)
+{
+	if (wsysinitset.tty_service)
+		sprintf(buf, "%s\n", wsysinitset.tty_service);
+	else
+		sprintf(buf, "%s\n", "unknown");
+
+	return strlen(buf);
+}
+
+ssize_t wsysinit_sysfs_tty_rs232_485_show(struct device* dev, struct device_attribute* attr, char* buf)
+{
+	if (wsysinitset.tty_rs232_485)
+		sprintf(buf, "%s\n", wsysinitset.tty_rs232_485);
+	else
+		sprintf(buf, "%s\n", "unknown");
+
+	return strlen(buf);
+}
+
+ssize_t wsysinit_sysfs_board_variant_show(struct device* dev, struct device_attribute* attr, char* buf)
+{
+	if (wsysinitset.board_variant)
+		sprintf(buf, "%s\n", wsysinitset.board_variant);
+	else
+		sprintf(buf, "%s\n", "unknown");
+
+	return strlen(buf);
+}
+
+DEVICE_ATTR (     bootversion , 0444,     wsysinit_sysfs_bootversion_show, NULL);
+DEVICE_ATTR (    tty_service  , 0444,     wsysinit_sysfs_tty_service_show, NULL);
+DEVICE_ATTR (    tty_rs232_485, 0444,   wsysinit_sysfs_tty_rs232_485_show, NULL);
+DEVICE_ATTR (    dp_trig_reset, 0200,               NULL, dp_sysfs_trig_reset);
+DEVICE_ATTR (    board_variant, 0444,   wsysinit_sysfs_board_variant_show, NULL);
+DEVICE_ATTR (      modem_reset, 0200,               NULL, modem_sysfs_reset);
+
+static void wsysinit_sysfs_init(void)
+{
+	device_create_file(wsysinit_sysfs_device, &dev_attr_bootversion);
+	device_create_file(wsysinit_sysfs_device, &dev_attr_dp_trig_reset);
+	device_create_file(wsysinit_sysfs_device, &dev_attr_board_variant);
+
+	if (wsysinitset.modem)
+		device_create_file(wsysinit_sysfs_device, &dev_attr_modem_reset);
+
+	if (wsysinitset.tty_service)
+		device_create_file(wsysinit_sysfs_device, &dev_attr_tty_service);
+
+	if (wsysinitset.tty_rs232_485)
+		device_create_file(wsysinit_sysfs_device, &dev_attr_tty_rs232_485);
+
+#ifdef CONFIG_IRQ_PRIORITY_TABLE
+	wsysinit_tbl_sysfs_init();
+#endif
+}
+
+static int wsysinit_init_probe(struct platform_device *pdev)
+{
+	int rc;
+
+	if (!pdev->dev.of_node) {
+		dev_err(&pdev->dev, "WSYSINIT Init: No DT node found!\n");
+		return -1;
+	}
+
+	rc = wsysinit_init_probe_dt(pdev);
+	if (rc < 0) {
+		dev_err(&pdev->dev, "failed to probe DT parameters\n");
+		return rc;
+	}
+
+	wsysinit_sysfs_init();
+
+	pr_info("Wago WSYSINIT Init: %s probed.\n", pdev->dev.of_node->name);
+
+	return 0;
+}
+
+static int wsysinit_init_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static struct platform_driver wsysinit_init_driver = {
+	.probe		= wsysinit_init_probe,
+	.remove		= wsysinit_init_remove,
+	.driver		= {
+		.name	= DEVICE_NAME,
+		.owner	= THIS_MODULE,
+		.of_match_table = of_match_ptr(wsysinit_dt_ids),
+	},
+};
+
+static __init int wsysinit_init(void)
+{
+	pr_info("WSYSINIT: create sysfs entries\n");
+
+	wsysinit_sysfs_class = class_create (THIS_MODULE, "wago");
+	if (IS_ERR(wsysinit_sysfs_class)) {
+
+		pr_err("%s: class_create: error %li\n",
+			__func__, PTR_ERR(wsysinit_sysfs_class));
+		unregister_chrdev_region(wsysinit_sysfs_dev, 1);
+		return -1;
+	}
+
+	wsysinit_sysfs_device = device_create (wsysinit_sysfs_class, NULL,
+					wsysinit_sysfs_dev, NULL, "system");
+
+	return platform_driver_register(&wsysinit_init_driver);
+}
+
+static __exit void wsysinit_exit(void)
+{
+	platform_driver_unregister(&wsysinit_init_driver);
+}
+
+#ifdef CONFIG_ARCH_OMAP3
+omap_postcore_initcall(wsysinit_init);
+#else
+postcore_initcall(wsysinit_init);
+#endif
+
+module_exit(wsysinit_exit);
diff --git a/arch/arm/mach-stm32/Makefile b/arch/arm/mach-stm32/Makefile
index c80d80c199d3..c0951426ec96 100644
--- a/arch/arm/mach-stm32/Makefile
+++ b/arch/arm/mach-stm32/Makefile
@@ -1,2 +1,3 @@
 # SPDX-License-Identifier: GPL-2.0-only
 obj-y += board-dt.o
+obj-$(CONFIG_WAGO_SYSTEM_BASED_STARTUP) += ../mach-omap2/wsysinit.o
diff --git a/arch/arm/mm/alignment.c b/arch/arm/mm/alignment.c
index ea81e89e7740..f6e611aa6a04 100644
--- a/arch/arm/mm/alignment.c
+++ b/arch/arm/mm/alignment.c
@@ -870,6 +870,7 @@ do_alignment(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 		break;
 
 	case 0x04000000:	/* ldr or str immediate */
+	case 0x0C000000:	/* ldr | str float */
 		if (COND_BITS(instr) == 0xf0000000) /* NEON VLDn, VSTn */
 			goto bad;
 		offset.un = OFFSET_BITS(instr);
diff --git a/arch/arm/mm/fault.c b/arch/arm/mm/fault.c
index efa402025031..59487ee9fd61 100644
--- a/arch/arm/mm/fault.c
+++ b/arch/arm/mm/fault.c
@@ -400,6 +400,9 @@ do_translation_fault(unsigned long addr, unsigned int fsr,
 	if (addr < TASK_SIZE)
 		return do_page_fault(addr, fsr, regs);
 
+	if (interrupts_enabled(regs))
+		local_irq_enable();
+
 	if (user_mode(regs))
 		goto bad_area;
 
@@ -470,6 +473,9 @@ do_translation_fault(unsigned long addr, unsigned int fsr,
 static int
 do_sect_fault(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 {
+	if (interrupts_enabled(regs))
+		local_irq_enable();
+
 	do_bad_area(addr, fsr, regs);
 	return 0;
 }
diff --git a/arch/arm/plat-omap/counter_32k.c b/arch/arm/plat-omap/counter_32k.c
index 7a729ade2105..c2be57b80052 100644
--- a/arch/arm/plat-omap/counter_32k.c
+++ b/arch/arm/plat-omap/counter_32k.c
@@ -16,6 +16,7 @@
 #include <linux/io.h>
 #include <linux/clocksource.h>
 #include <linux/sched_clock.h>
+#include <linux/of.h>
 
 #include <asm/mach/time.h>
 
@@ -67,6 +68,8 @@ static void omap_read_persistent_clock64(struct timespec64 *ts)
 	*ts = persistent_ts;
 }
 
+#define OMAP2_32KSYNCNT_FREQ       32768
+
 /**
  * omap_init_clocksource_32k - setup and register counter 32k as a
  * kernel clocksource
@@ -79,7 +82,18 @@ static void omap_read_persistent_clock64(struct timespec64 *ts)
 int __init omap_init_clocksource_32k(void __iomem *vbase)
 {
 	int ret;
+	int omap2_32ksyncnt = OMAP2_32KSYNCNT_FREQ;
 
+	/*
+	 * We use internal 32k generation which is based on sys_xtal 26Mhz
+	 * external clock which is divided by 800 to provide a 32k like clock.
+	 * The theoretical value is 26000000/800 = 32500.
+	 * Empirical value is 32498.50669 ~ rounded integer would be 32499.
+	 * We use that one. This should give us a drifting of appr.
+	 * 14 ppm ~ 7.5 min/year.
+	 */
+	if (of_machine_is_compatible("wago,am3505-pfc"))
+		omap2_32ksyncnt = 32499;
 	/*
 	 * 32k sync Counter IP register offsets vary between the
 	 * highlander version and the legacy ones.
@@ -97,18 +111,18 @@ int __init omap_init_clocksource_32k(void __iomem *vbase)
 	 * __clocksource_update_freq_scale.
 	 */
 	clocks_calc_mult_shift(&persistent_mult, &persistent_shift,
-			32768, NSEC_PER_SEC, 120000);
+			omap2_32ksyncnt, NSEC_PER_SEC, 120000);
 
-	ret = clocksource_mmio_init(sync32k_cnt_reg, "32k_counter", 32768,
+	ret = clocksource_mmio_init(sync32k_cnt_reg, "32k_counter", omap2_32ksyncnt,
 				250, 32, clocksource_mmio_readl_up);
 	if (ret) {
 		pr_err("32k_counter: can't register clocksource\n");
 		return ret;
 	}
 
-	sched_clock_register(omap_32k_read_sched_clock, 32, 32768);
+	sched_clock_register(omap_32k_read_sched_clock, 32, omap2_32ksyncnt);
 	register_persistent_clock(omap_read_persistent_clock64);
-	pr_info("OMAP clocksource: 32k_counter at 32768 Hz\n");
+	pr_info("OMAP clocksource: 32k_counter at %d Hz\n", omap2_32ksyncnt);
 
 	return 0;
 }
diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index 0758ea0717f9..ce63a0d3ad42 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -88,6 +88,7 @@ config ARM64
 	select ARCH_SUPPORTS_ATOMIC_RMW
 	select ARCH_SUPPORTS_INT128 if CC_HAS_INT128
 	select ARCH_SUPPORTS_NUMA_BALANCING
+	select ARCH_SUPPORTS_RT if HAVE_POSIX_CPU_TIMERS_TASK_WORK
 	select ARCH_WANT_COMPAT_IPC_PARSE_VERSION if COMPAT
 	select ARCH_WANT_DEFAULT_BPF_JIT
 	select ARCH_WANT_DEFAULT_TOPDOWN_MMAP_LAYOUT
@@ -192,6 +193,7 @@ config ARM64
 	select HAVE_PERF_REGS
 	select HAVE_PERF_USER_STACK_DUMP
 	select HAVE_REGS_AND_STACK_ACCESS_API
+	select HAVE_PREEMPT_LAZY
 	select HAVE_FUNCTION_ARG_ACCESS_API
 	select HAVE_FUTEX_CMPXCHG if FUTEX
 	select MMU_GATHER_RCU_TABLE_FREE
@@ -213,6 +215,7 @@ config ARM64
 	select PCI_DOMAINS_GENERIC if PCI
 	select PCI_ECAM if (ACPI && PCI)
 	select PCI_SYSCALL if PCI
+	select HAVE_POSIX_CPU_TIMERS_TASK_WORK if !KVM
 	select POWER_RESET
 	select POWER_SUPPLY
 	select SPARSE_IRQ
diff --git a/arch/arm64/include/asm/pgtable.h b/arch/arm64/include/asm/pgtable.h
index 72f95c6a7051..30fe8c324ce6 100644
--- a/arch/arm64/include/asm/pgtable.h
+++ b/arch/arm64/include/asm/pgtable.h
@@ -1001,7 +1001,7 @@ static inline void update_mmu_cache(struct vm_area_struct *vma,
  */
 static inline bool arch_faults_on_old_pte(void)
 {
-	WARN_ON(preemptible());
+	WARN_ON(is_migratable());
 
 	return !cpu_has_hw_af();
 }
diff --git a/arch/arm64/include/asm/preempt.h b/arch/arm64/include/asm/preempt.h
index e83f0982b99c..2545c17281e1 100644
--- a/arch/arm64/include/asm/preempt.h
+++ b/arch/arm64/include/asm/preempt.h
@@ -70,13 +70,36 @@ static inline bool __preempt_count_dec_and_test(void)
 	 * interrupt occurring between the non-atomic READ_ONCE/WRITE_ONCE
 	 * pair.
 	 */
-	return !pc || !READ_ONCE(ti->preempt_count);
+	if (!pc || !READ_ONCE(ti->preempt_count))
+		return true;
+#ifdef CONFIG_PREEMPT_LAZY
+	if ((pc & ~PREEMPT_NEED_RESCHED))
+		return false;
+	if (current_thread_info()->preempt_lazy_count)
+		return false;
+	return test_thread_flag(TIF_NEED_RESCHED_LAZY);
+#else
+	return false;
+#endif
 }
 
 static inline bool should_resched(int preempt_offset)
 {
+#ifdef CONFIG_PREEMPT_LAZY
+	u64 pc = READ_ONCE(current_thread_info()->preempt_count);
+	if (pc == preempt_offset)
+		return true;
+
+	if ((pc & ~PREEMPT_NEED_RESCHED) != preempt_offset)
+		return false;
+
+	if (current_thread_info()->preempt_lazy_count)
+		return false;
+	return test_thread_flag(TIF_NEED_RESCHED_LAZY);
+#else
 	u64 pc = READ_ONCE(current_thread_info()->preempt_count);
 	return pc == preempt_offset;
+#endif
 }
 
 #ifdef CONFIG_PREEMPTION
diff --git a/arch/arm64/include/asm/signal.h b/arch/arm64/include/asm/signal.h
index ef449f5f4ba8..5e535c3e4926 100644
--- a/arch/arm64/include/asm/signal.h
+++ b/arch/arm64/include/asm/signal.h
@@ -22,4 +22,8 @@ static inline void __user *arch_untagged_si_addr(void __user *addr,
 }
 #define arch_untagged_si_addr arch_untagged_si_addr
 
+#if defined(CONFIG_PREEMPT_RT)
+#define ARCH_RT_DELAYS_SIGNAL_SEND
+#endif
+
 #endif
diff --git a/arch/arm64/include/asm/spinlock_types.h b/arch/arm64/include/asm/spinlock_types.h
index 18782f0c4721..11ab1c077697 100644
--- a/arch/arm64/include/asm/spinlock_types.h
+++ b/arch/arm64/include/asm/spinlock_types.h
@@ -5,7 +5,7 @@
 #ifndef __ASM_SPINLOCK_TYPES_H
 #define __ASM_SPINLOCK_TYPES_H
 
-#if !defined(__LINUX_SPINLOCK_TYPES_H) && !defined(__ASM_SPINLOCK_H)
+#if !defined(__LINUX_SPINLOCK_TYPES_RAW_H) && !defined(__ASM_SPINLOCK_H)
 # error "please don't include this file directly"
 #endif
 
diff --git a/arch/arm64/include/asm/thread_info.h b/arch/arm64/include/asm/thread_info.h
index 6623c99f0984..c55ccec33a5a 100644
--- a/arch/arm64/include/asm/thread_info.h
+++ b/arch/arm64/include/asm/thread_info.h
@@ -26,6 +26,7 @@ struct thread_info {
 #ifdef CONFIG_ARM64_SW_TTBR0_PAN
 	u64			ttbr0;		/* saved TTBR0_EL1 */
 #endif
+	int			preempt_lazy_count;	/* 0 => preemptable, <0 => bug */
 	union {
 		u64		preempt_count;	/* 0 => preemptible, <0 => bug */
 		struct {
@@ -67,6 +68,7 @@ int arch_dup_task_struct(struct task_struct *dst,
 #define TIF_UPROBE		4	/* uprobe breakpoint or singlestep */
 #define TIF_MTE_ASYNC_FAULT	5	/* MTE Asynchronous Tag Check Fault */
 #define TIF_NOTIFY_SIGNAL	6	/* signal notifications exist */
+#define TIF_NEED_RESCHED_LAZY	7
 #define TIF_SYSCALL_TRACE	8	/* syscall trace active */
 #define TIF_SYSCALL_AUDIT	9	/* syscall auditing */
 #define TIF_SYSCALL_TRACEPOINT	10	/* syscall tracepoint for ftrace */
@@ -97,8 +99,10 @@ int arch_dup_task_struct(struct task_struct *dst,
 #define _TIF_SVE		(1 << TIF_SVE)
 #define _TIF_MTE_ASYNC_FAULT	(1 << TIF_MTE_ASYNC_FAULT)
 #define _TIF_NOTIFY_SIGNAL	(1 << TIF_NOTIFY_SIGNAL)
+#define _TIF_NEED_RESCHED_LAZY	(1 << TIF_NEED_RESCHED_LAZY)
 
-#define _TIF_WORK_MASK		(_TIF_NEED_RESCHED | _TIF_SIGPENDING | \
+#define _TIF_WORK_MASK		(_TIF_NEED_RESCHED | _TIF_NEED_RESCHED_LAZY | \
+				 _TIF_SIGPENDING | \
 				 _TIF_NOTIFY_RESUME | _TIF_FOREIGN_FPSTATE | \
 				 _TIF_UPROBE | _TIF_MTE_ASYNC_FAULT | \
 				 _TIF_NOTIFY_SIGNAL)
@@ -107,6 +111,8 @@ int arch_dup_task_struct(struct task_struct *dst,
 				 _TIF_SYSCALL_TRACEPOINT | _TIF_SECCOMP | \
 				 _TIF_SYSCALL_EMU)
 
+#define _TIF_NEED_RESCHED_MASK	(_TIF_NEED_RESCHED | _TIF_NEED_RESCHED_LAZY)
+
 #ifdef CONFIG_SHADOW_CALL_STACK
 #define INIT_SCS							\
 	.scs_base	= init_shadow_call_stack,			\
diff --git a/arch/arm64/kernel/asm-offsets.c b/arch/arm64/kernel/asm-offsets.c
index 551427ae8cc5..96a4f6c9eb78 100644
--- a/arch/arm64/kernel/asm-offsets.c
+++ b/arch/arm64/kernel/asm-offsets.c
@@ -31,6 +31,7 @@ int main(void)
   BLANK();
   DEFINE(TSK_TI_FLAGS,		offsetof(struct task_struct, thread_info.flags));
   DEFINE(TSK_TI_PREEMPT,	offsetof(struct task_struct, thread_info.preempt_count));
+  DEFINE(TSK_TI_PREEMPT_LAZY,	offsetof(struct task_struct, thread_info.preempt_lazy_count));
 #ifdef CONFIG_ARM64_SW_TTBR0_PAN
   DEFINE(TSK_TI_TTBR0,		offsetof(struct task_struct, thread_info.ttbr0));
 #endif
diff --git a/arch/arm64/kernel/fpsimd.c b/arch/arm64/kernel/fpsimd.c
index ff4962750b3d..99484e8bbade 100644
--- a/arch/arm64/kernel/fpsimd.c
+++ b/arch/arm64/kernel/fpsimd.c
@@ -179,10 +179,19 @@ static void __get_cpu_fpsimd_context(void)
  *
  * The double-underscore version must only be called if you know the task
  * can't be preempted.
+ *
+ * On RT kernels local_bh_disable() is not sufficient because it only
+ * serializes soft interrupt related sections via a local lock, but stays
+ * preemptible. Disabling preemption is the right choice here as bottom
+ * half processing is always in thread context on RT kernels so it
+ * implicitly prevents bottom half processing as well.
  */
 static void get_cpu_fpsimd_context(void)
 {
-	local_bh_disable();
+	if (!IS_ENABLED(CONFIG_PREEMPT_RT))
+		local_bh_disable();
+	else
+		preempt_disable();
 	__get_cpu_fpsimd_context();
 }
 
@@ -203,7 +212,10 @@ static void __put_cpu_fpsimd_context(void)
 static void put_cpu_fpsimd_context(void)
 {
 	__put_cpu_fpsimd_context();
-	local_bh_enable();
+	if (!IS_ENABLED(CONFIG_PREEMPT_RT))
+		local_bh_enable();
+	else
+		preempt_enable();
 }
 
 static bool have_cpu_fpsimd_context(void)
@@ -1033,6 +1045,7 @@ void fpsimd_thread_switch(struct task_struct *next)
 void fpsimd_flush_thread(void)
 {
 	int vl, supported_vl;
+	void *sve_state = NULL;
 
 	if (!system_supports_fpsimd())
 		return;
@@ -1045,7 +1058,10 @@ void fpsimd_flush_thread(void)
 
 	if (system_supports_sve()) {
 		clear_thread_flag(TIF_SVE);
-		sve_free(current);
+
+		/* Defer kfree() while in atomic context */
+		sve_state = current->thread.sve_state;
+		current->thread.sve_state = NULL;
 
 		/*
 		 * Reset the task vector length as required.
@@ -1079,6 +1095,7 @@ void fpsimd_flush_thread(void)
 	}
 
 	put_cpu_fpsimd_context();
+	kfree(sve_state);
 }
 
 /*
diff --git a/arch/arm64/kernel/signal.c b/arch/arm64/kernel/signal.c
index c287b9407f28..1d65f2801e13 100644
--- a/arch/arm64/kernel/signal.c
+++ b/arch/arm64/kernel/signal.c
@@ -920,7 +920,7 @@ static void do_signal(struct pt_regs *regs)
 void do_notify_resume(struct pt_regs *regs, unsigned long thread_flags)
 {
 	do {
-		if (thread_flags & _TIF_NEED_RESCHED) {
+		if (thread_flags & _TIF_NEED_RESCHED_MASK) {
 			/* Unmask Debug and SError for the next task */
 			local_daif_restore(DAIF_PROCCTX_NOIRQ);
 
@@ -928,6 +928,14 @@ void do_notify_resume(struct pt_regs *regs, unsigned long thread_flags)
 		} else {
 			local_daif_restore(DAIF_PROCCTX);
 
+#ifdef ARCH_RT_DELAYS_SIGNAL_SEND
+			if (unlikely(current->forced_info.si_signo)) {
+				struct task_struct *t = current;
+				force_sig_info(&t->forced_info);
+				t->forced_info.si_signo = 0;
+			}
+#endif
+
 			if (thread_flags & _TIF_UPROBE)
 				uprobe_notify_resume(regs);
 
diff --git a/arch/arm64/kvm/arm.c b/arch/arm64/kvm/arm.c
index 9b328bb05596..12b29d851012 100644
--- a/arch/arm64/kvm/arm.c
+++ b/arch/arm64/kvm/arm.c
@@ -811,7 +811,7 @@ int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu)
 		 * involves poking the GIC, which must be done in a
 		 * non-preemptible context.
 		 */
-		preempt_disable();
+		migrate_disable();
 
 		kvm_pmu_flush_hwstate(vcpu);
 
@@ -835,7 +835,7 @@ int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu)
 				kvm_timer_sync_user(vcpu);
 			kvm_vgic_sync_hwstate(vcpu);
 			local_irq_enable();
-			preempt_enable();
+			migrate_enable();
 			continue;
 		}
 
@@ -907,7 +907,7 @@ int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu)
 		/* Exit types that need handling before we can be preempted */
 		handle_exit_early(vcpu, ret);
 
-		preempt_enable();
+		migrate_enable();
 
 		/*
 		 * The ARMv8 architecture doesn't give the hypervisor
diff --git a/arch/csky/include/asm/spinlock_types.h b/arch/csky/include/asm/spinlock_types.h
index 8ff0f6ff3a00..db87a12c3827 100644
--- a/arch/csky/include/asm/spinlock_types.h
+++ b/arch/csky/include/asm/spinlock_types.h
@@ -3,7 +3,7 @@
 #ifndef __ASM_CSKY_SPINLOCK_TYPES_H
 #define __ASM_CSKY_SPINLOCK_TYPES_H
 
-#ifndef __LINUX_SPINLOCK_TYPES_H
+#ifndef __LINUX_SPINLOCK_TYPES_RAW_H
 # error "please don't include this file directly"
 #endif
 
diff --git a/arch/hexagon/include/asm/spinlock_types.h b/arch/hexagon/include/asm/spinlock_types.h
index 19d233497ba5..d5f66495b670 100644
--- a/arch/hexagon/include/asm/spinlock_types.h
+++ b/arch/hexagon/include/asm/spinlock_types.h
@@ -8,7 +8,7 @@
 #ifndef _ASM_SPINLOCK_TYPES_H
 #define _ASM_SPINLOCK_TYPES_H
 
-#ifndef __LINUX_SPINLOCK_TYPES_H
+#ifndef __LINUX_SPINLOCK_TYPES_RAW_H
 # error "please don't include this file directly"
 #endif
 
diff --git a/arch/ia64/include/asm/spinlock_types.h b/arch/ia64/include/asm/spinlock_types.h
index 6e345fefcdca..14b8a161c165 100644
--- a/arch/ia64/include/asm/spinlock_types.h
+++ b/arch/ia64/include/asm/spinlock_types.h
@@ -2,7 +2,7 @@
 #ifndef _ASM_IA64_SPINLOCK_TYPES_H
 #define _ASM_IA64_SPINLOCK_TYPES_H
 
-#ifndef __LINUX_SPINLOCK_TYPES_H
+#ifndef __LINUX_SPINLOCK_TYPES_RAW_H
 # error "please don't include this file directly"
 #endif
 
diff --git a/arch/powerpc/Kconfig b/arch/powerpc/Kconfig
index 6b9f523882c5..3eec2a6395e4 100644
--- a/arch/powerpc/Kconfig
+++ b/arch/powerpc/Kconfig
@@ -151,6 +151,7 @@ config PPC
 	select ARCH_STACKWALK
 	select ARCH_SUPPORTS_ATOMIC_RMW
 	select ARCH_SUPPORTS_DEBUG_PAGEALLOC	if PPC_BOOK3S || PPC_8xx || 40x
+	select ARCH_SUPPORTS_RT			if HAVE_POSIX_CPU_TIMERS_TASK_WORK
 	select ARCH_USE_BUILTIN_BSWAP
 	select ARCH_USE_CMPXCHG_LOCKREF		if PPC64
 	select ARCH_USE_MEMTEST
@@ -219,6 +220,7 @@ config PPC
 	select HAVE_IOREMAP_PROT
 	select HAVE_IRQ_EXIT_ON_IRQ_STACK
 	select HAVE_IRQ_TIME_ACCOUNTING
+	select HAVE_POSIX_CPU_TIMERS_TASK_WORK	if !KVM
 	select HAVE_KERNEL_GZIP
 	select HAVE_KERNEL_LZMA			if DEFAULT_UIMAGE
 	select HAVE_KERNEL_LZO			if DEFAULT_UIMAGE
@@ -235,6 +237,7 @@ config PPC
 	select HAVE_PERF_EVENTS_NMI		if PPC64
 	select HAVE_PERF_REGS
 	select HAVE_PERF_USER_STACK_DUMP
+	select HAVE_PREEMPT_LAZY
 	select HAVE_REGS_AND_STACK_ACCESS_API
 	select HAVE_RELIABLE_STACKTRACE
 	select HAVE_RSEQ
diff --git a/arch/powerpc/include/asm/simple_spinlock_types.h b/arch/powerpc/include/asm/simple_spinlock_types.h
index 0f3cdd8faa95..08243338069d 100644
--- a/arch/powerpc/include/asm/simple_spinlock_types.h
+++ b/arch/powerpc/include/asm/simple_spinlock_types.h
@@ -2,7 +2,7 @@
 #ifndef _ASM_POWERPC_SIMPLE_SPINLOCK_TYPES_H
 #define _ASM_POWERPC_SIMPLE_SPINLOCK_TYPES_H
 
-#ifndef __LINUX_SPINLOCK_TYPES_H
+#ifndef __LINUX_SPINLOCK_TYPES_RAW_H
 # error "please don't include this file directly"
 #endif
 
diff --git a/arch/powerpc/include/asm/smp.h b/arch/powerpc/include/asm/smp.h
index 7ef1cd8168a0..f9e63cacd220 100644
--- a/arch/powerpc/include/asm/smp.h
+++ b/arch/powerpc/include/asm/smp.h
@@ -62,6 +62,7 @@ struct smp_ops_t {
 
 extern int smp_send_nmi_ipi(int cpu, void (*fn)(struct pt_regs *), u64 delay_us);
 extern int smp_send_safe_nmi_ipi(int cpu, void (*fn)(struct pt_regs *), u64 delay_us);
+extern void smp_send_debugger_break_cpu(unsigned int cpu);
 extern void smp_send_debugger_break(void);
 extern void start_secondary_resume(void);
 extern void smp_generic_give_timebase(void);
diff --git a/arch/powerpc/include/asm/spinlock_types.h b/arch/powerpc/include/asm/spinlock_types.h
index c5d742f18021..d5f8a74ed2e8 100644
--- a/arch/powerpc/include/asm/spinlock_types.h
+++ b/arch/powerpc/include/asm/spinlock_types.h
@@ -2,7 +2,7 @@
 #ifndef _ASM_POWERPC_SPINLOCK_TYPES_H
 #define _ASM_POWERPC_SPINLOCK_TYPES_H
 
-#ifndef __LINUX_SPINLOCK_TYPES_H
+#ifndef __LINUX_SPINLOCK_TYPES_RAW_H
 # error "please don't include this file directly"
 #endif
 
diff --git a/arch/powerpc/include/asm/stackprotector.h b/arch/powerpc/include/asm/stackprotector.h
index 1c8460e23583..b1653c160bab 100644
--- a/arch/powerpc/include/asm/stackprotector.h
+++ b/arch/powerpc/include/asm/stackprotector.h
@@ -24,7 +24,11 @@ static __always_inline void boot_init_stack_canary(void)
 	unsigned long canary;
 
 	/* Try to get a semi random initial value. */
+#ifdef CONFIG_PREEMPT_RT
+	canary = (unsigned long)&canary;
+#else
 	canary = get_random_canary();
+#endif
 	canary ^= mftb();
 	canary ^= LINUX_VERSION_CODE;
 	canary &= CANARY_MASK;
diff --git a/arch/powerpc/include/asm/thread_info.h b/arch/powerpc/include/asm/thread_info.h
index 2a4ea0e213a9..75309a76b335 100644
--- a/arch/powerpc/include/asm/thread_info.h
+++ b/arch/powerpc/include/asm/thread_info.h
@@ -47,6 +47,8 @@
 struct thread_info {
 	int		preempt_count;		/* 0 => preemptable,
 						   <0 => BUG */
+	int             preempt_lazy_count;	/* 0 => preemptable,
+						   <0 => BUG */
 	unsigned long	local_flags;		/* private flags for thread */
 #ifdef CONFIG_LIVEPATCH
 	unsigned long *livepatch_sp;
@@ -93,6 +95,7 @@ void arch_setup_new_exec(void);
 #define TIF_PATCH_PENDING	6	/* pending live patching update */
 #define TIF_SYSCALL_AUDIT	7	/* syscall auditing active */
 #define TIF_SINGLESTEP		8	/* singlestepping active */
+#define TIF_NEED_RESCHED_LAZY	9	/* lazy rescheduling necessary */
 #define TIF_SECCOMP		10	/* secure computing */
 #define TIF_RESTOREALL		11	/* Restore all regs (implies NOERROR) */
 #define TIF_NOERROR		12	/* Force successful syscall return */
@@ -108,6 +111,7 @@ void arch_setup_new_exec(void);
 #define TIF_POLLING_NRFLAG	19	/* true if poll_idle() is polling TIF_NEED_RESCHED */
 #define TIF_32BIT		20	/* 32 bit binary */
 
+
 /* as above, but as bit values */
 #define _TIF_SYSCALL_TRACE	(1<<TIF_SYSCALL_TRACE)
 #define _TIF_SIGPENDING		(1<<TIF_SIGPENDING)
@@ -119,6 +123,7 @@ void arch_setup_new_exec(void);
 #define _TIF_PATCH_PENDING	(1<<TIF_PATCH_PENDING)
 #define _TIF_SYSCALL_AUDIT	(1<<TIF_SYSCALL_AUDIT)
 #define _TIF_SINGLESTEP		(1<<TIF_SINGLESTEP)
+#define _TIF_NEED_RESCHED_LAZY	(1<<TIF_NEED_RESCHED_LAZY)
 #define _TIF_SECCOMP		(1<<TIF_SECCOMP)
 #define _TIF_RESTOREALL		(1<<TIF_RESTOREALL)
 #define _TIF_NOERROR		(1<<TIF_NOERROR)
@@ -132,10 +137,12 @@ void arch_setup_new_exec(void);
 				 _TIF_SYSCALL_EMU)
 
 #define _TIF_USER_WORK_MASK	(_TIF_SIGPENDING | _TIF_NEED_RESCHED | \
+				 _TIF_NEED_RESCHED_LAZY | \
 				 _TIF_NOTIFY_RESUME | _TIF_UPROBE | \
 				 _TIF_RESTORE_TM | _TIF_PATCH_PENDING | \
 				 _TIF_NOTIFY_SIGNAL)
 #define _TIF_PERSYSCALL_MASK	(_TIF_RESTOREALL|_TIF_NOERROR)
+#define _TIF_NEED_RESCHED_MASK	(_TIF_NEED_RESCHED | _TIF_NEED_RESCHED_LAZY)
 
 /* Bits in local_flags */
 /* Don't move TLF_NAPPING without adjusting the code in entry_32.S */
diff --git a/arch/powerpc/kernel/interrupt.c b/arch/powerpc/kernel/interrupt.c
index df048e331cbf..a81225f476a7 100644
--- a/arch/powerpc/kernel/interrupt.c
+++ b/arch/powerpc/kernel/interrupt.c
@@ -346,7 +346,7 @@ interrupt_exit_user_prepare_main(unsigned long ret, struct pt_regs *regs)
 	ti_flags = READ_ONCE(current_thread_info()->flags);
 	while (unlikely(ti_flags & (_TIF_USER_WORK_MASK & ~_TIF_RESTORE_TM))) {
 		local_irq_enable();
-		if (ti_flags & _TIF_NEED_RESCHED) {
+		if (ti_flags & _TIF_NEED_RESCHED_MASK) {
 			schedule();
 		} else {
 			/*
@@ -552,11 +552,15 @@ notrace unsigned long interrupt_exit_kernel_prepare(struct pt_regs *regs)
 		/* Returning to a kernel context with local irqs enabled. */
 		WARN_ON_ONCE(!(regs->msr & MSR_EE));
 again:
-		if (IS_ENABLED(CONFIG_PREEMPT)) {
+		if (IS_ENABLED(CONFIG_PREEMPTION)) {
 			/* Return to preemptible kernel context */
 			if (unlikely(current_thread_info()->flags & _TIF_NEED_RESCHED)) {
 				if (preempt_count() == 0)
 					preempt_schedule_irq();
+			} else if (unlikely(current_thread_info()->flags & _TIF_NEED_RESCHED_LAZY)) {
+				if ((preempt_count() == 0) &&
+				    (current_thread_info()->preempt_lazy_count == 0))
+					preempt_schedule_irq();
 			}
 		}
 
diff --git a/arch/powerpc/kernel/irq.c b/arch/powerpc/kernel/irq.c
index c4f1d6b7d992..02e17a57da83 100644
--- a/arch/powerpc/kernel/irq.c
+++ b/arch/powerpc/kernel/irq.c
@@ -690,6 +690,7 @@ static inline void check_stack_overflow(void)
 	}
 }
 
+#ifndef CONFIG_PREEMPT_RT
 static __always_inline void call_do_softirq(const void *sp)
 {
 	/* Temporarily switch r1 to sp, call __do_softirq() then restore r1. */
@@ -708,6 +709,7 @@ static __always_inline void call_do_softirq(const void *sp)
 		   "r11", "r12"
 	);
 }
+#endif
 
 static __always_inline void call_do_irq(struct pt_regs *regs, void *sp)
 {
@@ -820,10 +822,12 @@ void *mcheckirq_ctx[NR_CPUS] __read_mostly;
 void *softirq_ctx[NR_CPUS] __read_mostly;
 void *hardirq_ctx[NR_CPUS] __read_mostly;
 
+#ifndef CONFIG_PREEMPT_RT
 void do_softirq_own_stack(void)
 {
 	call_do_softirq(softirq_ctx[smp_processor_id()]);
 }
+#endif
 
 irq_hw_number_t virq_to_hw(unsigned int virq)
 {
diff --git a/arch/powerpc/kernel/kgdb.c b/arch/powerpc/kernel/kgdb.c
index bdee7262c080..d57d37497862 100644
--- a/arch/powerpc/kernel/kgdb.c
+++ b/arch/powerpc/kernel/kgdb.c
@@ -120,11 +120,19 @@ int kgdb_skipexception(int exception, struct pt_regs *regs)
 
 static int kgdb_debugger_ipi(struct pt_regs *regs)
 {
-	kgdb_nmicallback(raw_smp_processor_id(), regs);
+	int cpu = raw_smp_processor_id();
+
+	if (!kgdb_roundup_delay(cpu))
+		kgdb_nmicallback(cpu, regs);
 	return 0;
 }
 
 #ifdef CONFIG_SMP
+void kgdb_roundup_cpu(unsigned int cpu)
+{
+	smp_send_debugger_break_cpu(cpu);
+}
+
 void kgdb_roundup_cpus(void)
 {
 	smp_send_debugger_break();
diff --git a/arch/powerpc/kernel/smp.c b/arch/powerpc/kernel/smp.c
index fb95f92dcfac..308765f2e7a0 100644
--- a/arch/powerpc/kernel/smp.c
+++ b/arch/powerpc/kernel/smp.c
@@ -590,6 +590,11 @@ static void debugger_ipi_callback(struct pt_regs *regs)
 	debugger_ipi(regs);
 }
 
+void smp_send_debugger_break_cpu(unsigned int cpu)
+{
+	smp_send_nmi_ipi(cpu, debugger_ipi_callback, 1000000);
+}
+
 void smp_send_debugger_break(void)
 {
 	smp_send_nmi_ipi(NMI_IPI_ALL_OTHERS, debugger_ipi_callback, 1000000);
diff --git a/arch/powerpc/kernel/traps.c b/arch/powerpc/kernel/traps.c
index 11741703d26e..7e4e1f489f56 100644
--- a/arch/powerpc/kernel/traps.c
+++ b/arch/powerpc/kernel/traps.c
@@ -260,12 +260,17 @@ static char *get_mmu_str(void)
 
 static int __die(const char *str, struct pt_regs *regs, long err)
 {
+	const char *pr = "";
+
 	printk("Oops: %s, sig: %ld [#%d]\n", str, err, ++die_counter);
 
+	if (IS_ENABLED(CONFIG_PREEMPTION))
+		pr = IS_ENABLED(CONFIG_PREEMPT_RT) ? " PREEMPT_RT" : " PREEMPT";
+
 	printk("%s PAGE_SIZE=%luK%s%s%s%s%s%s %s\n",
 	       IS_ENABLED(CONFIG_CPU_LITTLE_ENDIAN) ? "LE" : "BE",
 	       PAGE_SIZE / 1024, get_mmu_str(),
-	       IS_ENABLED(CONFIG_PREEMPT) ? " PREEMPT" : "",
+	       pr,
 	       IS_ENABLED(CONFIG_SMP) ? " SMP" : "",
 	       IS_ENABLED(CONFIG_SMP) ? (" NR_CPUS=" __stringify(NR_CPUS)) : "",
 	       debug_pagealloc_enabled() ? " DEBUG_PAGEALLOC" : "",
diff --git a/arch/powerpc/kexec/crash.c b/arch/powerpc/kexec/crash.c
index 22ceeeb705ab..d5359701f787 100644
--- a/arch/powerpc/kexec/crash.c
+++ b/arch/powerpc/kexec/crash.c
@@ -312,9 +312,6 @@ void default_machine_crash_shutdown(struct pt_regs *regs)
 	unsigned int i;
 	int (*old_handler)(struct pt_regs *regs);
 
-	/* Avoid hardlocking with irresponsive CPU holding logbuf_lock */
-	printk_deferred_enter();
-
 	/*
 	 * This function is only called after the system
 	 * has panicked or is otherwise in a critical state.
diff --git a/arch/powerpc/kvm/Kconfig b/arch/powerpc/kvm/Kconfig
index ff581d70f20c..e5c84d55bdfb 100644
--- a/arch/powerpc/kvm/Kconfig
+++ b/arch/powerpc/kvm/Kconfig
@@ -178,6 +178,7 @@ config KVM_E500MC
 config KVM_MPIC
 	bool "KVM in-kernel MPIC emulation"
 	depends on KVM && E500
+	depends on !PREEMPT_RT
 	select HAVE_KVM_IRQCHIP
 	select HAVE_KVM_IRQFD
 	select HAVE_KVM_IRQ_ROUTING
diff --git a/arch/powerpc/platforms/pseries/iommu.c b/arch/powerpc/platforms/pseries/iommu.c
index 8322ca86d5ac..f524145d7dd3 100644
--- a/arch/powerpc/platforms/pseries/iommu.c
+++ b/arch/powerpc/platforms/pseries/iommu.c
@@ -24,6 +24,7 @@
 #include <linux/of.h>
 #include <linux/iommu.h>
 #include <linux/rculist.h>
+#include <linux/local_lock.h>
 #include <asm/io.h>
 #include <asm/prom.h>
 #include <asm/rtas.h>
@@ -195,7 +196,13 @@ static int tce_build_pSeriesLP(unsigned long liobn, long tcenum, long tceshift,
 	return ret;
 }
 
-static DEFINE_PER_CPU(__be64 *, tce_page);
+struct tce_page {
+	__be64 * page;
+	local_lock_t lock;
+};
+static DEFINE_PER_CPU(struct tce_page, tce_page) = {
+	.lock = INIT_LOCAL_LOCK(lock),
+};
 
 static int tce_buildmulti_pSeriesLP(struct iommu_table *tbl, long tcenum,
 				     long npages, unsigned long uaddr,
@@ -218,9 +225,10 @@ static int tce_buildmulti_pSeriesLP(struct iommu_table *tbl, long tcenum,
 		                           direction, attrs);
 	}
 
-	local_irq_save(flags);	/* to protect tcep and the page behind it */
+	/* to protect tcep and the page behind it */
+	local_lock_irqsave(&tce_page.lock, flags);
 
-	tcep = __this_cpu_read(tce_page);
+	tcep = __this_cpu_read(tce_page.page);
 
 	/* This is safe to do since interrupts are off when we're called
 	 * from iommu_alloc{,_sg}()
@@ -229,12 +237,12 @@ static int tce_buildmulti_pSeriesLP(struct iommu_table *tbl, long tcenum,
 		tcep = (__be64 *)__get_free_page(GFP_ATOMIC);
 		/* If allocation fails, fall back to the loop implementation */
 		if (!tcep) {
-			local_irq_restore(flags);
+			local_unlock_irqrestore(&tce_page.lock, flags);
 			return tce_build_pSeriesLP(tbl->it_index, tcenum,
 					tceshift,
 					npages, uaddr, direction, attrs);
 		}
-		__this_cpu_write(tce_page, tcep);
+		__this_cpu_write(tce_page.page, tcep);
 	}
 
 	rpn = __pa(uaddr) >> tceshift;
@@ -264,7 +272,7 @@ static int tce_buildmulti_pSeriesLP(struct iommu_table *tbl, long tcenum,
 		tcenum += limit;
 	} while (npages > 0 && !rc);
 
-	local_irq_restore(flags);
+	local_unlock_irqrestore(&tce_page.lock, flags);
 
 	if (unlikely(rc == H_NOT_ENOUGH_RESOURCES)) {
 		ret = (int)rc;
@@ -440,16 +448,17 @@ static int tce_setrange_multi_pSeriesLP(unsigned long start_pfn,
 				DMA_BIDIRECTIONAL, 0);
 	}
 
-	local_irq_disable();	/* to protect tcep and the page behind it */
-	tcep = __this_cpu_read(tce_page);
+	/* to protect tcep and the page behind it */
+	local_lock_irq(&tce_page.lock);
+	tcep = __this_cpu_read(tce_page.page);
 
 	if (!tcep) {
 		tcep = (__be64 *)__get_free_page(GFP_ATOMIC);
 		if (!tcep) {
-			local_irq_enable();
+			local_unlock_irq(&tce_page.lock);
 			return -ENOMEM;
 		}
-		__this_cpu_write(tce_page, tcep);
+		__this_cpu_write(tce_page.page, tcep);
 	}
 
 	proto_tce = TCE_PCI_READ | TCE_PCI_WRITE;
@@ -492,7 +501,7 @@ static int tce_setrange_multi_pSeriesLP(unsigned long start_pfn,
 
 	/* error cleanup: caller will clear whole range */
 
-	local_irq_enable();
+	local_unlock_irq(&tce_page.lock);
 	return rc;
 }
 
diff --git a/arch/riscv/include/asm/spinlock_types.h b/arch/riscv/include/asm/spinlock_types.h
index f398e7638dd6..5a35a49505da 100644
--- a/arch/riscv/include/asm/spinlock_types.h
+++ b/arch/riscv/include/asm/spinlock_types.h
@@ -6,7 +6,7 @@
 #ifndef _ASM_RISCV_SPINLOCK_TYPES_H
 #define _ASM_RISCV_SPINLOCK_TYPES_H
 
-#ifndef __LINUX_SPINLOCK_TYPES_H
+#ifndef __LINUX_SPINLOCK_TYPES_RAW_H
 # error "please don't include this file directly"
 #endif
 
diff --git a/arch/s390/include/asm/spinlock_types.h b/arch/s390/include/asm/spinlock_types.h
index a2bbfd7df85f..b69695e39957 100644
--- a/arch/s390/include/asm/spinlock_types.h
+++ b/arch/s390/include/asm/spinlock_types.h
@@ -2,7 +2,7 @@
 #ifndef __ASM_SPINLOCK_TYPES_H
 #define __ASM_SPINLOCK_TYPES_H
 
-#ifndef __LINUX_SPINLOCK_TYPES_H
+#ifndef __LINUX_SPINLOCK_TYPES_RAW_H
 # error "please don't include this file directly"
 #endif
 
diff --git a/arch/sh/include/asm/spinlock_types.h b/arch/sh/include/asm/spinlock_types.h
index e82369f286a2..907bda4b1619 100644
--- a/arch/sh/include/asm/spinlock_types.h
+++ b/arch/sh/include/asm/spinlock_types.h
@@ -2,7 +2,7 @@
 #ifndef __ASM_SH_SPINLOCK_TYPES_H
 #define __ASM_SH_SPINLOCK_TYPES_H
 
-#ifndef __LINUX_SPINLOCK_TYPES_H
+#ifndef __LINUX_SPINLOCK_TYPES_RAW_H
 # error "please don't include this file directly"
 #endif
 
diff --git a/arch/sh/kernel/irq.c b/arch/sh/kernel/irq.c
index ef0f0827cf57..2d3eca8fee01 100644
--- a/arch/sh/kernel/irq.c
+++ b/arch/sh/kernel/irq.c
@@ -149,6 +149,7 @@ void irq_ctx_exit(int cpu)
 	hardirq_ctx[cpu] = NULL;
 }
 
+#ifndef CONFIG_PREEMPT_RT
 void do_softirq_own_stack(void)
 {
 	struct thread_info *curctx;
@@ -176,6 +177,7 @@ void do_softirq_own_stack(void)
 		  "r5", "r6", "r7", "r8", "r9", "r15", "t", "pr"
 	);
 }
+#endif
 #else
 static inline void handle_one_irq(unsigned int irq)
 {
diff --git a/arch/sparc/kernel/irq_64.c b/arch/sparc/kernel/irq_64.c
index c8848bb681a1..41fa1be980a3 100644
--- a/arch/sparc/kernel/irq_64.c
+++ b/arch/sparc/kernel/irq_64.c
@@ -855,6 +855,7 @@ void __irq_entry handler_irq(int pil, struct pt_regs *regs)
 	set_irq_regs(old_regs);
 }
 
+#ifndef CONFIG_PREEMPT_RT
 void do_softirq_own_stack(void)
 {
 	void *orig_sp, *sp = softirq_stack[smp_processor_id()];
@@ -869,6 +870,7 @@ void do_softirq_own_stack(void)
 	__asm__ __volatile__("mov %0, %%sp"
 			     : : "r" (orig_sp));
 }
+#endif
 
 #ifdef CONFIG_HOTPLUG_CPU
 void fixup_irqs(void)
diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index 1f96809606ac..3493d2b94530 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -107,6 +107,7 @@ config X86
 	select ARCH_SUPPORTS_KMAP_LOCAL_FORCE_MAP	if NR_CPUS <= 4096
 	select ARCH_SUPPORTS_LTO_CLANG
 	select ARCH_SUPPORTS_LTO_CLANG_THIN
+	select ARCH_SUPPORTS_RT
 	select ARCH_USE_BUILTIN_BSWAP
 	select ARCH_USE_MEMTEST
 	select ARCH_USE_QUEUED_RWLOCKS
@@ -230,6 +231,7 @@ config X86
 	select HAVE_PCI
 	select HAVE_PERF_REGS
 	select HAVE_PERF_USER_STACK_DUMP
+	select HAVE_PREEMPT_LAZY
 	select MMU_GATHER_RCU_TABLE_FREE		if PARAVIRT
 	select HAVE_POSIX_CPU_TIMERS_TASK_WORK
 	select HAVE_REGS_AND_STACK_ACCESS_API
diff --git a/arch/x86/include/asm/irq_stack.h b/arch/x86/include/asm/irq_stack.h
index 8d55bd11848c..f755c217f67b 100644
--- a/arch/x86/include/asm/irq_stack.h
+++ b/arch/x86/include/asm/irq_stack.h
@@ -201,6 +201,7 @@
 			      IRQ_CONSTRAINTS, regs, vector);		\
 }
 
+#ifndef CONFIG_PREEMPT_RT
 /*
  * Macro to invoke __do_softirq on the irq stack. This is only called from
  * task context when bottom halves are about to be reenabled and soft
@@ -214,6 +215,8 @@
 	__this_cpu_write(hardirq_stack_inuse, false);			\
 }
 
+#endif
+
 #else /* CONFIG_X86_64 */
 /* System vector handlers always run on the stack they interrupted. */
 #define run_sysvec_on_irqstack_cond(func, regs)				\
diff --git a/arch/x86/include/asm/preempt.h b/arch/x86/include/asm/preempt.h
index fe5efbcba824..ab8cb5fc2329 100644
--- a/arch/x86/include/asm/preempt.h
+++ b/arch/x86/include/asm/preempt.h
@@ -90,17 +90,48 @@ static __always_inline void __preempt_count_sub(int val)
  * a decrement which hits zero means we have no preempt_count and should
  * reschedule.
  */
-static __always_inline bool __preempt_count_dec_and_test(void)
+static __always_inline bool ____preempt_count_dec_and_test(void)
 {
 	return GEN_UNARY_RMWcc("decl", __preempt_count, e, __percpu_arg([var]));
 }
 
+static __always_inline bool __preempt_count_dec_and_test(void)
+{
+	if (____preempt_count_dec_and_test())
+		return true;
+#ifdef CONFIG_PREEMPT_LAZY
+	if (preempt_count())
+		return false;
+	if (current_thread_info()->preempt_lazy_count)
+		return false;
+	return test_thread_flag(TIF_NEED_RESCHED_LAZY);
+#else
+	return false;
+#endif
+}
+
 /*
  * Returns true when we need to resched and can (barring IRQ state).
  */
 static __always_inline bool should_resched(int preempt_offset)
 {
+#ifdef CONFIG_PREEMPT_LAZY
+	u32 tmp;
+	tmp = raw_cpu_read_4(__preempt_count);
+	if (tmp == preempt_offset)
+		return true;
+
+	/* preempt count == 0 ? */
+	tmp &= ~PREEMPT_NEED_RESCHED;
+	if (tmp != preempt_offset)
+		return false;
+	/* XXX PREEMPT_LOCK_OFFSET */
+	if (current_thread_info()->preempt_lazy_count)
+		return false;
+	return test_thread_flag(TIF_NEED_RESCHED_LAZY);
+#else
 	return unlikely(raw_cpu_read_4(__preempt_count) == preempt_offset);
+#endif
 }
 
 #ifdef CONFIG_PREEMPTION
diff --git a/arch/x86/include/asm/signal.h b/arch/x86/include/asm/signal.h
index 2dfb5fea13af..fc03f4f7ed84 100644
--- a/arch/x86/include/asm/signal.h
+++ b/arch/x86/include/asm/signal.h
@@ -28,6 +28,19 @@ typedef struct {
 #define SA_IA32_ABI	0x02000000u
 #define SA_X32_ABI	0x01000000u
 
+/*
+ * Because some traps use the IST stack, we must keep preemption
+ * disabled while calling do_trap(), but do_trap() may call
+ * force_sig_info() which will grab the signal spin_locks for the
+ * task, which in PREEMPT_RT are mutexes.  By defining
+ * ARCH_RT_DELAYS_SIGNAL_SEND the force_sig_info() will set
+ * TIF_NOTIFY_RESUME and set up the signal to be sent on exit of the
+ * trap.
+ */
+#if defined(CONFIG_PREEMPT_RT)
+#define ARCH_RT_DELAYS_SIGNAL_SEND
+#endif
+
 #ifndef CONFIG_COMPAT
 #define compat_sigset_t compat_sigset_t
 typedef sigset_t compat_sigset_t;
diff --git a/arch/x86/include/asm/stackprotector.h b/arch/x86/include/asm/stackprotector.h
index 24a8d6c4fb18..2fc22c27df18 100644
--- a/arch/x86/include/asm/stackprotector.h
+++ b/arch/x86/include/asm/stackprotector.h
@@ -50,7 +50,7 @@
  */
 static __always_inline void boot_init_stack_canary(void)
 {
-	u64 canary;
+	u64 canary = 0;
 	u64 tsc;
 
 #ifdef CONFIG_X86_64
@@ -61,8 +61,14 @@ static __always_inline void boot_init_stack_canary(void)
 	 * of randomness. The TSC only matters for very early init,
 	 * there it already has some randomness on most systems. Later
 	 * on during the bootup the random pool has true entropy too.
+	 * For preempt-rt we need to weaken the randomness a bit, as
+	 * we can't call into the random generator from atomic context
+	 * due to locking constraints. We just leave canary
+	 * uninitialized and use the TSC based randomness on top of it.
 	 */
+#ifndef CONFIG_PREEMPT_RT
 	get_random_bytes(&canary, sizeof(canary));
+#endif
 	tsc = rdtsc();
 	canary += tsc + (tsc << 32UL);
 	canary &= CANARY_MASK;
diff --git a/arch/x86/include/asm/thread_info.h b/arch/x86/include/asm/thread_info.h
index cf132663c219..75dc786e6365 100644
--- a/arch/x86/include/asm/thread_info.h
+++ b/arch/x86/include/asm/thread_info.h
@@ -57,11 +57,14 @@ struct thread_info {
 	unsigned long		flags;		/* low level flags */
 	unsigned long		syscall_work;	/* SYSCALL_WORK_ flags */
 	u32			status;		/* thread synchronous flags */
+	int			preempt_lazy_count;	/* 0 => lazy preemptable
+							   <0 => BUG */
 };
 
 #define INIT_THREAD_INFO(tsk)			\
 {						\
 	.flags		= 0,			\
+	.preempt_lazy_count	= 0,		\
 }
 
 #else /* !__ASSEMBLY__ */
@@ -90,6 +93,7 @@ struct thread_info {
 #define TIF_NOTSC		16	/* TSC is not accessible in userland */
 #define TIF_NOTIFY_SIGNAL	17	/* signal notifications exist */
 #define TIF_SLD			18	/* Restore split lock detection on context switch */
+#define TIF_NEED_RESCHED_LAZY	19	/* lazy rescheduling necessary */
 #define TIF_MEMDIE		20	/* is terminating due to OOM killer */
 #define TIF_POLLING_NRFLAG	21	/* idle is polling for TIF_NEED_RESCHED */
 #define TIF_IO_BITMAP		22	/* uses I/O bitmap */
@@ -114,6 +118,7 @@ struct thread_info {
 #define _TIF_NOTSC		(1 << TIF_NOTSC)
 #define _TIF_NOTIFY_SIGNAL	(1 << TIF_NOTIFY_SIGNAL)
 #define _TIF_SLD		(1 << TIF_SLD)
+#define _TIF_NEED_RESCHED_LAZY	(1 << TIF_NEED_RESCHED_LAZY)
 #define _TIF_POLLING_NRFLAG	(1 << TIF_POLLING_NRFLAG)
 #define _TIF_IO_BITMAP		(1 << TIF_IO_BITMAP)
 #define _TIF_SPEC_FORCE_UPDATE	(1 << TIF_SPEC_FORCE_UPDATE)
diff --git a/arch/x86/kernel/cpu/mshyperv.c b/arch/x86/kernel/cpu/mshyperv.c
index ef6316fef99f..86974cd60942 100644
--- a/arch/x86/kernel/cpu/mshyperv.c
+++ b/arch/x86/kernel/cpu/mshyperv.c
@@ -75,11 +75,12 @@ void hv_remove_vmbus_handler(void)
 DEFINE_IDTENTRY_SYSVEC(sysvec_hyperv_stimer0)
 {
 	struct pt_regs *old_regs = set_irq_regs(regs);
+	u64 ip = regs ? instruction_pointer(regs) : 0;
 
 	inc_irq_stat(hyperv_stimer0_count);
 	if (hv_stimer0_handler)
 		hv_stimer0_handler();
-	add_interrupt_randomness(HYPERV_STIMER0_VECTOR, 0);
+	add_interrupt_randomness(HYPERV_STIMER0_VECTOR, 0, ip);
 	ack_APIC_irq();
 
 	set_irq_regs(old_regs);
diff --git a/arch/x86/kernel/dumpstack_32.c b/arch/x86/kernel/dumpstack_32.c
index 722fd712e1cf..82cc3a7be6bd 100644
--- a/arch/x86/kernel/dumpstack_32.c
+++ b/arch/x86/kernel/dumpstack_32.c
@@ -141,7 +141,7 @@ int get_stack_info(unsigned long *stack, struct task_struct *task,
 	 */
 	if (visit_mask) {
 		if (*visit_mask & (1UL << info->type)) {
-			printk_deferred_once(KERN_WARNING "WARNING: stack recursion on stack type %d\n", info->type);
+			pr_warn_once("WARNING: stack recursion on stack type %d\n", info->type);
 			goto unknown;
 		}
 		*visit_mask |= 1UL << info->type;
diff --git a/arch/x86/kernel/dumpstack_64.c b/arch/x86/kernel/dumpstack_64.c
index 6c5defd6569a..5f725b0ceb29 100644
--- a/arch/x86/kernel/dumpstack_64.c
+++ b/arch/x86/kernel/dumpstack_64.c
@@ -207,7 +207,8 @@ int get_stack_info(unsigned long *stack, struct task_struct *task,
 	if (visit_mask) {
 		if (*visit_mask & (1UL << info->type)) {
 			if (task == current)
-				printk_deferred_once(KERN_WARNING "WARNING: stack recursion on stack type %d\n", info->type);
+				pr_warn_once("WARNING: stack recursion on stack type %d\n",
+					     info->type);
 			goto unknown;
 		}
 		*visit_mask |= 1UL << info->type;
diff --git a/arch/x86/kernel/i8259.c b/arch/x86/kernel/i8259.c
index 15aefa3f3e18..52af9a89ad47 100644
--- a/arch/x86/kernel/i8259.c
+++ b/arch/x86/kernel/i8259.c
@@ -207,8 +207,7 @@ static void mask_and_ack_8259A(struct irq_data *data)
 		 * lets ACK and report it. [once per IRQ]
 		 */
 		if (!(spurious_irq_mask & irqmask)) {
-			printk_deferred(KERN_DEBUG
-			       "spurious 8259A interrupt: IRQ%d.\n", irq);
+			printk(KERN_DEBUG "spurious 8259A interrupt: IRQ%d.\n", irq);
 			spurious_irq_mask |= irqmask;
 		}
 		atomic_inc(&irq_err_count);
diff --git a/arch/x86/kernel/irq_32.c b/arch/x86/kernel/irq_32.c
index 044902d5a3c4..e5dd6da78713 100644
--- a/arch/x86/kernel/irq_32.c
+++ b/arch/x86/kernel/irq_32.c
@@ -132,6 +132,7 @@ int irq_init_percpu_irqstack(unsigned int cpu)
 	return 0;
 }
 
+#ifndef CONFIG_PREEMPT_RT
 void do_softirq_own_stack(void)
 {
 	struct irq_stack *irqstk;
@@ -148,6 +149,7 @@ void do_softirq_own_stack(void)
 
 	call_on_stack(__do_softirq, isp);
 }
+#endif
 
 void __handle_irq(struct irq_desc *desc, struct pt_regs *regs)
 {
diff --git a/arch/x86/kernel/kgdb.c b/arch/x86/kernel/kgdb.c
index 3a43a2dee658..37bd37cdf2b6 100644
--- a/arch/x86/kernel/kgdb.c
+++ b/arch/x86/kernel/kgdb.c
@@ -502,9 +502,12 @@ static int kgdb_nmi_handler(unsigned int cmd, struct pt_regs *regs)
 		if (atomic_read(&kgdb_active) != -1) {
 			/* KGDB CPU roundup */
 			cpu = raw_smp_processor_id();
-			kgdb_nmicallback(cpu, regs);
-			set_bit(cpu, was_in_debug_nmi);
-			touch_nmi_watchdog();
+
+			if (!kgdb_roundup_delay(cpu)) {
+				kgdb_nmicallback(cpu, regs);
+				set_bit(cpu, was_in_debug_nmi);
+				touch_nmi_watchdog();
+			}
 
 			return NMI_HANDLED;
 		}
diff --git a/arch/x86/kernel/unwind_frame.c b/arch/x86/kernel/unwind_frame.c
index d7c44b257f7f..2d0361cd304f 100644
--- a/arch/x86/kernel/unwind_frame.c
+++ b/arch/x86/kernel/unwind_frame.c
@@ -41,9 +41,9 @@ static void unwind_dump(struct unwind_state *state)
 
 	dumped_before = true;
 
-	printk_deferred("unwind stack type:%d next_sp:%p mask:0x%lx graph_idx:%d\n",
-			state->stack_info.type, state->stack_info.next_sp,
-			state->stack_mask, state->graph_idx);
+	printk("unwind stack type:%d next_sp:%p mask:0x%lx graph_idx:%d\n",
+	       state->stack_info.type, state->stack_info.next_sp,
+	       state->stack_mask, state->graph_idx);
 
 	for (sp = PTR_ALIGN(state->orig_sp, sizeof(long)); sp;
 	     sp = PTR_ALIGN(stack_info.next_sp, sizeof(long))) {
@@ -59,13 +59,11 @@ static void unwind_dump(struct unwind_state *state)
 
 			if (zero) {
 				if (!prev_zero)
-					printk_deferred("%p: %0*x ...\n",
-							sp, BITS_PER_LONG/4, 0);
+					printk("%p: %0*x ...\n", sp, BITS_PER_LONG/4, 0);
 				continue;
 			}
 
-			printk_deferred("%p: %0*lx (%pB)\n",
-					sp, BITS_PER_LONG/4, word, (void *)word);
+			printk("%p: %0*lx (%pB)\n", sp, BITS_PER_LONG/4, word, (void *)word);
 		}
 	}
 }
@@ -342,13 +340,13 @@ bool unwind_next_frame(struct unwind_state *state)
 		goto the_end;
 
 	if (state->regs) {
-		printk_deferred_once(KERN_WARNING
+		pr_warn_once(
 			"WARNING: kernel stack regs at %p in %s:%d has bad 'bp' value %p\n",
 			state->regs, state->task->comm,
 			state->task->pid, next_bp);
 		unwind_dump(state);
 	} else {
-		printk_deferred_once(KERN_WARNING
+		pr_warn_once(
 			"WARNING: kernel stack frame pointer at %p in %s:%d has bad value %p\n",
 			state->bp, state->task->comm,
 			state->task->pid, next_bp);
diff --git a/arch/x86/kernel/unwind_orc.c b/arch/x86/kernel/unwind_orc.c
index a1202536fc57..a26a7c3849f5 100644
--- a/arch/x86/kernel/unwind_orc.c
+++ b/arch/x86/kernel/unwind_orc.c
@@ -9,7 +9,7 @@
 #include <asm/orc_lookup.h>
 
 #define orc_warn(fmt, ...) \
-	printk_deferred_once(KERN_WARNING "WARNING: " fmt, ##__VA_ARGS__)
+	pr_warn_once("WARNING: " fmt, ##__VA_ARGS__)
 
 #define orc_warn_current(args...)					\
 ({									\
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 33cb06518124..b0b2122c51a3 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -8526,6 +8526,14 @@ int kvm_arch_init(void *opaque)
 		goto out;
 	}
 
+#ifdef CONFIG_PREEMPT_RT
+	if (!boot_cpu_has(X86_FEATURE_CONSTANT_TSC)) {
+		pr_err("RT requires X86_FEATURE_CONSTANT_TSC\n");
+		r = -EOPNOTSUPP;
+		goto out;
+	}
+#endif
+
 	r = -ENOMEM;
 	x86_fpu_cache = kmem_cache_create("x86_fpu", sizeof(struct fpu),
 					  __alignof__(struct fpu), SLAB_ACCOUNT,
diff --git a/arch/xtensa/include/asm/spinlock_types.h b/arch/xtensa/include/asm/spinlock_types.h
index 64c9389254f1..797aed7df3dd 100644
--- a/arch/xtensa/include/asm/spinlock_types.h
+++ b/arch/xtensa/include/asm/spinlock_types.h
@@ -2,7 +2,7 @@
 #ifndef __ASM_SPINLOCK_TYPES_H
 #define __ASM_SPINLOCK_TYPES_H
 
-#if !defined(__LINUX_SPINLOCK_TYPES_H) && !defined(__ASM_SPINLOCK_H)
+#if !defined(__LINUX_SPINLOCK_TYPES_RAW_H) && !defined(__ASM_SPINLOCK_H)
 # error "please don't include this file directly"
 #endif
 
diff --git a/block/blk-mq.c b/block/blk-mq.c
index 82de39926a9f..330b6274bf6b 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -1563,14 +1563,14 @@ static void __blk_mq_delay_run_hw_queue(struct blk_mq_hw_ctx *hctx, bool async,
 		return;
 
 	if (!async && !(hctx->flags & BLK_MQ_F_BLOCKING)) {
-		int cpu = get_cpu();
+		int cpu = get_cpu_light();
 		if (cpumask_test_cpu(cpu, hctx->cpumask)) {
 			__blk_mq_run_hw_queue(hctx);
-			put_cpu();
+			put_cpu_light();
 			return;
 		}
 
-		put_cpu();
+		put_cpu_light();
 	}
 
 	kblockd_mod_delayed_work_on(blk_mq_hctx_next_cpu(hctx), &hctx->run_work,
diff --git a/crypto/cryptd.c b/crypto/cryptd.c
index a1bea0f4baa8..5f8ca8c1f59c 100644
--- a/crypto/cryptd.c
+++ b/crypto/cryptd.c
@@ -36,6 +36,7 @@ static struct workqueue_struct *cryptd_wq;
 struct cryptd_cpu_queue {
 	struct crypto_queue queue;
 	struct work_struct work;
+	spinlock_t qlock;
 };
 
 struct cryptd_queue {
@@ -105,6 +106,7 @@ static int cryptd_init_queue(struct cryptd_queue *queue,
 		cpu_queue = per_cpu_ptr(queue->cpu_queue, cpu);
 		crypto_init_queue(&cpu_queue->queue, max_cpu_qlen);
 		INIT_WORK(&cpu_queue->work, cryptd_queue_worker);
+		spin_lock_init(&cpu_queue->qlock);
 	}
 	pr_info("cryptd: max_cpu_qlen set to %d\n", max_cpu_qlen);
 	return 0;
@@ -129,8 +131,10 @@ static int cryptd_enqueue_request(struct cryptd_queue *queue,
 	struct cryptd_cpu_queue *cpu_queue;
 	refcount_t *refcnt;
 
-	cpu = get_cpu();
-	cpu_queue = this_cpu_ptr(queue->cpu_queue);
+	cpu_queue = raw_cpu_ptr(queue->cpu_queue);
+	spin_lock_bh(&cpu_queue->qlock);
+	cpu = smp_processor_id();
+
 	err = crypto_enqueue_request(&cpu_queue->queue, request);
 
 	refcnt = crypto_tfm_ctx(request->tfm);
@@ -146,7 +150,7 @@ static int cryptd_enqueue_request(struct cryptd_queue *queue,
 	refcount_inc(refcnt);
 
 out_put_cpu:
-	put_cpu();
+	spin_unlock_bh(&cpu_queue->qlock);
 
 	return err;
 }
@@ -162,16 +166,11 @@ static void cryptd_queue_worker(struct work_struct *work)
 	cpu_queue = container_of(work, struct cryptd_cpu_queue, work);
 	/*
 	 * Only handle one request at a time to avoid hogging crypto workqueue.
-	 * preempt_disable/enable is used to prevent being preempted by
-	 * cryptd_enqueue_request(). local_bh_disable/enable is used to prevent
-	 * cryptd_enqueue_request() being accessed from software interrupts.
 	 */
-	local_bh_disable();
-	preempt_disable();
+	spin_lock_bh(&cpu_queue->qlock);
 	backlog = crypto_get_backlog(&cpu_queue->queue);
 	req = crypto_dequeue_request(&cpu_queue->queue);
-	preempt_enable();
-	local_bh_enable();
+	spin_unlock_bh(&cpu_queue->qlock);
 
 	if (!req)
 		return;
diff --git a/crypto/testmgr.c b/crypto/testmgr.c
index 70f69f0910c9..58eee8eab4bf 100644
--- a/crypto/testmgr.c
+++ b/crypto/testmgr.c
@@ -1061,14 +1061,14 @@ static void generate_random_testvec_config(struct testvec_config *cfg,
 
 static void crypto_disable_simd_for_test(void)
 {
-	preempt_disable();
+	migrate_disable();
 	__this_cpu_write(crypto_simd_disabled_for_test, true);
 }
 
 static void crypto_reenable_simd_for_test(void)
 {
 	__this_cpu_write(crypto_simd_disabled_for_test, false);
-	preempt_enable();
+	migrate_enable();
 }
 
 /*
diff --git a/drivers/block/zram/zram_drv.c b/drivers/block/zram/zram_drv.c
index 6383c81ac5b3..abb695f5f5e4 100644
--- a/drivers/block/zram/zram_drv.c
+++ b/drivers/block/zram/zram_drv.c
@@ -59,6 +59,40 @@ static void zram_free_page(struct zram *zram, size_t index);
 static int zram_bvec_read(struct zram *zram, struct bio_vec *bvec,
 				u32 index, int offset, struct bio *bio);
 
+#ifdef CONFIG_PREEMPT_RT
+static void zram_meta_init_table_locks(struct zram *zram, size_t num_pages)
+{
+	size_t index;
+
+	for (index = 0; index < num_pages; index++)
+		spin_lock_init(&zram->table[index].lock);
+}
+
+static int zram_slot_trylock(struct zram *zram, u32 index)
+{
+	int ret;
+
+	ret = spin_trylock(&zram->table[index].lock);
+	if (ret)
+		__set_bit(ZRAM_LOCK, &zram->table[index].flags);
+	return ret;
+}
+
+static void zram_slot_lock(struct zram *zram, u32 index)
+{
+	spin_lock(&zram->table[index].lock);
+	__set_bit(ZRAM_LOCK, &zram->table[index].flags);
+}
+
+static void zram_slot_unlock(struct zram *zram, u32 index)
+{
+	__clear_bit(ZRAM_LOCK, &zram->table[index].flags);
+	spin_unlock(&zram->table[index].lock);
+}
+
+#else
+
+static void zram_meta_init_table_locks(struct zram *zram, size_t num_pages) { }
 
 static int zram_slot_trylock(struct zram *zram, u32 index)
 {
@@ -74,6 +108,7 @@ static void zram_slot_unlock(struct zram *zram, u32 index)
 {
 	bit_spin_unlock(ZRAM_LOCK, &zram->table[index].flags);
 }
+#endif
 
 static inline bool init_done(struct zram *zram)
 {
@@ -1169,6 +1204,7 @@ static bool zram_meta_alloc(struct zram *zram, u64 disksize)
 
 	if (!huge_class_size)
 		huge_class_size = zs_huge_class_size(zram->mem_pool);
+	zram_meta_init_table_locks(zram, num_pages);
 	return true;
 }
 
diff --git a/drivers/block/zram/zram_drv.h b/drivers/block/zram/zram_drv.h
index 80c3b43b4828..d8f6d880f915 100644
--- a/drivers/block/zram/zram_drv.h
+++ b/drivers/block/zram/zram_drv.h
@@ -63,6 +63,7 @@ struct zram_table_entry {
 		unsigned long element;
 	};
 	unsigned long flags;
+	spinlock_t lock;
 #ifdef CONFIG_ZRAM_MEMORY_TRACKING
 	ktime_t ac_time;
 #endif
diff --git a/drivers/char/random.c b/drivers/char/random.c
index a27ae3999ff3..e680dcc83d3a 100644
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@ -1262,26 +1262,25 @@ static __u32 get_reg(struct fast_pool *f, struct pt_regs *regs)
 	return *ptr;
 }
 
-void add_interrupt_randomness(int irq, int irq_flags)
+void add_interrupt_randomness(int irq, int irq_flags, __u64 ip)
 {
 	struct entropy_store	*r;
 	struct fast_pool	*fast_pool = this_cpu_ptr(&irq_randomness);
-	struct pt_regs		*regs = get_irq_regs();
 	unsigned long		now = jiffies;
 	cycles_t		cycles = random_get_entropy();
 	__u32			c_high, j_high;
-	__u64			ip;
 
 	if (cycles == 0)
-		cycles = get_reg(fast_pool, regs);
+		cycles = get_reg(fast_pool, NULL);
 	c_high = (sizeof(cycles) > 4) ? cycles >> 32 : 0;
 	j_high = (sizeof(now) > 4) ? now >> 32 : 0;
 	fast_pool->pool[0] ^= cycles ^ j_high ^ irq;
 	fast_pool->pool[1] ^= now ^ c_high;
-	ip = regs ? instruction_pointer(regs) : _RET_IP_;
+	if (!ip)
+		ip = _RET_IP_;
 	fast_pool->pool[2] ^= ip;
 	fast_pool->pool[3] ^= (sizeof(ip) > 4) ? ip >> 32 :
-		get_reg(fast_pool, regs);
+		get_reg(fast_pool, NULL);
 
 	fast_mix(fast_pool);
 	add_interrupt_bench(cycles);
@@ -1527,9 +1526,8 @@ static void _warn_unseeded_randomness(const char *func_name, void *caller,
 	print_once = true;
 #endif
 	if (__ratelimit(&unseeded_warning))
-		printk_deferred(KERN_NOTICE "random: %s called from %pS "
-				"with crng_init=%d\n", func_name, caller,
-				crng_init);
+		pr_notice("random: %s called from %pS with crng_init=%d\n",
+			  func_name, caller, crng_init);
 }
 
 /*
@@ -1602,6 +1600,14 @@ static void try_to_generate_entropy(void)
 		struct timer_list timer;
 	} stack;
 
+
+#ifdef CONFIG_ARM
+{
+	u32 values[3];
+
+	random_get_entropy_init(values);
+#endif
+
 	stack.now = random_get_entropy();
 
 	/* Slow counter - or none. Don't even bother */
@@ -1617,6 +1623,11 @@ static void try_to_generate_entropy(void)
 		stack.now = random_get_entropy();
 	}
 
+#ifdef CONFIG_ARM
+	random_get_entropy_deinit(values);
+}
+#endif
+
 	del_timer_sync(&stack.timer);
 	destroy_timer_on_stack(&stack.timer);
 	mix_pool_bytes(&input_pool, &stack.now, sizeof(stack.now));
diff --git a/drivers/char/tpm/tpm_tis.c b/drivers/char/tpm/tpm_tis.c
index d3f2e5364c27..9c4a99757afd 100644
--- a/drivers/char/tpm/tpm_tis.c
+++ b/drivers/char/tpm/tpm_tis.c
@@ -50,6 +50,31 @@ static inline struct tpm_tis_tcg_phy *to_tpm_tis_tcg_phy(struct tpm_tis_data *da
 	return container_of(data, struct tpm_tis_tcg_phy, priv);
 }
 
+#ifdef CONFIG_PREEMPT_RT
+/*
+ * Flushes previous write operations to chip so that a subsequent
+ * ioread*()s won't stall a cpu.
+ */
+static inline void tpm_tis_flush(void __iomem *iobase)
+{
+	ioread8(iobase + TPM_ACCESS(0));
+}
+#else
+#define tpm_tis_flush(iobase) do { } while (0)
+#endif
+
+static inline void tpm_tis_iowrite8(u8 b, void __iomem *iobase, u32 addr)
+{
+	iowrite8(b, iobase + addr);
+	tpm_tis_flush(iobase);
+}
+
+static inline void tpm_tis_iowrite32(u32 b, void __iomem *iobase, u32 addr)
+{
+	iowrite32(b, iobase + addr);
+	tpm_tis_flush(iobase);
+}
+
 static int interrupts = -1;
 module_param(interrupts, int, 0444);
 MODULE_PARM_DESC(interrupts, "Enable interrupts");
@@ -169,7 +194,7 @@ static int tpm_tcg_write_bytes(struct tpm_tis_data *data, u32 addr, u16 len,
 	struct tpm_tis_tcg_phy *phy = to_tpm_tis_tcg_phy(data);
 
 	while (len--)
-		iowrite8(*value++, phy->iobase + addr);
+		tpm_tis_iowrite8(*value++, phy->iobase, addr);
 
 	return 0;
 }
@@ -196,7 +221,7 @@ static int tpm_tcg_write32(struct tpm_tis_data *data, u32 addr, u32 value)
 {
 	struct tpm_tis_tcg_phy *phy = to_tpm_tis_tcg_phy(data);
 
-	iowrite32(value, phy->iobase + addr);
+	tpm_tis_iowrite32(value, phy->iobase, addr);
 
 	return 0;
 }
diff --git a/drivers/firmware/efi/efi.c b/drivers/firmware/efi/efi.c
index 9fa86288b78a..7de3f5b6e8d0 100644
--- a/drivers/firmware/efi/efi.c
+++ b/drivers/firmware/efi/efi.c
@@ -66,7 +66,7 @@ struct mm_struct efi_mm = {
 
 struct workqueue_struct *efi_rts_wq;
 
-static bool disable_runtime;
+static bool disable_runtime = IS_ENABLED(CONFIG_PREEMPT_RT);
 static int __init setup_noefi(char *arg)
 {
 	disable_runtime = true;
@@ -97,6 +97,9 @@ static int __init parse_efi_cmdline(char *str)
 	if (parse_option_str(str, "noruntime"))
 		disable_runtime = true;
 
+	if (parse_option_str(str, "runtime"))
+		disable_runtime = false;
+
 	if (parse_option_str(str, "nosoftreserve"))
 		set_bit(EFI_MEM_NO_SOFT_RESERVE, &efi.flags);
 
diff --git a/drivers/gpio/gpio-omap.c b/drivers/gpio/gpio-omap.c
index 415e8df89d6f..7b9bd6ebdc22 100644
--- a/drivers/gpio/gpio-omap.c
+++ b/drivers/gpio/gpio-omap.c
@@ -1054,7 +1054,7 @@ static int omap_gpio_chip_init(struct gpio_bank *bank, struct irq_chip *irqc)
 
 	ret = devm_request_irq(bank->chip.parent, bank->irq,
 			       omap_gpio_irq_handler,
-			       0, dev_name(bank->chip.parent), bank);
+			       IRQF_THREAD_TBL_LOOKUP, dev_name(bank->chip.parent), bank);
 	if (ret)
 		gpiochip_remove(&bank->chip);
 
diff --git a/drivers/gpu/drm/i915/display/intel_crtc.c b/drivers/gpu/drm/i915/display/intel_crtc.c
index 254e67141a77..7a39029b083f 100644
--- a/drivers/gpu/drm/i915/display/intel_crtc.c
+++ b/drivers/gpu/drm/i915/display/intel_crtc.c
@@ -425,7 +425,8 @@ void intel_pipe_update_start(const struct intel_crtc_state *new_crtc_state)
 	 */
 	intel_psr_wait_for_idle(new_crtc_state);
 
-	local_irq_disable();
+	if (!IS_ENABLED(CONFIG_PREEMPT_RT))
+		local_irq_disable();
 
 	crtc->debug.min_vbl = min;
 	crtc->debug.max_vbl = max;
@@ -450,11 +451,13 @@ void intel_pipe_update_start(const struct intel_crtc_state *new_crtc_state)
 			break;
 		}
 
-		local_irq_enable();
+		if (!IS_ENABLED(CONFIG_PREEMPT_RT))
+			local_irq_enable();
 
 		timeout = schedule_timeout(timeout);
 
-		local_irq_disable();
+		if (!IS_ENABLED(CONFIG_PREEMPT_RT))
+			local_irq_disable();
 	}
 
 	finish_wait(wq, &wait);
@@ -487,7 +490,8 @@ void intel_pipe_update_start(const struct intel_crtc_state *new_crtc_state)
 	return;
 
 irq_disable:
-	local_irq_disable();
+	if (!IS_ENABLED(CONFIG_PREEMPT_RT))
+		local_irq_disable();
 }
 
 #if IS_ENABLED(CONFIG_DRM_I915_DEBUG_VBLANK_EVADE)
@@ -566,7 +570,8 @@ void intel_pipe_update_end(struct intel_crtc_state *new_crtc_state)
 		new_crtc_state->uapi.event = NULL;
 	}
 
-	local_irq_enable();
+	if (!IS_ENABLED(CONFIG_PREEMPT_RT))
+		local_irq_enable();
 
 	/* Send VRR Push to terminate Vblank */
 	intel_vrr_send_push(new_crtc_state);
diff --git a/drivers/gpu/drm/i915/gt/intel_breadcrumbs.c b/drivers/gpu/drm/i915/gt/intel_breadcrumbs.c
index 209cf265bf74..6e1b9068d944 100644
--- a/drivers/gpu/drm/i915/gt/intel_breadcrumbs.c
+++ b/drivers/gpu/drm/i915/gt/intel_breadcrumbs.c
@@ -311,10 +311,9 @@ void __intel_breadcrumbs_park(struct intel_breadcrumbs *b)
 	/* Kick the work once more to drain the signalers, and disarm the irq */
 	irq_work_sync(&b->irq_work);
 	while (READ_ONCE(b->irq_armed) && !atomic_read(&b->active)) {
-		local_irq_disable();
-		signal_irq_work(&b->irq_work);
-		local_irq_enable();
+		irq_work_queue(&b->irq_work);
 		cond_resched();
+		irq_work_sync(&b->irq_work);
 	}
 }
 
diff --git a/drivers/gpu/drm/i915/gt/intel_context.h b/drivers/gpu/drm/i915/gt/intel_context.h
index c41098950746..601274ba86e4 100644
--- a/drivers/gpu/drm/i915/gt/intel_context.h
+++ b/drivers/gpu/drm/i915/gt/intel_context.h
@@ -163,7 +163,8 @@ static inline void intel_context_enter(struct intel_context *ce)
 
 static inline void intel_context_mark_active(struct intel_context *ce)
 {
-	lockdep_assert_held(&ce->timeline->mutex);
+	lockdep_assert(lockdep_is_held(&ce->timeline->mutex) ||
+		       test_bit(CONTEXT_IS_PARKED, &ce->flags));
 	++ce->active_count;
 }
 
diff --git a/drivers/gpu/drm/i915/gt/intel_context_types.h b/drivers/gpu/drm/i915/gt/intel_context_types.h
index e54351a170e2..1022be795e68 100644
--- a/drivers/gpu/drm/i915/gt/intel_context_types.h
+++ b/drivers/gpu/drm/i915/gt/intel_context_types.h
@@ -112,6 +112,7 @@ struct intel_context {
 #define CONTEXT_FORCE_SINGLE_SUBMISSION	7
 #define CONTEXT_NOPREEMPT		8
 #define CONTEXT_LRCA_DIRTY		9
+#define CONTEXT_IS_PARKED		10
 
 	struct {
 		u64 timeout_us;
diff --git a/drivers/gpu/drm/i915/gt/intel_engine_pm.c b/drivers/gpu/drm/i915/gt/intel_engine_pm.c
index 1f07ac4e0672..e84f03a276d1 100644
--- a/drivers/gpu/drm/i915/gt/intel_engine_pm.c
+++ b/drivers/gpu/drm/i915/gt/intel_engine_pm.c
@@ -80,39 +80,6 @@ static int __engine_unpark(struct intel_wakeref *wf)
 	return 0;
 }
 
-#if IS_ENABLED(CONFIG_LOCKDEP)
-
-static unsigned long __timeline_mark_lock(struct intel_context *ce)
-{
-	unsigned long flags;
-
-	local_irq_save(flags);
-	mutex_acquire(&ce->timeline->mutex.dep_map, 2, 0, _THIS_IP_);
-
-	return flags;
-}
-
-static void __timeline_mark_unlock(struct intel_context *ce,
-				   unsigned long flags)
-{
-	mutex_release(&ce->timeline->mutex.dep_map, _THIS_IP_);
-	local_irq_restore(flags);
-}
-
-#else
-
-static unsigned long __timeline_mark_lock(struct intel_context *ce)
-{
-	return 0;
-}
-
-static void __timeline_mark_unlock(struct intel_context *ce,
-				   unsigned long flags)
-{
-}
-
-#endif /* !IS_ENABLED(CONFIG_LOCKDEP) */
-
 static void duration(struct dma_fence *fence, struct dma_fence_cb *cb)
 {
 	struct i915_request *rq = to_request(fence);
@@ -159,7 +126,6 @@ static bool switch_to_kernel_context(struct intel_engine_cs *engine)
 {
 	struct intel_context *ce = engine->kernel_context;
 	struct i915_request *rq;
-	unsigned long flags;
 	bool result = true;
 
 	/* GPU is pointing to the void, as good as in the kernel context. */
@@ -201,7 +167,7 @@ static bool switch_to_kernel_context(struct intel_engine_cs *engine)
 	 * engine->wakeref.count, we may see the request completion and retire
 	 * it causing an underflow of the engine->wakeref.
 	 */
-	flags = __timeline_mark_lock(ce);
+	set_bit(CONTEXT_IS_PARKED, &ce->flags);
 	GEM_BUG_ON(atomic_read(&ce->timeline->active_count) < 0);
 
 	rq = __i915_request_create(ce, GFP_NOWAIT);
@@ -233,7 +199,7 @@ static bool switch_to_kernel_context(struct intel_engine_cs *engine)
 
 	result = false;
 out_unlock:
-	__timeline_mark_unlock(ce, flags);
+	clear_bit(CONTEXT_IS_PARKED, &ce->flags);
 	return result;
 }
 
diff --git a/drivers/gpu/drm/i915/gt/intel_execlists_submission.c b/drivers/gpu/drm/i915/gt/intel_execlists_submission.c
index cafb0608ffb4..07156996fc82 100644
--- a/drivers/gpu/drm/i915/gt/intel_execlists_submission.c
+++ b/drivers/gpu/drm/i915/gt/intel_execlists_submission.c
@@ -1283,7 +1283,7 @@ static void execlists_dequeue(struct intel_engine_cs *engine)
 	 * and context switches) submission.
 	 */
 
-	spin_lock(&sched_engine->lock);
+	spin_lock_irq(&sched_engine->lock);
 
 	/*
 	 * If the queue is higher priority than the last
@@ -1383,7 +1383,7 @@ static void execlists_dequeue(struct intel_engine_cs *engine)
 				 * Even if ELSP[1] is occupied and not worthy
 				 * of timeslices, our queue might be.
 				 */
-				spin_unlock(&sched_engine->lock);
+				spin_unlock_irq(&sched_engine->lock);
 				return;
 			}
 		}
@@ -1409,7 +1409,7 @@ static void execlists_dequeue(struct intel_engine_cs *engine)
 
 		if (last && !can_merge_rq(last, rq)) {
 			spin_unlock(&ve->base.sched_engine->lock);
-			spin_unlock(&engine->sched_engine->lock);
+			spin_unlock_irq(&engine->sched_engine->lock);
 			return; /* leave this for another sibling */
 		}
 
@@ -1571,7 +1571,7 @@ static void execlists_dequeue(struct intel_engine_cs *engine)
 	 */
 	sched_engine->queue_priority_hint = queue_prio(sched_engine);
 	i915_sched_engine_reset_on_empty(sched_engine);
-	spin_unlock(&sched_engine->lock);
+	spin_unlock_irq(&sched_engine->lock);
 
 	/*
 	 * We can skip poking the HW if we ended up with exactly the same set
@@ -1597,13 +1597,6 @@ static void execlists_dequeue(struct intel_engine_cs *engine)
 	}
 }
 
-static void execlists_dequeue_irq(struct intel_engine_cs *engine)
-{
-	local_irq_disable(); /* Suspend interrupts across request submission */
-	execlists_dequeue(engine);
-	local_irq_enable(); /* flush irq_work (e.g. breadcrumb enabling) */
-}
-
 static void clear_ports(struct i915_request **ports, int count)
 {
 	memset_p((void **)ports, NULL, count);
@@ -2423,7 +2416,7 @@ static void execlists_submission_tasklet(struct tasklet_struct *t)
 	}
 
 	if (!engine->execlists.pending[0]) {
-		execlists_dequeue_irq(engine);
+		execlists_dequeue(engine);
 		start_timeslice(engine);
 	}
 
diff --git a/drivers/gpu/drm/i915/i915_irq.c b/drivers/gpu/drm/i915/i915_irq.c
index 9bc4f4a8e12e..547347241a47 100644
--- a/drivers/gpu/drm/i915/i915_irq.c
+++ b/drivers/gpu/drm/i915/i915_irq.c
@@ -886,7 +886,8 @@ static bool i915_get_crtc_scanoutpos(struct drm_crtc *_crtc,
 	 */
 	spin_lock_irqsave(&dev_priv->uncore.lock, irqflags);
 
-	/* preempt_disable_rt() should go right here in PREEMPT_RT patchset. */
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_disable();
 
 	/* Get optional system timestamp before query. */
 	if (stime)
@@ -950,7 +951,8 @@ static bool i915_get_crtc_scanoutpos(struct drm_crtc *_crtc,
 	if (etime)
 		*etime = ktime_get();
 
-	/* preempt_enable_rt() should go right here in PREEMPT_RT patchset. */
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_enable();
 
 	spin_unlock_irqrestore(&dev_priv->uncore.lock, irqflags);
 
diff --git a/drivers/gpu/drm/i915/i915_request.c b/drivers/gpu/drm/i915/i915_request.c
index 79da5eca60af..b9dd6100c6d1 100644
--- a/drivers/gpu/drm/i915/i915_request.c
+++ b/drivers/gpu/drm/i915/i915_request.c
@@ -559,7 +559,6 @@ bool __i915_request_submit(struct i915_request *request)
 
 	RQ_TRACE(request, "\n");
 
-	GEM_BUG_ON(!irqs_disabled());
 	lockdep_assert_held(&engine->sched_engine->lock);
 
 	/*
@@ -668,7 +667,6 @@ void __i915_request_unsubmit(struct i915_request *request)
 	 */
 	RQ_TRACE(request, "\n");
 
-	GEM_BUG_ON(!irqs_disabled());
 	lockdep_assert_held(&engine->sched_engine->lock);
 
 	/*
diff --git a/drivers/gpu/drm/i915/i915_request.h b/drivers/gpu/drm/i915/i915_request.h
index 1bc1349ba3c2..a2f713b4ac2f 100644
--- a/drivers/gpu/drm/i915/i915_request.h
+++ b/drivers/gpu/drm/i915/i915_request.h
@@ -609,7 +609,8 @@ i915_request_timeline(const struct i915_request *rq)
 {
 	/* Valid only while the request is being constructed (or retired). */
 	return rcu_dereference_protected(rq->timeline,
-					 lockdep_is_held(&rcu_access_pointer(rq->timeline)->mutex));
+					 lockdep_is_held(&rcu_access_pointer(rq->timeline)->mutex) ||
+					 test_bit(CONTEXT_IS_PARKED, &rq->context->flags));
 }
 
 static inline struct i915_gem_context *
diff --git a/drivers/gpu/drm/i915/i915_trace.h b/drivers/gpu/drm/i915/i915_trace.h
index 63fec1c3c132..f345a0f12bf6 100644
--- a/drivers/gpu/drm/i915/i915_trace.h
+++ b/drivers/gpu/drm/i915/i915_trace.h
@@ -2,6 +2,10 @@
 #if !defined(_I915_TRACE_H_) || defined(TRACE_HEADER_MULTI_READ)
 #define _I915_TRACE_H_
 
+#ifdef CONFIG_PREEMPT_RT
+#define NOTRACE
+#endif
+
 #include <linux/stringify.h>
 #include <linux/types.h>
 #include <linux/tracepoint.h>
@@ -819,7 +823,7 @@ DEFINE_EVENT(i915_request, i915_request_add,
 	     TP_ARGS(rq)
 );
 
-#if defined(CONFIG_DRM_I915_LOW_LEVEL_TRACEPOINTS)
+#if defined(CONFIG_DRM_I915_LOW_LEVEL_TRACEPOINTS) && !defined(NOTRACE)
 DEFINE_EVENT(i915_request, i915_request_guc_submit,
 	     TP_PROTO(struct i915_request *rq),
 	     TP_ARGS(rq)
diff --git a/drivers/gpu/drm/i915/i915_utils.h b/drivers/gpu/drm/i915/i915_utils.h
index 5259edacde38..b36b27c09049 100644
--- a/drivers/gpu/drm/i915/i915_utils.h
+++ b/drivers/gpu/drm/i915/i915_utils.h
@@ -343,7 +343,7 @@ wait_remaining_ms_from_jiffies(unsigned long timestamp_jiffies, int to_wait_ms)
 #define wait_for(COND, MS)		_wait_for((COND), (MS) * 1000, 10, 1000)
 
 /* If CONFIG_PREEMPT_COUNT is disabled, in_atomic() always reports false. */
-#if defined(CONFIG_DRM_I915_DEBUG) && defined(CONFIG_PREEMPT_COUNT)
+#if defined(CONFIG_DRM_I915_DEBUG) && defined(CONFIG_PREEMPT_COUNT) && !defined(CONFIG_PREEMPT_RT)
 # define _WAIT_FOR_ATOMIC_CHECK(ATOMIC) WARN_ON_ONCE((ATOMIC) && !in_atomic())
 #else
 # define _WAIT_FOR_ATOMIC_CHECK(ATOMIC) do { } while (0)
diff --git a/drivers/gpu/drm/panel/panel-simple.c b/drivers/gpu/drm/panel/panel-simple.c
index 9b6c4e6c38a1..89cace354d8c 100644
--- a/drivers/gpu/drm/panel/panel-simple.c
+++ b/drivers/gpu/drm/panel/panel-simple.c
@@ -1919,6 +1919,31 @@ static const struct panel_desc dataimage_scf0700c48ggu18 = {
 	.bus_flags = DRM_BUS_FLAG_DE_HIGH | DRM_BUS_FLAG_PIXDATA_DRIVE_POSEDGE,
 };
 
+static const struct drm_display_mode dataimage_fg040321duswmg01_mode = {
+	.clock = 9000,
+	.hdisplay = 480,
+	.hsync_start = 480 + 2,
+	.hsync_end = 480 + 2 + 2,
+	.htotal = 480 + 2 + 2 + 41,
+	.vdisplay = 272,
+	.vsync_start = 272 + 2,
+	.vsync_end = 272 + 2 + 2,
+	.vtotal = 272 + 2 + 2 + 10,
+	.flags = DRM_MODE_FLAG_NVSYNC | DRM_MODE_FLAG_NHSYNC |
+			 DRM_BUS_FLAG_DE_HIGH | DRM_BUS_FLAG_PIXDATA_DRIVE_POSEDGE,
+};
+
+static const struct panel_desc dataimage_fg040321duswmg01 = {
+	.modes = &dataimage_fg040321duswmg01_mode,
+	.num_modes = 1,
+	.bpc = 8,
+	.size = {
+		.width = 95,
+		.height = 54,
+	},
+	.bus_flags = DRM_BUS_FLAG_PIXDATA_DRIVE_POSEDGE,
+};
+
 static const struct display_timing dlc_dlc0700yzg_1_timing = {
 	.pixelclock = { 45000000, 51200000, 57000000 },
 	.hactive = { 1024, 1024, 1024 },
@@ -4588,6 +4613,9 @@ static const struct of_device_id platform_of_match[] = {
 	}, {
 		.compatible = "dataimage,scf0700c48ggu18",
 		.data = &dataimage_scf0700c48ggu18,
+	}, {
+		.compatible = "dataimage,fg040321duswmg01",
+		.data = &dataimage_fg040321duswmg01,
 	}, {
 		.compatible = "dlc,dlc0700yzg-1",
 		.data = &dlc_dlc0700yzg_1,
diff --git a/drivers/hid/Kconfig b/drivers/hid/Kconfig
index 9235ab7161e3..66128b5f6b41 100644
--- a/drivers/hid/Kconfig
+++ b/drivers/hid/Kconfig
@@ -731,6 +731,16 @@ config HID_MULTITOUCH
 	  To compile this driver as a module, choose M here: the
 	  module will be called hid-multitouch.
 
+if HID_MULTITOUCH
+	config HID_MULTITOUCH_DISABLE_SINGLETOUCH_EVENTS
+	bool "Disable singletouch events"
+	depends on USB_HID
+	help
+	This option disables single touch events generated by the hid-multitouch driver.
+	If this option is not activated the driver is emitting multitouch- and singletouch-
+	events simultaneously.
+endif # HID_MULTITOUCH
+
 config HID_NTI
 	tristate "NTI keyboard adapters"
 	help
diff --git a/drivers/hv/hyperv_vmbus.h b/drivers/hv/hyperv_vmbus.h
index d030577ad6a2..ef1db3367df7 100644
--- a/drivers/hv/hyperv_vmbus.h
+++ b/drivers/hv/hyperv_vmbus.h
@@ -19,6 +19,7 @@
 #include <linux/atomic.h>
 #include <linux/hyperv.h>
 #include <linux/interrupt.h>
+#include <linux/irq.h>
 
 #include "hv_trace.h"
 
diff --git a/drivers/hv/vmbus_drv.c b/drivers/hv/vmbus_drv.c
index 392c1ac4f819..c5e9725fb5ff 100644
--- a/drivers/hv/vmbus_drv.c
+++ b/drivers/hv/vmbus_drv.c
@@ -22,6 +22,7 @@
 #include <linux/clockchips.h>
 #include <linux/cpu.h>
 #include <linux/sched/task_stack.h>
+#include <linux/irq.h>
 
 #include <linux/delay.h>
 #include <linux/notifier.h>
@@ -1337,6 +1338,8 @@ static void vmbus_isr(void)
 	void *page_addr = hv_cpu->synic_event_page;
 	struct hv_message *msg;
 	union hv_synic_event_flags *event;
+	struct pt_regs *regs = get_irq_regs();
+	u64 ip = regs ? instruction_pointer(regs) : 0;
 	bool handled = false;
 
 	if (unlikely(page_addr == NULL))
@@ -1381,7 +1384,7 @@ static void vmbus_isr(void)
 			tasklet_schedule(&hv_cpu->msg_dpc);
 	}
 
-	add_interrupt_randomness(vmbus_interrupt, 0);
+	add_interrupt_randomness(vmbus_interrupt, 0, ip);
 }
 
 static irqreturn_t vmbus_percpu_isr(int irq, void *dev_id)
diff --git a/drivers/i2c/busses/i2c-stm32f7.c b/drivers/i2c/busses/i2c-stm32f7.c
index 50d5ae81d227..0b2f2bbbb4e5 100644
--- a/drivers/i2c/busses/i2c-stm32f7.c
+++ b/drivers/i2c/busses/i2c-stm32f7.c
@@ -443,8 +443,7 @@ static int stm32f7_i2c_compute_timing(struct stm32f7_i2c_dev *i2c_dev,
 {
 	struct stm32f7_i2c_spec *specs;
 	u32 p_prev = STM32F7_PRESC_MAX;
-	u32 i2cclk = DIV_ROUND_CLOSEST(NSEC_PER_SEC,
-				       setup->clock_src);
+	u32 i2cclk = ((uint32_t) NSEC_PER_SEC) / setup->clock_src;
 	u32 i2cbus = DIV_ROUND_CLOSEST(NSEC_PER_SEC,
 				       setup->speed_freq);
 	u32 clk_error_prev = i2cbus;
diff --git a/drivers/iio/adc/stm32-adc-core.c b/drivers/iio/adc/stm32-adc-core.c
index c088cb990193..aa4ea7b8d7d1 100644
--- a/drivers/iio/adc/stm32-adc-core.c
+++ b/drivers/iio/adc/stm32-adc-core.c
@@ -93,6 +93,7 @@ struct stm32_adc_priv_cfg {
  */
 struct stm32_adc_priv {
 	int				irq[STM32_ADC_MAX_ADCS];
+	u32				ier_bkp[STM32_ADC_MAX_ADCS];
 	struct irq_domain		*domain;
 	struct clk			*aclk;
 	struct clk			*bclk;
@@ -362,11 +363,49 @@ static void stm32_adc_irq_handler(struct irq_desc *desc)
 	chained_irq_exit(chip, desc);
 };
 
+static void irq_mask(struct irq_data *data)
+{
+	struct stm32_adc_priv *priv = irq_data_get_irq_chip_data(data);
+	int adc = data->hwirq;
+
+	if (likely(adc >= 0 && adc < priv->cfg->num_irqs))
+		/* use nosync since the interrupt is already in progress */
+		disable_irq_nosync(priv->irq[adc]);
+	else
+		pr_err_once("Unsupported ADC number %d\n", adc);
+}
+
+static void irq_unmask(struct irq_data *data)
+{
+	struct stm32_adc_priv *priv = irq_data_get_irq_chip_data(data);
+	int adc = data->hwirq;
+
+	if (likely(adc >= 0 && adc < priv->cfg->num_irqs))
+		enable_irq(priv->irq[adc]);
+	else
+		pr_err_once("Unsupported ADC number %d\n", adc);
+}
+
+static unsigned int noop_ret(struct irq_data *data)
+{
+	return 0;
+}
+
+static void noop(struct irq_data *data) { }
+
+static struct irq_chip stm32adc_core_irq_chip = {
+	.name		= "stm32adc-core",
+	.irq_mask	= irq_mask,
+	.irq_unmask	= irq_unmask,
+	.irq_startup    = noop_ret,
+	.irq_shutdown   = noop,
+};
+
 static int stm32_adc_domain_map(struct irq_domain *d, unsigned int irq,
 				irq_hw_number_t hwirq)
 {
 	irq_set_chip_data(irq, d->host_data);
-	irq_set_chip_and_handler(irq, &dummy_irq_chip, handle_level_irq);
+	irq_set_chip_and_handler(irq, &stm32adc_core_irq_chip, handle_level_irq);
 
 	return 0;
 }
@@ -398,6 +437,15 @@ static int stm32_adc_irq_probe(struct platform_device *pdev,
 		priv->irq[i] = platform_get_irq(pdev, i);
 		if (priv->irq[i] < 0)
 			return priv->irq[i];
+		/* The enable_irq and disable_irq are used to mask ADC
+		 * interrupts while the chained interrupt handling is in
+		 * progress to ensure the main irq is not activated and
+		 * stm32_adc_irq_handler() is not called before the chained
+		 * interrupt handler (stm32_adc_isr()) is finished.
+		 * Therefore, the lazy interrupt masking is disabled to
+		 * ensure the interrupt is really masked on disable_irq().
+		 */
+		irq_set_status_flags(priv->irq[i], IRQ_DISABLE_UNLAZY);
 	}
 
 	priv->domain = irq_domain_add_simple(np, STM32_ADC_MAX_ADCS, 0,
diff --git a/drivers/iio/adc/stm32-adc.c b/drivers/iio/adc/stm32-adc.c
index e3e75413b49e..aa03006a8d9d 100644
--- a/drivers/iio/adc/stm32-adc.c
+++ b/drivers/iio/adc/stm32-adc.c
@@ -201,6 +201,7 @@ struct stm32_adc {
 	const struct stm32_adc_cfg	*cfg;
 	struct completion	completion;
 	u16			buffer[STM32_ADC_MAX_SQ + 4] __aligned(8);
+	u32			status;
 	struct clk		*clk;
 	int			irq;
 	spinlock_t		lock;		/* interrupt lock */
@@ -1258,18 +1259,13 @@ static irqreturn_t stm32_adc_threaded_isr(int irq, void *data)
 	struct iio_dev *indio_dev = data;
 	struct stm32_adc *adc = iio_priv(indio_dev);
 	const struct stm32_adc_regspec *regs = adc->cfg->regs;
-	u32 status = stm32_adc_readl(adc, regs->isr_eoc.reg);
 	u32 mask = stm32_adc_readl(adc, regs->ier_eoc.reg);
+	u32 status = adc->status;
 
-	/* Check ovr status right now, as ovr mask should be already disabled */
+	/* Check ovr status */
 	if (status & regs->isr_ovr.mask) {
-		/*
-		 * Clear ovr bit to avoid subsequent calls to IRQ handler.
-		 * This requires to stop ADC first. OVR bit state in ISR,
-		 * is propaged to CSR register by hardware.
-		 */
-		adc->cfg->stop_conv(indio_dev);
-		stm32_adc_irq_clear(indio_dev, regs->isr_ovr.mask);
+		stm32_adc_ovr_irq_disable(adc);
+		stm32_adc_conv_irq_disable(adc);
 		dev_err(&indio_dev->dev, "Overrun, stopping: restart needed\n");
 		return IRQ_HANDLED;
 	}
@@ -1288,10 +1284,8 @@ static irqreturn_t stm32_adc_isr(int irq, void *data)
 	struct stm32_adc *adc = iio_priv(indio_dev);
 	const struct stm32_adc_regspec *regs = adc->cfg->regs;
 	u32 status = stm32_adc_readl(adc, regs->isr_eoc.reg);
-	u32 mask = stm32_adc_readl(adc, regs->ier_eoc.reg);
 
-	if (!(status & mask))
-		return IRQ_WAKE_THREAD;
+	adc->status = status;
 
 	if (status & regs->isr_ovr.mask) {
 		/*
@@ -1301,8 +1295,14 @@ static irqreturn_t stm32_adc_isr(int irq, void *data)
 		 * Restarting the capture can be done by disabling, then
 		 * re-enabling it (e.g. write 0, then 1 to buffer/enable).
 		 */
-		stm32_adc_ovr_irq_disable(adc);
-		stm32_adc_conv_irq_disable(adc);
+		/* The interrupt must be disabled in the threaded interrupt
+		 * handler, otherwise it would get re-enabled by interrupt
+		 * controller (stm32-adc-core). On the other hand, the IRQ
+		 * must be cleared here - otherwise it would be immediately
+		 * triggered again when the interrupt controller unmask it.
+		 */
+		stm32_adc_irq_clear(indio_dev, regs->isr_ovr.mask);
+		adc->cfg->stop_conv(indio_dev);
 		return IRQ_WAKE_THREAD;
 	}
 
@@ -1321,7 +1321,7 @@ static irqreturn_t stm32_adc_isr(int irq, void *data)
 		return IRQ_HANDLED;
 	}
 
-	return IRQ_NONE;
+	return IRQ_WAKE_THREAD;
 }
 
 /**
diff --git a/drivers/iio/dac/stm32-dac-core.h b/drivers/iio/dac/stm32-dac-core.h
index d3b415fb9575..84b4c54cd8f4 100644
--- a/drivers/iio/dac/stm32-dac-core.h
+++ b/drivers/iio/dac/stm32-dac-core.h
@@ -17,6 +17,7 @@
 #define STM32_DAC_DHR12R2	0x14
 #define STM32_DAC_DOR1		0x2C
 #define STM32_DAC_DOR2		0x30
+#define STM32_DAC_MCR		0x3C
 
 /* STM32_DAC_CR bit fields */
 #define STM32_DAC_CR_EN1		BIT(0)
diff --git a/drivers/iio/dac/stm32-dac.c b/drivers/iio/dac/stm32-dac.c
index dd2e306824e7..67e19936f776 100644
--- a/drivers/iio/dac/stm32-dac.c
+++ b/drivers/iio/dac/stm32-dac.c
@@ -69,6 +69,12 @@ static int stm32_dac_set_enable_state(struct iio_dev *indio_dev, int ch,
 	}
 
 	if (enable) {
+		/* disable buffering DAC1 and DAC2 */
+		ret = regmap_write(dac->common->regmap, STM32_DAC_MCR, 0x00020002);
+		if (ret < 0) {
+			dev_err(&indio_dev->dev, "failed disable buffering\n");
+		}
+
 		ret = pm_runtime_resume_and_get(dev);
 		if (ret < 0) {
 			mutex_unlock(&dac->lock);
diff --git a/drivers/input/input-mt.c b/drivers/input/input-mt.c
index 44fe6f2f063c..cd6be43c3fbc 100644
--- a/drivers/input/input-mt.c
+++ b/drivers/input/input-mt.c
@@ -306,7 +306,9 @@ void input_mt_sync_frame(struct input_dev *dev)
 	if ((mt->flags & INPUT_MT_POINTER) && !(mt->flags & INPUT_MT_SEMI_MT))
 		use_count = true;
 
+#ifndef CONFIG_HID_MULTITOUCH_DISABLE_SINGLETOUCH_EVENTS
 	input_mt_report_pointer_emulation(dev, use_count);
+#endif
 
 	mt->frame++;
 }
diff --git a/drivers/input/keyboard/gpio_keys.c b/drivers/input/keyboard/gpio_keys.c
index 8dbf1e69c90a..29d1aa49d290 100644
--- a/drivers/input/keyboard/gpio_keys.c
+++ b/drivers/input/keyboard/gpio_keys.c
@@ -438,7 +438,7 @@ static irqreturn_t gpio_keys_gpio_isr(int irq, void *dev_id)
 	if (bdata->debounce_use_hrtimer) {
 		hrtimer_start(&bdata->debounce_timer,
 			      ms_to_ktime(bdata->software_debounce),
-			      HRTIMER_MODE_REL);
+			      HRTIMER_MODE_REL_HARD);
 	} else {
 		mod_delayed_work(system_wq,
 				 &bdata->work,
@@ -595,7 +595,7 @@ static int gpio_keys_setup_key(struct platform_device *pdev,
 		INIT_DELAYED_WORK(&bdata->work, gpio_keys_gpio_work_func);
 
 		hrtimer_init(&bdata->debounce_timer,
-			     CLOCK_REALTIME, HRTIMER_MODE_REL);
+			     CLOCK_REALTIME, HRTIMER_MODE_REL_HARD);
 		bdata->debounce_timer.function = gpio_keys_debounce_timer;
 
 		isr = gpio_keys_gpio_isr;
@@ -667,8 +667,9 @@ static int gpio_keys_setup_key(struct platform_device *pdev,
 	if (!button->can_disable)
 		irqflags |= IRQF_SHARED;
 
-	error = devm_request_any_context_irq(dev, bdata->irq, isr, irqflags,
-					     desc, bdata);
+	error = devm_request_any_context_irq(dev, bdata->irq, isr, irqflags |
+					     IRQF_NO_THREAD, desc,
+					     bdata);
 	if (error < 0) {
 		dev_err(dev, "Unable to claim irq %d; error %d\n",
 			bdata->irq, error);
diff --git a/drivers/input/keyboard/qt1070.c b/drivers/input/keyboard/qt1070.c
index 7174e1df1ee3..2610eb437772 100644
--- a/drivers/input/keyboard/qt1070.c
+++ b/drivers/input/keyboard/qt1070.c
@@ -30,6 +30,9 @@
 #define DET_STATUS         0x02
 
 #define KEY_STATUS         0x03
+#define NTHR_KEY0          0x20
+#define AVE_AKS0           0x27
+#define DI0                0x2E
 
 /* Calibrate */
 #define CALIBRATE_CMD      0x38
@@ -51,6 +54,8 @@ struct qt1070_data {
 	unsigned int irq;
 	unsigned short keycodes[ARRAY_SIZE(qt1070_key2code)];
 	u8 last_keys;
+	u8 active_keys;
+	u8 ave_aks;
 };
 
 static int qt1070_read(struct i2c_client *client, u8 reg)
@@ -77,6 +82,28 @@ static int qt1070_write(struct i2c_client *client, u8 reg, u8 data)
 	return ret;
 }
 
+static void qt1070_write_register_value(struct i2c_client *client,
+				u8 value, u8 reg)
+{
+	int i;
+
+	for (i = 0; i < 7; i++)
+		qt1070_write(client, reg + i, value);
+}
+
+static void qt1070_activate_keys(struct i2c_client *client,
+				u8 ave_aks, u8 active_keys)
+{
+	int i;
+
+	for (i = 0; i < 7; i++) {
+		if ((1 << i) & active_keys)
+			qt1070_write(client, AVE_AKS0 + i, ave_aks);
+		else
+			qt1070_write(client, AVE_AKS0 + i, 0);
+	}
+}
+
 static bool qt1070_identify(struct i2c_client *client)
 {
 	int id, ver;
@@ -126,11 +153,142 @@ static irqreturn_t qt1070_interrupt(int irq, void *dev_id)
 	return IRQ_HANDLED;
 }
 
+static ssize_t nthr_value_show(struct device *dev,
+				struct device_attribute *attr,
+				char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+
+	return sprintf(buf, "%d\n", qt1070_read(client, NTHR_KEY0));
+}
+
+static ssize_t nthr_value_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf,
+				size_t count)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	int ret;
+	u8 val;
+
+	ret = kstrtou8(buf, 0, &val);
+	if (ret)
+		return ret;
+
+	qt1070_write_register_value(client, val, NTHR_KEY0);
+	return count;
+}
+
+static DEVICE_ATTR_RW(nthr_value);
+
+/* ------- averaging Factor/adjacent Key Suppression AVE_AKS -------- */
+static ssize_t ave_aks_value_show(struct device *dev,
+				struct device_attribute *attr,
+				char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct qt1070_data *data = i2c_get_clientdata(client);
+
+	return sprintf(buf, "%d\n", data->ave_aks);
+}
+
+static ssize_t ave_aks_value_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf,
+				size_t count)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct qt1070_data *data = i2c_get_clientdata(client);
+	int ret;
+
+	ret = kstrtou8(buf, 0, &data->ave_aks);
+	if (ret)
+		return ret;
+
+	qt1070_write_register_value(client, data->ave_aks, AVE_AKS0);
+	return count;
+}
+
+static DEVICE_ATTR_RW(ave_aks_value);
+
+/* -------------------- detection integrator DI --------------------- */
+static ssize_t di_value_show(struct device *dev,
+				struct device_attribute *attr,
+				char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+
+	return sprintf(buf, "%d\n", qt1070_read(client, DI0));
+}
+
+static ssize_t di_value_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf,
+				size_t count)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	int ret;
+	u8 val;
+
+	ret = kstrtou8(buf, 0, &val);
+	if (ret)
+		return ret;
+
+	qt1070_write_register_value(client, val, DI0);
+	return count;
+}
+
+static DEVICE_ATTR_RW(di_value);
+
+/* -------------------- active keys --------------------------------- */
+static ssize_t active_keys_show(struct device *dev,
+				struct device_attribute *attr,
+				char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct qt1070_data *data = i2c_get_clientdata(client);
+
+	return sprintf(buf, "%d\n", data->active_keys);
+}
+
+static ssize_t active_keys_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf,
+				size_t count)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct qt1070_data *data = i2c_get_clientdata(client);
+	int ret;
+
+	ret = kstrtou8(buf, 0, &data->active_keys);
+	if (ret)
+		return ret;
+
+	qt1070_activate_keys(client, data->ave_aks, data->active_keys);
+
+	return count;
+}
+
+static DEVICE_ATTR_RW(active_keys);
+
+static struct attribute *qt1070_attrs[] = {
+	&dev_attr_nthr_value.attr,
+	&dev_attr_ave_aks_value.attr,
+	&dev_attr_di_value.attr,
+	&dev_attr_active_keys.attr,
+	NULL,
+};
+
+static const struct attribute_group qt1070_attr_group = {
+	.attrs = qt1070_attrs,
+};
+
 static int qt1070_probe(struct i2c_client *client,
 				const struct i2c_device_id *id)
 {
 	struct qt1070_data *data;
 	struct input_dev *input;
+	u8 nthr, di;
 	int i;
 	int err;
 
@@ -186,6 +344,20 @@ static int qt1070_probe(struct i2c_client *client,
 	qt1070_write(client, RESET, 1);
 	msleep(QT1070_RESET_TIME);
 
+	if (!of_property_read_u8(client->dev.of_node, "at,threshold", &nthr))
+		qt1070_write_register_value(client, nthr, NTHR_KEY0);
+
+	if (!of_property_read_u8(client->dev.of_node, "at,ave_aks",
+		&data->ave_aks))
+		qt1070_write_register_value(client, data->ave_aks, AVE_AKS0);
+
+	if (!of_property_read_u8(client->dev.of_node, "at,di", &di))
+		qt1070_write_register_value(client, di, DI0);
+
+	if (!of_property_read_u8(client->dev.of_node, "at,active_keys",
+		&data->active_keys))
+		qt1070_activate_keys(client, data->ave_aks, data->active_keys);
+
 	err = request_threaded_irq(client->irq, NULL, qt1070_interrupt,
 				   IRQF_TRIGGER_NONE | IRQF_ONESHOT,
 				   client->dev.driver->name, data);
@@ -206,6 +378,12 @@ static int qt1070_probe(struct i2c_client *client,
 	/* Read to clear the chang line */
 	qt1070_read(client, DET_STATUS);
 
+	err = sysfs_create_group(&client->dev.kobj, &qt1070_attr_group);
+	if (err) {
+		dev_err(&client->dev, "sysfs creation failed\n");
+		goto err_free_irq;
+	}
+
 	return 0;
 
 err_free_irq:
@@ -220,6 +398,8 @@ static int qt1070_remove(struct i2c_client *client)
 {
 	struct qt1070_data *data = i2c_get_clientdata(client);
 
+	sysfs_remove_group(&client->dev.kobj, &qt1070_attr_group);
+
 	/* Release IRQ */
 	free_irq(client->irq, data);
 
diff --git a/drivers/leds/trigger/Kconfig b/drivers/leds/trigger/Kconfig
index 1f1d57288085..dc6816d36d06 100644
--- a/drivers/leds/trigger/Kconfig
+++ b/drivers/leds/trigger/Kconfig
@@ -64,6 +64,7 @@ config LEDS_TRIGGER_BACKLIGHT
 
 config LEDS_TRIGGER_CPU
 	bool "LED CPU Trigger"
+	depends on !PREEMPT_RT
 	help
 	  This allows LEDs to be controlled by active CPUs. This shows
 	  the active CPUs across an array of LEDs so you can see which
diff --git a/drivers/md/raid5.c b/drivers/md/raid5.c
index b9d062f0a02b..8ecca1d6b250 100644
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@ -2217,8 +2217,9 @@ static void raid_run_ops(struct stripe_head *sh, unsigned long ops_request)
 	struct raid5_percpu *percpu;
 	unsigned long cpu;
 
-	cpu = get_cpu();
+	cpu = get_cpu_light();
 	percpu = per_cpu_ptr(conf->percpu, cpu);
+	spin_lock(&percpu->lock);
 	if (test_bit(STRIPE_OP_BIOFILL, &ops_request)) {
 		ops_run_biofill(sh);
 		overlap_clear++;
@@ -2277,7 +2278,8 @@ static void raid_run_ops(struct stripe_head *sh, unsigned long ops_request)
 			if (test_and_clear_bit(R5_Overlap, &dev->flags))
 				wake_up(&sh->raid_conf->wait_for_overlap);
 		}
-	put_cpu();
+	spin_unlock(&percpu->lock);
+	put_cpu_light();
 }
 
 static void free_stripe(struct kmem_cache *sc, struct stripe_head *sh)
@@ -7102,6 +7104,7 @@ static int raid456_cpu_up_prepare(unsigned int cpu, struct hlist_node *node)
 			__func__, cpu);
 		return -ENOMEM;
 	}
+	spin_lock_init(&per_cpu_ptr(conf->percpu, cpu)->lock);
 	return 0;
 }
 
diff --git a/drivers/md/raid5.h b/drivers/md/raid5.h
index 5c05acf20e1f..665fe138ab4f 100644
--- a/drivers/md/raid5.h
+++ b/drivers/md/raid5.h
@@ -635,6 +635,7 @@ struct r5conf {
 	int			recovery_disabled;
 	/* per cpu variables */
 	struct raid5_percpu {
+		spinlock_t	lock;		/* Protection for -RT */
 		struct page	*spare_page; /* Used when checking P/Q in raid6 */
 		void		*scribble;  /* space for constructing buffer
 					     * lists and performing address
diff --git a/drivers/memory/omap-gpmc.c b/drivers/memory/omap-gpmc.c
index be0858bff4d3..31af20fa0a8c 100644
--- a/drivers/memory/omap-gpmc.c
+++ b/drivers/memory/omap-gpmc.c
@@ -77,6 +77,8 @@
 #define GPMC_ECC_CTRL_ECCREG9		0x009
 
 #define GPMC_CONFIG_LIMITEDADDRESS		BIT(1)
+#define GPMC_CONFIG_WAIT0PINPOLARITY		BIT(8)
+#define GPMC_CONFIG_WAIT1PINPOLARITY		BIT(9)
 
 #define GPMC_STATUS_EMPTYWRITEBUFFERSTATUS	BIT(0)
 
@@ -251,6 +253,8 @@ static unsigned int gpmc_capability;
 static void __iomem *gpmc_base;
 
 static struct clk *gpmc_l3_clk;
+static bool gpmc_wait0_active_high;
+static bool gpmc_wait1_active_high;
 
 static irqreturn_t gpmc_handle_irq(int irq, void *dev);
 
@@ -382,6 +386,18 @@ static inline void gpmc_cs_modify_reg(int cs, int reg, u32 mask, bool value)
 	gpmc_cs_write_reg(cs, reg, l);
 }
 
+static inline void gpmc_config_modify(u32 mask, int value)
+{
+	u32 l;
+
+	l = gpmc_read_reg(GPMC_CONFIG);
+	if (value)
+		l |= mask;
+	else
+		l &= ~mask;
+	gpmc_write_reg(GPMC_CONFIG, l);
+}
+
 static void gpmc_cs_bool_timings(int cs, const struct gpmc_bool_timings *p)
 {
 	gpmc_cs_modify_reg(cs, GPMC_CS_CONFIG1,
@@ -1041,16 +1057,9 @@ EXPORT_SYMBOL(gpmc_cs_free);
  */
 int gpmc_configure(int cmd, int wval)
 {
-	u32 regval;
-
 	switch (cmd) {
 	case GPMC_CONFIG_WP:
-		regval = gpmc_read_reg(GPMC_CONFIG);
-		if (wval)
-			regval &= ~GPMC_CONFIG_WRITEPROTECT; /* WP is ON */
-		else
-			regval |= GPMC_CONFIG_WRITEPROTECT;  /* WP is OFF */
-		gpmc_write_reg(GPMC_CONFIG, regval);
+		gpmc_config_modify(GPMC_CONFIG_WRITEPROTECT, !wval);
 		break;
 
 	default:
@@ -2236,9 +2245,7 @@ static int gpmc_probe_generic_child(struct platform_device *pdev,
 	}
 
 	/* Clear limited address i.e. enable A26-A11 */
-	val = gpmc_read_reg(GPMC_CONFIG);
-	val &= ~GPMC_CONFIG_LIMITEDADDRESS;
-	gpmc_write_reg(GPMC_CONFIG, val);
+	gpmc_config_modify(GPMC_CONFIG_LIMITEDADDRESS, 0);
 
 	/* Enable CS region */
 	gpmc_cs_enable_mem(cs);
@@ -2300,6 +2307,12 @@ static int gpmc_probe_dt(struct platform_device *pdev)
 		return ret;
 	}
 
+	gpmc_wait0_active_high = of_property_read_bool(pdev->dev.of_node,
+						"gpmc,wait0-active-high");
+
+	gpmc_wait1_active_high = of_property_read_bool(pdev->dev.of_node,
+						"gpmc,wait1-active-high");
+
 	return 0;
 }
 
@@ -2579,6 +2592,9 @@ static int gpmc_probe(struct platform_device *pdev)
 	gpmc->nb.notifier_call = omap_gpmc_context_notifier;
 	cpu_pm_register_notifier(&gpmc->nb);
 
+	gpmc_config_modify(GPMC_CONFIG_WAIT0PINPOLARITY, gpmc_wait0_active_high);
+	gpmc_config_modify(GPMC_CONFIG_WAIT1PINPOLARITY, gpmc_wait1_active_high);
+
 	return 0;
 
 gpio_init_failed:
diff --git a/drivers/mfd/stpmic1.c b/drivers/mfd/stpmic1.c
index eb3da558c3fb..403fb2dd50ac 100644
--- a/drivers/mfd/stpmic1.c
+++ b/drivers/mfd/stpmic1.c
@@ -149,6 +149,16 @@ static int stpmic1_probe(struct i2c_client *i2c,
 	}
 	dev_info(dev, "PMIC Chip Version: 0x%x\n", reg);
 
+	/* enable power cycling on turn-OFF condition - restart the processor
+	 * and do not wait on external wake-up by default
+	 */
+	ret = regmap_update_bits(ddata->regmap,	SWOFF_PWRCTRL_CR,
+			RESTART_REQUEST_ENABLED, RESTART_REQUEST_ENABLED);
+	if (ret) {
+		dev_err(dev, "Unable to update PMIC main control register: %d\n", ret);
+		return ret;
+	}
+
 	/* Initialize PMIC IRQ Chip & associated IRQ domains */
 	ret = devm_regmap_add_irq_chip(dev, ddata->regmap, ddata->irq,
 				       IRQF_ONESHOT | IRQF_SHARED,
diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 0f5a49fc7c9e..0fd9d2073ad2 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -470,6 +470,38 @@ config HISI_HIKEY_USB
 	  switching between the dual-role USB-C port and the USB-A host ports
 	  using only one USB controller.
 
+config ENCSW
+	tristate "GPIO based encoder switch driver"
+	default m
+	help
+		This driver allows GPIO connected encoder switches e.g. dip switches
+		or hexadicmal encoders to group its inputs logically and make
+		their compounded values accessible over the sysfs.
+
+config TI_SN74LV165A
+	tristate "Texas Instruments SN74LV165A"
+	depends on SYSFS && GPIO_OMAP && GPIOLIB && OF_GPIO
+	help
+	  If you say yes here you get support for the Texas Instruments
+	  SN74LV165A 8-bit shift register.
+
+	  This driver can also be built as a module. If so, the module
+	  will be called ti_sn74lv165a.
+
+config DOUT_DRV
+	tristate "GPIO and SYSFS based digital output driver"
+	depends on SYSFS && GPIOLIB
+	help
+          Expose digial outputs using sysfs interface:
+          /sys/kernel/dout_drv/DOUT_DATA
+
+config DIN_SPI_DRV
+	tristate "SPI and SYSFS based digital input driver"
+	depends on SYSFS && GPIOLIB && SPI
+	help
+	  Expose digial inputs using sysfs interface, e.g.
+	  /sys/bus/spi/devices/spi0.0/din
+
 source "drivers/misc/c2port/Kconfig"
 source "drivers/misc/eeprom/Kconfig"
 source "drivers/misc/cb710/Kconfig"
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index a086197af544..6704d742069f 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -59,3 +59,6 @@ obj-$(CONFIG_UACCE)		+= uacce/
 obj-$(CONFIG_XILINX_SDFEC)	+= xilinx_sdfec.o
 obj-$(CONFIG_HISI_HIKEY_USB)	+= hisi_hikey_usb.o
 obj-$(CONFIG_HI6421V600_IRQ)	+= hi6421v600-irq.o
+obj-$(CONFIG_TI_SN74LV165A)	+= ti_sn74lv165a.o
+obj-$(CONFIG_DOUT_DRV)		+= dout_drv.o
+obj-$(CONFIG_DIN_SPI_DRV)	+= din_spi_drv.o
diff --git a/drivers/misc/din_spi_drv.c b/drivers/misc/din_spi_drv.c
new file mode 100644
index 000000000000..6b9d829cd0aa
--- /dev/null
+++ b/drivers/misc/din_spi_drv.c
@@ -0,0 +1,267 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (c) 2019 WAGO GmbH & Co. KG
+
+///-----------------------------------------------------------------------------
+/// \file    din_spi_drv.c
+///
+/// \brief   Driver for "X3" (8 digital inputs) on EC300 devices
+///
+/// \author  Ralf Gliese, elrest Automationssysteme GmbH
+///
+/// The driver expose DIN state via sysfs file din (for example
+/// /sys/bus/spi/devices/spi0.0/din).
+///
+/// Optionally, the driver can control LEDs based on the DIN state. The LED
+/// state is refreshed every LED_REFRESH_PERIOD to ensure the LED state is
+/// up-tp-date even if no user-space process is reading the sysfs file.
+///
+/// The LED_REFRESH_PERIOD timer is scheduled on each read (this ensures there
+/// are no "useless" reads in case the sysfs file is read from user-space
+/// more often than LED_REFRESH_PERIOD). The timer expiration schedules work
+/// items in a work queue which finally read DINs and update LEDs.
+///-----------------------------------------------------------------------------
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/mutex.h>
+#include <linux/mod_devicetable.h>
+#include <linux/spi/spi.h>
+#include <linux/of_gpio.h>
+#include <linux/delay.h>
+
+#define LED_REFRESH_PERIOD (msecs_to_jiffies(100))
+
+struct din_data {
+	unsigned char dma_buffer[2];
+	int gpio_load;
+	int gpio_tok;
+	struct mutex lock;
+	unsigned int led_cnt;
+	struct din_refresh {
+		struct timer_list tim;
+		struct workqueue_struct *wq;
+		struct work_struct work;
+	} led_refresh;
+	struct spi_device *spi;
+	struct gpio_desc *leds[];
+};
+
+/* SPI Write/Read cycle */
+static int din_spi_exchange(struct spi_device *spi)
+{
+	struct din_data *dio = spi_get_drvdata(spi);
+	struct spi_message msg;
+	struct spi_transfer xfer;
+	int ret;
+
+	dio->dma_buffer[0] = 0;
+	dio->dma_buffer[1] = 0;
+
+	/* Latch input data */
+	gpio_set_value(dio->gpio_load, 0);
+	udelay(10);
+	gpio_set_value(dio->gpio_load, 1);
+
+	/* Initialize the SPI message and transfer data structures */
+	spi_message_init(&msg);
+	memset(&xfer, 0, sizeof(xfer));
+	xfer.tx_buf = xfer.rx_buf = dio->dma_buffer;
+	xfer.len = sizeof(dio->dma_buffer);
+	spi_message_add_tail(&xfer, &msg);
+
+	/* Send the message and wait for completion */
+	ret = spi_sync(spi, &msg);
+	if (ret != 0) {
+		dev_err(&spi->dev, "SPI transmission failed\n");
+		return 0x8000;
+	}
+	dev_dbg(&spi->dev, "received %02x %02x\n",
+			dio->dma_buffer[0], dio->dma_buffer[1]);
+	return (dio->dma_buffer[0] | dio->dma_buffer[1] << 8);
+}
+
+static int get_din(struct din_data *din)
+{
+	unsigned int i;
+	int ret;
+
+	ret = mutex_lock_interruptible(&din->lock);
+	if (ret < 0)
+		return ret;
+
+	ret = din_spi_exchange(din->spi);
+
+	/* schedule/re-schedule  LEDs refresh */
+	if (din->led_cnt)
+		mod_timer(&din->led_refresh.tim, jiffies + LED_REFRESH_PERIOD);
+
+	for (i = 0; i < din->led_cnt; i++) {
+		int value = (ret & (1 << i) ? 1 : 0);
+
+		gpiod_set_value(din->leds[i], value);
+	}
+
+	mutex_unlock(&din->lock);
+
+	return ret;
+}
+
+static ssize_t din_show(struct device *dev, struct device_attribute *attr,
+			char *buf)
+{
+	struct spi_device *spi = to_spi_device(dev);
+	struct din_data *din = spi_get_drvdata(spi);
+	int ret;
+
+	ret = get_din(din);
+	if (ret < 0)
+		return ret;
+
+	return sprintf(buf, "%d\n", ret);
+}
+static DEVICE_ATTR_RO(din);
+
+static void trigger_leds_refresh(struct timer_list *t)
+{
+	struct din_data *din = from_timer(din, t, led_refresh.tim);
+
+	queue_work(din->led_refresh.wq, &din->led_refresh.work);
+}
+
+static void do_leds_refresh(struct work_struct *work)
+{
+	struct din_data *din = container_of(work, struct din_data, led_refresh.work);
+
+	get_din(din);
+}
+
+static int alloc_gpio(struct device *dev, const char *name)
+{
+	int ret, gpio = of_get_named_gpio(dev->of_node, name, 0);
+
+	if (gpio < 0) {
+		dev_err(dev, "GPIO '%s' not found in device tree\n", name);
+		return gpio;
+	}
+	ret = devm_gpio_request_one(dev, gpio, GPIOF_OUT_INIT_HIGH, name);
+	if (ret < 0) {
+		dev_err(dev, "Cannot request GPIO '%s' %d\n", name, gpio);
+		return ret;
+	}
+	dev_dbg(dev, "GPIO '%s' has Number %d\n", name, gpio);
+	return gpio;
+}
+
+static int din_spi_drv_probe(struct spi_device *spi)
+{
+	struct device *dev = &spi->dev;
+	struct din_data *din;
+	unsigned int i;
+	int led_cnt;
+	int error;
+
+	led_cnt = gpiod_count(dev, "leds");
+	if (led_cnt < 0) {
+		dev_err(dev, "Missing GPIOs assigned to LEDs\n");
+		return led_cnt;
+	}
+
+	din = devm_kzalloc(dev, struct_size(din, leds, led_cnt), GFP_KERNEL);
+	if (!din)
+		return -ENOMEM;
+
+	din->led_cnt = led_cnt;
+	for (i = 0; i < led_cnt; i++) {
+		din->leds[i] = devm_gpiod_get_index_optional(dev, "leds", i,
+				GPIOD_OUT_LOW);
+		if (IS_ERR(din->leds[i])) {
+			dev_err(dev, "Failed to get din led %d gpio", i);
+			return PTR_ERR(din->leds[i]);
+		}
+	}
+
+	din->gpio_load = alloc_gpio(dev, "gpio-load");
+	if (din->gpio_load < 0)
+		return din->gpio_load;
+
+	din->gpio_tok = alloc_gpio(dev, "gpio-tok");
+	if (din->gpio_tok < 0)
+		return din->gpio_tok;
+
+	din->spi = spi;
+	mutex_init(&din->lock);
+	spi_set_drvdata(spi, din);
+
+	/* Initialize and enable output lines */
+	din_spi_exchange(spi);
+	gpio_set_value(din->gpio_load, 1);
+
+	if (din->led_cnt) {
+		din->led_refresh.wq = create_workqueue("din_spi_driver/led_refresh");
+		if (!din->led_refresh.wq) {
+			dev_err(dev, "cannot create led_refresh work queue\n");
+			return -ENOMEM;
+		}
+
+		INIT_WORK(&din->led_refresh.work, do_leds_refresh);
+
+		timer_setup(&din->led_refresh.tim, trigger_leds_refresh, 0);
+		mod_timer(&din->led_refresh.tim, jiffies);
+	}
+
+	error = device_create_file(dev, &dev_attr_din);
+	if (error < 0) {
+		dev_err(dev, "cannot create sysfs for din_dpi_drv\n");
+		flush_workqueue(din->led_refresh.wq);
+		destroy_workqueue(din->led_refresh.wq);
+		for (i = 0; i < din->led_cnt; i++)
+			gpiod_set_value(din->leds[i], 0);
+
+		return -ENODEV;
+	}
+
+	return 0;
+}
+
+static int din_spi_drv_remove(struct spi_device *spi)
+{
+	struct din_data *din = spi_get_drvdata(spi);
+	unsigned int i;
+
+	if (din->led_cnt) {
+		del_timer_sync(&din->led_refresh.tim);
+
+		flush_workqueue(din->led_refresh.wq);
+		destroy_workqueue(din->led_refresh.wq);
+	}
+
+	device_remove_file(&spi->dev, &dev_attr_din);
+
+	for (i = 0; i < din->led_cnt; i++)
+		gpiod_set_value(din->leds[i], 0);
+
+	return 0;
+}
+
+static const struct spi_device_id din_spi_ids[] = {
+	{ "din_spi", 0 },
+	{ },
+};
+MODULE_DEVICE_TABLE(spi, din_spi_ids);
+
+static struct spi_driver din_spi_driver = {
+	.driver = {
+		.name	= "din_spi_driver",
+		.owner	= THIS_MODULE,
+	},
+	.id_table = din_spi_ids,
+	.probe	= din_spi_drv_probe,
+	.remove = din_spi_drv_remove,
+};
+
+module_spi_driver(din_spi_driver);
+
+MODULE_AUTHOR("elrest");
+MODULE_DESCRIPTION("din_spi driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/misc/dout_drv.c b/drivers/misc/dout_drv.c
new file mode 100644
index 000000000000..51f52aaa8252
--- /dev/null
+++ b/drivers/misc/dout_drv.c
@@ -0,0 +1,199 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (c) 2020 WAGO GmbH & Co. KG
+
+///------------------------------------------------------------------------------
+/// \file    dout_drv.c
+///
+/// \brief   Driver for digital OUT on CC100 and similar devices
+///
+/// \author  Ralf Gliese, elrest Automationssysteme GmbH
+///          Tomas Marek, elrest Automationssysteme GmbH
+///
+/// Expose digial IOs using sysfs interface:
+///   /sys/kernel/dout_drv/DOUT_DATA
+///
+/// Dedicated driver is used instead of GPIOs from user space to provide
+/// consistent interface with PCB pins to bit number mapping implemented in
+/// Kernel.
+///
+/// DTS binding example:
+///
+///       dout_drv {
+///                compatible = "elrest,dout_drv";
+///                douts-gpios = <&gpioh 10 GPIO_ACTIVE_HIGH>,     /* bit 0 */
+///                        <&gpioi 8  GPIO_ACTIVE_HIGH>,
+///                        <&gpioi 2  GPIO_ACTIVE_HIGH>,
+///                        <&gpioi 6  GPIO_ACTIVE_HIGH>;
+///                leds-gpios = <&gpioj 15 GPIO_ACTIVE_HIGH>,      /* bit 0 LED */
+///                        <&gpioj 12 GPIO_ACTIVE_HIGH>,
+///                        <&gpiok 5 GPIO_ACTIVE_HIGH>,
+///                        <&gpiok 4 GPIO_ACTIVE_HIGH>;
+///                status = "okay";
+///        };
+///
+/// The leds-gpios is optional.
+///
+///------------------------------------------------------------------------------
+
+#include <linux/module.h>
+#include <linux/of_device.h>
+#include <linux/gpio/consumer.h>
+
+struct dout_drv_gpios {
+	struct gpio_desc *out;
+	struct gpio_desc *led;
+};
+
+struct dout_drv_priv {
+	unsigned long dout_data;
+	unsigned int pin_cnt;
+	struct mutex lock;
+	struct kobject *dout_drv_kobj;
+	struct dout_drv_gpios gpios[];
+};
+
+static struct dout_drv_priv *drv_priv;
+
+static ssize_t dout_data_show(struct kobject *kobj, struct kobj_attribute *attr,
+	char *buf)
+{
+	return sprintf(buf, "%lu\n", drv_priv->dout_data);
+}
+
+static ssize_t dout_data_store(struct kobject *kobj, struct kobj_attribute *attr,
+				const char *buf, size_t count)
+{
+	unsigned long dout_data;
+	unsigned int i;
+	int ret;
+
+	if (kstrtoul(buf, 0, &dout_data))
+		return -EINVAL;
+
+	/* check the value is not greater than max pins */
+	if (dout_data > (1 << drv_priv->pin_cnt))
+		return -EINVAL;
+
+	ret = mutex_lock_interruptible(&drv_priv->lock);
+	if (ret)
+		return ret;
+
+	drv_priv->dout_data = dout_data;
+	for (i = 0; i < drv_priv->pin_cnt; i++) {
+		unsigned long dout = (dout_data & (1 << i) ? 1 : 0);
+
+		gpiod_set_value(drv_priv->gpios[i].out, dout);
+		if (drv_priv->gpios[i].led)
+			gpiod_set_value(drv_priv->gpios[i].led, dout);
+	}
+
+	mutex_unlock(&drv_priv->lock);
+	return count;
+}
+
+static struct kobj_attribute dout_drv_attribute =
+	__ATTR(DOUT_DATA, 0644, dout_data_show, dout_data_store);
+
+static int dout_drv_probe(struct platform_device *pdev)
+{
+	int pins = gpiod_count(&pdev->dev, "douts");
+	unsigned int i;
+	int error;
+
+	dev_info(&pdev->dev, "digital output driver init (pins %d)\n", pins);
+
+	if (pins < 0 || pins > (8 * sizeof(drv_priv->dout_data))) {
+		dev_err(&pdev->dev, "Unsupported number of bits %d", pins);
+		return -EINVAL;
+	}
+
+	drv_priv = devm_kzalloc(&pdev->dev, struct_size(drv_priv, gpios, pins),
+				GFP_KERNEL);
+	if (!drv_priv)
+		return -ENOMEM;
+
+	for (i = 0; i < pins; i++) {
+		struct gpio_desc *out;
+		struct gpio_desc *led;
+
+		out = devm_gpiod_get_index(&pdev->dev, "douts", i, GPIOD_OUT_LOW);
+		if (IS_ERR(out)) {
+			dev_err(&pdev->dev, "Failed to get dout bit %d gpio", i);
+			return PTR_ERR(out);
+		}
+
+		led = devm_gpiod_get_index_optional(&pdev->dev, "leds", i, GPIOD_OUT_LOW);
+		if (IS_ERR(led)) {
+			dev_err(&pdev->dev, "Failed to get dout led %d gpio", i);
+			return PTR_ERR(led);
+		}
+
+		drv_priv->gpios[i].out = out;
+		drv_priv->gpios[i].led = led;
+	}
+
+	mutex_init(&drv_priv->lock);
+
+	drv_priv->pin_cnt = pins;
+
+	/* initialize dout with actual gpio value */
+	drv_priv->dout_data = 0;
+	for (i = 0; i < drv_priv->pin_cnt; i++)
+		drv_priv->dout_data = drv_priv->dout_data | (gpiod_get_value(drv_priv->gpios[i].out) << i);
+
+	drv_priv->dout_drv_kobj = kobject_create_and_add("dout_drv", kernel_kobj);
+	if (!drv_priv->dout_drv_kobj) {
+		dev_err(&pdev->dev, "Cannot create kernel object");
+		return -ENOMEM;
+	}
+
+	error = sysfs_create_file(drv_priv->dout_drv_kobj, &dout_drv_attribute.attr);
+	if (error) {
+		dev_err(&pdev->dev, "Cannot create sysfs interface");
+		goto release_kobj;
+	}
+
+	return 0;
+
+
+release_kobj:
+	kobject_put(drv_priv->dout_drv_kobj);
+	return -ENOMEM;
+}
+
+static int dout_drv_remove(struct platform_device *pdev)
+{
+	unsigned int i;
+
+	kobject_put(drv_priv->dout_drv_kobj);
+
+	for (i = 0; i < drv_priv->pin_cnt; i++)	{
+		gpiod_set_value(drv_priv->gpios[i].out, 0);
+		if (drv_priv->gpios[i].led)
+			gpiod_set_value(drv_priv->gpios[i].led, 0);
+	}
+
+	return 0;
+}
+
+static const struct of_device_id of_dout_drv_match[] = {
+	{.compatible = "elrest,dout_drv"},
+	{ }
+};
+
+static struct platform_driver dout_drv = {
+	.probe = dout_drv_probe,
+	.remove = dout_drv_remove,
+	.driver = {
+	.name = "dout_drv",
+		.owner = THIS_MODULE,
+		.of_match_table = of_dout_drv_match,
+	}
+};
+
+module_platform_driver(dout_drv);
+
+MODULE_AUTHOR("elrest GmbH");
+MODULE_DESCRIPTION("dout_drv");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:dout_drv");
diff --git a/drivers/misc/ti_sn74lv165a.c b/drivers/misc/ti_sn74lv165a.c
new file mode 100644
index 000000000000..7b42493fddfe
--- /dev/null
+++ b/drivers/misc/ti_sn74lv165a.c
@@ -0,0 +1,324 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+/* Linux kernel driver for Texas Instruments SN74LV165A
+ * 8-bit-shift-register on gpio lines
+ *
+ * Copyright (C) 2015 WAGO Automation
+ *
+ * Author: Oleg Karfich
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/of_platform.h>
+#include <linux/of_gpio.h>
+#include <linux/module.h>
+#include <linux/err.h>
+#include <linux/delay.h>
+
+#define DEFAULT_PERIOD 4 /* milliseconds */
+#define NUM_BITS 8
+
+struct sn74_gpio {
+	unsigned int num;
+	bool active_low;
+};
+
+struct sn74_gpio_info {
+	struct sn74_gpio clk;
+	struct sn74_gpio load;
+	struct sn74_gpio input;
+};
+
+struct sn74_platform_data {
+	struct sn74_gpio_info *ctrl_gpios;
+	unsigned long period;
+	unsigned int bits;
+};
+
+static int sn74_get_input(struct sn74_gpio *gpio)
+{
+	return (gpio_get_value(gpio->num) ^ gpio->active_low);
+}
+
+static void sn74_set_ctrl_gpio(struct sn74_gpio *gpio, int what)
+{
+	gpio_set_value(gpio->num, what ^ gpio->active_low);
+}
+
+static ssize_t sn74_input_value_show(struct device *dev,
+				     struct device_attribute *attr, char *buf)
+{
+	struct sn74_platform_data *pdata;
+	struct sn74_gpio_info *ctrl_gpios;
+	unsigned long half_period;
+	int i, value = 0;
+
+	pr_debug("## %s:%d\n", __func__, __LINE__);
+
+	pdata = dev_get_drvdata(dev);
+	if (!pdata) {
+		dev_warn(dev, "%s:%d > could not get platform-data\n", __func__,
+			 __LINE__);
+		return -1;
+	}
+
+	ctrl_gpios = pdata->ctrl_gpios;
+	half_period = (pdata->period / 2);
+
+	/* load register */
+	sn74_set_ctrl_gpio(&ctrl_gpios->load, 1);
+	ndelay(half_period);
+	sn74_set_ctrl_gpio(&ctrl_gpios->load, 0);
+
+	for (i = 0; i < pdata->bits; i++) {
+		value <<= 1;
+		value |= sn74_get_input(&ctrl_gpios->input);
+
+		/* do one clk cycle */
+		sn74_set_ctrl_gpio(&ctrl_gpios->clk, 1);
+		ndelay(half_period);
+		sn74_set_ctrl_gpio(&ctrl_gpios->clk, 0);
+		ndelay(half_period);
+	}
+
+	return sprintf(buf, "0x%02x\n", value);
+}
+
+/*
+ * ATTRIBUTES:
+ *
+ *	/sys/devices/<dts-node-name>/value
+ *
+ */
+static DEVICE_ATTR(value, 0444, sn74_input_value_show, NULL);
+
+static struct attribute *sn74_attrs[] = {
+	&dev_attr_value.attr,
+	NULL,
+};
+
+static struct attribute_group sn74_attr_group = {
+	.attrs = sn74_attrs,
+};
+
+#ifdef CONFIG_OF
+
+static struct sn74_platform_data *sn74_get_devtree_pdata(struct device *dev)
+{
+	struct device_node *node;
+	struct sn74_platform_data *pdata = NULL;
+	struct sn74_gpio_info *ctrl_gpios;
+	enum of_gpio_flags flags;
+	int gpio, period, ret;
+
+	dev_dbg(dev, "## %s:%d\n", __func__, __LINE__);
+
+	node = dev->of_node;
+	if (!node) {
+		ret = -ENODEV;
+		goto err_out;
+	}
+
+	/* automatically freed on driver detach */
+	pdata = devm_kzalloc(dev, sizeof(*pdata), GFP_KERNEL);
+	if (!pdata) {
+		ret = -ENOMEM;
+		goto err_free;
+	}
+
+	ctrl_gpios = devm_kzalloc(dev, sizeof(*ctrl_gpios), GFP_KERNEL);
+	if (!ctrl_gpios) {
+		ret = -ENOMEM;
+		goto err_free;
+	}
+
+	pdata->ctrl_gpios = ctrl_gpios;
+
+	if (!of_find_property(node, "gpios", NULL)) {
+		dev_err(dev, "failed to get control gpios\n");
+		ret = -ENODEV;
+		goto err_free;
+	}
+
+	gpio = of_get_gpio_flags(node, 0, &flags);
+	if (gpio < 0) {
+		ret = gpio;
+		goto err_free;
+	}
+
+	pdata->ctrl_gpios->clk.num = gpio;
+	pdata->ctrl_gpios->clk.active_low = flags & OF_GPIO_ACTIVE_LOW;
+
+	dev_dbg(dev, "clk gpio-num : %d, active low : %d\n",
+		pdata->ctrl_gpios->clk.num, pdata->ctrl_gpios->clk.active_low);
+
+	gpio = of_get_gpio_flags(node, 1, &flags);
+	if (gpio < 0) {
+		ret = gpio;
+		goto err_free;
+	}
+
+	pdata->ctrl_gpios->input.num = gpio;
+	pdata->ctrl_gpios->input.active_low = flags & OF_GPIO_ACTIVE_LOW;
+
+	dev_dbg(dev, "input gpio-num : %d, active low : %d\n",
+		pdata->ctrl_gpios->input.num,
+		pdata->ctrl_gpios->input.active_low);
+
+	gpio = of_get_gpio_flags(node, 2, &flags);
+	if (gpio < 0) {
+		ret = gpio;
+		goto err_free;
+	}
+
+	pdata->ctrl_gpios->load.num = gpio;
+	pdata->ctrl_gpios->load.active_low = flags & OF_GPIO_ACTIVE_LOW;
+
+	dev_dbg(dev, "load gpio-num : %d, active low : %d\n",
+		pdata->ctrl_gpios->load.num,
+		pdata->ctrl_gpios->load.active_low);
+
+	if (of_property_read_u32(node, "clk,period", &period)) {
+		period = DEFAULT_PERIOD;
+		dev_warn(dev, "not freq value found, using default value: %d\n",
+			 period);
+	}
+	pdata->period = (((unsigned long)period) *
+			 1000000); /* convert to nano-seconds for udelay */
+
+	dev_dbg(dev, "clk period : %ld ns\n", pdata->period);
+
+	return pdata;
+
+err_free:
+	devm_kfree(dev, pdata);
+	devm_kfree(dev, ctrl_gpios);
+
+err_out:
+	return ERR_PTR(ret);
+
+}
+
+static const struct of_device_id sn74_of_match[] = {
+	{
+		.compatible = "ti,sn74lv165a",
+	},
+	{},
+};
+MODULE_DEVICE_TABLE(of, sn74_of_match);
+
+#else
+
+static struct sn74_platform_data *sn74_get_devtree_pdata(struct device *dev)
+{
+	return ERR_PTR(-ENODEV);
+}
+
+#endif
+
+static int sn74_request_gpios(struct device *dev)
+{
+	struct sn74_platform_data *pdata;
+	int ret = -1;
+
+	dev_dbg(dev, "## %s:%d\n", __func__, __LINE__);
+
+	pdata = dev_get_drvdata(dev);
+	if (pdata) {
+		ret = devm_gpio_request(dev, pdata->ctrl_gpios->clk.num,
+					"sn74_clk");
+		if (ret)
+			return ret;
+
+		gpio_direction_output(pdata->ctrl_gpios->clk.num, 0);
+
+		ret = devm_gpio_request(dev, pdata->ctrl_gpios->load.num,
+					"sn74_load");
+		if (ret)
+			return ret;
+
+		gpio_direction_output(pdata->ctrl_gpios->load.num, 1);
+
+		ret = devm_gpio_request(dev, pdata->ctrl_gpios->input.num,
+					"sn74_input");
+		if (ret)
+			return ret;
+
+		gpio_direction_input(pdata->ctrl_gpios->input.num);
+	}
+	return ret;
+}
+
+static int sn74_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct sn74_platform_data *pdata;
+	int ret;
+
+	dev_dbg(dev, "## %s:%d\n", __func__, __LINE__);
+
+	pdata = dev_get_platdata(dev);
+	if (IS_ERR_OR_NULL(pdata)) {
+		pdata = sn74_get_devtree_pdata(dev);
+		if (IS_ERR_OR_NULL(pdata))
+			return PTR_ERR(pdata);
+	}
+
+	pdata->bits = NUM_BITS;
+
+	dev_set_drvdata(dev, pdata);
+
+	ret = sn74_request_gpios(dev);
+	if (ret) {
+		dev_err(dev, "could not request gpios\n");
+		return ret;
+	}
+
+	ret = sysfs_create_group(&dev->kobj, &sn74_attr_group);
+	if (ret)
+		dev_err(dev, "cant export sn74 sysfs group attribute\n");
+
+	dev_info(dev, "probe success\n");
+
+	return ret;
+}
+
+static int sn74_remove(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+
+	dev_dbg(dev, "## %s:%d\n", __func__, __LINE__);
+
+	sysfs_remove_group(&dev->kobj, &sn74_attr_group);
+
+	return 0;
+}
+
+static struct platform_driver
+	sn74_device_driver = { .probe = sn74_probe,
+			       .remove = sn74_remove,
+			       .driver = {
+				       .name = "sn74lv165a",
+				       .owner = THIS_MODULE,
+				       .of_match_table =
+					       of_match_ptr(sn74_of_match),
+			       } };
+
+static int __init sn74_init(void)
+{
+	return platform_driver_register(&sn74_device_driver);
+}
+
+static void __exit sn74_exit(void)
+{
+	platform_driver_unregister(&sn74_device_driver);
+}
+
+module_init(sn74_init);
+module_exit(sn74_exit);
+
+MODULE_AUTHOR("Oleg Karfich <oleg.karfich@wago.com>");
+MODULE_DESCRIPTION("SN74LV165A 8-bit shift register");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/mmc/core/core.c b/drivers/mmc/core/core.c
index 368f10405e13..d3fd827a4b5c 100644
--- a/drivers/mmc/core/core.c
+++ b/drivers/mmc/core/core.c
@@ -174,7 +174,8 @@ void mmc_request_done(struct mmc_host *host, struct mmc_request *mrq)
 	if (!err || !cmd->retries || mmc_card_removed(host->card)) {
 		mmc_should_fail_request(host, mrq);
 
-		if (!host->ongoing_mrq)
+		// trigger the led only if the SD card is there
+		if ((!host->ongoing_mrq) && (host->card))
 			led_trigger_event(host->led, LED_OFF);
 
 		if (mrq->sbc) {
@@ -352,7 +353,10 @@ int mmc_start_request(struct mmc_host *host, struct mmc_request *mrq)
 	if (err)
 		return err;
 
-	led_trigger_event(host->led, LED_FULL);
+	// trigger the led only if the SD card is there
+	if (host->card)
+		led_trigger_event(host->led, LED_FULL);
+
 	__mmc_start_request(host, mrq);
 
 	return 0;
diff --git a/drivers/net/can/c_can/c_can_main.c b/drivers/net/can/c_can/c_can_main.c
index 52671d1ea17d..bd648536b492 100644
--- a/drivers/net/can/c_can/c_can_main.c
+++ b/drivers/net/can/c_can/c_can_main.c
@@ -521,7 +521,7 @@ static int c_can_set_bittiming(struct net_device *dev)
 			(tseg2 << BTR_TSEG2_SHIFT);
 	reg_brpe = brpe & BRP_EXT_BRPE_MASK;
 
-	netdev_info(dev,
+	netdev_dbg(dev,
 		    "setting BTR=%04x BRPE=%04x\n", reg_btr, reg_brpe);
 
 	ctrl_save = priv->read_reg(priv, C_CAN_CTRL_REG);
@@ -928,6 +928,8 @@ static int c_can_handle_state_change(struct net_device *dev,
 	switch (error_type) {
 	case C_CAN_NO_ERROR:
 		priv->can.state = CAN_STATE_ERROR_ACTIVE;
+		priv->write_reg(priv, C_CAN_CTRL_REG, CONTROL_ENABLE_AR);
+		netdev_dbg(dev, "enable AR\n");
 		break;
 	case C_CAN_ERROR_WARNING:
 		/* error warning state */
@@ -938,11 +940,15 @@ static int c_can_handle_state_change(struct net_device *dev,
 		/* error passive state */
 		priv->can.can_stats.error_passive++;
 		priv->can.state = CAN_STATE_ERROR_PASSIVE;
+		priv->write_reg(priv, C_CAN_CTRL_REG, CONTROL_DISABLE_AR);
+		netdev_dbg(dev, "disable AR\n");
 		break;
 	case C_CAN_BUS_OFF:
 		/* bus-off state */
 		priv->can.state = CAN_STATE_BUS_OFF;
 		priv->can.can_stats.bus_off++;
+		priv->write_reg(priv, C_CAN_CTRL_REG, CONTROL_DISABLE_AR);
+		netdev_dbg(dev, "disable AR\n");
 		break;
 	default:
 		break;
@@ -950,8 +956,13 @@ static int c_can_handle_state_change(struct net_device *dev,
 
 	/* propagate the error condition to the CAN stack */
 	skb = alloc_can_err_skb(dev, &cf);
-	if (unlikely(!skb))
-		return 0;
+	if (unlikely(!skb)) {
+		if (printk_ratelimit())
+			netdev_err(dev,
+				"c_can_error: alloc_can_err_skb() failed\n");
+		return -ENOMEM;
+	}
+
 
 	__c_can_get_berr_counter(dev, &bec);
 	reg_err_counter = priv->read_reg(priv, C_CAN_ERR_CNT_REG);
@@ -1090,20 +1101,22 @@ static int c_can_poll(struct napi_struct *napi, int quota)
 	}
 
 	/* handle state changes */
+	if ((curr & STATUS_BOFF) && (!(last & STATUS_BOFF))) {
+		netdev_dbg(dev, "entered bus off state\n");
+		work_done += c_can_handle_state_change(dev, C_CAN_BUS_OFF);
+		goto end;
+	}
+
 	if ((curr & STATUS_EWARN) && (!(last & STATUS_EWARN))) {
 		netdev_dbg(dev, "entered error warning state\n");
-		work_done += c_can_handle_state_change(dev, C_CAN_ERROR_WARNING);
+		if (work_done < quota)
+			work_done += c_can_handle_state_change(dev, C_CAN_ERROR_WARNING);
 	}
 
 	if ((curr & STATUS_EPASS) && (!(last & STATUS_EPASS))) {
 		netdev_dbg(dev, "entered error passive state\n");
-		work_done += c_can_handle_state_change(dev, C_CAN_ERROR_PASSIVE);
-	}
-
-	if ((curr & STATUS_BOFF) && (!(last & STATUS_BOFF))) {
-		netdev_dbg(dev, "entered bus off state\n");
-		work_done += c_can_handle_state_change(dev, C_CAN_BUS_OFF);
-		goto end;
+		if (work_done < quota)
+			work_done += c_can_handle_state_change(dev, C_CAN_ERROR_PASSIVE);
 	}
 
 	/* handle bus recovery events */
@@ -1123,19 +1136,22 @@ static int c_can_poll(struct napi_struct *napi, int quota)
 	}
 
 	/* handle lec errors on the bus */
-	work_done += c_can_handle_bus_err(dev, curr & LEC_MASK);
+	if (work_done < quota)
+		work_done += c_can_handle_bus_err(dev, curr & LEC_MASK);
 
+end:
 	/* Handle Tx/Rx events. We do this unconditionally */
-	work_done += c_can_do_rx_poll(dev, (quota - work_done));
-	c_can_do_tx(dev);
+	if (work_done < quota)
+		work_done += c_can_do_rx_poll(dev, (quota - work_done));
 
-end:
-	if (work_done < quota) {
+	if (priv->can.state != CAN_STATE_BUS_OFF)
+		c_can_do_tx(dev);
+
+	if (work_done < quota)
 		napi_complete_done(napi, work_done);
-		/* enable all IRQs if we are not in bus off state */
-		if (priv->can.state != CAN_STATE_BUS_OFF)
-			c_can_irq_control(priv, true);
-	}
+
+	c_can_irq_control(priv, true);
+
 
 	return work_done;
 }
diff --git a/drivers/net/can/ti_hecc.c b/drivers/net/can/ti_hecc.c
index 353062ead98f..2cf30d95db70 100644
--- a/drivers/net/can/ti_hecc.c
+++ b/drivers/net/can/ti_hecc.c
@@ -686,8 +686,10 @@ static irqreturn_t ti_hecc_interrupt(int irq, void *dev_id)
 			       priv->use_hecc1int ?
 			       HECC_CANGIF1 : HECC_CANGIF0);
 
+/* this results blocking in kernel 4.9
 	if (!int_status)
 		return IRQ_NONE;
+*/
 
 	err_status = hecc_read(priv, HECC_CANES);
 	if (unlikely(err_status & HECC_CANES_FLAGS))
@@ -796,8 +798,8 @@ static int ti_hecc_open(struct net_device *ndev)
 	struct ti_hecc_priv *priv = netdev_priv(ndev);
 	int err;
 
-	err = request_irq(ndev->irq, ti_hecc_interrupt, IRQF_SHARED,
-			  ndev->name, ndev);
+	err = request_irq(ndev->irq, ti_hecc_interrupt, IRQF_SHARED |
+			  IRQF_THREAD_TBL_LOOKUP, ndev->name, ndev);
 	if (err) {
 		netdev_err(ndev, "error requesting interrupt\n");
 		return err;
diff --git a/drivers/net/dsa/Kconfig b/drivers/net/dsa/Kconfig
index a5f1aa911fe2..fe420fcb9a91 100644
--- a/drivers/net/dsa/Kconfig
+++ b/drivers/net/dsa/Kconfig
@@ -2,6 +2,13 @@
 menu "Distributed Switch Architecture drivers"
 	depends on NET_DSA
 
+config NET_DSA_KSZ8863
+	tristate "Micrel KSZ8863 ethernet switch chip support"
+	select NET_DSA_TAG_TAIL
+	help
+	  This enables support for the Micrel KSZ8863 ethernet switch
+	  chip.
+
 source "drivers/net/dsa/b53/Kconfig"
 
 config NET_DSA_BCM_SF2
diff --git a/drivers/net/dsa/Makefile b/drivers/net/dsa/Makefile
index f3598c040994..ccb9d147685a 100644
--- a/drivers/net/dsa/Makefile
+++ b/drivers/net/dsa/Makefile
@@ -25,3 +25,4 @@ obj-y				+= ocelot/
 obj-y				+= qca/
 obj-y				+= sja1105/
 obj-y				+= xrs700x/
+obj-y				+= ksz886x/
diff --git a/drivers/net/dsa/ksz886x/Makefile b/drivers/net/dsa/ksz886x/Makefile
new file mode 100644
index 000000000000..9e878f4626d3
--- /dev/null
+++ b/drivers/net/dsa/ksz886x/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_NET_DSA_KSZ8863)	+= ksz8863.o debugfs.o
diff --git a/drivers/net/dsa/ksz886x/debugfs.c b/drivers/net/dsa/ksz886x/debugfs.c
new file mode 100644
index 000000000000..26246b57f369
--- /dev/null
+++ b/drivers/net/dsa/ksz886x/debugfs.c
@@ -0,0 +1,125 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/* Micrel KSZ8863 Ethernet switch debugfs support
+ *
+ * Copyright (c) 2018 WAGO Kontakttechnick GmbH
+ */
+
+#include <linux/kernel.h>
+#include <linux/debugfs.h>
+
+#include <linux/ksz8863.h>
+#include "debugfs.h"
+
+#define DUMP_SWITCH_REGS_ID 0
+#define DUMP_PORT_REGS_ID 1
+
+/* list of files published via debugfs*/
+static char const *const files[] = { [DUMP_SWITCH_REGS_ID] = "dump_switch_regs",
+				     [DUMP_PORT_REGS_ID] = "dump_phy_regs" };
+
+static inline struct ksz8863_chip *get_chip(struct file *filp)
+{
+	return filp->f_inode->i_private;
+}
+
+static int ksz8863_read(struct ksz8863_chip *chip, int reg, u8 *val)
+{
+	return chip->mii_ops->read(chip, reg, val);
+}
+
+static bool ksz8863_check_filename(struct file *filp, int file_index)
+{
+	return strcmp(files[file_index], filp->f_path.dentry->d_iname) == 0;
+}
+
+static ssize_t ksz8863_switch_reg_dump_read(struct file *filp,
+					    char __user *user_buf, size_t count,
+					    loff_t *off)
+{
+	struct ksz8863_chip *chip = get_chip(filp);
+	const int buf_size = 10000;
+	char *reg_dump_buf = kmalloc(buf_size, GFP_KERNEL);
+	int ret, port;
+	char *pos = reg_dump_buf;
+	u8 sw_gl_reg, port_reg;
+
+	pos += sprintf(pos, "=== SWITCH GCTL REG 0 - 15 dump ===\n");
+
+	mutex_lock(&chip->reg_lock);
+
+	for (sw_gl_reg = 0; sw_gl_reg < KSZ8863_REG_PORTS_BASE; sw_gl_reg++) {
+		u8 reg_val;
+
+		ret = ksz8863_read(chip, sw_gl_reg, &reg_val);
+		pos += sprintf(pos, "  REG %d (0x%02X) value: 0x%02X\n",
+			       sw_gl_reg, sw_gl_reg, reg_val);
+	}
+
+	for (port = 0; port < KSZ8863_NUM_PORTS; port++) {
+		pos += sprintf(pos, "=== SWITCH PORT %d dump ===\n", port);
+		for (port_reg = KSZ8863_REG_PORT1_CTRL0;
+		     port_reg <= KSZ8863_REG_PORT1_CTRL13; port_reg++) {
+			u8 reg = port * KSZ8863_REG_PORTS_BASE + port_reg;
+			u8 reg_val;
+
+			ret = ksz8863_read(chip, reg, &reg_val);
+			pos += sprintf(pos, "  REG %d (0x%02X) value: 0x%02X\n",
+				       reg, reg, reg_val);
+		}
+	}
+
+	mutex_unlock(&chip->reg_lock);
+	ret = simple_read_from_buffer(user_buf, count, off, reg_dump_buf,
+				      strlen(reg_dump_buf));
+
+	kfree(reg_dump_buf);
+	return ret;
+}
+
+static ssize_t ksz8863_debugfs_read(struct file *filp, char __user *buffer,
+				    size_t count, loff_t *off)
+{
+	if (ksz8863_check_filename(filp, DUMP_SWITCH_REGS_ID))
+		return ksz8863_switch_reg_dump_read(filp, buffer, count, off);
+
+	return 0;
+}
+
+static ssize_t ksz8863_debugfs_write(struct file *filp, const char __user *s,
+				     size_t count, loff_t *off)
+{
+	return 0;
+}
+
+static const struct file_operations debugfs_ops = {
+	.read = ksz8863_debugfs_read,
+	.write = ksz8863_debugfs_write
+};
+
+void ksz8863_debugfs_destroy(struct ksz8863_chip *chip)
+{
+	if (!IS_ERR_OR_NULL(chip->debugfs_root_entry))
+		debugfs_remove_recursive(chip->debugfs_root_entry);
+}
+
+int ksz8863_debugfs_setup(struct ksz8863_chip *chip)
+{
+	struct dentry *entry;
+
+	entry = debugfs_create_dir("ksz8863", NULL);
+	if (IS_ERR_OR_NULL(entry))
+		goto out_err;
+
+	chip->debugfs_root_entry = entry;
+
+	entry = debugfs_create_file(files[DUMP_SWITCH_REGS_ID], 0600,
+				    chip->debugfs_root_entry, chip,
+				    &debugfs_ops);
+	if (IS_ERR_OR_NULL(entry))
+		goto out_err;
+
+	return 0;
+
+out_err:
+	return (entry) ? PTR_ERR(entry) : -EINVAL;
+}
diff --git a/drivers/net/dsa/ksz886x/debugfs.h b/drivers/net/dsa/ksz886x/debugfs.h
new file mode 100644
index 000000000000..47e05e8db987
--- /dev/null
+++ b/drivers/net/dsa/ksz886x/debugfs.h
@@ -0,0 +1,11 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+#ifndef _KSZ8863_DEBUGFS_H
+#define _KSZ8863_DEBUGFS_H
+
+#include <linux/ksz8863.h>
+
+void ksz8863_debugfs_destroy(struct ksz8863_chip *chip);
+int ksz8863_debugfs_setup(struct ksz8863_chip *chip);
+
+#endif /* _KSZ8863_DEBUGFS_H */
diff --git a/drivers/net/dsa/ksz886x/ksz8863.c b/drivers/net/dsa/ksz886x/ksz8863.c
new file mode 100644
index 000000000000..d6d6b9bbfeb4
--- /dev/null
+++ b/drivers/net/dsa/ksz886x/ksz8863.c
@@ -0,0 +1,965 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/* net/dsa/ksz886x/ksz8863.c - Micrel KSZ8863 switch chip support
+ *
+ * Copyright (c) 2010 SAGEMCOM
+ * Copyright (C) 2017 Wago Kontakttechnik GmbH
+ *
+ * Author: Karl Beldan <karl.beldan@sagemcom.com>
+ * Author: Heinrich Toews <heinrich.toews@wago.com>
+ * Author: Andreas Schmidt <andreas.schmidt@wago.com>
+ *
+ * This driver is oriented on Marvell dsa driver for mv88e6xxx switches.
+ * Some parts and approaches are copied from ksz8863 driver implementation
+ * of Karl Beldan.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#define pr_fmt(fmt) "dsa: ksz8863: " fmt
+
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_net.h>
+#include <linux/mdio.h>
+#include <linux/phy.h>
+#include <linux/gpio/consumer.h>
+#include <net/dsa.h>
+#include <linux/delay.h>
+#include <linux/etherdevice.h>
+#include <linux/ksz8863.h>
+#include <linux/if_bridge.h>
+
+#include "debugfs.h"
+
+static inline int port_to_index(int port)
+{
+	return port - KSZ8863_EXT_PORT1_ID;
+}
+
+static inline int index_to_port(int index)
+{
+	return index + KSZ8863_EXT_PORT1_ID;
+}
+
+static enum dsa_tag_protocol
+ksz8863_get_tag_protocol(struct dsa_switch *ds, int port,
+			 enum dsa_tag_protocol mprot)
+{
+	return DSA_TAG_PROTO_KSZ8863;
+}
+
+static struct net_device *ksz8863_get_bridge_of_port(struct ksz8863_chip *chip,
+						     int port)
+{
+	return chip->ports[port_to_index(port)].bridge;
+}
+
+static void ksz8863_set_bridge_of_port(struct ksz8863_chip *chip, int port,
+				       struct net_device *bridge)
+{
+	chip->ports[port_to_index(port)].bridge = bridge;
+}
+
+static inline void ksz8863_reg_lock(struct ksz8863_chip *chip)
+{
+	mutex_lock(&chip->reg_lock);
+}
+
+static inline void ksz8863_reg_unlock(struct ksz8863_chip *chip)
+{
+	mutex_unlock(&chip->reg_lock);
+}
+
+static inline void ksz8863_assert_reg_lock(struct ksz8863_chip *chip)
+{
+	if (unlikely(!mutex_is_locked(&chip->reg_lock))) {
+		dev_err(chip->dev, "switch register lock not held!");
+		dump_stack();
+	}
+}
+
+static inline int ksz8863_mii_read(struct ksz8863_chip *chip, int reg, u8 *rv)
+{
+	ksz8863_assert_reg_lock(chip);
+	return chip->mii_ops->read(chip, reg, rv);
+}
+
+static inline int ksz8863_mii_write(struct ksz8863_chip *chip, int reg, u8 val)
+{
+	ksz8863_assert_reg_lock(chip);
+	return chip->mii_ops->write(chip, reg, val);
+}
+
+static inline int ksz8863_set_bits_unlocked(struct ksz8863_chip *chip, int reg,
+					    u8 reset, u8 set)
+{
+	u8 rv, orig;
+	int err = ksz8863_mii_read(chip, reg, &rv);
+
+	orig = rv;
+	rv &= ~reset;
+	rv |= set;
+
+	if (!err && rv != orig)
+		err = ksz8863_mii_write(chip, reg, rv);
+
+	return err;
+}
+
+static inline int ksz8863_set_bits(struct ksz8863_chip *chip, int reg, u8 reset,
+				   u8 set)
+{
+	int err;
+
+	ksz8863_reg_lock(chip);
+
+	err = ksz8863_set_bits_unlocked(chip, reg, reset, set);
+
+	ksz8863_reg_unlock(chip);
+
+	return err;
+}
+
+static int ksz8863_set_eth_addr(struct ksz8863_chip *chip)
+{
+	int err;
+	int i;
+	struct ksz8863_static_mac_tbl_entry entry;
+
+	if (!is_valid_ether_addr(chip->eth_addr))
+		return 0;
+
+	memset(&entry, 0, sizeof(entry));
+
+	for (i = 0; i < ETH_ALEN; ++i)
+		entry.mac[i] = chip->eth_addr[ETH_ALEN - 1 - i];
+
+	entry.forward_ports = KSZ8863_SMAC_ENTRY_FWD_PORTS_PORT3;
+	entry.valid = 1;
+	entry.override = 1;
+	entry.use_fid = 0;
+	entry.fid = 0;
+
+	err = chip->mii_ops->write_table(chip, KSZ8863_TBL_STATIC_MAC, 0,
+					 (u8 *)&entry, sizeof(entry));
+	return err;
+}
+
+static int ksz8863_setup_global(struct ksz8863_chip *chip)
+{
+	int err;
+
+	ksz8863_reg_lock(chip);
+
+	/* Enable tail tagging */
+	err = ksz8863_set_bits_unlocked(chip, KSZ8863_REG_GL_CTRL1, 0,
+					KSZ8863_REG_GL_CTRL1_TAIL_TAG_ENABLE);
+	if (err)
+		goto out_unlock;
+
+	/* Turn on IGMP Snooping */
+	err = ksz8863_set_bits_unlocked(chip, KSZ8863_REG_GL_CTRL3, 0,
+					KSZ8863_REG_GL_CTRL3_IGMP_SNOOP);
+	if (err)
+		goto out_unlock;
+
+	/* Set broadcast and unknown MAC address forwarding */
+	err = ksz8863_set_bits_unlocked(
+		chip, KSZ8863_REG_GL_CTRL12, 0,
+		KSZ8863_REG_GL_CTRL12_PORT_MASK |
+			KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_ENABLE);
+	if (err)
+		goto out_unlock;
+
+out_unlock:
+	ksz8863_reg_unlock(chip);
+	return err;
+}
+
+static int ksz8863_setup_port(struct ksz8863_chip *chip, int port)
+{
+	int err;
+	int pb = KSZ8863_REG_PORTS_BASE * port_to_index(port);
+
+	if (!dsa_is_cpu_port(chip->ds, port)) {
+		struct phy_device *phydev;
+
+		/* Scan the mdiobus for the internal phys.
+		 * This is needed because libphy may scan the
+		 * bus when the switch is still in reset.
+		 */
+		phydev = mdiobus_scan(chip->sw_bus, port);
+		if (!phydev || (IS_ERR(phydev))) {
+			pr_err("failed to probe phydev via mdio at port %i\n",
+			       port);
+			return PTR_ERR(phydev);
+		}
+
+		/* Enable broadcast storm protection for all ports
+		 * except cpu port.
+		 */
+		err = ksz8863_set_bits(chip, pb + KSZ8863_REG_PORT1_CTRL0, 0,
+				       KSZ8863_REG_PORT_CTRL0_BROADCAST_STORM);
+		if (err)
+			return err;
+	} else {
+		/* set MAC mode for cpu port */
+		err = ksz8863_set_bits(chip, pb + KSZ8863_REG_PORT1_CTRL5, 0,
+				       KSZ8863_REG_PORT_CTRL5_3_MII_MAC_MODE);
+		if (err)
+			return err;
+	}
+
+	return 0;
+}
+
+static int ksz8863_setup_adv_ctrl(struct ksz8863_chip *chip)
+{
+	/* LEDs - yellow led -> link, green led -> act */
+	int err = ksz8863_set_bits(
+		chip, KSZ8863_REG_PWR_LED,
+		KSZ8863_REG_PWR_LED_LED_MODE_SEL_MASK,
+		KSZ8863_REG_PWR_LED_LED_MODE_1
+			<< KSZ8863_REG_PWR_LED_LED_MODE_SEL_SHIFT);
+
+	return err ? err : ksz8863_set_eth_addr(chip);
+}
+
+static int ksz8863_setup(struct dsa_switch *ds)
+{
+	struct ksz8863_chip *chip = ds->priv;
+	int port;
+	int err;
+
+	ds->slave_mii_bus = chip->sw_bus;
+
+	err = ksz8863_setup_global(chip);
+	if (err)
+		return err;
+
+	for (port = KSZ8863_EXT_PORT1_ID;
+	     port < KSZ8863_NUM_PORTS + KSZ8863_EXT_PORT1_ID; port++) {
+		err = ksz8863_setup_port(chip, port);
+		if (err)
+			return err;
+	}
+
+	err = ksz8863_setup_adv_ctrl(chip);
+	return err;
+}
+
+static int ksz8863_phy_read(struct dsa_switch *ds, int port, int reg)
+{
+	struct ksz8863_chip *chip = ds->priv;
+
+	return mdiobus_read_nested(chip->sw_bus, port, reg);
+}
+
+static int ksz8863_phy_write(struct dsa_switch *ds, int port, int reg, u16 val)
+{
+	struct ksz8863_chip *chip = ds->priv;
+
+	return mdiobus_write_nested(chip->sw_bus, port, reg, val);
+}
+
+static int ksz8863_flush_dyn_mac_tables(struct ksz8863_chip *chip)
+{
+	return ksz8863_set_bits_unlocked(
+		chip, KSZ8863_REG_GL_CTRL0, 0,
+		KSZ8863_REG_GL_CTRL0_FLUSH_DYN_MAC_TABLE);
+}
+
+static int ksz8863_flush_mac_tables(struct ksz8863_chip *chip)
+{
+	int err;
+	int port_index;
+	u8 states[KSZ8863_NUM_PORTS];
+
+	ksz8863_reg_lock(chip);
+
+	/* backup port states */
+	for (port_index = 0; port_index < KSZ8863_NUM_PORTS; port_index++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port_index;
+
+		err = ksz8863_mii_read(chip, pb + KSZ8863_REG_PORT1_CTRL2,
+				       &states[port_index]);
+		if (err)
+			goto out_unlock;
+	}
+
+	/* disable learning and disable receiving while flushing dynamic mac
+	 * table
+	 */
+	for (port_index = 0; port_index < KSZ8863_NUM_PORTS; port_index++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port_index;
+
+		err = ksz8863_mii_write(chip, pb + KSZ8863_REG_PORT1_CTRL2,
+					KSZ8863_REG_PORT_CTRL2_LEARN_DISABLE);
+		if (err)
+			goto out_unlock;
+	}
+
+	/* flush dynamic mac table */
+	err = ksz8863_flush_dyn_mac_tables(chip);
+	if (err)
+		goto out_unlock;
+
+	/* restore port states */
+	for (port_index = 0; port_index < KSZ8863_NUM_PORTS; port_index++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port_index;
+
+		err = ksz8863_mii_write(chip, pb + KSZ8863_REG_PORT1_CTRL2,
+					states[port_index]);
+		if (err)
+			goto out_unlock;
+	}
+
+out_unlock:
+	ksz8863_reg_unlock(chip);
+
+	return err;
+}
+
+static void ksz8863_adjust_link(struct dsa_switch *ds, int port,
+				struct phy_device *phydev)
+{
+	struct ksz8863_chip *chip = ds->priv;
+	int pb = KSZ8863_REG_PORTS_BASE * port_to_index(port);
+
+	phy_print_status(phydev);
+
+	if (ksz8863_flush_mac_tables(chip))
+		return;
+
+	if (phydev->state == PHY_HALTED || phydev->state == PHY_DOWN)
+		ksz8863_set_bits(chip, pb + KSZ8863_REG_PORT1_CTRL13, 0,
+				 KSZ8863_REG_PORT_CTRL13_POWER_DOWN);
+	else
+		ksz8863_set_bits(chip, pb + KSZ8863_REG_PORT1_CTRL13,
+				 KSZ8863_REG_PORT_CTRL13_POWER_DOWN, 0);
+}
+
+static int ksz8863_set_port_vlan_membership(struct ksz8863_chip *chip,
+					    int port1, int port2)
+{
+	int err;
+
+	err = ksz8863_set_bits_unlocked(chip, KSZ8863_REG_PORT1_CTRL1,
+					KSZ8863_REG_PORT_CTRL1_VLAN_MEMBERSHIP,
+					port1);
+
+	if (err)
+		goto out_err;
+
+	err = ksz8863_set_bits_unlocked(chip, KSZ8863_REG_PORT2_CTRL1,
+					KSZ8863_REG_PORT_CTRL1_VLAN_MEMBERSHIP,
+					port2);
+
+out_err:
+	return err;
+}
+
+static int ksz8863_set_switched_mode(struct ksz8863_chip *chip)
+{
+	const int all_ports = KSZ8863_PORT_CTL1_VLAN_MEMBERSHIP_PORT1 |
+			      KSZ8863_PORT_CTL1_VLAN_MEMBERSHIP_PORT2 |
+			      KSZ8863_PORT_CTL1_VLAN_MEMBERSHIP_PORT3;
+
+	int err = ksz8863_set_port_vlan_membership(chip, all_ports, all_ports);
+
+	if (!err) {
+		dev_info(chip->dev, "ksz8863 in switched mode\n");
+		chip->switched = true;
+	}
+
+	return err;
+}
+
+static int ksz8863_set_separated_mode(struct ksz8863_chip *chip)
+{
+	const int port1_members = KSZ8863_PORT_CTL1_VLAN_MEMBERSHIP_PORT1 |
+				  KSZ8863_PORT_CTL1_VLAN_MEMBERSHIP_PORT3;
+	const int port2_members = KSZ8863_PORT_CTL1_VLAN_MEMBERSHIP_PORT2 |
+				  KSZ8863_PORT_CTL1_VLAN_MEMBERSHIP_PORT3;
+
+	int err = ksz8863_set_port_vlan_membership(chip, port1_members,
+						   port2_members);
+
+	if (!err) {
+		dev_info(chip->dev, "ksz8863 in separated mode\n");
+		chip->switched = false;
+	}
+
+	return err;
+}
+
+static int ksz8863_set_bridged_mode(struct ksz8863_chip *chip)
+{
+	int err;
+	int ret = 0;
+
+	ksz8863_reg_lock(chip);
+
+	if (ksz8863_get_bridge_of_port(chip, KSZ8863_EXT_PORT1_ID) ==
+	    ksz8863_get_bridge_of_port(chip, KSZ8863_EXT_PORT2_ID)) {
+		if (!chip->switched)
+			ret = ksz8863_set_switched_mode(chip);
+	} else {
+		if (chip->switched)
+			ret = ksz8863_set_separated_mode(chip);
+	}
+
+	if (ret) {
+		dev_err(chip->dev, "failed to set bridge mode\n");
+		goto out_unlock;
+	}
+
+	err = ksz8863_flush_dyn_mac_tables(chip);
+	if (err)
+		dev_err(chip->dev,
+			"failed to flush fdb after changing bridge mode\n");
+
+out_unlock:
+	ksz8863_reg_unlock(chip);
+
+	return err;
+}
+
+static int ksz8863_port_bridge_join(struct dsa_switch *ds, int port,
+				    struct net_device *bridge)
+{
+	struct ksz8863_chip *chip = ds->priv;
+
+	if (port >= (KSZ8863_NUM_PORTS + KSZ8863_EXT_PORT1_ID) ||
+	    dsa_is_cpu_port(ds, port))
+		return -EINVAL;
+
+	if (ksz8863_get_bridge_of_port(chip, port) &&
+	    ksz8863_get_bridge_of_port(chip, port) != bridge)
+		return -EBUSY;
+
+	ksz8863_set_bridge_of_port(chip, port, bridge);
+
+	return ksz8863_set_bridged_mode(chip);
+}
+
+static void ksz8863_port_bridge_leave(struct dsa_switch *ds, int port,
+				      struct net_device *bridge)
+{
+	struct ksz8863_chip *chip = ds->priv;
+
+	if (port >= (KSZ8863_NUM_PORTS + KSZ8863_EXT_PORT1_ID) ||
+	    dsa_is_cpu_port(ds, port))
+		return;
+
+	ksz8863_set_bridge_of_port(chip, port, NULL);
+
+	ksz8863_set_bridged_mode(chip);
+}
+
+static int ksz8863_port_pre_bridge_flags(struct dsa_switch *ds, int port,
+					 struct switchdev_brport_flags flags,
+					 struct netlink_ext_ack *extack)
+{
+	if (flags.mask & ~(BR_LEARNING))
+		return -EINVAL;
+
+	return 0;
+}
+
+static int ksz8863_port_bridge_flags(struct dsa_switch *ds, int port,
+				     struct switchdev_brport_flags flags,
+				     struct netlink_ext_ack *extack)
+{
+	struct ksz8863_chip *chip = ds->priv;
+	int err = -EOPNOTSUPP;
+
+	ksz8863_reg_lock(chip);
+
+	if (flags.mask & BR_LEARNING) {
+		const bool learning = !!(flags.val & BR_LEARNING);
+		const int pb = KSZ8863_REG_PORTS_BASE * port_to_index(port);
+		const int set = learning ? 0 : KSZ8863_REG_PORT_CTRL2_LEARN_DISABLE;
+
+		err = ksz8863_set_bits_unlocked(
+			chip, pb + KSZ8863_REG_PORT1_CTRL2,
+			KSZ8863_REG_PORT_CTRL2_LEARN_DISABLE, set);
+		if (err)
+			goto out;
+	}
+
+out:
+	ksz8863_reg_unlock(chip);
+
+	return err;
+}
+
+static struct dsa_switch_ops ksz8863_switch_ops = {
+	.get_tag_protocol = ksz8863_get_tag_protocol,
+	.setup = ksz8863_setup,
+	.phy_read = ksz8863_phy_read,
+	.phy_write = ksz8863_phy_write,
+	.adjust_link = ksz8863_adjust_link,
+	.port_bridge_join = ksz8863_port_bridge_join,
+	.port_bridge_leave = ksz8863_port_bridge_leave,
+	.port_bridge_flags = ksz8863_port_bridge_flags,
+	.port_pre_bridge_flags = ksz8863_port_pre_bridge_flags,
+};
+
+static int ksz8863_smi_read(struct ksz8863_chip *chip, int reg, u8 *val)
+{
+	int ret;
+
+	if (!chip->sw_bus)
+		return -ENODEV;
+
+	ksz8863_assert_reg_lock(chip);
+
+	ret = mdiobus_read_nested(chip->sw_bus, chip->sw_addr,
+				  reg | MII_ADDR_KSZ);
+	if (ret < 0 || ret > 0xFF) {
+		/* ksz8863 never return values over 0xFF in smi mode */
+		if (ret > 0xFF)
+			ret = -ENODATA;
+
+		return ret;
+	}
+
+	*val = ret & 0xff;
+
+	return 0;
+}
+
+static int ksz8863_smi_write(struct ksz8863_chip *chip, int reg, u8 val)
+{
+	int ret;
+
+	if (!chip->sw_bus)
+		return -ENODEV;
+
+	ksz8863_assert_reg_lock(chip);
+
+	ret = mdiobus_write_nested(chip->sw_bus, chip->sw_addr,
+				   reg | MII_ADDR_KSZ, val);
+	return ret;
+}
+
+static int ksz8863_tbl_write(struct ksz8863_chip *chip,
+			     enum ksz8863_tables table, u16 addr, u8 *buffer,
+			     size_t size)
+{
+	int err, i;
+	u8 iac0v, iac1v;
+
+	/* check if address has only 9 bits width */
+	if (addr & ~(BIT(10) - 1))
+		return -EINVAL;
+
+	if (!size || size > KSZ8863_REG_INDIRECT_DATA_MAX_SIZE)
+		return -EINVAL;
+
+	ksz8863_reg_lock(chip);
+
+	for (i = 0; i < size; i++) {
+		int reg = KSZ8863_REG_INDIRECT_DATA_REG0 - i;
+		u8 mask = (i != KSZ8863_REG_INDIRECT_DATA_REG8) ?
+					0xFF :
+					KSZ8863_REG_INDIRECT_DATA_REG8_DATA_MASK;
+
+		err = ksz8863_smi_write(chip, reg, buffer[i] & mask);
+		if (err)
+			goto out_unlock;
+	}
+
+	iac0v = KSZ8863_REG_INDIRECT_ACCESS_CTRL0_WRITE;
+	iac0v |= table << KSZ8863_REG_INDIRECT_ACCESS_CTRL0_TBL_SHIFT;
+	iac0v |= (addr >> 8) & KSZ8863_REG_INDIRECT_ACCESS_CTRL0_ADDR_MASK;
+	iac1v = addr & 0xFF;
+
+	err = ksz8863_smi_write(chip, KSZ8863_REG_INDIRECT_ACCESS_CTRL0, iac0v);
+	if (err)
+		goto out_unlock;
+
+	err = ksz8863_smi_write(chip, KSZ8863_REG_INDIRECT_ACCESS_CTRL1, iac1v);
+
+out_unlock:
+	ksz8863_reg_unlock(chip);
+
+	return err;
+}
+
+static int ksz8863_tbl_wait_read_ready(struct ksz8863_chip *chip)
+{
+	int err;
+	unsigned long time = jiffies + HZ;
+	u8 val;
+
+	do {
+		err = ksz8863_smi_read(chip, KSZ8863_REG_INDIRECT_DATA_REG8,
+				       &val);
+		if (err)
+			return err;
+
+		if (!(val & KSZ8863_REG_INDIRECT_DATA_REG8_CPU_READ_WIP))
+			return 0;
+
+		usleep_range(10000, 20000);
+	} while (time_after(time, jiffies));
+
+	return -ETIMEDOUT;
+}
+
+static int ksz8863_tbl_read(struct ksz8863_chip *chip,
+			    enum ksz8863_tables table, u16 addr, u8 *buffer,
+			    size_t size)
+{
+	int err, i;
+	u8 iac0v, iac1v;
+
+	/* check if address has only 9 bits width */
+	if (addr & ~(BIT(10) - 1))
+		return -EINVAL;
+
+	if (!size || size > KSZ8863_REG_INDIRECT_DATA_MAX_SIZE)
+		return -EINVAL;
+
+	ksz8863_reg_lock(chip);
+
+	iac0v = KSZ8863_REG_INDIRECT_ACCESS_CTRL0_READ;
+	iac0v |= table << KSZ8863_REG_INDIRECT_ACCESS_CTRL0_TBL_SHIFT;
+	iac0v |= (addr >> 8) & KSZ8863_REG_INDIRECT_ACCESS_CTRL0_ADDR_MASK;
+	iac1v = addr & 0xFF;
+
+	err = ksz8863_smi_write(chip, KSZ8863_REG_INDIRECT_ACCESS_CTRL0, iac0v);
+	if (err)
+		goto out_unlock;
+
+	err = ksz8863_smi_write(chip, KSZ8863_REG_INDIRECT_ACCESS_CTRL1, iac1v);
+	if (err)
+		goto out_unlock;
+
+	err = ksz8863_tbl_wait_read_ready(chip);
+	if (err)
+		goto out_unlock;
+
+	for (i = 0; i < size; i++) {
+		int reg = KSZ8863_REG_INDIRECT_DATA_REG0 - i;
+
+		err = ksz8863_smi_read(chip, reg, &buffer[i]);
+		if (err)
+			goto out_unlock;
+
+		if (reg == KSZ8863_REG_INDIRECT_DATA_REG8)
+			buffer[i] &= KSZ8863_REG_INDIRECT_DATA_REG8_DATA_MASK;
+	}
+
+out_unlock:
+	ksz8863_reg_unlock(chip);
+
+	return err;
+}
+
+static int of_get_ksz8863_data(struct ksz8863_chip *chip)
+{
+	struct device *dev = chip->dev;
+	struct device_node *np = dev->of_node;
+	struct device_node *of_aliases, *of_ethernet;
+	const char *eth0_prop_name;
+
+	if (!np)
+		return 0;
+
+	if (of_find_property(np, "ksz,disable-internal-ldo", NULL))
+		chip->disable_internal_ldo = true;
+
+	chip->reset_gpio =
+		devm_gpiod_get_optional(dev, "ksz,reset", GPIOD_OUT_LOW);
+	if (IS_ERR(chip->reset_gpio)) {
+		if (PTR_ERR(chip->reset_gpio) == -EPROBE_DEFER)
+			return -EPROBE_DEFER;
+
+		dev_warn(dev, "No gpio reset pin given\n");
+	} else if (of_find_property(np, "ksz,reset-switch", NULL)) {
+		chip->reset = true;
+	}
+
+	/* get device mac address from device-tree */
+	of_aliases = of_find_node_by_path("/aliases");
+	if (!of_aliases) {
+		dev_err(dev, "No aliases property found");
+		return -EINVAL;
+	}
+
+	if (of_property_read_string(of_aliases, "ethernet0", &eth0_prop_name)) {
+		dev_err(dev, "No ethernet0 alias found");
+		return -EINVAL;
+	}
+
+	of_ethernet = of_find_node_by_path(eth0_prop_name);
+	if (!of_ethernet) {
+		dev_err(dev, "No ethernet0 = \"%s\" property found",
+			eth0_prop_name);
+		return -EINVAL;
+	}
+
+	if (of_get_mac_address(of_ethernet, chip->eth_addr))
+		dev_warn(dev, "No valid ethernet address found");
+
+	return 0;
+}
+
+static struct ksz8863_chip *ksz8863_alloc_chip(struct device *dev)
+{
+	struct ksz8863_chip *chip;
+
+	chip = devm_kzalloc(dev, sizeof(*chip), GFP_KERNEL);
+	if (!chip)
+		return NULL;
+
+	chip->dev = dev;
+
+	/* switch starts in switched mode */
+	chip->switched = true;
+
+	mutex_init(&chip->reg_lock);
+
+	return chip;
+}
+
+static void ksz8863_free_chip(struct ksz8863_chip *chip)
+{
+	struct device *dev = chip->dev;
+
+	devm_kfree(dev, chip);
+}
+
+static const struct ksz8863_bus_ops ksz8863_smi_ops = {
+	.read = ksz8863_smi_read,
+	.write = ksz8863_smi_write,
+	.read_table = ksz8863_tbl_read,
+	.write_table = ksz8863_tbl_write,
+};
+
+static void ksz8863_smi_init(struct ksz8863_chip *chip, struct mii_bus *bus,
+			     int sw_addr)
+{
+	chip->sw_bus = bus;
+	chip->sw_addr = sw_addr;
+
+	chip->mii_ops = &ksz8863_smi_ops;
+}
+
+static int ksz8863_hw_reset(struct ksz8863_chip *chip)
+{
+	if (!chip->reset)
+		return 0;
+
+	gpiod_set_value_cansleep(chip->reset_gpio, 1);
+	usleep_range(10000, 20000);
+	gpiod_set_value_cansleep(chip->reset_gpio, 0);
+
+	/* it recommended to wait after reset minimum 100µs,
+	 * but we wait ten times more to be sure.
+	 */
+	usleep_range(1000, 2000);
+
+	dev_info(chip->dev, "ksz8863 switch reset\n");
+
+	chip->reset = false;
+
+	return 0;
+}
+
+static int ksz8863_detect(struct ksz8863_chip *chip)
+{
+	u8 val;
+	u8 chip_family;
+	u8 chip_id;
+	u8 chip_rev;
+	int err;
+
+	ksz8863_reg_lock(chip);
+
+	err = ksz8863_smi_read(chip, KSZ8863_REG_CHIP_ID0, &val);
+	if (err)
+		goto out_unlock;
+
+	chip_family = val;
+	if (chip_family != KSZ8863_REG_CHIP_ID0_FAMILY_ID) {
+		dev_err(chip->dev, "could not detect ksz8863 switch\n");
+		err = -ENODEV;
+		goto out_unlock;
+	}
+
+	err = ksz8863_smi_read(chip, KSZ8863_REG_CHIP_ID1, &val);
+	if (err)
+		goto out_unlock;
+
+	chip_id = val & KSZ8863_REG_CHIP_ID1_ID_MASK;
+	chip_id >>= KSZ8863_REG_CHIP_ID1_ID_SHIFT;
+
+	chip_rev = val & KSZ8863_REG_CHIP_ID1_REV_ID_MASK;
+	chip_rev >>= KSZ8863_REG_CHIP_ID1_REV_ID_SHIFT;
+
+	if (chip_id != KSZ8863_REG_CHIP_ID1_ID) {
+		dev_err(chip->dev, "could not detect ksz8863 switch\n");
+		err = -ENODEV;
+		goto out_unlock;
+	}
+
+	dev_info(chip->dev,
+		 "detected family id 0x%x, chip id 0x%x, revision id 0x%x\n",
+		 chip_family, chip_id, chip_rev);
+
+out_unlock:
+	ksz8863_reg_unlock(chip);
+
+	return err;
+}
+
+static int ksz8863_set_internal_ldo(struct ksz8863_chip *chip)
+{
+	int err;
+
+	if (!chip->disable_internal_ldo)
+		return 0;
+
+	err = ksz8863_set_bits(chip, KSZ8863_REG_INTERNAL_1V8_LDO_CTRL, 0,
+			       KSZ8863_REG_INTERNAL_1V8_LDO_CTRL_DISABLE);
+	if (err)
+		return err;
+
+	dev_info(chip->dev, "1.8V LDO disabled\n");
+
+	return 0;
+}
+
+static int ksz8863_register_switch(struct ksz8863_chip *chip)
+{
+	int err;
+	struct device *dev = chip->dev;
+	struct dsa_switch *ds;
+
+	ds = devm_kzalloc(dev, sizeof(*ds), GFP_KERNEL);
+	if (!ds)
+		return -ENOMEM;
+
+	// the ksz8863 switch address the ports starting with 1
+	// whereas the dsa framework expects the a start at 0.
+	ds->num_ports = KSZ8863_NUM_PORTS + KSZ8863_PORT_OFFSET;
+
+	ds->dev = dev;
+	ds->priv = chip;
+	ds->ops = &ksz8863_switch_ops;
+
+	dev_set_drvdata(dev, ds);
+
+	chip->ds = ds;
+
+	err = dsa_register_switch(ds);
+	if (err) {
+		dev_err(chip->dev, "register ksz8863 on dsa failed\n");
+		devm_kfree(chip->dev, ds);
+		chip->ds = NULL;
+		dev_set_drvdata(dev, NULL);
+		return err;
+	}
+
+	return 0;
+}
+
+static void ksz8863_unregister_switch(struct ksz8863_chip *chip)
+{
+	dsa_unregister_switch(chip->ds);
+
+	devm_kfree(chip->dev, chip->ds);
+	chip->ds = NULL;
+}
+
+static int ksz8863_probe(struct mdio_device *mdiodev)
+{
+	struct device *dev = &mdiodev->dev;
+	struct ksz8863_chip *chip;
+	int err;
+
+	chip = ksz8863_alloc_chip(dev);
+	if (!chip)
+		return -ENOMEM;
+
+	chip->ops.flush_dyn_mac_table = &ksz8863_flush_dyn_mac_tables;
+
+	err = of_get_ksz8863_data(chip);
+	if (err)
+		goto err_free;
+
+	ksz8863_smi_init(chip, mdiodev->bus, mdiodev->addr);
+
+	err = ksz8863_hw_reset(chip);
+	if (err)
+		goto err_free;
+
+	err = ksz8863_detect(chip);
+	if (err)
+		goto err_free;
+
+	err = ksz8863_set_internal_ldo(chip);
+	if (err)
+		goto err_free;
+
+	err = ksz8863_register_switch(chip);
+	if (err)
+		goto err_free;
+
+	if (ksz8863_debugfs_setup(chip))
+		dev_warn(chip->dev, "failed to setup debugfs\n");
+
+	dev_info(chip->dev, "ksz8863 switch probed successful\n");
+
+	return 0;
+
+err_free:
+	dev_err(chip->dev, "ksz8863 probe failed (%d)\n", err);
+	ksz8863_free_chip(chip);
+
+	return err;
+}
+
+static void ksz8863_remove(struct mdio_device *mdiodev)
+{
+	struct dsa_switch *ds = dev_get_drvdata(&mdiodev->dev);
+	struct ksz8863_chip *chip = ds->priv;
+
+	ksz8863_unregister_switch(chip);
+	ksz8863_debugfs_destroy(chip);
+	ksz8863_free_chip(chip);
+}
+
+// clang-format off
+static const struct of_device_id ksz8863_of_match[] = {
+	{
+		.compatible = "micrel,ksz8863",
+	},
+	{ /* sentinel */ },
+};
+
+MODULE_DEVICE_TABLE(of, ksz8863_of_match);
+
+static struct mdio_driver ksz8863_driver = {
+	.probe	= ksz8863_probe,
+	.remove = ksz8863_remove,
+	.mdiodrv.driver = {
+		.name = "ksz8863",
+		.of_match_table = ksz8863_of_match,
+	},
+};
+
+// clang-format on
+
+mdio_module_driver(ksz8863_driver);
+
+MODULE_AUTHOR("Andreas Schmidt <andreas.schmidt@wago.com>");
+MODULE_DESCRIPTION("Driver for Micrel KSZ886X ethernet switch chips");
+MODULE_LICENSE("GPL");
diff --git a/drivers/net/dsa/mv88e6xxx/Makefile b/drivers/net/dsa/mv88e6xxx/Makefile
index c8eca2b6f959..208f2d9ed2d8 100644
--- a/drivers/net/dsa/mv88e6xxx/Makefile
+++ b/drivers/net/dsa/mv88e6xxx/Makefile
@@ -1,5 +1,4 @@
-# SPDX-License-Identifier: GPL-2.0
-obj-$(CONFIG_NET_DSA_MV88E6XXX) += mv88e6xxx.o
+obj-$(CONFIG_NET_DSA_MV88E6XXX) += mv88e6xxx.o mv88e6321_tcam.o
 mv88e6xxx-objs := chip.o
 mv88e6xxx-objs += devlink.o
 mv88e6xxx-objs += global1.o
@@ -8,6 +7,7 @@ mv88e6xxx-objs += global1_vtu.o
 mv88e6xxx-objs += global2.o
 mv88e6xxx-objs += global2_avb.o
 mv88e6xxx-objs += global2_scratch.o
+mv88e6xxx-objs += debugfs.o
 mv88e6xxx-$(CONFIG_NET_DSA_MV88E6XXX_PTP) += hwtstamp.o
 mv88e6xxx-objs += phy.o
 mv88e6xxx-objs += port.o
diff --git a/drivers/net/dsa/mv88e6xxx/chip.c b/drivers/net/dsa/mv88e6xxx/chip.c
index 43d126628610..3ea291193384 100644
--- a/drivers/net/dsa/mv88e6xxx/chip.c
+++ b/drivers/net/dsa/mv88e6xxx/chip.c
@@ -42,6 +42,8 @@
 #include "ptp.h"
 #include "serdes.h"
 #include "smi.h"
+#include "debugfs.h"
+#include "mv88e6321_tcam.h"
 
 static void assert_reg_lock(struct mv88e6xxx_chip *chip)
 {
@@ -2592,6 +2594,8 @@ static void mv88e6xxx_hardware_reset(struct mv88e6xxx_chip *chip)
 		usleep_range(10000, 20000);
 		gpiod_set_value_cansleep(gpiod, 0);
 		usleep_range(10000, 20000);
+		usleep_range(300000, 400000);
+
 
 		mv88e6xxx_g1_wait_eeprom_done(chip);
 	}
@@ -2872,6 +2876,231 @@ static int mv88e6xxx_setup_upstream_port(struct mv88e6xxx_chip *chip, int port)
 	return 0;
 }
 
+static bool mv88e6xxx_is_external_phy(struct dsa_switch *ds, int port)
+{
+	struct dsa_port *p = dsa_to_port(ds, port);
+	struct device_node *np = p->dn;
+
+	if (!np)
+		return false;
+
+	return of_property_read_bool(np, "phy-external");
+}
+
+static int mv88e6xxx_vtu_setup_pnio_vlan(struct mv88e6xxx_chip *chip)
+{
+	int pn_ports[] = {3, 4, 6};
+	int err;
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(pn_ports); i++) {
+		err = mv88e6xxx_port_vlan_join(chip, pn_ports[i], 1338,
+				MV88E6XXX_G1_VTU_DATA_MEMBER_TAG_UNMODIFIED,
+				false);
+		if (err)
+			return err;
+	}
+
+	return 0;
+}
+
+static void mv88e6xxx_tcam_cleanup(struct mv88e6xxx_chip *chip)
+{
+	struct mv88e6xxx_tcam_info *tcam_info = NULL;
+	struct mv88e6xxx_tcam_info *tcam_info_tmp = NULL;
+
+	mv88e6321_flush_tcam(chip->bus, -1);
+
+	list_for_each_entry_safe(tcam_info, tcam_info_tmp,
+				 &chip->tcam.info_head.list, list) {
+		device_remove_file(chip->dev, &tcam_info->dev_attr);
+		list_del(&tcam_info->list);
+		devm_kfree(chip->dev, tcam_info);
+	}
+}
+
+static struct mv88e6xxx_tcam_info*
+mv88e6xxx_get_tcam_info_by_title(struct mv88e6xxx_chip *chip, const char *title)
+{
+	struct mv88e6xxx_tcam_info *tcam_info;
+
+	list_for_each_entry(tcam_info, &chip->tcam.info_head.list, list) {
+		if (!strcmp(tcam_info->title, title))
+			return tcam_info;
+	}
+
+	return NULL;
+}
+
+static ssize_t mv88e6xxx_store_tcam_entry_enable(struct device *dev,
+						 struct device_attribute *attr,
+						 const char *buf, size_t count)
+{
+	ssize_t ret;
+	struct dsa_switch *ds = dev_get_drvdata(dev);
+	struct mv88e6xxx_chip *chip = ds->priv;
+	struct mii_bus *bus = chip->bus;
+	struct mv88e6xxx_tcam_info *tcam_info;
+
+	if (!count)
+		return -EINVAL;
+
+	tcam_info = mv88e6xxx_get_tcam_info_by_title(chip, attr->attr.name);
+	if (!tcam_info)
+		return -EEXIST;
+
+	if (*buf == '0' || *buf == 0)
+		ret = mv88e6321_disable_tcam(bus, tcam_info->id);
+	else
+		ret = mv88e6321_enable_tcam(bus, tcam_info->id,
+					    tcam_info->reg_frame_type);
+
+	return ret ? : count;
+}
+
+static ssize_t mv88e6xxx_show_tcam_entry_enable(struct device *dev,
+						struct device_attribute *attr,
+						char *buf)
+{
+	struct dsa_switch *ds = dev_get_drvdata(dev);
+	struct mv88e6xxx_chip *chip = ds->priv;
+	struct mii_bus *bus = chip->bus;
+	struct mv88e6xxx_tcam_info *tcam_info;
+
+	tcam_info = mv88e6xxx_get_tcam_info_by_title(chip, attr->attr.name);
+	if (!tcam_info)
+		return -EEXIST;
+
+	if (mv88e6321_is_tcam_enabled(bus, tcam_info->id))
+		snprintf(buf, PAGE_SIZE, "%d", 1);
+	else
+		snprintf(buf, PAGE_SIZE, "%d", 0);
+
+	return 1;
+}
+
+static int mv88e6xxx_add_device_file(struct device *dev,
+				     struct mv88e6xxx_tcam_info *tcam_info)
+{
+	int err = 0;
+
+	tcam_info->dev_attr.attr.name = tcam_info->title;
+	tcam_info->dev_attr.attr.mode = 0644;
+
+	tcam_info->dev_attr.show = mv88e6xxx_show_tcam_entry_enable;
+	tcam_info->dev_attr.store = mv88e6xxx_store_tcam_entry_enable;
+
+	err = device_create_file(dev, &tcam_info->dev_attr);
+
+	return err;
+}
+
+static int mv88e6xxx_set_tcam_entry(struct mv88e6xxx_chip *chip,
+				    struct tcam_entry *tcam_entry)
+{
+	int err = 0;
+	u16 reg_frame_type = tcam_entry->reg_frame_type;
+	struct mv88e6xxx_tcam_info *tcam_info;
+
+	/* deactivate TCAM entry by default */
+	tcam_entry->reg_frame_type = 0x00FF;
+
+	err = mv88e6321_load_tcam(chip->bus, tcam_entry);
+	if (err)
+		goto out;
+
+	tcam_info = devm_kzalloc(chip->dev, sizeof(*tcam_info), GFP_KERNEL);
+	if (!tcam_info) {
+		err = -ENOMEM;
+		goto out;
+	}
+
+	tcam_info->title = tcam_entry->title;
+	tcam_info->id = tcam_entry->orig_id;
+	if (tcam_entry->is96frame)
+		tcam_info->next_id = tcam_entry->next_id;
+	else
+		tcam_info->next_id = -1;
+	tcam_info->reg_frame_type = reg_frame_type;
+
+	list_add(&tcam_info->list, &chip->tcam.info_head.list);
+
+	err = mv88e6xxx_add_device_file(chip->dev, tcam_info);
+	if (err)
+		goto out_free_tcam_info;
+
+	return 0;
+
+out_free_tcam_info:
+	list_del(&tcam_info->list);
+	devm_kfree(chip->dev, tcam_info);
+out:
+	return err;
+}
+
+static int mv88e6xxx_tcam_setup(struct mv88e6xxx_chip *chip)
+{
+	int err;
+	int ret;
+	struct tcam_entries tcam_entries = {0};
+	struct tcam_entry *tcam_entry;
+	struct tcam_entry *tcam_entry_tmp;
+	struct device_node *np = of_root;
+
+	if (!np)
+		return -ENODATA;
+
+	INIT_LIST_HEAD(&tcam_entries.head.list);
+
+	ret = of_get_tcam_entry(&tcam_entries, np);
+	if (!ret || ret < 0) {
+		err = ret;
+		goto out;
+	}
+
+	mv88e6xxx_tcam_cleanup(chip);
+
+	err = mv88e6321_set_tcam_mode(chip->bus, &tcam_entries);
+	if (err)
+		goto out_free_tcam_infos;
+
+	list_for_each_entry(tcam_entry, &tcam_entries.head.list, list) {
+		err = mv88e6xxx_set_tcam_entry(chip, tcam_entry);
+		if (err)
+			goto out_free_tcam_infos;
+	}
+
+	goto out_free_tcam_entries;
+
+out_free_tcam_infos:
+	mv88e6xxx_tcam_cleanup(chip);
+out_free_tcam_entries:
+	list_for_each_entry_safe(tcam_entry, tcam_entry_tmp,
+				 &tcam_entries.head.list, list) {
+		list_del(&tcam_entry->list);
+		kfree(tcam_entry);
+	}
+out:
+
+	return err;
+}
+
+static u16 mv88e6xxx_of_get_led_ctrl(struct mv88e6xxx_chip *chip, int port,
+				     u16 def_value)
+{
+	u16 led_ctrl[DSA_MAX_PORTS];
+	struct device_node *np = chip->dev->of_node;
+
+	if (WARN_ON(mv88e6xxx_num_ports(chip) > DSA_MAX_PORTS))
+		return def_value;
+
+	if (!of_property_read_u16_array(np, "led-ctrl", led_ctrl,
+					mv88e6xxx_num_ports(chip)))
+		return led_ctrl[port];
+
+	return def_value;
+}
+
 static int mv88e6xxx_setup_port(struct mv88e6xxx_chip *chip, int port)
 {
 	struct dsa_switch *ds = chip->ds;
@@ -2881,6 +3110,13 @@ static int mv88e6xxx_setup_port(struct mv88e6xxx_chip *chip, int port)
 	chip->ports[port].chip = chip;
 	chip->ports[port].port = port;
 
+	reg = MV88E6XXX_PORT_LED_CTL_UPDATE
+		| mv88e6xxx_of_get_led_ctrl(chip, port,
+		    MV88E6XXX_PORT_LED_CTL_LED0_SEL_10XX_CONT |
+		    MV88E6XXX_PORT_LED_CTL_LED1_SEL_ACT);
+
+	mv88e6xxx_port_write(chip, port, MV88E6XXX_PORT_LED_CTL, reg);
+
 	/* MAC Forcing register: don't force link, speed, duplex or flow control
 	 * state to any particular values on physical ports, but force the CPU
 	 * port and all DSA ports to their maximum bandwidth and full duplex.
@@ -2941,8 +3177,13 @@ static int mv88e6xxx_setup_port(struct mv88e6xxx_chip *chip, int port)
 	if (err)
 		return err;
 
-	err = mv88e6xxx_port_set_8021q_mode(chip, port,
-				MV88E6XXX_PORT_CTL2_8021Q_MODE_DISABLED);
+	if (dsa_is_cpu_port(ds, port))
+		err = mv88e6xxx_port_set_8021q_mode(chip, port,
+					MV88E6XXX_PORT_CTL2_8021Q_MODE_FALLBACK);
+	else
+		err = mv88e6xxx_port_set_8021q_mode(chip, port,
+					MV88E6XXX_PORT_CTL2_8021Q_MODE_DISABLED);
+
 	if (err)
 		return err;
 
@@ -3043,7 +3284,24 @@ static int mv88e6xxx_setup_port(struct mv88e6xxx_chip *chip, int port)
 	/* Default VLAN ID and priority: don't set a default VLAN
 	 * ID, and set the default packet priority to zero.
 	 */
-	return mv88e6xxx_port_write(chip, port, MV88E6XXX_PORT_DEFAULT_VLAN, 0);
+	err = mv88e6xxx_port_write(chip, port, MV88E6XXX_PORT_DEFAULT_VLAN, 0);
+	if (err)
+		return err;
+
+	/* Enable PHY detection for external PHYs */
+	if (mv88e6xxx_is_external_phy(ds, port)) {
+		err = mv88e6xxx_port_read(chip, port, MV88E6XXX_PORT_STS, &reg);
+		if (err)
+			return err;
+
+		reg |= MV88E6XXX_PORT_STS_PHY_DETECT;
+
+		err = mv88e6xxx_port_write(chip, port, MV88E6XXX_PORT_STS, reg);
+		if (err)
+			return err;
+	}
+
+	return 0;
 }
 
 static int mv88e6xxx_get_max_mtu(struct dsa_switch *ds, int port)
@@ -3306,6 +3564,16 @@ static int mv88e6xxx_setup(struct dsa_switch *ds)
 	if (err)
 		goto unlock;
 
+	if (chip->info->tcam_support) {
+		err = mv88e6xxx_tcam_setup(chip);
+		if (err)
+			goto unlock;
+	}
+
+	err = mv88e6xxx_vtu_setup_pnio_vlan(chip);
+	if (err)
+		goto unlock;
+
 unlock:
 	mv88e6xxx_reg_unlock(chip);
 
@@ -4555,6 +4823,8 @@ static const struct mv88e6xxx_ops mv88e6321_ops = {
 	.set_cpu_port = mv88e6095_g1_set_cpu_port,
 	.set_egress_port = mv88e6095_g1_set_egress_port,
 	.watchdog_ops = &mv88e6390_watchdog_ops,
+	.mgmt_rsvd2cpu = mv88e6352_g2_mgmt_rsvd2cpu,
+	.pot_clear = mv88e6xxx_g2_pot_clear,
 	.reset = mv88e6352_g1_reset,
 	.vtu_getnext = mv88e6185_g1_vtu_getnext,
 	.vtu_loadpurge = mv88e6185_g1_vtu_loadpurge,
@@ -5521,6 +5791,7 @@ static const struct mv88e6xxx_info mv88e6xxx_table[] = {
 		.multi_chip = true,
 		.edsa_support = MV88E6XXX_EDSA_SUPPORTED,
 		.ptp_support = true,
+		.tcam_support = true,
 		.ops = &mv88e6321_ops,
 	},
 
@@ -5619,6 +5890,7 @@ static const struct mv88e6xxx_info mv88e6xxx_table[] = {
 		.ptp_support = true,
 		.ops = &mv88e6352_ops,
 	},
+
 	[MV88E6390] = {
 		.prod_num = MV88E6XXX_PORT_SWITCH_ID_PROD_6390,
 		.family = MV88E6XXX_FAMILY_6390,
@@ -5643,6 +5915,7 @@ static const struct mv88e6xxx_info mv88e6xxx_table[] = {
 		.ptp_support = true,
 		.ops = &mv88e6390_ops,
 	},
+
 	[MV88E6390X] = {
 		.prod_num = MV88E6XXX_PORT_SWITCH_ID_PROD_6390X,
 		.family = MV88E6XXX_FAMILY_6390,
@@ -6297,6 +6570,25 @@ static const struct dsa_switch_ops mv88e6xxx_switch_ops = {
 	.port_bridge_tx_fwd_unoffload = mv88e6xxx_bridge_tx_fwd_unoffload,
 };
 
+static ssize_t mv88e6xxx_g1_atu_flush_store(struct device *dev,
+					    struct device_attribute *attr,
+					    const char *buf, size_t count)
+{
+	int ret;
+	struct dsa_switch *ds = dev_get_drvdata(dev);
+	struct mv88e6xxx_chip *chip = ds->priv;
+
+	if (count > 0 && *buf && *buf != '0') {
+		mutex_lock(&chip->reg_lock);
+		ret = mv88e6xxx_g1_atu_flush(chip, 0, false);
+		mutex_unlock(&chip->reg_lock);
+	}
+
+	return (ret) ? : count;
+}
+
+static DEVICE_ATTR(atu_flush, 0200, NULL, mv88e6xxx_g1_atu_flush_store);
+
 static int mv88e6xxx_register_switch(struct mv88e6xxx_chip *chip)
 {
 	struct device *dev = chip->dev;
@@ -6306,7 +6598,6 @@ static int mv88e6xxx_register_switch(struct mv88e6xxx_chip *chip)
 	if (!ds)
 		return -ENOMEM;
 
-	ds->dev = dev;
 	ds->num_ports = mv88e6xxx_num_ports(chip);
 	ds->priv = chip;
 	ds->dev = dev;
@@ -6411,7 +6702,7 @@ static int mv88e6xxx_probe(struct mdio_device *mdiodev)
 		goto out;
 	}
 	if (chip->reset)
-		usleep_range(1000, 2000);
+		usleep_range(300000, 400000);
 
 	err = mv88e6xxx_detect(chip);
 	if (err)
@@ -6469,10 +6760,32 @@ static int mv88e6xxx_probe(struct mdio_device *mdiodev)
 			goto out_g1_irq;
 	}
 
-	err = mv88e6xxx_g1_atu_prob_irq_setup(chip);
+	err = device_create_file(chip->dev, &dev_attr_atu_flush);
 	if (err)
 		goto out_g2_irq;
 
+	chip->class_dev = NULL;
+
+	if (wsysinit_sysfs_class) {
+		struct device *class_dev;
+
+		class_dev = device_create(wsysinit_sysfs_class, chip->dev,
+					  MKDEV(0, 0), chip, "mv88e6xxx_%d",
+					  MINOR(chip->dev->devt));
+		if (IS_ERR(dev)) {
+			err = PTR_ERR(dev);
+			goto out_g2_irq;
+		}
+
+		chip->class_dev = class_dev;
+	}
+
+	INIT_LIST_HEAD(&chip->tcam.info_head.list);
+
+	err = mv88e6xxx_g1_atu_prob_irq_setup(chip);
+	if (err)
+		goto out_remove_class_device;
+
 	err = mv88e6xxx_g1_vtu_prob_irq_setup(chip);
 	if (err)
 		goto out_g1_atu_prob_irq;
@@ -6485,6 +6798,8 @@ static int mv88e6xxx_probe(struct mdio_device *mdiodev)
 	if (err)
 		goto out_mdio;
 
+	mv88e6xxx_debugfs_setup(chip);
+
 	return 0;
 
 out_mdio:
@@ -6493,6 +6808,9 @@ static int mv88e6xxx_probe(struct mdio_device *mdiodev)
 	mv88e6xxx_g1_vtu_prob_irq_free(chip);
 out_g1_atu_prob_irq:
 	mv88e6xxx_g1_atu_prob_irq_free(chip);
+out_remove_class_device:
+	if (chip->class_dev)
+		device_destroy(wsysinit_sysfs_class, chip->class_dev->devt);
 out_g2_irq:
 	if (chip->info->g2_irqs > 0)
 		mv88e6xxx_g2_irq_free(chip);
@@ -6522,7 +6840,12 @@ static void mv88e6xxx_remove(struct mdio_device *mdiodev)
 		mv88e6xxx_hwtstamp_free(chip);
 		mv88e6xxx_ptp_free(chip);
 	}
+	if (chip->class_dev)
+		device_destroy(wsysinit_sysfs_class, chip->class_dev->devt);
 
+	device_remove_file(chip->dev, &dev_attr_atu_flush);
+	mv88e6xxx_tcam_cleanup(chip);
+	mv88e6xxx_debugfs_destroy(chip);
 	mv88e6xxx_phy_destroy(chip);
 	mv88e6xxx_unregister_switch(chip);
 	mv88e6xxx_mdios_unregister(chip);
diff --git a/drivers/net/dsa/mv88e6xxx/chip.h b/drivers/net/dsa/mv88e6xxx/chip.h
index 8271b8aa7b71..9437575f2c30 100644
--- a/drivers/net/dsa/mv88e6xxx/chip.h
+++ b/drivers/net/dsa/mv88e6xxx/chip.h
@@ -18,6 +18,8 @@
 #include <linux/timecounter.h>
 #include <net/dsa.h>
 
+extern struct class *wsysinit_sysfs_class;
+
 #define EDSA_HLEN		8
 #define MV88E6XXX_N_FID		4096
 
@@ -165,6 +167,9 @@ struct mv88e6xxx_info {
 
 	/* Supports PTP */
 	bool ptp_support;
+
+	/* TCAM info */
+	bool tcam_support;
 };
 
 struct mv88e6xxx_atu_entry {
@@ -287,6 +292,19 @@ struct mv88e6xxx_region_priv {
 	enum mv88e6xxx_region_id id;
 };
 
+struct mv88e6xxx_tcam_info {
+	struct list_head list;
+	struct device_attribute dev_attr;
+	const char *title;
+	u8 id;
+	s16 next_id;
+	u16 reg_frame_type;
+};
+
+struct mv88e6xxx_tcam {
+	struct mv88e6xxx_tcam_info info_head;
+};
+
 struct mv88e6xxx_chip {
 	const struct mv88e6xxx_info *info;
 
@@ -387,6 +405,15 @@ struct mv88e6xxx_chip {
 
 	/* devlink regions */
 	struct devlink_region *regions[_MV88E6XXX_REGION_MAX];
+
+	/* tcam infos */
+	struct mv88e6xxx_tcam tcam;
+
+	/* directory within debugfs */
+	struct dentry *debugfs_root_entry;
+
+	/* wago device class */
+	struct device *class_dev;
 };
 
 struct mv88e6xxx_bus_ops {
diff --git a/drivers/net/dsa/mv88e6xxx/debugfs.c b/drivers/net/dsa/mv88e6xxx/debugfs.c
new file mode 100644
index 000000000000..2b308900c93d
--- /dev/null
+++ b/drivers/net/dsa/mv88e6xxx/debugfs.c
@@ -0,0 +1,406 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/* Marvell 88e6xxx Ethernet switch debugfs support
+ *
+ * Copyright (c) 2018 WAGO Kontakttechnick GmbH
+ */
+
+#include "debugfs.h"
+
+#include <linux/kernel.h>
+#include <linux/debugfs.h>
+#include <linux/switch.h>
+#include <linux/phy.h>
+
+#include "chip.h"
+
+struct mv88e6xxx_fdb_dump_ctx {
+	int port;
+	unsigned char *end;
+	unsigned char *curr;
+};
+
+enum {
+	GBE_TEST_MODE_ID,
+	PHY_REG_DUMP_ID,
+	SWITCH_REG_DUMP_ID,
+	PORT_FDB_DUMP_ID,
+};
+
+/* GBE ctrl register number */
+#define STD_GCCTRL_REG 0x09
+
+static char const *const text[] = {
+	[GBE_TEST_MODE_ID] = "GBE Compliance Test Mode\n"
+			     "Write 1 to 4 to enter test mode\n"
+			     "Write 0 to disable\n",
+};
+
+/* list of files published via debugfs*/
+static char const *const files[] = {
+	[GBE_TEST_MODE_ID] = "gbe_compliance",
+	[PHY_REG_DUMP_ID] = "phy_reg_dump",
+	[SWITCH_REG_DUMP_ID] = "switch_reg_dump",
+	[PORT_FDB_DUMP_ID] = "port_fdb_dump",
+};
+
+static inline size_t remaining_space(const void *curr, const void *end)
+{
+	return curr < end ? end - curr : 0;
+}
+
+static int mv88e6xxx_phy_read(struct mv88e6xxx_chip *chip, int phy, int reg,
+			      u16 *val)
+{
+	int addr = phy; /* PHY devices addresses start at 0x0 */
+
+	if (!chip->info->ops->phy_read)
+		return -EOPNOTSUPP;
+
+	return chip->info->ops->phy_read(chip, chip->bus, addr, reg, val);
+}
+
+static int mv88e6xxx_phy_write(struct mv88e6xxx_chip *chip, int phy, int reg,
+			       u16 val)
+{
+	int addr = phy; /* PHY devices addresses start at 0x0 */
+
+	if (!chip->info->ops->phy_write)
+		return -EOPNOTSUPP;
+
+	return chip->info->ops->phy_write(chip, chip->bus, addr, reg, val);
+}
+
+static bool mv88e6xxx_check_filename(struct file *filp, int file_index)
+{
+	return strcmp(files[file_index], filp->f_path.dentry->d_iname) == 0;
+}
+
+static ssize_t mv88e6xxx_debugfs_generic_read(struct file *filp,
+					      char __user *buffer, size_t count,
+					      loff_t *off, int file_index)
+{
+	return simple_read_from_buffer(buffer, count, off, text[file_index],
+				       strlen(text[file_index]));
+}
+
+static ssize_t mv88e6xxx_phy_reg_dump_read(struct file *filp,
+					   char __user *user_buf, size_t count,
+					   loff_t *off)
+{
+	int ret;
+	const int buf_size = 2048;
+	char *buf = kmalloc(buf_size, GFP_KERNEL);
+	char *pos = buf;
+	const char *end = buf + buf_size;
+	const int phys[] = { 0, 1, 3, 4 };
+	u8 phy_id;
+	struct mv88e6xxx_chip *chip = filp->f_inode->i_private;
+
+	mutex_lock(&chip->reg_lock);
+	for (phy_id = 0; phy_id < ARRAY_SIZE(phys); ++phy_id) {
+		u8 addr = phys[phy_id];
+		u8 phy_reg;
+		int reg_val, i;
+		u8 dev3_regs[] = { 0, 1, 20, 22 };
+		u8 dev7_regs[] = { 60, 61 };
+		struct phy_device *phy_dev = mdiobus_get_phy(chip->bus, addr);
+
+		pos += snprintf(pos, remaining_space(pos, end),
+				"=== PHY %d (addr: %d) dump ===\n", phy_id,
+				addr);
+		for (phy_reg = 0; phy_reg <= 26; ++phy_reg) {
+			u16 reg_val;
+
+			if (phy_reg == 11 || phy_reg == 12 || phy_reg == 23 ||
+			    phy_reg == 24 || phy_reg == 25)
+				continue;
+
+			ret = mv88e6xxx_phy_read(chip, addr, phy_reg, &reg_val);
+			pos += snprintf(pos, remaining_space(pos, end),
+					"REG %d value: %04X\n", phy_reg,
+					reg_val);
+		}
+
+		pos += snprintf(pos, remaining_space(pos, end),
+				"-- PHY %d (addr: %d) XMDIO regs\n", phy_id,
+				addr);
+
+		if (!phy_dev)
+			continue;
+
+		/* unlock chip->reg_lock for reading of MMD to avoid
+		 * deadlock with mdio_bus->mdio_lock that will locked in
+		 * phy_read_mmd
+		 */
+		mutex_unlock(&chip->reg_lock);
+
+		for (i = 0; i < ARRAY_SIZE(dev3_regs); ++i) {
+			reg_val = phy_read_mmd(phy_dev, dev3_regs[i], 3);
+			if (reg_val < 0)
+				continue;
+			pos += snprintf(pos, remaining_space(pos, end),
+					"Dev: 3 Reg: %d value: %04X\n",
+					dev3_regs[i], (uint16_t)reg_val);
+		}
+
+		for (i = 0; i < ARRAY_SIZE(dev7_regs); ++i) {
+			reg_val = phy_read_mmd(phy_dev, dev7_regs[i], 7);
+			if (reg_val < 0)
+				continue;
+			pos += snprintf(pos, remaining_space(pos, end),
+					"Dev: 7 Reg: %d value: %04X\n",
+					dev7_regs[i], (uint16_t)reg_val);
+		}
+
+		mutex_lock(&chip->reg_lock);
+	}
+
+	mutex_unlock(&chip->reg_lock);
+
+	if (WARN_ON(pos - buf >= buf_size))
+		ret = -ENOSPC;
+	else
+		ret = simple_read_from_buffer(user_buf, count, off, buf,
+					      pos - buf);
+
+	kfree(buf);
+	return ret;
+}
+
+static ssize_t mv88e6xxx_switch_reg_dump_read(struct file *filp,
+					      char __user *user_buf,
+					      size_t count, loff_t *off)
+{
+	int ret;
+	const int buf_size = 10240;
+	char *buf = kmalloc(buf_size, GFP_KERNEL);
+	char *pos = buf;
+	const char *end = buf + buf_size;
+	const int sw_port_regs[] = { 0x10, 0x11, 0x12, 0x13, 0x14,
+				     0x15, 0x16, 0x1B, 0x1C };
+	const int sw_gl_regs[] = { 0x1B, 0x1C };
+	u8 sw_port_id, sw_gl_id;
+	int sw_port_regs_size = ARRAY_SIZE(sw_port_regs);
+	int sw_gl_regs_size = ARRAY_SIZE(sw_gl_regs);
+	struct mv88e6xxx_chip *chip = filp->f_inode->i_private;
+
+	mutex_lock(&chip->reg_lock);
+	for (sw_port_id = 0; sw_port_id < sw_port_regs_size; sw_port_id++) {
+		u8 addr = sw_port_regs[sw_port_id];
+		u8 sw_port_reg;
+
+		pos += snprintf(pos, remaining_space(pos, end),
+				"=== SWITCH PORT REG %d (addr: %d) dump ===\n",
+				sw_port_id, addr);
+
+		for (sw_port_reg = 0; sw_port_reg < 0x20; ++sw_port_reg) {
+			u16 reg_val;
+
+			if ((sw_port_reg >= 0x10 && sw_port_reg <= 0x15) ||
+			    sw_port_reg == 0x17 || sw_port_reg == 0x1A ||
+			    sw_port_reg == 0x1C || sw_port_reg == 0x1D)
+				continue;
+
+			ret = mv88e6xxx_read(chip, addr, sw_port_reg, &reg_val);
+			pos += snprintf(pos, remaining_space(pos, end),
+					"  REG %d (0x%02X) value: 0x%04X\n",
+					sw_port_reg, sw_port_reg, reg_val);
+		}
+	}
+
+	for (sw_gl_id = 0; sw_gl_id < sw_gl_regs_size; sw_gl_id++) {
+		u8 addr = sw_gl_regs[sw_gl_id];
+		u8 sw_gl_reg;
+
+		pos += snprintf(pos, remaining_space(pos, end),
+				"=== SWITCH GLOBAL %d REG (addr: %d) dump ===\n",
+				sw_gl_id + 1, addr);
+
+		for (sw_gl_reg = 0; sw_gl_reg < 0x20; ++sw_gl_reg) {
+			u16 reg_val;
+
+			if (!sw_gl_reg) {
+				if (sw_gl_reg >= 0x10 && sw_gl_reg <= 0x17)
+					continue;
+			} else {
+				if ((sw_gl_reg >= 0x10 && sw_gl_reg <= 0x13) ||
+				    sw_gl_reg == 0x1E || sw_gl_reg == 0x1F)
+					continue;
+			}
+
+			ret = mv88e6xxx_read(chip, addr, sw_gl_reg, &reg_val);
+			pos += snprintf(pos, remaining_space(pos, end),
+					"  REG %d (0x%02X) value: 0x%04X\n",
+					sw_gl_reg, sw_gl_reg, reg_val);
+		}
+	}
+
+	mutex_unlock(&chip->reg_lock);
+
+	if (WARN_ON(pos - buf >= buf_size))
+		ret = -ENOSPC;
+	else
+		ret = simple_read_from_buffer(user_buf, count, off, buf,
+					      pos - buf);
+
+	kfree(buf);
+	return ret;
+}
+
+static int mv88exxx_debugfs_fdb_dump_cb(const unsigned char *addr, u16 vid,
+					bool is_static, void *data)
+{
+	struct mv88e6xxx_fdb_dump_ctx *ctx = data;
+	const size_t buffer_size =
+		ctx->curr < ctx->end ? ctx->end - ctx->curr : 0;
+
+	ctx->curr += snprintf(ctx->curr, buffer_size, "%pM\t%d\t%hu\t%d\n",
+			      addr, ctx->port, vid, is_static);
+
+	return 0;
+}
+
+static ssize_t mv88e6xxx_debugfs_port_fdb_dump(struct file *filp,
+					       char __user *user_buffer,
+					       size_t count, loff_t *off)
+{
+	const struct mv88e6xxx_chip *chip = filp->f_inode->i_private;
+	struct dsa_switch *ds = chip->ds;
+	const size_t buf_size = 10240;
+	unsigned char *buf = kmalloc(buf_size, GFP_KERNEL);
+	struct mv88e6xxx_fdb_dump_ctx ctx = {
+		.curr = buf,
+		.end = buf + buf_size,
+	};
+
+	int port, ret;
+
+	ctx.curr += snprintf(ctx.curr, buf_size,
+			     "mac address\t\tport\tvid\tstatic\n");
+
+	for (port = 0; port < DSA_MAX_PORTS; ++port) {
+		ctx.port = port;
+		ret = ds->ops->port_fdb_dump(ds, port,
+					     mv88exxx_debugfs_fdb_dump_cb, &ctx);
+		if (ret)
+			break;
+	}
+
+	if (WARN_ON(ctx.curr - buf >= buf_size))
+		ret = -ENOSPC;
+	else
+		ret = simple_read_from_buffer(user_buffer, count, off, buf,
+					      ctx.curr - buf);
+
+	kfree(buf);
+
+	return ret;
+}
+
+static ssize_t mv88e6xxx_debugfs_read(struct file *filp, char __user *buffer,
+				      size_t count, loff_t *off)
+{
+	if (mv88e6xxx_check_filename(filp, GBE_TEST_MODE_ID))
+		return mv88e6xxx_debugfs_generic_read(filp, buffer, count, off,
+						      GBE_TEST_MODE_ID);
+
+	if (mv88e6xxx_check_filename(filp, PHY_REG_DUMP_ID))
+		return mv88e6xxx_phy_reg_dump_read(filp, buffer, count, off);
+
+	if (mv88e6xxx_check_filename(filp, SWITCH_REG_DUMP_ID))
+		return mv88e6xxx_switch_reg_dump_read(filp, buffer, count, off);
+
+	if (mv88e6xxx_check_filename(filp, PORT_FDB_DUMP_ID))
+		return mv88e6xxx_debugfs_port_fdb_dump(filp, buffer, count,
+						       off);
+
+	return 0;
+}
+
+static void mv88e6xxx_debugfs_set_gbe_testmode(struct mv88e6xxx_chip *chip,
+					       const char __user *s,
+					       size_t count)
+{
+	const u16 transmitter_test_mode_mask = (u16)((BIT(13) - 1));
+	const int phys[] = { 0, 1, 3, 4 };
+	u16 mode, reg;
+	int i;
+
+	if (kstrtou16_from_user(s, count, 10, &mode) == 0) {
+		mutex_lock(&chip->reg_lock);
+		for (i = 0; i < 4; ++i) {
+			mv88e6xxx_phy_read(chip, phys[i], STD_GCCTRL_REG, &reg);
+			reg = (mode << 13) | (reg & transmitter_test_mode_mask);
+			mv88e6xxx_phy_write(chip, phys[i], STD_GCCTRL_REG, reg);
+		}
+		mutex_unlock(&chip->reg_lock);
+
+		if (mode)
+			pr_info("gbe entering test mode %d\n", mode);
+		else
+			pr_info("gbe leaving test mode\n");
+	}
+}
+
+static ssize_t mv88e6xxx_debugfs_write(struct file *filp, const char __user *s,
+				       size_t count, loff_t *off)
+{
+	struct mv88e6xxx_chip *chip = filp->f_inode->i_private;
+
+	if (mv88e6xxx_check_filename(filp, GBE_TEST_MODE_ID))
+		mv88e6xxx_debugfs_set_gbe_testmode(chip, s, count);
+
+	return count;
+}
+
+static const struct file_operations debugfs_ops = {
+	.read = mv88e6xxx_debugfs_read,
+	.write = mv88e6xxx_debugfs_write
+};
+
+void mv88e6xxx_debugfs_destroy(struct mv88e6xxx_chip *chip)
+{
+	if (!IS_ERR_OR_NULL(chip->debugfs_root_entry))
+		debugfs_remove_recursive(chip->debugfs_root_entry);
+}
+
+int mv88e6xxx_debugfs_setup(struct mv88e6xxx_chip *chip)
+{
+	struct dentry *entry;
+
+	entry = debugfs_create_dir("mv88e6xxx", NULL);
+	if (IS_ERR_OR_NULL(entry))
+		goto out_err;
+
+	chip->debugfs_root_entry = entry;
+
+	entry = debugfs_create_file(files[GBE_TEST_MODE_ID], 0600,
+				    chip->debugfs_root_entry, chip,
+				    &debugfs_ops);
+	if (IS_ERR_OR_NULL(entry))
+		goto out_err;
+
+	entry = debugfs_create_file(files[PHY_REG_DUMP_ID], 0400,
+				    chip->debugfs_root_entry, chip,
+				    &debugfs_ops);
+	if (IS_ERR_OR_NULL(entry))
+		goto out_err;
+
+	entry = debugfs_create_file(files[SWITCH_REG_DUMP_ID], 0400,
+				    chip->debugfs_root_entry, chip,
+				    &debugfs_ops);
+	if (IS_ERR_OR_NULL(entry))
+		goto out_err;
+
+	entry = debugfs_create_file(files[PORT_FDB_DUMP_ID], 0400,
+				    chip->debugfs_root_entry, chip,
+				    &debugfs_ops);
+	if (IS_ERR_OR_NULL(entry))
+		goto out_err;
+
+	return 0;
+
+out_err:
+	mv88e6xxx_debugfs_destroy(chip);
+	return (entry) ? PTR_ERR(entry) : -EINVAL;
+}
diff --git a/drivers/net/dsa/mv88e6xxx/debugfs.h b/drivers/net/dsa/mv88e6xxx/debugfs.h
new file mode 100644
index 000000000000..97562ab3153c
--- /dev/null
+++ b/drivers/net/dsa/mv88e6xxx/debugfs.h
@@ -0,0 +1,11 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+#ifndef _MV88E6XXX_DEBUGFS_H
+#define _MV88E6XXX_DEBUGFS_H
+
+#include "chip.h"
+
+void mv88e6xxx_debugfs_destroy(struct mv88e6xxx_chip *chip);
+int mv88e6xxx_debugfs_setup(struct mv88e6xxx_chip *chip);
+
+#endif /* _MV88E6XXX_DEBUGFS_H */
diff --git a/drivers/net/dsa/mv88e6xxx/global2.c b/drivers/net/dsa/mv88e6xxx/global2.c
index fa65ecd9cb85..103933577c23 100644
--- a/drivers/net/dsa/mv88e6xxx/global2.c
+++ b/drivers/net/dsa/mv88e6xxx/global2.c
@@ -87,9 +87,10 @@ int mv88e6185_g2_mgmt_rsvd2cpu(struct mv88e6xxx_chip *chip)
 	int err;
 
 	/* Consider the frames with reserved multicast destination
-	 * addresses matching 01:80:c2:00:00:0x as MGMT.
+	 * addresses matching 01:80:c2:00:00:0x as MGMT, except
+	 * frames with mac 01:80:c2:00:00:00 (BPDU)
 	 */
-	err = mv88e6xxx_g2_mgmt_enable_0x(chip, 0xffff);
+	err = mv88e6xxx_g2_mgmt_enable_0x(chip, 0xfffe);
 	if (err)
 		return err;
 
@@ -363,6 +364,8 @@ static int mv88e6xxx_g2_eeprom_cmd(struct mv88e6xxx_chip *chip, u16 cmd)
 	if (err)
 		return err;
 
+	usleep_range(10000, 15000);
+
 	return mv88e6xxx_g2_eeprom_wait(chip);
 }
 
diff --git a/drivers/net/dsa/mv88e6xxx/mv88e6321_tcam.c b/drivers/net/dsa/mv88e6xxx/mv88e6321_tcam.c
new file mode 100644
index 000000000000..5742521cbf9b
--- /dev/null
+++ b/drivers/net/dsa/mv88e6xxx/mv88e6321_tcam.c
@@ -0,0 +1,975 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+#define pr_fmt(fmt)     "mv88e6321: tcam: " fmt
+
+#include <linux/delay.h>
+#include "mv88e6321_tcam.h"
+#include "chip.h"
+#include "port.h"
+
+#define OF_TCAM_ENTRIES_PROP_READ_U8(__np, __name, __out, __ret, __goto) do { \
+u32 val__; \
+(__ret) = of_property_read_u32(__np, __name, &val__); \
+if ((__ret) < 0) { \
+	pr_err("no %s property found for tcam entry %s ret: (%d)\n", \
+	       __name, __np->name, __ret); \
+	goto __goto; \
+} \
+tcam_entries->__out = (u8)val__; \
+pr_debug("tcam set %s = 0x%04X\n", __name, val__); \
+} while (0)
+
+#define OF_TCAM_ENTRIES_PROP_READ_OPT_U8(__np, __name, __out, __ret, __goto) \
+do { \
+u32 val__; \
+if (of_property_read_u32(__np, __name, &val__) >= 0) { \
+	tcam_entries->__out = (u8)val__; \
+	pr_debug("tcam set %s = 0x%04X\n", __name, val__); \
+} \
+} while (0)
+
+#define OF_TCAM_PROP_READ_U8(__np, __name, __out, __ret, __goto) do { \
+u32 val__; \
+(__ret) = of_property_read_u32(__np, __name, &val__); \
+if ((__ret) < 0) { \
+	pr_err("no %s property found for tcam entry %s ret: (%d)\n", \
+	       __name, __np->name, __ret); \
+	kfree(tcam_entry); \
+	goto __goto; \
+} \
+tcam_entry->__out = (u8)val__; \
+pr_debug("tcam set %s = 0x%04X\n", __name, val__); \
+} while (0)
+
+#define OF_TCAM_PROP_READ_OPT_U8(__np, __name, __out) do { \
+u32 val__; \
+if (of_property_read_u32(__np, __name, &val__) >= 0) { \
+	tcam_entry->__out = (u8)val__; \
+	pr_debug("tcam set %s = 0x%04X\n", __name, val__); \
+} \
+} while (0)
+
+#define OF_TCAM_PROP_READ_U16(__np, __name, __out, __ret, __goto) do { \
+u32 val__; \
+__ret = of_property_read_u32(__np, __name, &val__); \
+if ((__ret) < 0) { \
+	pr_err("no %s property found for tcam entry %s\n", \
+	       __name, __np->name); \
+	kfree(tcam_entry); \
+	goto __goto; \
+} \
+tcam_entry->__out = (u16)val__; \
+pr_debug("tcam set %s = 0x%04X\n", __name, val__); \
+} while (0)
+
+#define OF_TCAM_PROP_READ_COND_U8(__np, __name, __mask, __out, __ret, __goto) \
+do { \
+	if (tcam_entry->__mask) \
+		OF_TCAM_PROP_READ_U8(__np, __name, __out, __ret, __goto); \
+} while (0)
+
+#define OF_TCAM_PROP_READ_COND_U16(__np, __name, __mask, __out, __ret, __goto) \
+do { \
+	if (tcam_entry->__mask) \
+		OF_TCAM_PROP_READ_U16(__np, __name, __out, __ret, __goto); \
+} while (0)
+
+#define OF_TCAM_PROP_READ_BOOL(__np, __name, __out) do {\
+if (of_property_read_bool((__np), (__name))) {\
+	tcam_entry->__out = 1; \
+	pr_debug("tcam set %s = 1\n", (__name)); \
+} \
+} while (0)
+
+static int of_set_frame_data(struct tcam_entry *tcam_entry,
+			     struct device_node *np)
+{
+	int ret;
+	u8 buf[TCAM_FRAME_DATA_MAX_SIZE];
+	u8 is_mask = 0;
+	u8 is_96_mask = 0;
+
+	/* get frame data mask */
+	ret = of_property_read_variable_u8_array(np, "frame-data-mask", buf, 0,
+						 TCAM_FRAME_DATA_MAX_SIZE);
+	if (ret < 0)
+		return ret;
+
+	if (!ret)
+		return -ENODATA;
+
+	while (ret--) {
+		pr_debug("frame_data[%d].mask = 0x%02X\n", ret, buf[ret]);
+		tcam_entry->frame_data[ret].mask = buf[ret];
+		is_mask |= buf[ret];
+
+		if (ret >= 48)
+			is_96_mask |= buf[ret];
+	}
+
+	tcam_entry->is96frame = (is_96_mask) ? 1 : 0;
+
+	if (!is_mask)
+		return 0;
+
+	/* get frame data */
+	ret = of_property_read_variable_u8_array(np, "frame-data", buf, 0,
+						 TCAM_FRAME_DATA_MAX_SIZE);
+	if (ret < 0)
+		return ret;
+
+	if (!ret)
+		return -ENODATA;
+
+	while (ret--) {
+		pr_debug("frame_data[%d].data = 0x%02X\n", ret, buf[ret]);
+		tcam_entry->frame_data[ret].data = buf[ret];
+	}
+
+	return 0;
+}
+
+int of_get_tcam_entry(struct tcam_entries *tcam_entries, struct device_node *np)
+{
+	int ctr = 0;
+	int err;
+	struct device_node *tcam_np;
+	struct device_node *child = NULL;
+	struct tcam_entry *tcam_entry = NULL;
+	struct tcam_entry *tcam_entry_tmp = NULL;
+
+	tcam_np = of_find_compatible_node(np, NULL, "mv88e6321,tcam");
+
+	if (!tcam_np)
+		return ctr;
+
+	OF_TCAM_ENTRIES_PROP_READ_U8(tcam_np, "tcam-mode-port-mask", port_mask,
+				     err, out);
+
+	OF_TCAM_ENTRIES_PROP_READ_OPT_U8(tcam_np, "debug-port", debug_port,
+					 err, out);
+
+	for_each_child_of_node(tcam_np, child) {
+		pr_info("process tcam entry node %s\n",	child->name);
+
+		tcam_entry = kzalloc(sizeof(*tcam_entry), GFP_KERNEL);
+		if (!tcam_entry) {
+			err = -ENOMEM;
+			goto out_free;
+		}
+
+		tcam_entry->title = child->name;
+
+		OF_TCAM_PROP_READ_U8(child, "id", orig_id, err, out_free);
+		OF_TCAM_PROP_READ_OPT_U8(child, "frame-type-mask",
+					 mask_frame_type);
+		OF_TCAM_PROP_READ_COND_U8(child, "frame-type", mask_frame_type,
+					  frame_type, err, out_free);
+		OF_TCAM_PROP_READ_U8(child, "ppri-mask", mask_ppri, err,
+				     out_free);
+		OF_TCAM_PROP_READ_COND_U8(child, "ppri", mask_ppri, orig_ppri,
+					  err, out_free);
+		OF_TCAM_PROP_READ_U8(child, "pvid-mask", mask_pvid, err,
+				     out_free);
+		OF_TCAM_PROP_READ_COND_U16(child, "pvid", mask_pvid, orig_pvid,
+					   err, out_free);
+		OF_TCAM_PROP_READ_OPT_U8(child, "spv-mask", mask_spv);
+		OF_TCAM_PROP_READ_COND_U8(child, "spv", mask_spv, spv, err,
+					  out_free);
+		OF_TCAM_PROP_READ_BOOL(child, "vid-override", vid_override);
+		OF_TCAM_PROP_READ_COND_U16(child, "vid-data", vid_override, vid,
+					   err, out_free);
+		OF_TCAM_PROP_READ_BOOL(child, "interrupt", interrupt);
+		OF_TCAM_PROP_READ_BOOL(child, "inc-tcam-ctr", inc_tcam_ctr);
+		OF_TCAM_PROP_READ_BOOL(child, "fpri-override", fpri_override);
+		OF_TCAM_PROP_READ_COND_U8(child, "fpri-data", fpri_override,
+					  fpri, err, out_free);
+		OF_TCAM_PROP_READ_BOOL(child, "qpri-override", qpri_override);
+		OF_TCAM_PROP_READ_COND_U8(child, "qpri-data", qpri_override,
+					  qpri, err, out_free);
+		OF_TCAM_PROP_READ_U8(child, "next-id", next_id, err, out_free);
+		OF_TCAM_PROP_READ_BOOL(child, "dpv-override", dpv_override);
+		OF_TCAM_PROP_READ_COND_U8(child, "dpv-data", dpv_override, dpv,
+					  err, out_free);
+		OF_TCAM_PROP_READ_BOOL(child, "ld-balance-override",
+				       ld_balance_override);
+		OF_TCAM_PROP_READ_COND_U8(child, "ld-balance-data",
+					  ld_balance_override, ld_balance, err,
+					  out_free);
+		OF_TCAM_PROP_READ_BOOL(child, "action-override",
+				       action_override);
+		OF_TCAM_PROP_READ_COND_U16(child, "action-data",
+					   action_override, action, err,
+					   out_free);
+
+		err = of_set_frame_data(tcam_entry, child);
+		if (err) {
+			kfree(tcam_entry);
+			goto out_free;
+		}
+
+		/* let every tcam_entry have same debug port */
+		tcam_entry->debug_port = tcam_entries->debug_port;
+
+		list_add(&tcam_entry->list, &tcam_entries->head.list);
+
+		ctr++;
+	}
+
+	return ctr;
+
+out_free:
+	list_for_each_entry_safe(tcam_entry, tcam_entry_tmp,
+				 &tcam_entries->head.list, list) {
+		list_del(&tcam_entry->list);
+		kfree(tcam_entry);
+	}
+out:
+	return err;
+}
+
+static inline int mv88e6321_write_tcam_pg_hdr(struct mii_bus *bus,
+					      struct tcam_entry *tcam_entry)
+{
+	tcam_entry->busy = 1;
+
+	return mdiobus_write(bus, TCAM_ADDR, TCAM_REG_PG_HDR,
+			     tcam_entry->reg_pg_hdr);
+}
+
+static inline int mv88e6321_wait_tcam_ready(struct mii_bus *bus)
+{
+	int ret;
+	int attempt;
+
+	for (attempt = 0; attempt < 16; ++attempt) {
+		ret = mdiobus_read(bus, TCAM_ADDR, TCAM_REG_PG_HDR);
+		if (ret < 0)
+			return ret;
+
+		if (!(ret & TCAM_PG_HDR_BUSY))
+			return ret;
+
+		usleep_range(1000, 2000);
+	}
+
+	pr_err("timeout while waiting for tcam ready\n");
+
+	return -ETIMEDOUT;
+}
+
+static int mv88e6321_load_tcam_page2(struct mii_bus *bus,
+				     struct tcam_entry *tcam_entry,
+				     int entry_no)
+{
+	int ret;
+
+	tcam_entry->pg = 2;
+
+	pr_debug("load page 2\n");
+
+	ret = mv88e6321_wait_tcam_ready(bus);
+	if (ret < 0)
+		return ret;
+
+	if (entry_no == 0 && tcam_entry->is96frame)
+		tcam_entry->cnt = 1;
+	else
+		tcam_entry->cnt = 0;
+
+	ret = mdiobus_write(bus, TCAM_ADDR, TCAM_REG_PG2_ACTION_4,
+			    tcam_entry->reg_action_4);
+	if (ret < 0)
+		return ret;
+
+	ret = mdiobus_write(bus, TCAM_ADDR, TCAM_REG_PG2_ACTION_3,
+			    tcam_entry->reg_action_3);
+	if (ret < 0)
+		return ret;
+
+	ret = mdiobus_write(bus, TCAM_ADDR, TCAM_REG_PG2_ACTION_2,
+			    tcam_entry->reg_action_2);
+	if (ret < 0)
+		return ret;
+
+	ret = mdiobus_write(bus, TCAM_ADDR, TCAM_REG_PG2_ACTION_1,
+			    tcam_entry->reg_action_1);
+	if (ret < 0)
+		return ret;
+
+	ret = mdiobus_write(bus, TCAM_ADDR, TCAM_REG_PG2_DEBUG_PORT,
+			    tcam_entry->reg_debug);
+	if (ret < 0)
+		return ret;
+
+	return mv88e6321_write_tcam_pg_hdr(bus, tcam_entry);
+}
+
+static int mv88e6321_load_tcam_page1(struct mii_bus *bus,
+				     struct tcam_entry *tcam_entry,
+				     int entry_no)
+{
+	int ret;
+	int i = 22;
+	int max = 0;
+	int reg = 0;
+
+	tcam_entry->pg = 1;
+
+	pr_debug("load page 1\n");
+
+	ret = mv88e6321_wait_tcam_ready(bus);
+	if (ret < 0)
+		return ret;
+
+	if (entry_no > 0)
+		i = 70;
+
+	max = i + 26;
+
+	for (reg = 2; i < max; ++i, ++reg) {
+		ret = mdiobus_write(bus, TCAM_ADDR, reg,
+				    tcam_entry->frame_data[i].reg_data);
+		if (ret < 0)
+			return ret;
+	}
+
+	return 0;
+}
+
+static int mv88e6321_load_tcam_page0(struct mii_bus *bus,
+				     struct tcam_entry *tcam_entry, int entry_no)
+{
+	int ret;
+	int i = 0;
+	int max = 0;
+	int reg = 0;
+	u16 reg_frame_type = 0;
+
+	tcam_entry->pg = 0;
+
+	pr_debug("load page 0\n");
+
+	if (tcam_entry->frame_type == TCAM_FT_PROV_TAG && entry_no == 0) {
+		tcam_entry->id_pvid = (tcam_entry->orig_pvid & 0xFF);
+		tcam_entry->pvid = ((tcam_entry->orig_pvid >> 8) & 0xF);
+		tcam_entry->mask_id_pvid = (tcam_entry->mask_pvid & 0xFF);
+		tcam_entry->mask_ppri_pvid = (((u16)tcam_entry->mask_ppri) << 8);
+		tcam_entry->mask_ppri_pvid += ((tcam_entry->mask_pvid >> 8) & 0xF);
+	}
+
+	if (entry_no > 0) {
+		reg_frame_type = 0xC000;
+		reg_frame_type += TCAM_FT_CONTINUE;
+	} else {
+		reg_frame_type = tcam_entry->reg_frame_type;
+	}
+
+	ret = mv88e6321_wait_tcam_ready(bus);
+	if (ret < 0)
+		return ret;
+
+	ret = mdiobus_write(bus, TCAM_ADDR, TCAM_REG_PG0_KEY_1, reg_frame_type);
+	if (ret < 0)
+		return ret;
+
+	ret = mdiobus_write(bus, TCAM_ADDR, TCAM_REG_PG0_KEY_2,
+			    tcam_entry->reg_spv);
+	if (ret < 0)
+		return ret;
+
+	ret = mdiobus_write(bus, TCAM_ADDR, TCAM_REG_PG0_KEY_3,
+			    tcam_entry->reg_ppri_pvid);
+	if (ret < 0)
+		return ret;
+
+	ret = mdiobus_write(bus, TCAM_ADDR, TCAM_REG_PG0_KEY_4,
+			    tcam_entry->reg_id_ppri);
+	if (ret < 0)
+		return ret;
+
+	if (entry_no > 0)
+		i = 48;
+
+	max = i + 22;
+
+	for (reg = 6; i < max; ++i, ++reg) {
+		ret = mdiobus_write(bus, TCAM_ADDR, reg,
+				    tcam_entry->frame_data[i].reg_data);
+		if (ret < 0)
+			return ret;
+	}
+
+	return mv88e6321_write_tcam_pg_hdr(bus, tcam_entry);
+}
+
+int mv88e6321_load_tcam(struct mii_bus *bus,
+			struct tcam_entry *tcam_entry)
+{
+	int ret;
+	int entry_no = 1;
+
+	if (!bus)
+		return -ENODEV;
+
+	tcam_entry->op = TCAM_OP_LOAD;
+
+	if (tcam_entry->is96frame)
+		entry_no = 2;
+
+	while (entry_no--) {
+		if (entry_no > 0) {
+			tcam_entry->id_pvid = tcam_entry->next_id;
+			tcam_entry->mask_id_pvid = 0xFF;
+			tcam_entry->id = tcam_entry->next_id;
+			tcam_entry->next_id = 0;
+		} else {
+			tcam_entry->id_pvid = 0;
+			tcam_entry->mask_id_pvid = 0;
+			tcam_entry->next_id = tcam_entry->id;
+			tcam_entry->id = tcam_entry->orig_id;
+		}
+
+		ret = mv88e6321_load_tcam_page2(bus, tcam_entry, entry_no);
+		if (ret < 0)
+			return ret;
+
+		ret = mv88e6321_load_tcam_page1(bus, tcam_entry, entry_no);
+		if (ret < 0)
+			return ret;
+
+		ret = mv88e6321_load_tcam_page0(bus, tcam_entry, entry_no);
+		if (ret < 0)
+			return ret;
+	}
+
+	return 0;
+}
+
+static int mv88e6321_get_tcam_pg0(struct mii_bus *bus, struct tcam_entry
+				  *tcam_entry, int entry_no)
+{
+	int ret;
+	int i = 0;
+	int reg = 0;
+	int max = 0;
+
+	pr_debug("read tcam page 0\n");
+
+	tcam_entry->pg = 0;
+
+	ret = mv88e6321_write_tcam_pg_hdr(bus, tcam_entry);
+	if (ret < 0)
+		return ret;
+
+	if (entry_no == 0) {
+		ret = mdiobus_read(bus, TCAM_ADDR, TCAM_REG_PG0_KEY_1);
+		if (ret < 0)
+			return ret;
+
+		tcam_entry->reg_frame_type = ((u16)ret);
+
+		if (tcam_entry->reg_frame_type != 0x00FF)
+			tcam_entry->is_valid = 1;
+		else
+			return ret;
+
+		ret = mdiobus_read(bus, TCAM_ADDR, TCAM_REG_PG0_KEY_2);
+		if (ret < 0)
+			return ret;
+
+		tcam_entry->reg_spv = ((u16)ret);
+
+		ret = mdiobus_read(bus, TCAM_ADDR, TCAM_REG_PG0_KEY_3);
+		if (ret < 0)
+			return ret;
+
+		tcam_entry->reg_ppri_pvid = ((u16)ret);
+		tcam_entry->mask_ppri = (((u8)tcam_entry->mask_ppri_pvid) >> 4);
+		tcam_entry->orig_pvid = tcam_entry->pvid;
+		tcam_entry->orig_pvid <<= 8;
+		tcam_entry->mask_pvid = (tcam_entry->mask_ppri_pvid & 0xF);
+		tcam_entry->mask_pvid <<= 8;
+
+		ret = mdiobus_read(bus, TCAM_ADDR, TCAM_REG_PG0_KEY_4);
+		if (ret < 0)
+			return ret;
+
+		tcam_entry->reg_id_ppri = ((u16)ret);
+		tcam_entry->orig_pvid += tcam_entry->id_pvid;
+		tcam_entry->mask_pvid += tcam_entry->mask_id_pvid;
+	}
+
+	if (entry_no > 0)
+		i = 48;
+
+	max = i + 22;
+
+	for (reg = 6; i < max; ++i, ++reg) {
+		ret = mdiobus_read(bus, TCAM_ADDR, reg);
+		if (ret < 0)
+			return ret;
+
+		tcam_entry->frame_data[i].reg_data = ((u16)ret);
+	}
+
+	return 0;
+}
+
+static int mv88e6321_get_tcam_pg1(struct mii_bus *bus, struct tcam_entry
+				  *tcam_entry, int entry_no)
+{
+	int ret;
+	int i = 22;
+	int reg = 0;
+	int max = 0;
+
+	pr_debug("read tcam page 1\n");
+
+	tcam_entry->pg = 1;
+
+	ret = mv88e6321_write_tcam_pg_hdr(bus, tcam_entry);
+	if (ret < 0)
+		return ret;
+
+	if (entry_no > 0)
+		i = 70;
+
+	max = i + 26;
+
+	for (reg = 2; i < max; ++i, ++reg) {
+		ret = mdiobus_read(bus, TCAM_ADDR, reg);
+		if (ret < 0)
+			return ret;
+
+		tcam_entry->frame_data[i].reg_data = ((u16)ret);
+	}
+
+	return 0;
+}
+
+static int mv88e6321_get_tcam_pg2(struct mii_bus *bus, struct tcam_entry
+				  *tcam_entry, int entry_no)
+{
+	int ret;
+
+	pr_debug("read tcam page 2\n");
+
+	tcam_entry->pg = 2;
+
+	if (entry_no)
+		return 0;
+
+	ret = mv88e6321_write_tcam_pg_hdr(bus, tcam_entry);
+	if (ret < 0)
+		return ret;
+
+	ret = mdiobus_read(bus, TCAM_ADDR, TCAM_REG_PG2_ACTION_1);
+	if (ret < 0)
+		return ret;
+
+	tcam_entry->reg_action_1 = ((u16)ret);
+
+	ret = mdiobus_read(bus, TCAM_ADDR, TCAM_REG_PG2_ACTION_2);
+	if (ret < 0)
+		return ret;
+
+	tcam_entry->reg_action_2 = ((u16)ret);
+
+	ret = mdiobus_read(bus, TCAM_ADDR, TCAM_REG_PG2_ACTION_3);
+	if (ret < 0)
+		return ret;
+
+	tcam_entry->reg_action_3 = ((u16)ret);
+
+	ret = mdiobus_read(bus, TCAM_ADDR, TCAM_REG_PG2_ACTION_4);
+	if (ret < 0)
+		return ret;
+
+	tcam_entry->reg_action_4 = ((u16)ret);
+
+	ret = mdiobus_read(bus, TCAM_ADDR, TCAM_REG_PG2_DEBUG_PORT);
+	if (ret < 0)
+		return ret;
+
+	tcam_entry->reg_debug = ((u16)ret);
+
+	ret = mdiobus_read(bus, TCAM_ADDR, TCAM_REG_PG2_DEBUG);
+	if (ret < 0)
+		return ret;
+
+	tcam_entry->reg_hit = ((u16)ret);
+
+	return 0;
+}
+
+int mv88e6321_get_tcam(struct mii_bus *bus, u8 id,
+		       struct tcam_entry *tcam_entry)
+{
+	int ret;
+	int i = 0;
+
+	if (!bus)
+		return -ENODEV;
+
+	tcam_entry->orig_id = id;
+	tcam_entry->id = id;
+	tcam_entry->op = TCAM_OP_READ;
+
+	for (i = 0; i < 2; ++i) {
+		if (i > 0)
+			tcam_entry->id = tcam_entry->next_id;
+
+		ret = mv88e6321_get_tcam_pg0(bus, tcam_entry, i);
+		if (ret < 0 || !tcam_entry->is_valid)
+			return ret;
+
+		ret = mv88e6321_get_tcam_pg1(bus, tcam_entry, i);
+		if (ret < 0)
+			return ret;
+
+		ret = mv88e6321_get_tcam_pg2(bus, tcam_entry, i);
+		if (ret < 0)
+			return ret;
+
+		if (!tcam_entry->cnt)
+			break;
+	}
+
+	return 0;
+}
+
+int mv88e6321_tcam_to_string(struct tcam_entry *tcam_entry,
+			     char *buffer, size_t size)
+{
+	int i = 0;
+	char *p = buffer;
+
+	if (!tcam_entry->is_valid) {
+		p += sprintf(p, "TCAM with ID %d is disabled", tcam_entry->id);
+		return 0;
+	}
+
+	p += sprintf(p, "\n\t\tTCAM            ID: %d\n", tcam_entry->orig_id);
+	p += sprintf(p, "\t\tTCAM    frame type: 0x%02X mask: 0x%02X\n",
+		     tcam_entry->frame_type, tcam_entry->mask_frame_type);
+	p += sprintf(p, "\t\tTCAM           spv: 0x%02X mask: 0x%02X\n",
+		     tcam_entry->spv, tcam_entry->mask_spv);
+	p += sprintf(p, "\t\tTCAM          ppri: 0x%02X mask: 0x%02X\n",
+		     tcam_entry->ppri, tcam_entry->mask_ppri);
+
+	if (tcam_entry->mask_frame_type &&
+	    tcam_entry->frame_type == TCAM_FT_PROV_TAG) {
+		p += sprintf(p, "\t\tTCAM          pvid: 0x%04X mask: 0x%04X\n",
+			     tcam_entry->orig_pvid, tcam_entry->mask_pvid);
+	}
+
+	p += sprintf(p, "\t\tTCAM        cnt id: 0x%02X mask: 0x%02X\n",
+		     tcam_entry->id_pvid, tcam_entry->mask_id_pvid);
+	p += sprintf(p, "\t\tTCAM    frame data: [MASK:DATA]");
+
+	for (i = 0; i < 48; ++i) {
+		if (!(i % 16))
+			p += sprintf(p, "\n\t\t\t");
+
+		p += sprintf(p, "%02X:%02X ", tcam_entry->frame_data[i].mask,
+			     tcam_entry->frame_data[i].data);
+	}
+
+	if (tcam_entry->cnt) {
+		for (i = 48; i < TCAM_FRAME_DATA_MAX_SIZE; ++i) {
+			if (!(i % 16))
+				p += sprintf(p, "\n\t\t\t");
+
+			p += sprintf(p, "%02X:%02X ",
+				     tcam_entry->frame_data[i].mask,
+				     tcam_entry->frame_data[i].data);
+		}
+	}
+
+	p += sprintf(p, "\n\t\tTCAM      continue: %d\n", tcam_entry->cnt);
+	p += sprintf(p, "\t\tTCAM     interrupt: %d\n", tcam_entry->interrupt);
+	p += sprintf(p, "\t\tTCAM      inc ctrl: %d\n",
+		     tcam_entry->inc_tcam_ctr);
+	p += sprintf(p, "\t\tTCAM  override vid: %d vid: 0x%04X\n",
+		     tcam_entry->vid_override, tcam_entry->vid);
+	p += sprintf(p, "\t\tTCAM    next index: %d\n", tcam_entry->next_id);
+	p += sprintf(p, "\t\tTCAM override qpri: %d qpri: 0x%02X\n",
+		     tcam_entry->qpri_override, tcam_entry->qpri);
+	p += sprintf(p, "\t\tTCAM override fpri: %d fpri: 0x%02X\n",
+		     tcam_entry->fpri_override, tcam_entry->fpri);
+	p += sprintf(p, "\t\tTACM  override dpv: %d dpv: 0x%04X\n",
+		     tcam_entry->dpv_override, tcam_entry->dpv);
+	p += sprintf(p, "\t\tTCAM  override act: %d action: 0x%04X\n",
+		     tcam_entry->action_override, tcam_entry->action);
+	p += sprintf(p, "\t\tTCAM   override lb: %d load balance: 0x%02X\n",
+		     tcam_entry->ld_balance_override, tcam_entry->ld_balance);
+	p += sprintf(p, "\t\tTCAM    debug port: %d\n", tcam_entry->debug_port);
+	p += sprintf(p, "\t\tTCAM           hit: 0x%04X\n",
+		     tcam_entry->reg_hit);
+
+	return 0;
+}
+
+#define MV88E6321_PORTS		7
+
+#define PORT_REG(__reg)		(0x10 + (__reg))
+
+static inline int mv88e6321_set_port_state(struct mii_bus *bus, u16 addr,
+					   u16 state, u16 *old_reg_val)
+{
+	int ret;
+	u16 reg = MV88E6XXX_PORT_CTL0;
+
+	ret = mdiobus_read(bus, addr, reg);
+	if (ret < 0)
+		return ret;
+
+	if (old_reg_val)
+		*old_reg_val = (u16)ret;
+
+	ret &= ~MV88E6XXX_PORT_CTL0_STATE_MASK;
+	ret |= state;
+
+	ret = mdiobus_write(bus, addr, reg, ret);
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
+
+static int mv88e6321_enable_tcam_mode(struct mii_bus *bus, u16 addr,
+				      u16 port_prio_val)
+{
+	int ret;
+	u16 reg = MV88E6XXX_PORT_PRI_OVERRIDE;
+	u16 port_ctrl_val = 0;
+
+	/*TODO: currently this function support only 96byte tcam mode.
+	 * This mode includes 48byte tcam mode too. In future only
+	 * 48byte mode could be implemented.
+	 */
+
+	/* disable port before chage tcam mode */
+	ret = mv88e6321_set_port_state(bus, addr,
+				       MV88E6XXX_PORT_CTL0_STATE_DISABLED,
+				       &port_ctrl_val);
+	if (ret < 0)
+		return ret;
+
+	port_prio_val &= ~MV88E6XXX_PORT_PRI_OVERRIDE_TCAM_MODE_MASK;
+	port_prio_val |= MV88E6XXX_PORT_PRI_OVERRIDE_TCAM_MODE_96;
+
+	ret = mdiobus_write(bus, addr, reg, port_prio_val);
+	if (ret < 0)
+		return ret;
+
+	/* set old port state after tcam mode changing */
+	return mv88e6321_set_port_state(bus, addr, port_ctrl_val &
+					MV88E6XXX_PORT_CTL0_STATE_MASK, NULL);
+}
+
+int mv88e6321_set_tcam_mode(struct mii_bus *bus,
+			    struct tcam_entries *tcam_entries)
+{
+	int ret;
+	int addr = PORT_REG(0);
+	u8 mask = 1;
+
+	if (!bus)
+		return -ENODEV;
+
+	for (; addr < PORT_REG(MV88E6321_PORTS); ++addr) {
+		u16 reg = MV88E6XXX_PORT_PRI_OVERRIDE;
+
+		if (mask & tcam_entries->port_mask) {
+			ret = mdiobus_read(bus, addr, reg);
+			if (ret < 0)
+				return ret;
+
+			if ((ret & MV88E6XXX_PORT_PRI_OVERRIDE_TCAM_MODE_MASK) !=
+			    MV88E6XXX_PORT_PRI_OVERRIDE_TCAM_MODE_96) {
+				ret = mv88e6321_enable_tcam_mode(bus, addr,
+								 ret);
+			}
+		}
+		mask <<= 1;
+	}
+
+	return 0;
+}
+
+int mv88e6321_flush_tcam(struct mii_bus *bus, int id)
+{
+	int ret;
+	struct tcam_entry tcam_entry;
+
+	if (!bus)
+		return -ENODEV;
+
+	memset(&tcam_entry, 0, sizeof(struct tcam_entry));
+
+	if (id < 0)
+		tcam_entry.op = TCAM_OP_FLUSH_ALL;
+	else if (id >= 0 && id <= 255)
+		tcam_entry.op = TCAM_OP_FLUSH;
+	else
+		return 0;
+
+	tcam_entry.id = id;
+
+	if (id < 0)
+		pr_debug("flush all TCAM\n");
+	else
+		pr_debug("flush TCAM ID:%d\n", id);
+
+	ret = mv88e6321_wait_tcam_ready(bus);
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6321_write_tcam_pg_hdr(bus, &tcam_entry);
+	if (ret < 0)
+		return ret;
+
+	return mv88e6321_wait_tcam_ready(bus);
+}
+
+int mv88e6321_enable_tcam(struct mii_bus *bus, u8 id, u16 reg_frame_type)
+{
+	int ret;
+	struct tcam_entry tcam_entry;
+
+	if (!bus)
+		return -ENODEV;
+
+	memset(&tcam_entry, 0, sizeof(struct tcam_entry));
+
+	tcam_entry.op = TCAM_OP_READ;
+	tcam_entry.pg = 0;
+	tcam_entry.id = id;
+
+	ret = mv88e6321_wait_tcam_ready(bus);
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6321_write_tcam_pg_hdr(bus, &tcam_entry);
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6321_wait_tcam_ready(bus);
+	if (ret < 0)
+		return ret;
+
+	ret = mdiobus_write(bus, TCAM_ADDR, TCAM_REG_PG0_KEY_1, reg_frame_type);
+	if (ret < 0)
+		return ret;
+
+	tcam_entry.op = TCAM_OP_LOAD;
+
+	ret = mv88e6321_write_tcam_pg_hdr(bus, &tcam_entry);
+	if (ret < 0)
+		return ret;
+
+	return mv88e6321_wait_tcam_ready(bus);
+}
+
+int mv88e6321_disable_tcam(struct mii_bus *bus, u8 id)
+{
+	int ret = 0;
+	struct tcam_entry tcam_entry;
+
+	if (!bus)
+		return -ENODEV;
+
+	memset(&tcam_entry, 0, sizeof(struct tcam_entry));
+
+	tcam_entry.op = TCAM_OP_READ;
+	tcam_entry.pg = 0;
+	tcam_entry.id = id;
+
+	ret = mv88e6321_wait_tcam_ready(bus);
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6321_write_tcam_pg_hdr(bus, &tcam_entry);
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6321_wait_tcam_ready(bus);
+	if (ret < 0)
+		return ret;
+
+	ret = mdiobus_write(bus, TCAM_ADDR, TCAM_REG_PG0_KEY_1, 0xFF);
+	if (ret < 0)
+		return ret;
+
+	tcam_entry.op = TCAM_OP_LOAD;
+
+	ret = mv88e6321_write_tcam_pg_hdr(bus, &tcam_entry);
+	if (ret < 0)
+		return ret;
+
+	return mv88e6321_wait_tcam_ready(bus);
+}
+
+int mv88e6321_is_tcam_enabled(struct mii_bus *bus, u8 id)
+{
+	int ret = 0;
+	struct tcam_entry tcam_entry;
+
+	if (!bus)
+		return -ENODEV;
+
+	memset(&tcam_entry, 0, sizeof(struct tcam_entry));
+
+	tcam_entry.op = TCAM_OP_READ;
+	tcam_entry.pg = 0;
+	tcam_entry.id = id;
+
+	ret = mv88e6321_wait_tcam_ready(bus);
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6321_write_tcam_pg_hdr(bus, &tcam_entry);
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6321_wait_tcam_ready(bus);
+	if (ret < 0)
+		return ret;
+
+	ret = mdiobus_read(bus, TCAM_ADDR, TCAM_REG_PG0_KEY_1);
+	if (ret < 0)
+		return ret;
+
+	return (ret == 0xFF) ? 0 : 1;
+}
+
+int mv88e6321_get_tcam_debug(struct mii_bus *bus, u8 id)
+{
+	int ret = 0;
+	struct tcam_entry tcam_entry;
+
+	if (!bus)
+		return -ENODEV;
+
+	memset(&tcam_entry, 0, sizeof(struct tcam_entry));
+
+	tcam_entry.op = TCAM_OP_READ;
+	tcam_entry.pg = 2;
+	tcam_entry.id = id;
+
+	ret = mv88e6321_wait_tcam_ready(bus);
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6321_write_tcam_pg_hdr(bus, &tcam_entry);
+	if (ret < 0)
+		return ret;
+
+	ret = mv88e6321_wait_tcam_ready(bus);
+	if (ret < 0)
+		return ret;
+
+	return mdiobus_read(bus, TCAM_ADDR, TCAM_REG_PG2_DEBUG);
+}
diff --git a/drivers/net/dsa/mv88e6xxx/mv88e6321_tcam.h b/drivers/net/dsa/mv88e6xxx/mv88e6321_tcam.h
new file mode 100644
index 000000000000..71c4d41fd8fa
--- /dev/null
+++ b/drivers/net/dsa/mv88e6xxx/mv88e6321_tcam.h
@@ -0,0 +1,204 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+#ifndef __MV88E6321_TCAM__
+#define __MV88E6321_TCAM__
+
+#include <linux/mdio.h>
+#include <linux/list.h>
+#include <linux/of.h>
+
+#define TCAM_FRAME_DATA_MAX_SIZE 96
+
+struct tcam_frame_data {
+	union {
+		struct {
+			u16 data:8;
+			u16 mask:8;
+		};
+
+		u16 reg_data;
+	};
+};
+
+struct tcam_entry {
+	const char *title;
+	struct list_head list;
+	u8 orig_id;
+	u8 is_valid;
+	union {
+		struct {
+			u16 id:8;
+			u16 res0:2;
+			u16 pg:2;
+			u16 op:3;
+			u16 busy:1;
+		};
+
+		u16 reg_pg_hdr;
+	};
+
+	union {
+		struct {
+			u16 res1:6;
+			u16 frame_type:2;
+			u16 res2:6;
+			u16 mask_frame_type:2;
+		};
+
+		u16 reg_frame_type;
+	};
+
+	union {
+		struct {
+			u16 spv:7;
+			u16 res3:1;
+			u16 mask_spv:7;
+		};
+
+		u16 reg_spv;
+	};
+
+	u16 orig_pvid;
+	u8 orig_ppri;
+	u16 mask_pvid;
+	u8 mask_ppri;
+	union {
+		struct {
+			u16 pvid:4;
+			u16 ppri:4;
+			u16 mask_ppri_pvid:8;
+		};
+
+		u16 reg_ppri_pvid;
+	};
+
+	union {
+		struct {
+			u16 id_pvid:8;
+			u16 mask_id_pvid:8;
+		};
+
+		u16 reg_id_ppri;
+	};
+
+	u8 is96frame;
+	struct tcam_frame_data frame_data[TCAM_FRAME_DATA_MAX_SIZE];
+
+	union {
+		struct {
+			u16 vid:12;
+			u16 vid_override:1;
+			u16 inc_tcam_ctr:1;
+			u16 interrupt:1;
+			u16 cnt:1;
+		};
+
+		u16 reg_action_1;
+	};
+
+	union {
+		struct {
+			u16 fpri:3;
+			u16 fpri_override:1;
+			u16 qpri:2;
+			u16 res4:1;
+			u16 qpri_override:1;
+			u16 next_id:8;
+		};
+
+		u16 reg_action_2;
+	};
+
+	union {
+		struct {
+			u16 dpv:7;
+			u16 res5:4;
+			u16 dpv_override:1;
+		};
+
+		u16 reg_action_3;
+	};
+
+	union {
+		struct {
+			u16 ld_balance:3;
+			u16 ld_balance_override:1;
+			u16 action:11;
+			u16 action_override:1;
+		};
+
+		u16 reg_action_4;
+	};
+
+	union {
+		struct {
+			u16 debug_port:4;
+		};
+
+		u16 reg_debug;
+	};
+
+	union {
+		struct {
+			u16 hit_low:8;
+			u16 hit_high:8;
+		};
+
+		u16 reg_hit;
+	};
+};
+
+struct tcam_entries {
+	u8 port_mask;
+	u8 debug_port;
+
+	struct tcam_entry head;
+};
+
+#define TCAM_OP_NOP		0
+#define TCAM_OP_FLUSH_ALL	1
+#define TCAM_OP_FLUSH		2
+#define TCAM_OP_LOAD		3
+#define TCAM_OP_GET_NEXT	4
+#define TCAM_OP_READ		5
+
+#define TCAM_FT_NORM_NET	0
+#define TCAM_FT_CONTINUE	0
+#define TCAM_FT_DSA_TAG		1
+#define TCAM_FT_PROV_TAG	2
+
+#define TCAM_ADDR		0x1D
+
+#define TCAM_REG_PG_HDR		0
+
+#define TCAM_REG_PG0_KEY_1	0x2
+#define TCAM_REG_PG0_KEY_2	0x3
+#define TCAM_REG_PG0_KEY_3	0x4
+#define TCAM_REG_PG0_KEY_4	0x5
+
+#define TCAM_REG_PG2_ACTION_1	0x2
+#define TCAM_REG_PG2_ACTION_2	0x3
+#define TCAM_REG_PG2_ACTION_3	0x4
+#define TCAM_REG_PG2_ACTION_4	0x5
+#define TCAM_REG_PG2_DEBUG_PORT	0x1C
+#define TCAM_REG_PG2_DEBUG	0x1F
+
+#define TCAM_PG_HDR_BUSY	((u16)1 << 15)
+
+int of_get_tcam_entry(struct tcam_entries *tcam_entries,
+		      struct device_node *np);
+int mv88e6321_set_tcam_mode(struct mii_bus *bus,
+			    struct tcam_entries *tcam_entries);
+int mv88e6321_load_tcam(struct mii_bus *bus,
+			struct tcam_entry *tcam_entry);
+int mv88e6321_get_tcam(struct mii_bus *bus, u8 id,
+		       struct tcam_entry *tcam_entry);
+int mv88e6321_flush_tcam(struct mii_bus *bus, int id);
+int mv88e6321_enable_tcam(struct mii_bus *bus, u8 id, u16 reg_frame_type);
+int mv88e6321_disable_tcam(struct mii_bus *bus, u8 id);
+int mv88e6321_is_tcam_enabled(struct mii_bus *bus, u8 id);
+int mv88e6321_get_tcam_debug(struct mii_bus *bus, u8 id);
+int mv88e6321_tcam_to_string(struct tcam_entry *tcam_entry,
+			     char *buffer, size_t size);
+
+#endif
diff --git a/drivers/net/dsa/mv88e6xxx/port.h b/drivers/net/dsa/mv88e6xxx/port.h
index 03382b66f800..dcbd6de64863 100644
--- a/drivers/net/dsa/mv88e6xxx/port.h
+++ b/drivers/net/dsa/mv88e6xxx/port.h
@@ -227,7 +227,20 @@
 #define MV88E6XXX_PORT_ATU_CTL		0x0c
 
 /* Offset 0x0D: Priority Override Register */
-#define MV88E6XXX_PORT_PRI_OVERRIDE	0x0d
+#define MV88E6XXX_PORT_PRI_OVERRIDE			0x0d
+#define MV88E6XXX_PORT_PRI_OVERRIDE_DA_MASK		(0x3 << 14)
+#define MV88E6XXX_PORT_PRI_OVERRIDE_SA_MASK		(0x3 << 12)
+#define MV88E6XXX_PORT_PRI_OVERRIDE_VTU_MASK		(0x3 << 10)
+#define MV88E6XXX_PORT_PRI_OVERRIDE_MIRROR_SA_MISS	BIT(9)
+#define MV88E6XXX_PORT_PRI_OVERRIDE_MIRROR_VTU_MISS	BIT(8)
+#define MV88E6XXX_PORT_PRI_OVERRIDE_TRAP_DA_MISS	BIT(7)
+#define MV88E6XXX_PORT_PRI_OVERRIDE_TRAP_SA_MISS	BIT(6)
+#define MV88E6XXX_PORT_PRI_OVERRIDE_TRAP_VTU_MISS	BIT(5)
+#define MV88E6XXX_PORT_PRI_OVERRIDE_TRAP_TCAM_MISS	BIT(4)
+#define MV88E6XXX_PORT_PRI_OVERRIDE_TCAM_MODE_MASK	0x3
+#define MV88E6XXX_PORT_PRI_OVERRIDE_TCAM_MODE_DISABLED	0x0
+#define MV88E6XXX_PORT_PRI_OVERRIDE_TCAM_MODE_48	0x1
+#define MV88E6XXX_PORT_PRI_OVERRIDE_TCAM_MODE_96	0x2
 
 /* Offset 0x0E: Policy Control Register */
 #define MV88E6XXX_PORT_POLICY_CTL		0x0e
@@ -282,6 +295,12 @@
 /* Offset 0x13: OutFiltered Counter */
 #define MV88E6XXX_PORT_OUT_FILTERED	0x13
 
+/* Offset 0x16: LED Control */
+#define MV88E6XXX_PORT_LED_CTL				0x16
+#define MV88E6XXX_PORT_LED_CTL_UPDATE			0x8000
+#define MV88E6XXX_PORT_LED_CTL_LED0_SEL_10XX_CONT	0x0008
+#define MV88E6XXX_PORT_LED_CTL_LED1_SEL_ACT		0x0080
+
 /* Offset 0x18: IEEE Priority Mapping Table */
 #define MV88E6390_PORT_IEEE_PRIO_MAP_TABLE			0x18
 #define MV88E6390_PORT_IEEE_PRIO_MAP_TABLE_UPDATE		0x8000
diff --git a/drivers/net/ethernet/netronome/nfp/abm/qdisc.c b/drivers/net/ethernet/netronome/nfp/abm/qdisc.c
index 2473fb5f75e5..2a5cc64227e9 100644
--- a/drivers/net/ethernet/netronome/nfp/abm/qdisc.c
+++ b/drivers/net/ethernet/netronome/nfp/abm/qdisc.c
@@ -458,7 +458,7 @@ nfp_abm_qdisc_graft(struct nfp_abm_link *alink, u32 handle, u32 child_handle,
 static void
 nfp_abm_stats_calculate(struct nfp_alink_stats *new,
 			struct nfp_alink_stats *old,
-			struct gnet_stats_basic_packed *bstats,
+			struct gnet_stats_basic_sync *bstats,
 			struct gnet_stats_queue *qstats)
 {
 	_bstats_update(bstats, new->tx_bytes - old->tx_bytes,
diff --git a/drivers/net/ethernet/ti/cpsw.c b/drivers/net/ethernet/ti/cpsw.c
index e226ecd95a2c..85eab0350245 100644
--- a/drivers/net/ethernet/ti/cpsw.c
+++ b/drivers/net/ethernet/ti/cpsw.c
@@ -135,9 +135,9 @@ static void cpsw_set_promiscious(struct net_device *ndev, bool enable)
 						     ALE_PORT_NO_SA_UPDATE, 1);
 			}
 
-			/* Clear All Untouched entries */
-			cpsw_ale_control_set(ale, 0, ALE_AGEOUT, 1);
 			do {
+				/* Clear All Untouched entries */
+				cpsw_ale_control_set(ale, 0, ALE_AGEOUT, 1);
 				cpu_relax();
 				if (cpsw_ale_control_get(ale, 0, ALE_AGEOUT))
 					break;
@@ -150,10 +150,12 @@ static void cpsw_set_promiscious(struct net_device *ndev, bool enable)
 
 			/* Flood All Unicast Packets to Host port */
 			cpsw_ale_control_set(ale, 0, ALE_P0_UNI_FLOOD, 1);
+			cpsw_ale_control_set(ale, 0, ALE_BYPASS, 1);
 			dev_dbg(&ndev->dev, "promiscuity enabled\n");
 		} else {
 			/* Don't Flood All Unicast Packets to Host port */
 			cpsw_ale_control_set(ale, 0, ALE_P0_UNI_FLOOD, 0);
+			cpsw_ale_control_set(ale, 0, ALE_BYPASS, 0);
 
 			/* Enable Learn for all ports (host is port 0 and slaves are port 1 and up */
 			for (i = 0; i <= cpsw->data.slaves; i++) {
@@ -311,6 +313,11 @@ static void cpsw_ndo_set_rx_mode(struct net_device *ndev)
 	struct cpsw_common *cpsw = priv->cpsw;
 	int slave_port = -1;
 
+	if (priv->netdev_flags == ndev->flags)
+		return;
+
+	priv->netdev_flags = ndev->flags;
+
 	if (cpsw->data.dual_emac)
 		slave_port = priv->emac_port + 1;
 
diff --git a/drivers/net/ethernet/ti/cpsw_ethtool.c b/drivers/net/ethernet/ti/cpsw_ethtool.c
index 158c8d3793f4..5eda20039cc1 100644
--- a/drivers/net/ethernet/ti/cpsw_ethtool.c
+++ b/drivers/net/ethernet/ti/cpsw_ethtool.c
@@ -364,7 +364,7 @@ int cpsw_ethtool_op_begin(struct net_device *ndev)
 	struct cpsw_common *cpsw = priv->cpsw;
 	int ret;
 
-	ret = pm_runtime_get_sync(cpsw->dev);
+	ret = pm_runtime_resume_and_get(cpsw->dev);
 	if (ret < 0) {
 		cpsw_err(priv, drv, "ethtool begin failed %d\n", ret);
 		pm_runtime_put_noidle(cpsw->dev);
diff --git a/drivers/net/ethernet/ti/cpsw_priv.h b/drivers/net/ethernet/ti/cpsw_priv.h
index 435668ee542d..1f6c5605f993 100644
--- a/drivers/net/ethernet/ti/cpsw_priv.h
+++ b/drivers/net/ethernet/ti/cpsw_priv.h
@@ -382,6 +382,7 @@ struct cpsw_priv {
 	struct cpsw_common *cpsw;
 	int offload_fwd_mark;
 	u32 tx_packet_min;
+	int netdev_flags;
 };
 
 #define ndev_to_cpsw(ndev) (((struct cpsw_priv *)netdev_priv(ndev))->cpsw)
diff --git a/drivers/net/ethernet/ti/davinci_emac.c b/drivers/net/ethernet/ti/davinci_emac.c
index d243ca5dfde0..aaf841d2f5b1 100644
--- a/drivers/net/ethernet/ti/davinci_emac.c
+++ b/drivers/net/ethernet/ti/davinci_emac.c
@@ -1909,16 +1909,24 @@ static int davinci_emac_probe(struct platform_device *pdev)
 	}
 	ndev->irq = res->start;
 
-	rc = davinci_emac_try_get_mac(pdev, res_ctrl ? 0 : 1, priv->mac_addr);
-	if (!rc)
-		ether_addr_copy(ndev->dev_addr, priv->mac_addr);
 
+	/* if no mac addr was passed first try to get it from HW,
+	 * if it fails get a random addr
+	 */
 	if (!is_valid_ether_addr(priv->mac_addr)) {
-		/* Use random MAC if still none obtained. */
-		eth_hw_addr_random(ndev);
-		memcpy(priv->mac_addr, ndev->dev_addr, ndev->addr_len);
-		dev_warn(&pdev->dev, "using random MAC addr: %pM\n",
-			 priv->mac_addr);
+		rc = davinci_emac_try_get_mac(pdev, res_ctrl ? 0 : 1,
+								priv->mac_addr);
+		if (rc || !is_valid_ether_addr(priv->mac_addr)) {
+			/* Use random MAC if none passed */
+			eth_hw_addr_random(ndev);
+			memcpy(priv->mac_addr, ndev->dev_addr, ndev->addr_len);
+			dev_warn(&pdev->dev,
+				 "using random MAC addr: %pM\n",
+				 priv->mac_addr);
+		} else {
+			/* set MAC address from HW */
+			ether_addr_copy(ndev->dev_addr, priv->mac_addr);
+		}
 	}
 
 	ndev->netdev_ops = &emac_netdev_ops;
diff --git a/drivers/net/mdio/Kconfig b/drivers/net/mdio/Kconfig
index 6da1fcb25847..2f14690b22ec 100644
--- a/drivers/net/mdio/Kconfig
+++ b/drivers/net/mdio/Kconfig
@@ -83,6 +83,16 @@ config MDIO_BITBANG
 
 	  If in doubt, say N.
 
+if MDIO_BITBANG
+	config MICREL_KSZ8863_EXTENDED_REGS
+		bool "Enable ksz8863 extended reg access"
+		default y
+		help
+		  This config enables special treatment for ksz8863
+		  extended register access
+
+endif
+
 config MDIO_BCM_IPROC
 	tristate "Broadcom iProc MDIO bus controller"
 	depends on ARCH_BCM_IPROC || COMPILE_TEST
diff --git a/drivers/net/mdio/mdio-bitbang.c b/drivers/net/mdio/mdio-bitbang.c
index 07609114a26b..0bcde90e0769 100644
--- a/drivers/net/mdio/mdio-bitbang.c
+++ b/drivers/net/mdio/mdio-bitbang.c
@@ -22,11 +22,18 @@
 #define MDIO_READ 2
 #define MDIO_WRITE 1
 
-#define MDIO_C45 (1<<15)
+#define MDIO_C45 BIT(15)
 #define MDIO_C45_ADDR (MDIO_C45 | 0)
 #define MDIO_C45_READ (MDIO_C45 | 3)
 #define MDIO_C45_WRITE (MDIO_C45 | 1)
 
+#ifdef CONFIG_MICREL_KSZ8863_EXTENDED_REGS
+/* Special treatment for ksz8863 SMI access */
+#define MDIO_KSZ BIT(14)
+#define MDIO_KSZ_WR_BIT BIT(3)
+#define MDIO_KSZ_READ (MDIO_KSZ | 0)
+#define MDIO_KSZ_WRITE (MDIO_KSZ | MDIO_KSZ_WR_BIT)
+#endif
 #define MDIO_SETUP_TIME 10
 #define MDIO_HOLD_TIME 10
 
@@ -121,6 +128,20 @@ static void mdiobb_cmd(struct mdiobb_ctrl *ctrl, int op, u8 phy, u8 reg)
 	mdiobb_send_bit(ctrl, (op >> 1) & 1);
 	mdiobb_send_bit(ctrl, (op >> 0) & 1);
 
+#ifdef CONFIG_MICREL_KSZ8863_EXTENDED_REGS
+	/* Special treatment for ksz8863 SMI access */
+	if (op & MDIO_KSZ) {
+		/* SMI Frame Format:
+		 *       Preamble | SB | OP |  PHY  |  REG  | TA | Data Bits [15:0] | Z
+		 *    R:   32x1   | 01 | 00 | 1xRRR | RRRRR | Z0 | 00000000DDDDDDDD | Z
+		 *    W:   32x1   | 01 | 00 | 0xRRR | RRRRR | 10 | XXXXXXXXDDDDDDDD | Z
+		 */
+		phy = ((reg >> 5) & 0x7);
+		if (!(op & MDIO_KSZ_WR_BIT))
+			phy |= BIT(4);
+		reg &= 0x1f;
+	}
+#endif
 	mdiobb_send_num(ctrl, phy, 5);
 	mdiobb_send_num(ctrl, reg, 5);
 }
@@ -157,6 +178,10 @@ int mdiobb_read(struct mii_bus *bus, int phy, int reg)
 	if (reg & MII_ADDR_C45) {
 		reg = mdiobb_cmd_addr(ctrl, phy, reg);
 		mdiobb_cmd(ctrl, MDIO_C45_READ, phy, reg);
+#ifdef CONFIG_MICREL_KSZ8863_EXTENDED_REGS
+	} else if (reg & MII_ADDR_KSZ) {
+		mdiobb_cmd(ctrl, MDIO_KSZ_READ, phy, reg);
+#endif
 	} else
 		mdiobb_cmd(ctrl, ctrl->op_c22_read, phy, reg);
 
@@ -178,6 +203,7 @@ int mdiobb_read(struct mii_bus *bus, int phy, int reg)
 
 	ret = mdiobb_get_num(ctrl, 16);
 	mdiobb_get_bit(ctrl);
+
 	return ret;
 }
 EXPORT_SYMBOL(mdiobb_read);
@@ -189,6 +215,10 @@ int mdiobb_write(struct mii_bus *bus, int phy, int reg, u16 val)
 	if (reg & MII_ADDR_C45) {
 		reg = mdiobb_cmd_addr(ctrl, phy, reg);
 		mdiobb_cmd(ctrl, MDIO_C45_WRITE, phy, reg);
+#ifdef CONFIG_MICREL_KSZ8863_EXTENDED_REGS
+	} else if (reg & MII_ADDR_KSZ) {
+		mdiobb_cmd(ctrl, MDIO_KSZ_WRITE, phy, reg);
+#endif
 	} else
 		mdiobb_cmd(ctrl, ctrl->op_c22_write, phy, reg);
 
diff --git a/drivers/net/phy/Kconfig b/drivers/net/phy/Kconfig
index 902495afcb38..bfe4fac8e3b2 100644
--- a/drivers/net/phy/Kconfig
+++ b/drivers/net/phy/Kconfig
@@ -25,6 +25,13 @@ menuconfig PHYLIB
 
 if PHYLIB
 
+config SWCONFIG
+	tristate "Switch configuration API"
+	help
+	  Switch configuration API using netlink. This allows
+	  you to configure the VLAN features of certain switches.
+
+
 config SWPHY
 	bool
 
@@ -351,3 +358,11 @@ endif # PHYLIB
 config MICREL_KS8995MA
 	tristate "Micrel KS8995MA 5-ports 10/100 managed Ethernet switch"
 	depends on SPI
+
+config SWCFG_KSZ8863
+	tristate "KSZ8863 SWCONFIG Configuration Interface via netlink"
+	depends on SWCONFIG
+
+config SWCFG_MV88E6321
+	tristate "MV88E6321 SWCONFIG Configuration Interface via netlink"
+	depends on SWCONFIG
diff --git a/drivers/net/phy/Makefile b/drivers/net/phy/Makefile
index b2728d00fc9a..6c1b3932e6c2 100644
--- a/drivers/net/phy/Makefile
+++ b/drivers/net/phy/Makefile
@@ -85,3 +85,7 @@ obj-$(CONFIG_STE10XP)		+= ste10Xp.o
 obj-$(CONFIG_TERANETICS_PHY)	+= teranetics.o
 obj-$(CONFIG_VITESSE_PHY)	+= vitesse.o
 obj-$(CONFIG_XILINX_GMII2RGMII) += xilinx_gmii2rgmii.o
+
+obj-$(CONFIG_SWCONFIG)		+= swconfig.o
+obj-$(CONFIG_SWCFG_KSZ8863)	+= ksz8863-cfg.o
+obj-$(CONFIG_SWCFG_MV88E6321)	+= mv88e6321-cfg.o
diff --git a/drivers/net/phy/intel-xway.c b/drivers/net/phy/intel-xway.c
index 3c032868ef04..fb5c5897fa33 100644
--- a/drivers/net/phy/intel-xway.c
+++ b/drivers/net/phy/intel-xway.c
@@ -232,8 +232,6 @@ static int xway_gphy_rgmii_init(struct phy_device *phydev)
 static int xway_gphy_config_init(struct phy_device *phydev)
 {
 	int err;
-	u32 ledxh;
-	u32 ledxl;
 
 	/* Mask all interrupts */
 	err = phy_write(phydev, XWAY_MDIO_IMASK, 0);
@@ -253,28 +251,29 @@ static int xway_gphy_config_init(struct phy_device *phydev)
 		return err;
 
 	phy_write_mmd(phydev, MDIO_MMD_VEND2, XWAY_MMD_LEDCH,
-		      XWAY_MMD_LEDCH_NACS_NONE |
-		      XWAY_MMD_LEDCH_SBF_F02HZ |
+		      XWAY_MMD_LEDCH_NACS_NONE | XWAY_MMD_LEDCH_SBF_F02HZ |
 		      XWAY_MMD_LEDCH_FBF_F16HZ);
 	phy_write_mmd(phydev, MDIO_MMD_VEND2, XWAY_MMD_LEDCL,
-		      XWAY_MMD_LEDCH_CBLINK_NONE |
-		      XWAY_MMD_LEDCH_SCAN_NONE);
-
-	/**
-	 * In most cases only one LED is connected to this phy, so
-	 * configure them all to constant on and pulse mode. LED3 is
-	 * only available in some packages, leave it in its reset
-	 * configuration.
-	 */
-	ledxh = XWAY_MMD_LEDxH_BLINKF_NONE | XWAY_MMD_LEDxH_CON_LINK10XX;
-	ledxl = XWAY_MMD_LEDxL_PULSE_TXACT | XWAY_MMD_LEDxL_PULSE_RXACT |
-		XWAY_MMD_LEDxL_BLINKS_NONE;
-	phy_write_mmd(phydev, MDIO_MMD_VEND2, XWAY_MMD_LED0H, ledxh);
-	phy_write_mmd(phydev, MDIO_MMD_VEND2, XWAY_MMD_LED0L, ledxl);
-	phy_write_mmd(phydev, MDIO_MMD_VEND2, XWAY_MMD_LED1H, ledxh);
-	phy_write_mmd(phydev, MDIO_MMD_VEND2, XWAY_MMD_LED1L, ledxl);
-	phy_write_mmd(phydev, MDIO_MMD_VEND2, XWAY_MMD_LED2H, ledxh);
-	phy_write_mmd(phydev, MDIO_MMD_VEND2, XWAY_MMD_LED2L, ledxl);
+		      XWAY_MMD_LEDCH_CBLINK_NONE | XWAY_MMD_LEDCH_SCAN_NONE);
+
+	// LNK GREEN
+	phy_write_mmd(phydev, MDIO_MMD_VEND2, XWAY_MMD_LED0H,
+		      XWAY_MMD_LEDxH_BLINKF_NONE | XWAY_MMD_LEDxH_CON_LINK10XX);
+	phy_write_mmd(phydev, MDIO_MMD_VEND2, XWAY_MMD_LED0L,
+		      XWAY_MMD_LEDxL_PULSE_NONE | XWAY_MMD_LEDxL_BLINKS_NONE);
+
+	// LNK ORANGE
+	phy_write_mmd(phydev, MDIO_MMD_VEND2, XWAY_MMD_LED1H,
+		      XWAY_MMD_LEDxH_BLINKF_NONE | XWAY_MMD_LEDxH_CON_LINK1000);
+	phy_write_mmd(phydev, MDIO_MMD_VEND2, XWAY_MMD_LED1L,
+		      XWAY_MMD_LEDxL_PULSE_NONE | XWAY_MMD_LEDxL_BLINKS_NONE);
+
+	// ACT
+	phy_write_mmd(phydev, MDIO_MMD_VEND2, XWAY_MMD_LED2H,
+		      XWAY_MMD_LEDxH_BLINKF_NONE | XWAY_MMD_LEDxH_CON_NONE);
+	phy_write_mmd(phydev, MDIO_MMD_VEND2, XWAY_MMD_LED2L,
+		      XWAY_MMD_LEDxL_PULSE_TXACT | XWAY_MMD_LEDxL_PULSE_RXACT |
+		      XWAY_MMD_LEDxL_BLINKS_NONE);
 
 	err = xway_gphy_rgmii_init(phydev);
 	if (err)
@@ -298,6 +297,20 @@ static int xway_gphy14_config_aneg(struct phy_device *phydev)
 	return genphy_config_aneg(phydev);
 }
 
+static int xway_gphy11_config_aneg(struct phy_device *phydev)
+{
+	int err;
+
+	err = genphy_config_aneg(phydev);
+	if (!err) {
+		genphy_suspend(phydev);
+		usleep_range(100000, 300000);
+		genphy_resume(phydev);
+	}
+
+	return err;
+}
+
 static int xway_gphy_ack_interrupt(struct phy_device *phydev)
 {
 	int reg;
@@ -398,6 +411,7 @@ static struct phy_driver xway_gphy[] = {
 		.name		= "Intel XWAY PHY11G (PEF 7071/PEF 7072) v1.5 / v1.6",
 		/* PHY_GBIT_FEATURES */
 		.config_init	= xway_gphy_config_init,
+		.config_aneg	= xway_gphy11_config_aneg,
 		.handle_interrupt = xway_gphy_handle_interrupt,
 		.config_intr	= xway_gphy_config_intr,
 		.suspend	= genphy_suspend,
diff --git a/drivers/net/phy/ksz8863-cfg.c b/drivers/net/phy/ksz8863-cfg.c
new file mode 100644
index 000000000000..7806ced73c71
--- /dev/null
+++ b/drivers/net/phy/ksz8863-cfg.c
@@ -0,0 +1,1081 @@
+/*
+ * Micrel ksz8863 dsa switch support
+ *
+ * Copyright (c) 2019 WAGO Kontakttechnik GmbH & Co. KG
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/switch.h>
+#include <linux/of_mdio.h>
+#include <linux/ksz8863.h>
+
+#define DRIVER_NAME "ksz8863-cfg"
+
+#define KSZ8863_CFG_VAL_BUF_SIZE 200
+#define KSZ8863_CFG_TBL_BUF_SIZE 1024
+
+struct ksz8863_cfg {
+	struct switch_dev swdev;
+	struct device *dev;
+	u32 sw_addr;
+	struct ksz8863_chip *chip;
+	struct mii_bus *mii_bus;
+	char buf_ratelimit[KSZ8863_CFG_VAL_BUF_SIZE];
+	char buf_dyn_mac[KSZ8863_CFG_TBL_BUF_SIZE];
+	char buf_static_mac[KSZ8863_CFG_TBL_BUF_SIZE];
+};
+
+#define get_ksz8863_cfg(_dev) container_of((_dev), struct ksz8863_cfg, swdev)
+
+static int ksz8863_cfg_smi_read(struct ksz8863_cfg *cfg, int reg, u8 *val)
+{
+	return cfg->chip->mii_ops->read(cfg->chip, reg, val);
+}
+
+static int ksz8863_cfg_smi_write(struct ksz8863_cfg *cfg, int reg, u8 val)
+{
+	return cfg->chip->mii_ops->write(cfg->chip, reg, val);
+}
+
+static inline void ksz8863_reg_lock(struct ksz8863_cfg *cfg)
+{
+	mutex_lock(&cfg->chip->reg_lock);
+}
+
+static inline void ksz8863_reg_unlock(struct ksz8863_cfg *cfg)
+{
+	mutex_unlock(&cfg->chip->reg_lock);
+}
+
+static void __printf(4, 5)
+	ksz8863_cfg_set_str_val(struct switch_val *val, char buf[], size_t size,
+				const char *fmt, ...)
+{
+	va_list args;
+
+	va_start(args, fmt);
+	val->len = vsnprintf(buf, size, fmt, args);
+	va_end(args);
+
+	val->value.s = buf;
+}
+
+static inline int ksz8863_cfg_set_bit(struct ksz8863_cfg *cfg, int reg, u8 mask,
+				      bool val, bool lock)
+{
+	int err;
+	u8 rv;
+
+	if (lock)
+		ksz8863_reg_lock(cfg);
+
+	err = ksz8863_cfg_smi_read(cfg, reg, &rv);
+	if (err)
+		goto out_unlock;
+
+	rv &= ~mask;
+	if (val)
+		rv |= mask;
+
+	err = ksz8863_cfg_smi_write(cfg, reg, rv);
+
+out_unlock:
+	if (lock)
+		ksz8863_reg_unlock(cfg);
+
+	return err;
+}
+
+static bool is_ksz8863_cfg_10bt(struct ksz8863_cfg *cfg)
+{
+	int err;
+	u8 val;
+
+	err = ksz8863_cfg_smi_read(cfg, KSZ8863_REG_GL_CTRL4, &val);
+	if (err)
+		return false;
+
+	return val & KSZ8863_REG_GL_CTRL4_10_MBIT;
+}
+
+static int ksz8863_cfg_set_bcast_rate(struct ksz8863_cfg *cfg,
+				      int frames_per_interval)
+{
+	int err;
+	u8 gl_ctrl4_val;
+	u8 gl_ctrl5_val;
+
+	err = ksz8863_cfg_smi_read(cfg, KSZ8863_REG_GL_CTRL4, &gl_ctrl4_val);
+	if (err)
+		return err;
+
+	gl_ctrl4_val &= ~KSZ8863_REG_GL_CTRL4_BCAST_STORM_RATE_HI_MASK;
+	gl_ctrl4_val |= (frames_per_interval >> 8) &
+			KSZ8863_REG_GL_CTRL4_BCAST_STORM_RATE_HI_MASK;
+	gl_ctrl5_val = frames_per_interval &
+		       KSZ8863_REG_GL_CTRL5_BCAST_STORM_RATE_LO_MASK;
+
+	err = ksz8863_cfg_smi_write(cfg, KSZ8863_REG_GL_CTRL5, gl_ctrl5_val);
+	if (err)
+		return err;
+
+	return ksz8863_cfg_smi_write(cfg, KSZ8863_REG_GL_CTRL4, gl_ctrl4_val);
+}
+
+static int ksz8863_cfg_get_bcast_rate(struct ksz8863_cfg *cfg,
+				      int *frames_per_interval)
+{
+	int err;
+	u8 gl_ctrl4_val;
+	u8 gl_ctrl5_val;
+
+	err = ksz8863_cfg_smi_read(cfg, KSZ8863_REG_GL_CTRL4, &gl_ctrl4_val);
+	if (err)
+		return err;
+
+	err = ksz8863_cfg_smi_read(cfg, KSZ8863_REG_GL_CTRL5, &gl_ctrl5_val);
+	if (err)
+		return err;
+
+	*frames_per_interval = gl_ctrl4_val;
+	*frames_per_interval &= KSZ8863_REG_GL_CTRL4_BCAST_STORM_RATE_HI_MASK;
+	*frames_per_interval <<= 8;
+	*frames_per_interval |= gl_ctrl5_val;
+
+	return 0;
+}
+
+static int ksz8863_cfg_set_bcast_protect(struct switch_dev *dev,
+					 const struct switch_attr *attr,
+					 struct switch_val *val)
+{
+	int rate, port, err;
+	struct ksz8863_cfg *cfg;
+	u8 rv[KSZ8863_EXT_PORTS];
+
+	cfg = get_ksz8863_cfg(dev);
+
+	ksz8863_reg_lock(cfg);
+
+	rate = val->value.i;
+
+	for (port = 0; port < KSZ8863_EXT_PORTS; port++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port;
+
+		err = ksz8863_cfg_smi_read(cfg, pb + KSZ8863_REG_PORT1_CTRL0,
+					   &rv[port]);
+		if (err)
+			goto out_unlock;
+	}
+
+	if (!rate) {
+		for (port = 0; port < KSZ8863_EXT_PORTS; port++)
+			rv[port] &= ~KSZ8863_REG_PORT_CTRL0_BROADCAST_STORM;
+		dev_info(
+			cfg->dev,
+			"disable broadcast storm protection on port 1 and port 2");
+	} else {
+		bool mode_10bt;
+		int frames_per_sec, ms_per_interval, frames_per_interval;
+		int div, num;
+
+		if (rate > 20) {
+			dev_info(
+				cfg->dev,
+				"rate (%d) is too high, throttle to max. (20%%)",
+				rate);
+			rate = 20;
+		}
+
+		if (is_ksz8863_cfg_10bt(cfg)) {
+			mode_10bt = true;
+			frames_per_sec = 148800 / 10;
+			ms_per_interval = 500;
+		} else {
+			mode_10bt = false;
+			frames_per_sec = 148800;
+			ms_per_interval = 67;
+		}
+
+		div = 1000 * 100;
+		num = frames_per_sec * ms_per_interval * rate;
+		frames_per_interval = num / div;
+
+		if ((num % div) > (div / 2))
+			frames_per_interval++;
+
+		err = ksz8863_cfg_set_bcast_rate(cfg, frames_per_interval);
+		if (err)
+			goto out_unlock;
+
+		for (port = 0; port < KSZ8863_EXT_PORTS; port++)
+			rv[port] |= KSZ8863_REG_PORT_CTRL0_BROADCAST_STORM;
+
+		dev_info(
+			cfg->dev,
+			"enable broadcast storm protection on port 1 and port 2 "
+			"(%s: rate %d, %d frames / interval",
+			mode_10bt ? "10BT" : "100BT", rate,
+			frames_per_interval);
+	}
+
+	for (port = 0; port < KSZ8863_EXT_PORTS; port++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port;
+
+		err = ksz8863_cfg_smi_write(cfg, pb + KSZ8863_REG_PORT1_CTRL0,
+					    rv[port]);
+		if (err)
+			goto out_unlock;
+	}
+
+out_unlock:
+	ksz8863_reg_unlock(cfg);
+
+	return err;
+}
+
+static int ksz8863_cfg_get_bcast_protect(struct switch_dev *dev,
+					 const struct switch_attr *attr,
+					 struct switch_val *val)
+{
+	int rate, port, err;
+	bool mode_10bt, bcast_en;
+	int frames_per_sec, ms_per_interval, frames_per_interval, div, num;
+	struct ksz8863_cfg *cfg;
+
+	cfg = get_ksz8863_cfg(dev);
+
+	ksz8863_reg_lock(cfg);
+
+	err = ksz8863_cfg_get_bcast_rate(cfg, &frames_per_interval);
+	if (err)
+		goto out_unlock;
+
+	if (is_ksz8863_cfg_10bt(cfg)) {
+		mode_10bt = true;
+		frames_per_sec = 148800 / 10;
+		ms_per_interval = 500;
+	} else {
+		mode_10bt = false;
+		frames_per_sec = 148800;
+		ms_per_interval = 67;
+	}
+
+	div = frames_per_sec * ms_per_interval;
+	num = frames_per_interval * 1000 * 100;
+
+	rate = num / div;
+
+	if ((num % div) > (div / 2))
+		rate++;
+
+	bcast_en = true;
+
+	for (port = 0; port < KSZ8863_EXT_PORTS; port++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port;
+		u8 val;
+
+		err = ksz8863_cfg_smi_read(cfg, pb + KSZ8863_REG_PORT1_CTRL0,
+					   &val);
+		if (err)
+			goto out_unlock;
+
+		if (!(val & KSZ8863_REG_PORT_CTRL0_BROADCAST_STORM))
+			bcast_en = false;
+	}
+
+	dev_info(cfg->dev,
+		 "broadcast storm protection is %s on port 1 and port 2 "
+		 "(%s: calculated rate %d, %d frames / interval )",
+		 bcast_en ? "enabled" : "disabled",
+		 mode_10bt ? "10BT" : "100BT", rate, frames_per_interval);
+
+	val->value.i = bcast_en ? rate : 0;
+
+out_unlock:
+	ksz8863_reg_unlock(cfg);
+
+	return err;
+}
+
+static int ksz8863_cfg_parse_ratelimit(const char *value, int *rate_limit,
+				       bool *mode_mbps)
+{
+	char modestr[5] = { 0 };
+
+	if (!strcmp(value, "off")) {
+		*rate_limit = -1;
+		return 0;
+	}
+
+	if (sscanf(value, "%d.%4s", rate_limit, modestr) != 2)
+		return -EINVAL;
+
+	if (!strcmp(modestr, "mbps"))
+		*mode_mbps = true;
+	else if (!strcmp(modestr, "kbps"))
+		*mode_mbps = false;
+	else
+		return -EINVAL;
+
+	return 0;
+}
+
+static int ksz8863_cfg_get_egress_rate(struct ksz8863_cfg *cfg, bool mode_mbps,
+				       int rate_limit, u8 *reg)
+{
+	bool mode_10bt;
+	int rate_start, rate_stop;
+
+	mode_10bt = is_ksz8863_cfg_10bt(cfg);
+
+	if (rate_limit < 0) {
+		*reg = 0;
+	} else if (mode_mbps) {
+		rate_start = 0;
+		rate_stop = mode_10bt ? 10 : 100;
+
+		if (rate_limit < rate_start || rate_limit > rate_stop)
+			return -EINVAL;
+
+		*reg = rate_limit;
+	} else {
+		const int rate_step = 64;
+
+		rate_start = rate_step;
+		rate_stop = 960;
+
+		if (rate_limit < rate_start || rate_limit > rate_stop ||
+		    (rate_limit % rate_step))
+			return -EINVAL;
+
+		*reg = 0x64 + (rate_limit / rate_step);
+	}
+
+	return 0;
+}
+
+static int ksz8863_cfg_set_ratelimit(struct switch_dev *dev,
+				     const struct switch_attr *attr,
+				     struct switch_val *val)
+{
+	int err;
+	u8 reg;
+	bool mode_mbps;
+	int rate_limit;
+	u8 p3_erl_q;
+	struct ksz8863_cfg *cfg;
+
+	cfg = get_ksz8863_cfg(dev);
+
+	err = ksz8863_cfg_parse_ratelimit(val->value.s, &rate_limit,
+					  &mode_mbps);
+	if (err)
+		return err;
+
+	if (rate_limit < 0) {
+		/* disable ratelimit */
+		err = ksz8863_cfg_set_bit(cfg, KSZ8863_REG_PORT3_EGRESS_RL_Q0,
+					  KSZ8863_REG_PORT_EGRESS_RL_Q0_ENABLE,
+					  false, true);
+
+		if (!err)
+			dev_info(cfg->dev, "disable rate limiting");
+
+		return err;
+	}
+
+	ksz8863_reg_lock(cfg);
+
+	err = ksz8863_cfg_get_egress_rate(cfg, mode_mbps, rate_limit, &reg);
+	if (err)
+		goto out_unlock;
+
+	for (p3_erl_q = KSZ8863_REG_PORT3_EGRESS_RL_Q3;
+	     p3_erl_q != KSZ8863_REG_PORT3_EGRESS_RL_Q1; p3_erl_q--) {
+		err = ksz8863_cfg_smi_write(cfg, p3_erl_q, reg);
+		if (err)
+			goto out_unlock;
+	}
+
+	err = ksz8863_cfg_smi_write(cfg, KSZ8863_REG_PORT3_EGRESS_RL_Q0,
+				    reg | KSZ8863_REG_PORT_EGRESS_RL_Q0_ENABLE);
+
+	if (!err)
+		dev_info(cfg->dev, "enable rate limiting");
+
+out_unlock:
+	ksz8863_reg_unlock(cfg);
+
+	return err;
+}
+
+static int ksz8863_cfg_get_ratelimit(struct switch_dev *dev,
+				     const struct switch_attr *attr,
+				     struct switch_val *val)
+{
+	int err;
+	u8 reg, rate_reg;
+	struct ksz8863_cfg *cfg;
+	int rate = -1;
+	bool mode_10bt;
+	int rate_stop;
+	char *modestr = "none";
+
+	cfg = get_ksz8863_cfg(dev);
+
+	ksz8863_reg_lock(cfg);
+
+	/* we take just the first queue of port 3 */
+	err = ksz8863_cfg_smi_read(cfg, KSZ8863_REG_PORT3_EGRESS_RL_Q0, &reg);
+	if (err)
+		goto out_unlock;
+
+	if (!(reg & KSZ8863_REG_PORT_EGRESS_RL_Q0_ENABLE)) {
+		ksz8863_cfg_set_str_val(val, cfg->buf_ratelimit,
+					sizeof(cfg->buf_ratelimit), "disabled");
+		ksz8863_reg_unlock(cfg);
+		return 0;
+	}
+
+	rate_reg = reg & KSZ8863_REG_PORT_EGRESS_RL_MASK;
+
+	mode_10bt = is_ksz8863_cfg_10bt(cfg);
+
+	rate_stop = mode_10bt ? 10 : 100;
+
+	if (rate_reg <= rate_stop) {
+		modestr = "mbps";
+		/* 0 is equal to 10/100 mbps */
+		if (!rate_reg || rate_reg == rate_stop)
+			rate = rate_stop;
+		else
+			rate = rate_reg;
+	} else if (rate_reg <= 0x73) {
+		modestr = "kbps";
+		rate = 64 * (rate_reg - 0x64);
+	}
+
+	if (!strcmp(modestr, "none") || rate < 0) {
+		ksz8863_cfg_set_str_val(val, cfg->buf_ratelimit,
+					sizeof(cfg->buf_ratelimit), "invalid");
+		err = -EINVAL;
+		goto out_unlock;
+	}
+
+	ksz8863_cfg_set_str_val(val, cfg->buf_ratelimit,
+				sizeof(cfg->buf_ratelimit), "%d.%s", rate,
+				modestr);
+
+out_unlock:
+	ksz8863_reg_unlock(cfg);
+
+	return err;
+}
+
+static int ksz8863_cfg_flush_dyn_mac(struct ksz8863_cfg *cfg)
+{
+	if (cfg->chip && cfg->chip->ops.flush_dyn_mac_table)
+		return cfg->chip->ops.flush_dyn_mac_table(cfg->chip);
+	return -EOPNOTSUPP;
+}
+
+static int ksz8863_cfg_get_fastageing(struct switch_dev *dev,
+				      const struct switch_attr *attr,
+				      struct switch_val *val)
+{
+	int err, port;
+	u8 rv[KSZ8863_NUM_PORTS];
+	struct ksz8863_cfg *cfg;
+
+	cfg = get_ksz8863_cfg(dev);
+
+	if (!cfg->chip->switched) {
+		/* if switch is in separated mode then
+		 * fast ageing is always disabled. In
+		 * separated mode it makes no sense.
+		 */
+		val->value.i = 0;
+		return 0;
+	}
+
+	ksz8863_reg_lock(cfg);
+
+	for (port = 0; port < KSZ8863_NUM_PORTS; ++port) {
+		int pb = KSZ8863_REG_PORTS_BASE * port;
+
+		err = ksz8863_cfg_smi_read(cfg, pb + KSZ8863_REG_PORT1_CTRL2,
+					   &rv[port]);
+		if (err)
+			goto out_unlock;
+	}
+
+	ksz8863_reg_unlock(cfg);
+
+	/*
+	 * when learning is disabled on all ports,
+	 * fast ageing is enabled
+	 */
+	val->value.i = ((rv[0] & rv[1]) & KSZ8863_REG_PORT_CTRL2_LEARN_DISABLE)
+			? 1 : 0;
+
+	return 0;
+
+out_unlock:
+	ksz8863_reg_unlock(cfg);
+
+	return err;
+}
+
+static int ksz8863_cfg_set_port_mirror(struct switch_dev *dev,
+				       const struct switch_attr *attr,
+				       struct switch_val *val)
+{
+	int err, port, mirror;
+	u8 pc1v[KSZ8863_NUM_PORTS];
+	struct ksz8863_cfg *cfg;
+
+	cfg = get_ksz8863_cfg(dev);
+
+	mirror = val->value.i;
+
+	if (mirror < 0 || mirror > 3)
+		return -EINVAL;
+
+	ksz8863_reg_lock(cfg);
+
+	for (port = 0; port < KSZ8863_NUM_PORTS; port++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port;
+
+		err = ksz8863_cfg_smi_read(cfg, pb + KSZ8863_REG_PORT1_CTRL1,
+					   &pc1v[port]);
+		if (err)
+			goto out_unlock;
+
+		pc1v[port] &= ~KSZ8863_REG_PORT_CTRL1_MIRROR_MASK;
+	}
+
+	switch (mirror) {
+	case 0:
+		// disable
+		break;
+	case 1:
+		// to port 1
+		pc1v[0] |= KSZ8863_REG_PORT_CTRL1_MIRROR_SNIFFER;
+
+		pc1v[1] |= KSZ8863_REG_PORT_CTRL1_MIRROR_RX;
+
+		/* cpu port is alway mirrored */
+		pc1v[2] |= KSZ8863_REG_PORT_CTRL1_MIRROR_RX;
+		break;
+
+	case 2:
+		// to port 2
+		pc1v[1] |= KSZ8863_REG_PORT_CTRL1_MIRROR_SNIFFER;
+
+		pc1v[0] |= KSZ8863_REG_PORT_CTRL1_MIRROR_RX;
+
+		pc1v[2] |= KSZ8863_REG_PORT_CTRL1_MIRROR_RX;
+		break;
+	case 3:
+		// to cpu
+		pc1v[2] |= KSZ8863_REG_PORT_CTRL1_MIRROR_SNIFFER;
+
+		pc1v[1] |= KSZ8863_REG_PORT_CTRL1_MIRROR_RX;
+		pc1v[0] |= KSZ8863_REG_PORT_CTRL1_MIRROR_RX;
+		break;
+	}
+
+	for (port = 0; port < KSZ8863_NUM_PORTS; port++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port;
+
+		err = ksz8863_cfg_smi_write(cfg, pb + KSZ8863_REG_PORT1_CTRL1,
+					    pc1v[port]);
+		if (err)
+			goto out_unlock;
+	}
+
+	ksz8863_cfg_flush_dyn_mac(cfg);
+
+	if (mirror != 0)
+		dev_info(cfg->dev, "set mirror port to %d\n", mirror);
+	else
+		dev_info(cfg->dev, "port mirroring disabled\n");
+
+out_unlock:
+	ksz8863_reg_unlock(cfg);
+
+	return err;
+}
+
+static int ksz8863_cfg_get_port_mirror(struct switch_dev *dev,
+				       const struct switch_attr *attr,
+				       struct switch_val *val)
+{
+	int err, port, mirror;
+	u8 pc1v[KSZ8863_NUM_PORTS], gc3v;
+	struct ksz8863_cfg *cfg;
+
+	cfg = get_ksz8863_cfg(dev);
+
+	ksz8863_reg_lock(cfg);
+
+	err = ksz8863_cfg_smi_read(cfg, KSZ8863_REG_GL_CTRL3, &gc3v);
+	if (err)
+		goto out_unlock;
+
+	for (port = 0; port < KSZ8863_NUM_PORTS; port++) {
+		int pb = KSZ8863_REG_PORTS_BASE * port;
+
+		err = ksz8863_cfg_smi_read(cfg, pb + KSZ8863_REG_PORT1_CTRL1,
+					   &pc1v[port]);
+		if (err)
+			goto out_unlock;
+	}
+
+	if (pc1v[0] & KSZ8863_REG_PORT_CTRL1_MIRROR_SNIFFER)
+		mirror = 1;
+	else if (pc1v[1] & KSZ8863_REG_PORT_CTRL1_MIRROR_SNIFFER)
+		mirror = 2;
+	else if (pc1v[2] & KSZ8863_REG_PORT_CTRL1_MIRROR_SNIFFER)
+		mirror = 3;
+	else
+		mirror = 0;
+
+	val->value.i = mirror;
+
+	if (mirror)
+		dev_info(cfg->dev, "mirror-port: X%d", mirror);
+	else
+		dev_info(cfg->dev, "port mirroring is disabled");
+
+out_unlock:
+	ksz8863_reg_unlock(cfg);
+
+	return err;
+}
+
+static inline int
+ksz8863_cfg_get_dyn_mac_entry(struct ksz8863_cfg *cfg, u8 idx,
+			      struct ksz8863_dyn_mac_tbl_entry *entry)
+{
+	return cfg->chip->mii_ops->read_table(cfg->chip, KSZ8863_TBL_DYN_MAC,
+					      idx, (u8 *)entry, sizeof(*entry));
+}
+
+static int ksz8863_cfg_get_dyn_macs(struct switch_dev *dev,
+				    const struct switch_attr *attr,
+				    struct switch_val *val)
+{
+	struct ksz8863_dyn_mac_tbl_entry entry;
+	int i, cnt, err;
+	struct ksz8863_cfg *cfg = get_ksz8863_cfg(dev);
+	char *buffer = cfg->buf_dyn_mac;
+	const size_t buffer_size = sizeof(cfg->buf_dyn_mac);
+
+	err = ksz8863_cfg_get_dyn_mac_entry(cfg, 0, &entry);
+	if (err)
+		return err;
+
+	*buffer = '\0';
+	val->value.s = buffer;
+	val->len = 0;
+
+	if (entry.empty)
+		return 0;
+
+	cnt = entry.valid_nb + 1;
+	for (i = 0; i < cnt && buffer_size > val->len + 64; i++) {
+		err = ksz8863_cfg_get_dyn_mac_entry(cfg, i, &entry);
+		if (err)
+			return err;
+
+		val->len += snprintf(buffer + val->len, buffer_size - val->len,
+				     "\n[%d: %pMR %d %02d %d]", i, entry.mac,
+				     entry.port, entry.fid, entry.time);
+	}
+
+	if (i < cnt)
+		dev_warn(cfg->dev, "%d dynamic MACs not displayed", cnt - i);
+
+	return 0;
+}
+
+static inline int
+ksz8863_cfg_get_static_mac_entry(struct ksz8863_cfg *cfg, u8 idx,
+				 struct ksz8863_static_mac_tbl_entry *entry)
+{
+	return cfg->chip->mii_ops->read_table(cfg->chip, KSZ8863_TBL_STATIC_MAC,
+					      idx, (u8 *)entry, sizeof(*entry));
+}
+
+static inline int
+ksz8863_cfg_set_static_mac_entry(struct ksz8863_cfg *cfg, u8 idx,
+				 struct ksz8863_static_mac_tbl_entry *entry)
+{
+	return cfg->chip->mii_ops->write_table(cfg->chip,
+					       KSZ8863_TBL_STATIC_MAC, idx,
+					       (u8 *)entry, sizeof(*entry));
+}
+
+static int ksz8863_cfg_add_or_update_static_mac_entry(
+	struct ksz8863_cfg *cfg, struct ksz8863_static_mac_tbl_entry *entry)
+{
+	int err, i;
+	int idx = -1;
+	struct ksz8863_static_mac_tbl_entry current_entry;
+
+	for (i = 0; i < KSZ8863_SMAC_MAX_ENTRIES; i++) {
+		err = ksz8863_cfg_get_static_mac_entry(cfg, i, &current_entry);
+		if (err)
+			return err;
+
+		if (idx == -1 && !current_entry.valid) {
+			idx = i;
+			pr_debug("found unused smac entry: %d:%pMR\n", idx,
+				 current_entry.mac);
+		}
+
+		if (!memcmp(entry->mac, current_entry.mac,
+			    sizeof(current_entry.mac))) {
+			idx = i;
+			pr_debug("found existing smac entry: %d:%pMR\n", idx,
+				 current_entry.mac);
+			break;
+		}
+	}
+
+	return idx != -1 ? ksz8863_cfg_set_static_mac_entry(cfg, idx, entry) :
+			   -ENOSPC;
+}
+
+static int ksz8863_cfg_get_static_macs(struct switch_dev *dev,
+				       const struct switch_attr *attr,
+				       struct switch_val *val)
+{
+	struct ksz8863_static_mac_tbl_entry entry;
+	int i, err;
+	struct ksz8863_cfg *cfg = get_ksz8863_cfg(dev);
+	const size_t buffer_size = sizeof(cfg->buf_static_mac);
+	char *buffer = cfg->buf_static_mac;
+
+	*buffer = '\0';
+	val->value.s = buffer;
+	val->len = 0;
+
+	for (i = 0; i < KSZ8863_SMAC_MAX_ENTRIES; i++) {
+		err = ksz8863_cfg_get_static_mac_entry(cfg, i, &entry);
+		if (err)
+			return err;
+
+		pr_debug("%d [%d: %pMR 0x%x %02d %d]\n", entry.valid, i,
+			 entry.mac, entry.forward_ports,
+			 (entry.use_fid) ? entry.fid : -1, entry.override);
+
+		if (!entry.valid)
+			continue;
+
+		val->len += snprintf(buffer + val->len, buffer_size - val->len,
+				     "\n[%d: %pMR 0x%x %02d %d]", i, entry.mac,
+				     entry.forward_ports,
+				     (entry.use_fid) ? entry.fid : -1,
+				     entry.override);
+	}
+
+	return 0;
+}
+
+#define MAC_FMT "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx"
+static int ksz8863_cfg_set_static_macs(struct switch_dev *dev,
+				       const struct switch_attr *attr,
+				       struct switch_val *val)
+{
+	struct ksz8863_static_mac_tbl_entry entry = { 0 };
+	u8 *mac = entry.mac;
+	u8 idx; // index unused, kept for api compatibility
+	u8 values[5];
+
+	/* scan data
+	 * command syntax should be <0,00:30:DE:FF:00:C0,0x4,1,1,0,0>2
+	 */
+	if (sscanf(val->value.s, "%hhd," MAC_FMT ",%hhx,%hhd,%hhd,%hhd,%hhd",
+		   &idx, &mac[5], &mac[4], &mac[3], &mac[2], &mac[1], &mac[0],
+		   &values[0], &values[1], &values[2], &values[3],
+		   &values[4]) != 12) {
+		pr_info("Invalid argument: %s", val->value.s);
+		return -EINVAL;
+	}
+
+	entry.forward_ports = values[0] & 0x7;
+	entry.valid = values[1] & 0x1;
+	entry.override = values[2] & 0x1;
+	entry.use_fid = values[3] & 0x1;
+	entry.fid = values[4] & 0xf;
+
+	pr_debug("%s:%pMR,0x%x,%d,%d,%d,%d\n", __func__, mac,
+		 entry.forward_ports, entry.valid, entry.override,
+		 entry.use_fid, entry.fid);
+
+	return ksz8863_cfg_add_or_update_static_mac_entry(get_ksz8863_cfg(dev),
+							  &entry);
+}
+
+static struct switch_attr ksz8863_cfg_global_attrs[] = {
+	{
+		.type = SWITCH_TYPE_INT,
+		.name = "bcast_protect",
+		.description =
+			"Sets the broadcast storm protection rate limit"
+			" (0..20) for Port 1 & 2. '0' will disable protection",
+		.set = ksz8863_cfg_set_bcast_protect,
+		.get = ksz8863_cfg_get_bcast_protect,
+	},
+	{
+		.type = SWITCH_TYPE_STRING,
+		.name = "rate_limit",
+		.description =
+			"Enables rate limiting on egress"
+			" Port3(CPU-Ingress), format='50.mbps'/'64.kbps'. 'off'"
+			" will disable rate limiting.",
+		.set = ksz8863_cfg_set_ratelimit,
+		.get = ksz8863_cfg_get_ratelimit,
+	},
+	{
+		.type = SWITCH_TYPE_INT,
+		.name = "port_mirror",
+		.description = "Sets the mirror port"
+			       " [0 = disable port mirroring]"
+			       " [1 = mirror port X1 to port X2]"
+			       " [2 = mirror port X2 to port X1]",
+		.set = ksz8863_cfg_set_port_mirror,
+		.get = ksz8863_cfg_get_port_mirror,
+	},
+	{
+		.type = SWITCH_TYPE_INT,
+		.name = "fast_aging",
+		.description = "Get fast aging [0 = disable] [1 = enable]",
+		.get = ksz8863_cfg_get_fastageing,
+	},
+	{
+		.type = SWITCH_TYPE_STRING,
+		.name = "dynmacs",
+		.description = "Show dynamic MAC address table"
+			       " - read: 'mac, port, fid, ageing'",
+		.get = ksz8863_cfg_get_dyn_macs,
+	},
+	{
+		.type = SWITCH_TYPE_STRING,
+		.name = "statmacs",
+		.description =
+			"Read/Write static MAC address table"
+			" - read: 'mac, forward ports, fid, override'\n"
+			" - write: 'index,mac,forward ports,valid,override,"
+			"use_fid,fid'\n"
+			"\tindex: unused\n"
+			"\tmac: mac address\n"
+			"\tforward ports: bitfield 001 (1) port 1, 010 (2) port 2, 100 (4) port 3 (host)\n"
+			"\t\t 7 -> all ports except ingress, 4 to host only, etc\n"
+			"\tvalid: forward entry active\n"
+			"\toverride: forward even when port-transmit or recvieve is disabled\n"
+			"\tuse_fid: use mac and vlan for static lookup\n"
+			"\tfid: filter vlan id\n",
+		.set = ksz8863_cfg_set_static_macs,
+		.get = ksz8863_cfg_get_static_macs,
+	}
+};
+
+// clang-format off
+struct switch_dev_ops ksz8863_cfg_switch_dev_ops = {
+	.attr_global = {
+			.attr = ksz8863_cfg_global_attrs,
+			.n_attr = ARRAY_SIZE(ksz8863_cfg_global_attrs),
+		},
+};
+
+// clang-format on
+
+static struct ksz8863_cfg *ksz8863_cfg_alloc(struct device *dev)
+{
+	struct ksz8863_cfg *cfg;
+
+	cfg = devm_kzalloc(dev, sizeof(*cfg), GFP_KERNEL);
+	if (!cfg)
+		return NULL;
+
+	cfg->dev = dev;
+	cfg->swdev.ops = &ksz8863_cfg_switch_dev_ops;
+
+	return cfg;
+}
+
+static void ksz8863_cfg_free(struct ksz8863_cfg *cfg)
+{
+	if (cfg)
+		devm_kfree(cfg->dev, cfg);
+}
+
+static int ksz8863_cfg_of_get_data(struct ksz8863_cfg *cfg)
+{
+	struct device *dev = cfg->dev;
+	struct device_node *np = dev->of_node;
+	struct device_node *mdio_node;
+	struct device_node *switch_node;
+
+	if (!np)
+		return -ENODATA;
+
+	cfg->swdev.name = np->name;
+
+	if (of_property_read_string(np, "swcfg,alias", &cfg->swdev.alias)) {
+		dev_err(dev, "no switch alias given");
+		return -EINVAL;
+	}
+
+	if (of_property_read_u32(np, "swcfg,cpu_port", &cfg->swdev.cpu_port)) {
+		dev_err(dev, "no cpu port given");
+		return -EINVAL;
+	}
+
+	if (of_property_read_u32(np, "swcfg,ports", &cfg->swdev.ports)) {
+		dev_err(dev, "no ports given");
+		return -EINVAL;
+	}
+
+	if (of_property_read_u32(np, "swcfg,vlans", &cfg->swdev.vlans)) {
+		dev_err(dev, "no vlans given");
+		return -EINVAL;
+	}
+
+	switch_node = of_parse_phandle(np, "swcfg,switch", 0);
+	if (!switch_node) {
+		dev_err(dev, "no switch node given");
+		return -EINVAL;
+	}
+
+	if (of_property_read_u32(switch_node, "reg", &cfg->sw_addr)) {
+		dev_err(dev, "no switch mdio address given");
+		return -EINVAL;
+	}
+
+	mdio_node = of_parse_phandle(np, "swcfg,mii-bus", 0);
+	if (!mdio_node) {
+		dev_err(dev, "can not find node 'swcfg,mii-bus'");
+		return -EINVAL;
+	}
+
+	cfg->mii_bus = of_mdio_find_bus(mdio_node);
+	if (!cfg->mii_bus) {
+		dev_err(dev, "can not find mii bus device");
+		return -EPROBE_DEFER;
+	}
+
+	cfg->swdev.of_node = np;
+
+	return 0;
+}
+
+static int ksz8863_cfg_get_chip(struct ksz8863_cfg *cfg)
+{
+	struct mdio_device *mdio_dev;
+	struct dsa_switch *ds;
+
+	mdio_dev = cfg->mii_bus->mdio_map[cfg->sw_addr];
+	if (!mdio_dev)
+		return -EPROBE_DEFER;
+
+	ds = dev_get_drvdata(&mdio_dev->dev);
+
+	if (!ds)
+		return -EPROBE_DEFER;
+
+	if (!ds->priv) {
+		dev_err(cfg->dev, "ksz8863 chip structure is not available");
+		return -EINVAL;
+	}
+
+	cfg->chip = ds->priv;
+
+	return 0;
+}
+
+static int ksz8863_cfg_probe(struct platform_device *pdev)
+{
+	int err;
+	struct ksz8863_cfg *cfg;
+
+	cfg = ksz8863_cfg_alloc(&pdev->dev);
+	if (!cfg) {
+		err = -ENOMEM;
+		goto err;
+	}
+
+	err = ksz8863_cfg_of_get_data(cfg);
+	if (err)
+		goto err_free;
+
+	err = ksz8863_cfg_get_chip(cfg);
+	if (err)
+		goto err_free;
+
+	err = register_switch(&cfg->swdev, NULL);
+	if (err) {
+		dev_err(cfg->dev, "switch registration failed");
+		goto err_free;
+	}
+
+	pdev->dev.platform_data = cfg;
+
+	dev_info(&pdev->dev, "driver probed successful");
+	return 0;
+
+err_free:
+	ksz8863_cfg_free(cfg);
+err:
+	return err;
+}
+
+static int ksz8863_cfg_remove(struct platform_device *pdev)
+{
+	struct ksz8863_cfg *cfg = platform_get_drvdata(pdev);
+
+	if (!cfg)
+		return 0;
+
+	unregister_switch(&cfg->swdev);
+	ksz8863_cfg_free(cfg);
+
+	return 0;
+}
+
+// clang-format off
+#ifdef CONFIG_OF
+static const struct of_device_id ksz8863_of_match[] = {
+	{ .compatible = "swcfg,ksz8863" },
+	{ /* sentinel */ },
+};
+MODULE_DEVICE_TABLE(of, ksz8863_of_match);
+#endif
+
+static struct platform_driver ksz8863_driver = {
+	.probe  = ksz8863_cfg_probe,
+	.remove = ksz8863_cfg_remove,
+	.driver = {
+		.name   = DRIVER_NAME,
+		.owner  = THIS_MODULE,
+#ifdef CONFIG_OF
+		.of_match_table = ksz8863_of_match,
+#endif
+	},
+};
+
+// clang-format on
+module_platform_driver(ksz8863_driver);
+
+MODULE_AUTHOR("andreas.schmidt@wago.com>");
+MODULE_LICENSE("GPL");
diff --git a/drivers/net/phy/marvell.c b/drivers/net/phy/marvell.c
index c10cc2cd53b6..0795122289fd 100644
--- a/drivers/net/phy/marvell.c
+++ b/drivers/net/phy/marvell.c
@@ -33,6 +33,7 @@
 #include <linux/bitfield.h>
 #include <linux/of.h>
 #include <linux/sfp.h>
+#include <linux/mutex.h>
 
 #include <linux/io.h>
 #include <asm/irq.h>
@@ -177,6 +178,11 @@
 #define MII_88E3016_DISABLE_SCRAMBLER	0x0200
 #define MII_88E3016_AUTO_MDIX_CROSSOVER	0x0030
 
+#define MII_88E6321_PHY_SPEC_CTRL	0x10
+#define MII_88E6321_PHY_SCR_MDI		0x0000
+#define MII_88E6321_PHY_SCR_MDI_X	0x0020
+#define MII_88E6321_PHY_SCR_AUTO_CROSS	0x0060
+
 #define MII_88E1510_GEN_CTRL_REG_1		0x14
 #define MII_88E1510_GEN_CTRL_REG_1_MODE_MASK	0x7
 #define MII_88E1510_GEN_CTRL_REG_1_MODE_RGMII	0x0	/* RGMII to copper */
@@ -927,6 +933,73 @@ static int m88e1111_config_init_1000basex(struct phy_device *phydev)
 	return 0;
 }
 
+static int mv88e6321_config_init(struct phy_device *phydev)
+{
+	int reg, ret;
+	int phy_mdix;
+
+	reg = phy_read(phydev, MII_88E6321_PHY_SPEC_CTRL);
+	if (reg < 0)
+		return reg;
+
+	phy_mdix = reg & MII_88E6321_PHY_SCR_AUTO_CROSS;
+
+	if (phy_mdix == MII_88E6321_PHY_SCR_MDI)
+		phydev->mdix = ETH_TP_MDI;
+	else if (phy_mdix == MII_88E6321_PHY_SCR_MDI_X)
+		phydev->mdix = ETH_TP_MDI_X;
+	else if (phy_mdix == MII_88E6321_PHY_SCR_AUTO_CROSS)
+		phydev->mdix = ETH_TP_MDI_AUTO;
+
+	ret = genphy_read_abilities(phydev);
+	if(ret < 0)
+		return ret;
+
+	of_set_phy_supported(phydev);
+
+	return 0;
+}
+
+static int mv88e6321_config_aneg(struct phy_device *phydev)
+{
+	int reg, ret;
+	int phy_mdix;
+	int mdix_changed = 0;
+
+	reg = phy_read(phydev, MII_88E6321_PHY_SPEC_CTRL);
+	if (reg < 0)
+		return reg;
+
+	phy_mdix = reg & MII_88E6321_PHY_SCR_AUTO_CROSS;
+
+	reg &= ~MII_88E6321_PHY_SCR_AUTO_CROSS;
+
+	if (phydev->mdix == ETH_TP_MDI && phy_mdix != MII_88E6321_PHY_SCR_MDI) {
+		mdix_changed = 1;
+		reg |= MII_88E6321_PHY_SCR_MDI;
+	} else if (phydev->mdix == ETH_TP_MDI_X &&
+		   phy_mdix != MII_88E6321_PHY_SCR_MDI_X) {
+		mdix_changed = 1;
+		reg |= MII_88E6321_PHY_SCR_MDI_X;
+	} else if (phydev->mdix == ETH_TP_MDI_AUTO &&
+		   phy_mdix != MII_88E6321_PHY_SCR_AUTO_CROSS) {
+		mdix_changed = 1;
+		reg |= MII_88E6321_PHY_SCR_AUTO_CROSS;
+	}
+
+	if (mdix_changed) {
+		ret = phy_write(phydev, MII_88E6321_PHY_SPEC_CTRL, reg);
+		if (ret < 0)
+			return ret;
+
+		ret = genphy_soft_reset(phydev);
+		if (ret)
+			return ret;
+	}
+
+	return genphy_config_aneg(phydev);
+}
+
 static int m88e1111_config_init(struct phy_device *phydev)
 {
 	int err;
@@ -3338,6 +3411,24 @@ static struct phy_driver marvell_drivers[] = {
 		.get_tunable = m88e1540_get_tunable,
 		.set_tunable = m88e1540_set_tunable,
 	},
+	{
+		.phy_id = MARVELL_PHY_ID_88E6321,
+		.phy_id_mask = MARVELL_PHY_ID_MASK,
+		.name = "Marvell 88E6321",
+		.features = PHY_BASIC_FEATURES,
+		.probe = marvell_probe,
+		.config_aneg = &mv88e6321_config_aneg,
+		.config_init = &mv88e6321_config_init,
+		.aneg_done = &marvell_aneg_done,
+		.read_status = &marvell_read_status,
+		.config_intr = &marvell_config_intr,
+		.handle_interrupt = marvell_handle_interrupt,
+		.resume = &genphy_resume,
+		.suspend = &genphy_suspend,
+		.get_sset_count = marvell_get_sset_count,
+		.get_strings = marvell_get_strings,
+		.get_stats = marvell_get_stats,
+	},
 };
 
 module_phy_driver(marvell_drivers);
diff --git a/drivers/net/phy/mv88e6321-cfg.c b/drivers/net/phy/mv88e6321-cfg.c
new file mode 100644
index 000000000000..18cdc1020a3d
--- /dev/null
+++ b/drivers/net/phy/mv88e6321-cfg.c
@@ -0,0 +1,216 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+#define pr_fmt(fmt) "mv88e6321-cfg: " fmt
+
+#include <linux/device.h>
+#include <linux/of_mdio.h>
+#include <linux/platform_device.h>
+#include <linux/switch.h>
+
+#include <net/dsa.h>
+
+#include "../dsa/mv88e6xxx/chip.h"
+
+#define DRIVER_NAME "mv88e6321-cfg"
+
+struct mv88e6321_cfg {
+	struct switch_dev swdev;
+	struct device *dev;
+	u32 sw_addr;
+	struct mv88e6xxx_chip *chip;
+	struct mii_bus *mii_bus;
+};
+
+struct switch_dev_ops mv88e6321_switch_dev_ops = {
+	.attr_global = {
+		.attr = NULL,
+		.n_attr = 0,
+	},
+	.attr_port = {
+		.attr = NULL,
+		.n_attr = 0,
+	},
+	.attr_vlan = {
+		.attr = NULL,
+		.n_attr = 0,
+	},
+};
+
+static int mv88e6321_cfg_get_chip(struct mv88e6321_cfg *cfg)
+{
+	struct mdio_device *mdio_dev;
+	struct dsa_switch *ds;
+
+	mdio_dev = cfg->mii_bus->mdio_map[cfg->sw_addr];
+	if (!mdio_dev)
+		return -EPROBE_DEFER;
+
+	ds = dev_get_drvdata(&mdio_dev->dev);
+
+	if (!ds)
+		return -EPROBE_DEFER;
+
+	if (!ds->priv) {
+		dev_err(cfg->dev, "mv88e6321 chip structure is not available");
+		return -EINVAL;
+	}
+
+	cfg->chip = ds->priv;
+
+	return 0;
+}
+
+static int mv88e6321_cfg_of_get_data(struct mv88e6321_cfg *cfg)
+{
+	struct device *dev = cfg->dev;
+	struct device_node *np = dev->of_node;
+	struct device_node *mdio_node;
+	struct device_node *switch_node;
+
+	if (!np)
+		return -ENODATA;
+
+	cfg->swdev.name = np->name;
+
+	if (of_property_read_string(np, "swcfg,alias", &cfg->swdev.alias)) {
+		dev_err(dev, "No switch alias given\n");
+		return -EINVAL;
+	}
+
+	if (of_property_read_u32(np, "swcfg,cpu_port", &cfg->swdev.cpu_port)) {
+		dev_err(dev, "No cpu port given\n");
+		return -EINVAL;
+	}
+
+	if (of_property_read_u32(np, "swcfg,ports", &cfg->swdev.ports)) {
+		dev_err(dev, "No ports given\n");
+		return -EINVAL;
+	}
+
+	if (of_property_read_u32(np, "swcfg,vlans", &cfg->swdev.vlans)) {
+		dev_err(dev, "No vlans given\n");
+		return -EINVAL;
+	}
+
+	switch_node = of_parse_phandle(np, "swcfg,switch", 0);
+	if (!switch_node) {
+		dev_err(dev, "no switch node given");
+		return -EINVAL;
+	}
+
+	if (of_property_read_u32(switch_node, "reg", &cfg->sw_addr)) {
+		dev_err(dev, "no switch mdio address given");
+		return -EINVAL;
+	}
+
+	mdio_node = of_parse_phandle(np, "swcfg,mii-bus", 0);
+	if (!mdio_node) {
+		dev_err(dev, "can't find node 'swcfg,mii-bus'\n");
+		return -ENODEV;
+	}
+
+	cfg->mii_bus = of_mdio_find_bus(mdio_node);
+	if (!cfg->mii_bus) {
+		dev_err(dev, "can't find mii bus device\n");
+		return -EPROBE_DEFER;
+	}
+
+	cfg->swdev.of_node = np;
+
+	return 0;
+}
+
+static struct mv88e6321_cfg *mv88e6321_cfg_alloc(struct device *dev)
+{
+	struct mv88e6321_cfg *cfg;
+
+	cfg = devm_kzalloc(dev, sizeof(*cfg), GFP_KERNEL);
+	if (!cfg)
+		return NULL;
+
+	cfg->dev = dev;
+	cfg->swdev.ops = &mv88e6321_switch_dev_ops;
+
+	return cfg;
+}
+
+static void mv88e6321_cfg_free(struct mv88e6321_cfg *cfg)
+{
+	if (cfg)
+		devm_kfree(cfg->dev, cfg);
+}
+
+static int mv88e6321_cfg_probe(struct platform_device *pdev)
+{
+	int err;
+	struct mv88e6321_cfg *cfg;
+
+	cfg = mv88e6321_cfg_alloc(&pdev->dev);
+	if (!cfg) {
+		err = -ENOMEM;
+		goto err;
+	}
+
+	err = mv88e6321_cfg_of_get_data(cfg);
+	if (err)
+		goto err_free;
+
+	err = mv88e6321_cfg_get_chip(cfg);
+	if (err)
+		goto err_free;
+
+	err = register_switch(&cfg->swdev, NULL);
+	if (err) {
+		dev_err(cfg->dev, "switch registration failed");
+		goto err_free;
+	}
+
+	pdev->dev.platform_data = cfg;
+
+	dev_info(&pdev->dev, "driver probed\n");
+	return 0;
+
+err_free:
+	mv88e6321_cfg_free(cfg);
+err:
+	return err;
+}
+
+static int mv88e6321_cfg_remove(struct platform_device *pdev)
+{
+	struct mv88e6321_cfg *cfg = pdev->dev.platform_data;
+
+	if (!cfg)
+		return 0;
+
+	unregister_switch(&cfg->swdev);
+	mv88e6321_cfg_free(cfg);
+	return 0;
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id mv88e6321_dt_ids[] = {
+	{
+		.compatible = "swcfg,mv88e6321",
+	},
+	{ /* sentinel */ },
+};
+MODULE_DEVICE_TABLE(of, mv88e6321_dt_ids);
+#endif
+
+static struct platform_driver mv88e6321_driver = {
+	.probe = mv88e6321_cfg_probe,
+	.remove = mv88e6321_cfg_remove,
+	.driver = {
+		.name = DRIVER_NAME,
+		.owner = THIS_MODULE,
+#ifdef CONFIG_OF
+		.of_match_table = mv88e6321_dt_ids,
+#endif
+	},
+};
+
+module_platform_driver(mv88e6321_driver);
+
+MODULE_AUTHOR("heinrich.toews@wago.com>");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index 28f4a383aba7..902c14a9f7af 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -1475,7 +1475,6 @@ int phy_attach_direct(struct net_device *dev, struct phy_device *phydev,
 	if (err)
 		return err;
 
-	phy_resume(phydev);
 	phy_led_triggers_register(phydev);
 
 	return err;
diff --git a/drivers/net/phy/swconfig.c b/drivers/net/phy/swconfig.c
new file mode 100644
index 000000000000..6fc45ad2c275
--- /dev/null
+++ b/drivers/net/phy/swconfig.c
@@ -0,0 +1,1273 @@
+// SPDX-License-Identifier: GPL-2.0+
+/* swconfig.c: Switch configuration API
+ *
+ * Copyright (C) 2008 Felix Fietkau <nbd@nbd.name>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/types.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/list.h>
+#include <linux/if.h>
+#include <linux/if_ether.h>
+#include <linux/capability.h>
+#include <linux/skbuff.h>
+#include <linux/switch.h>
+#include <linux/of.h>
+#include <linux/version.h>
+#include <uapi/linux/mii.h>
+
+#define SWCONFIG_DEVNAME "switch%d"
+
+MODULE_AUTHOR("Felix Fietkau <nbd@nbd.name>");
+MODULE_LICENSE("GPL");
+
+static int swdev_id;
+static struct list_head swdevs;
+static DEFINE_MUTEX(swdevs_lock);
+struct swconfig_callback;
+
+struct swconfig_callback {
+	struct sk_buff *msg;
+	struct genlmsghdr *hdr;
+	struct genl_info *info;
+	int cmd;
+
+	/* callback for filling in the message data */
+	int (*fill)(struct swconfig_callback *cb, void *arg);
+
+	/* callback for closing the message before sending it */
+	int (*close)(struct swconfig_callback *cb, void *arg);
+
+	struct nlattr *nest[4];
+	int args[4];
+};
+
+/* defaults */
+
+static int swconfig_get_vlan_ports(struct switch_dev *dev,
+				   const struct switch_attr *attr,
+				   struct switch_val *val)
+{
+	int ret;
+	if (val->port_vlan >= dev->vlans)
+		return -EINVAL;
+
+	if (!dev->ops->get_vlan_ports)
+		return -EOPNOTSUPP;
+
+	ret = dev->ops->get_vlan_ports(dev, val);
+	return ret;
+}
+
+static int swconfig_set_vlan_ports(struct switch_dev *dev,
+				   const struct switch_attr *attr,
+				   struct switch_val *val)
+{
+	struct switch_port *ports = val->value.ports;
+	const struct switch_dev_ops *ops = dev->ops;
+	int i;
+
+	if (val->port_vlan >= dev->vlans)
+		return -EINVAL;
+
+	/* validate ports */
+	if (val->len > dev->ports)
+		return -EINVAL;
+
+	if (!ops->set_vlan_ports)
+		return -EOPNOTSUPP;
+
+	for (i = 0; i < val->len; i++) {
+		if (ports[i].id >= dev->ports)
+			return -EINVAL;
+
+		if (ops->set_port_pvid &&
+		    !(ports[i].flags & (1 << SWITCH_PORT_FLAG_TAGGED)))
+			ops->set_port_pvid(dev, ports[i].id, val->port_vlan);
+	}
+
+	return ops->set_vlan_ports(dev, val);
+}
+
+static int swconfig_set_pvid(struct switch_dev *dev,
+			     const struct switch_attr *attr,
+			     struct switch_val *val)
+{
+	if (val->port_vlan >= dev->ports)
+		return -EINVAL;
+
+	if (!dev->ops->set_port_pvid)
+		return -EOPNOTSUPP;
+
+	return dev->ops->set_port_pvid(dev, val->port_vlan, val->value.i);
+}
+
+static int swconfig_get_pvid(struct switch_dev *dev,
+			     const struct switch_attr *attr,
+			     struct switch_val *val)
+{
+	if (val->port_vlan >= dev->ports)
+		return -EINVAL;
+
+	if (!dev->ops->get_port_pvid)
+		return -EOPNOTSUPP;
+
+	return dev->ops->get_port_pvid(dev, val->port_vlan, &val->value.i);
+}
+
+static int swconfig_set_link(struct switch_dev *dev,
+			     const struct switch_attr *attr,
+			     struct switch_val *val)
+{
+	if (!dev->ops->set_port_link)
+		return -EOPNOTSUPP;
+
+	return dev->ops->set_port_link(dev, val->port_vlan, val->value.link);
+}
+
+static int swconfig_get_link(struct switch_dev *dev,
+			     const struct switch_attr *attr,
+			     struct switch_val *val)
+{
+	struct switch_port_link *link = val->value.link;
+
+	if (val->port_vlan >= dev->ports)
+		return -EINVAL;
+
+	if (!dev->ops->get_port_link)
+		return -EOPNOTSUPP;
+
+	memset(link, 0, sizeof(*link));
+	return dev->ops->get_port_link(dev, val->port_vlan, link);
+}
+
+static int swconfig_apply_config(struct switch_dev *dev,
+				 const struct switch_attr *attr,
+				 struct switch_val *val)
+{
+	/* don't complain if not supported by the switch driver */
+	if (!dev->ops->apply_config)
+		return 0;
+
+	return dev->ops->apply_config(dev);
+}
+
+static int swconfig_reset_switch(struct switch_dev *dev,
+				 const struct switch_attr *attr,
+				 struct switch_val *val)
+{
+	/* don't complain if not supported by the switch driver */
+	if (!dev->ops->reset_switch)
+		return 0;
+
+	return dev->ops->reset_switch(dev);
+}
+
+enum global_defaults {
+	GLOBAL_APPLY,
+	GLOBAL_RESET,
+};
+
+enum vlan_defaults {
+	VLAN_PORTS,
+};
+
+enum port_defaults {
+	PORT_PVID,
+	PORT_LINK,
+};
+
+static struct switch_attr default_global[] = {
+	[GLOBAL_APPLY] = {
+		.type = SWITCH_TYPE_NOVAL,
+		.name = "apply",
+		.description = "Activate changes in the hardware",
+		.set = swconfig_apply_config,
+	},
+	[GLOBAL_RESET] = {
+		.type = SWITCH_TYPE_NOVAL,
+		.name = "reset",
+		.description = "Reset the switch",
+		.set = swconfig_reset_switch,
+	}
+};
+
+static struct switch_attr default_port[] = {
+	[PORT_PVID] = {
+		.type = SWITCH_TYPE_INT,
+		.name = "pvid",
+		.description = "Primary VLAN ID",
+		.set = swconfig_set_pvid,
+		.get = swconfig_get_pvid,
+	},
+	[PORT_LINK] = {
+		.type = SWITCH_TYPE_LINK,
+		.name = "link",
+		.description = "Get port link information",
+		.set = swconfig_set_link,
+		.get = swconfig_get_link,
+	}
+};
+
+static struct switch_attr default_vlan[] = {
+	[VLAN_PORTS] = {
+		.type = SWITCH_TYPE_PORTS,
+		.name = "ports",
+		.description = "VLAN port mapping",
+		.set = swconfig_set_vlan_ports,
+		.get = swconfig_get_vlan_ports,
+	},
+};
+
+static const struct switch_attr *
+swconfig_find_attr_by_name(const struct switch_attrlist *alist,
+			   const char *name)
+{
+	int i;
+
+	for (i = 0; i < alist->n_attr; i++)
+		if (strcmp(name, alist->attr[i].name) == 0)
+			return &alist->attr[i];
+
+	return NULL;
+}
+
+static void swconfig_defaults_init(struct switch_dev *dev)
+{
+	const struct switch_dev_ops *ops = dev->ops;
+
+	dev->def_global = 0;
+	dev->def_vlan = 0;
+	dev->def_port = 0;
+
+	if (ops->get_vlan_ports || ops->set_vlan_ports)
+		set_bit(VLAN_PORTS, &dev->def_vlan);
+
+	if (ops->get_port_pvid || ops->set_port_pvid)
+		set_bit(PORT_PVID, &dev->def_port);
+
+	if (ops->get_port_link &&
+	    !swconfig_find_attr_by_name(&ops->attr_port, "link"))
+		set_bit(PORT_LINK, &dev->def_port);
+
+	/* always present, can be no-op */
+	set_bit(GLOBAL_APPLY, &dev->def_global);
+	set_bit(GLOBAL_RESET, &dev->def_global);
+}
+
+static struct genl_family switch_fam;
+
+static const struct nla_policy switch_policy[SWITCH_ATTR_MAX + 1] = {
+	[SWITCH_ATTR_ID] = { .type = NLA_U32 },
+	[SWITCH_ATTR_OP_ID] = { .type = NLA_U32 },
+	[SWITCH_ATTR_OP_PORT] = { .type = NLA_U32 },
+	[SWITCH_ATTR_OP_VLAN] = { .type = NLA_U32 },
+	[SWITCH_ATTR_OP_VALUE_INT] = { .type = NLA_U32 },
+	[SWITCH_ATTR_OP_VALUE_STR] = { .type = NLA_NUL_STRING },
+	[SWITCH_ATTR_OP_VALUE_PORTS] = { .type = NLA_NESTED },
+	[SWITCH_ATTR_TYPE] = { .type = NLA_U32 },
+};
+
+static const struct nla_policy port_policy[SWITCH_PORT_ATTR_MAX + 1] = {
+	[SWITCH_PORT_ID] = { .type = NLA_U32 },
+	[SWITCH_PORT_FLAG_TAGGED] = { .type = NLA_FLAG },
+};
+
+static struct nla_policy link_policy[SWITCH_LINK_ATTR_MAX] = {
+	[SWITCH_LINK_FLAG_DUPLEX] = { .type = NLA_FLAG },
+	[SWITCH_LINK_FLAG_ANEG] = { .type = NLA_FLAG },
+	[SWITCH_LINK_SPEED] = { .type = NLA_U32 },
+};
+
+static inline void swconfig_lock(void)
+{
+	mutex_lock(&swdevs_lock);
+}
+
+static inline void swconfig_unlock(void)
+{
+	mutex_unlock(&swdevs_lock);
+}
+
+static struct switch_dev *swconfig_get_dev(struct genl_info *info)
+{
+	struct switch_dev *dev = NULL;
+	struct switch_dev *p;
+	int id;
+
+	if (!info->attrs[SWITCH_ATTR_ID])
+		goto done;
+
+	id = nla_get_u32(info->attrs[SWITCH_ATTR_ID]);
+	swconfig_lock();
+	list_for_each_entry(p, &swdevs, dev_list) {
+		if (id != p->id)
+			continue;
+
+		dev = p;
+		break;
+	}
+	if (dev)
+		mutex_lock(&dev->sw_mutex);
+	else
+		pr_debug("device %d not found\n", id);
+	swconfig_unlock();
+done:
+	return dev;
+}
+
+static inline void swconfig_put_dev(struct switch_dev *dev)
+{
+	mutex_unlock(&dev->sw_mutex);
+}
+
+static int swconfig_dump_attr(struct swconfig_callback *cb, void *arg)
+{
+	struct switch_attr *op = arg;
+	struct genl_info *info = cb->info;
+	struct sk_buff *msg = cb->msg;
+	int id = cb->args[0];
+	void *hdr;
+
+	hdr = genlmsg_put(msg, info->snd_portid, info->snd_seq, &switch_fam,
+			  NLM_F_MULTI, SWITCH_CMD_NEW_ATTR);
+	if (IS_ERR(hdr))
+		return -1;
+
+	if (nla_put_u32(msg, SWITCH_ATTR_OP_ID, id))
+		goto nla_put_failure;
+	if (nla_put_u32(msg, SWITCH_ATTR_OP_TYPE, op->type))
+		goto nla_put_failure;
+	if (nla_put_string(msg, SWITCH_ATTR_OP_NAME, op->name))
+		goto nla_put_failure;
+	if (op->description)
+		if (nla_put_string(msg, SWITCH_ATTR_OP_DESCRIPTION,
+				   op->description))
+			goto nla_put_failure;
+
+	genlmsg_end(msg, hdr);
+	return msg->len;
+nla_put_failure:
+	genlmsg_cancel(msg, hdr);
+	return -EMSGSIZE;
+}
+
+/* spread multipart messages across multiple message buffers */
+static int swconfig_send_multipart(struct swconfig_callback *cb, void *arg)
+{
+	struct genl_info *info = cb->info;
+	int restart = 0;
+	int err;
+
+	do {
+		if (!cb->msg) {
+			cb->msg = nlmsg_new(NLMSG_GOODSIZE, GFP_KERNEL);
+			if (cb->msg == NULL)
+				goto error;
+		}
+
+		if (!(cb->fill(cb, arg) < 0))
+			break;
+
+		/* fill failed, check if this was already the second attempt */
+		if (restart)
+			goto error;
+
+		/* try again in a new message, send the current one */
+		restart = 1;
+		if (cb->close) {
+			if (cb->close(cb, arg) < 0)
+				goto error;
+		}
+		err = genlmsg_reply(cb->msg, info);
+		cb->msg = NULL;
+		if (err < 0)
+			goto error;
+
+	} while (restart);
+
+	return 0;
+
+error:
+	if (cb->msg)
+		nlmsg_free(cb->msg);
+	return -1;
+}
+
+static int swconfig_list_attrs(struct sk_buff *skb, struct genl_info *info)
+{
+	struct genlmsghdr *hdr = nlmsg_data(info->nlhdr);
+	const struct switch_attrlist *alist;
+	struct switch_dev *dev;
+	struct swconfig_callback cb;
+	int err = -EINVAL;
+	int i;
+
+	/* defaults */
+	struct switch_attr *def_list;
+	unsigned long *def_active;
+	int n_def;
+
+	dev = swconfig_get_dev(info);
+	if (!dev)
+		return -EINVAL;
+
+	switch (hdr->cmd) {
+	case SWITCH_CMD_LIST_GLOBAL:
+		alist = &dev->ops->attr_global;
+		def_list = default_global;
+		def_active = &dev->def_global;
+		n_def = ARRAY_SIZE(default_global);
+		break;
+	case SWITCH_CMD_LIST_VLAN:
+		alist = &dev->ops->attr_vlan;
+		def_list = default_vlan;
+		def_active = &dev->def_vlan;
+		n_def = ARRAY_SIZE(default_vlan);
+		break;
+	case SWITCH_CMD_LIST_PORT:
+		alist = &dev->ops->attr_port;
+		def_list = default_port;
+		def_active = &dev->def_port;
+		n_def = ARRAY_SIZE(default_port);
+		break;
+	default:
+		WARN_ON(1);
+		goto out;
+	}
+
+	memset(&cb, 0, sizeof(cb));
+	cb.info = info;
+	cb.fill = swconfig_dump_attr;
+	for (i = 0; i < alist->n_attr; i++) {
+		if (alist->attr[i].disabled)
+			continue;
+		cb.args[0] = i;
+		err = swconfig_send_multipart(&cb, (void *)&alist->attr[i]);
+		if (err < 0)
+			goto error;
+	}
+
+	/* defaults */
+	for (i = 0; i < n_def; i++) {
+		if (!test_bit(i, def_active))
+			continue;
+		cb.args[0] = SWITCH_ATTR_DEFAULTS_OFFSET + i;
+		err = swconfig_send_multipart(&cb, (void *)&def_list[i]);
+		if (err < 0)
+			goto error;
+	}
+	swconfig_put_dev(dev);
+
+	if (!cb.msg)
+		return 0;
+
+	return genlmsg_reply(cb.msg, info);
+
+error:
+	if (cb.msg)
+		nlmsg_free(cb.msg);
+out:
+	swconfig_put_dev(dev);
+	return err;
+}
+
+static const struct switch_attr *swconfig_lookup_attr(struct switch_dev *dev,
+						      struct genl_info *info,
+						      struct switch_val *val)
+{
+	struct genlmsghdr *hdr = nlmsg_data(info->nlhdr);
+	const struct switch_attrlist *alist;
+	const struct switch_attr *attr = NULL;
+	unsigned int attr_id;
+
+	/* defaults */
+	struct switch_attr *def_list;
+	unsigned long *def_active;
+	int n_def;
+
+	if (!info->attrs[SWITCH_ATTR_OP_ID])
+		goto done;
+
+	switch (hdr->cmd) {
+	case SWITCH_CMD_SET_GLOBAL:
+	case SWITCH_CMD_GET_GLOBAL:
+		alist = &dev->ops->attr_global;
+		def_list = default_global;
+		def_active = &dev->def_global;
+		n_def = ARRAY_SIZE(default_global);
+		break;
+	case SWITCH_CMD_SET_VLAN:
+	case SWITCH_CMD_GET_VLAN:
+		alist = &dev->ops->attr_vlan;
+		def_list = default_vlan;
+		def_active = &dev->def_vlan;
+		n_def = ARRAY_SIZE(default_vlan);
+		if (!info->attrs[SWITCH_ATTR_OP_VLAN])
+			goto done;
+		val->port_vlan = nla_get_u32(info->attrs[SWITCH_ATTR_OP_VLAN]);
+		if (val->port_vlan >= dev->vlans)
+			goto done;
+		break;
+	case SWITCH_CMD_SET_PORT:
+	case SWITCH_CMD_GET_PORT:
+		alist = &dev->ops->attr_port;
+		def_list = default_port;
+		def_active = &dev->def_port;
+		n_def = ARRAY_SIZE(default_port);
+		if (!info->attrs[SWITCH_ATTR_OP_PORT])
+			goto done;
+		val->port_vlan = nla_get_u32(info->attrs[SWITCH_ATTR_OP_PORT]);
+		if (val->port_vlan >= dev->ports)
+			goto done;
+		break;
+	default:
+		WARN_ON(1);
+		goto done;
+	}
+
+	if (!alist)
+		goto done;
+
+	attr_id = nla_get_u32(info->attrs[SWITCH_ATTR_OP_ID]);
+	if (attr_id >= SWITCH_ATTR_DEFAULTS_OFFSET) {
+		attr_id -= SWITCH_ATTR_DEFAULTS_OFFSET;
+		if (attr_id >= n_def)
+			goto done;
+		if (!test_bit(attr_id, def_active))
+			goto done;
+		attr = &def_list[attr_id];
+	} else {
+		if (attr_id >= alist->n_attr)
+			goto done;
+		attr = &alist->attr[attr_id];
+	}
+
+	if (attr->disabled)
+		attr = NULL;
+
+done:
+	if (!attr)
+		pr_debug("attribute lookup failed\n");
+	val->attr = attr;
+	return attr;
+}
+
+static int swconfig_parse_ports(struct sk_buff *msg, struct nlattr *head,
+				struct switch_val *val, int max)
+{
+	struct nlattr *nla;
+	int rem;
+
+	val->len = 0;
+	nla_for_each_nested(nla, head, rem) {
+		struct nlattr *tb[SWITCH_PORT_ATTR_MAX + 1];
+		struct switch_port *port;
+
+		if (val->len >= max)
+			return -EINVAL;
+
+		port = &val->value.ports[val->len];
+
+#if KERNEL_VERSION(5, 2, 0) <= LINUX_VERSION_CODE
+		if (nla_parse_nested_deprecated(tb, SWITCH_PORT_ATTR_MAX, nla,
+						port_policy, NULL))
+#else
+		if (nla_parse_nested(tb, SWITCH_PORT_ATTR_MAX, nla, port_policy,
+				     NULL))
+#endif
+			return -EINVAL;
+
+		if (!tb[SWITCH_PORT_ID])
+			return -EINVAL;
+
+		port->id = nla_get_u32(tb[SWITCH_PORT_ID]);
+		if (tb[SWITCH_PORT_FLAG_TAGGED])
+			port->flags |= (1 << SWITCH_PORT_FLAG_TAGGED);
+		val->len++;
+	}
+
+	return 0;
+}
+
+static int swconfig_parse_link(struct sk_buff *msg, struct nlattr *nla,
+			       struct switch_port_link *link)
+{
+	struct nlattr *tb[SWITCH_LINK_ATTR_MAX + 1];
+
+#if KERNEL_VERSION(5, 2, 0) <= LINUX_VERSION_CODE
+	if (nla_parse_nested_deprecated(tb, SWITCH_LINK_ATTR_MAX, nla,
+					link_policy, NULL))
+#else
+	if (nla_parse_nested(tb, SWITCH_LINK_ATTR_MAX, nla, link_policy, NULL))
+#endif
+		return -EINVAL;
+
+	link->duplex = !!tb[SWITCH_LINK_FLAG_DUPLEX];
+	link->aneg = !!tb[SWITCH_LINK_FLAG_ANEG];
+	link->speed = nla_get_u32(tb[SWITCH_LINK_SPEED]);
+
+	return 0;
+}
+
+static int swconfig_set_attr(struct sk_buff *skb, struct genl_info *info)
+{
+	const struct switch_attr *attr;
+	struct switch_dev *dev;
+	struct switch_val val;
+	int err = -EINVAL;
+
+	if (!capable(CAP_NET_ADMIN))
+		return -EPERM;
+
+	dev = swconfig_get_dev(info);
+	if (!dev)
+		return -EINVAL;
+
+	memset(&val, 0, sizeof(val));
+	attr = swconfig_lookup_attr(dev, info, &val);
+	if (!attr || !attr->set)
+		goto error;
+
+	val.attr = attr;
+	switch (attr->type) {
+	case SWITCH_TYPE_NOVAL:
+		break;
+	case SWITCH_TYPE_INT:
+		if (!info->attrs[SWITCH_ATTR_OP_VALUE_INT])
+			goto error;
+		val.value.i =
+			nla_get_u32(info->attrs[SWITCH_ATTR_OP_VALUE_INT]);
+		break;
+	case SWITCH_TYPE_STRING:
+		if (!info->attrs[SWITCH_ATTR_OP_VALUE_STR])
+			goto error;
+		val.value.s = nla_data(info->attrs[SWITCH_ATTR_OP_VALUE_STR]);
+		break;
+	case SWITCH_TYPE_PORTS:
+		val.value.ports = dev->portbuf;
+		memset(dev->portbuf, 0,
+		       sizeof(struct switch_port) * dev->ports);
+
+		/* TODO: implement multipart? */
+		if (info->attrs[SWITCH_ATTR_OP_VALUE_PORTS]) {
+			err = swconfig_parse_ports(
+				skb, info->attrs[SWITCH_ATTR_OP_VALUE_PORTS],
+				&val, dev->ports);
+			if (err < 0)
+				goto error;
+		} else {
+			val.len = 0;
+			err = 0;
+		}
+		break;
+	case SWITCH_TYPE_LINK:
+		val.value.link = &dev->linkbuf;
+		memset(&dev->linkbuf, 0, sizeof(struct switch_port_link));
+
+		if (info->attrs[SWITCH_ATTR_OP_VALUE_LINK]) {
+			err = swconfig_parse_link(
+				skb, info->attrs[SWITCH_ATTR_OP_VALUE_LINK],
+				val.value.link);
+			if (err < 0)
+				goto error;
+		} else {
+			val.len = 0;
+			err = 0;
+		}
+		break;
+	default:
+		goto error;
+	}
+
+	err = attr->set(dev, attr, &val);
+error:
+	swconfig_put_dev(dev);
+	return err;
+}
+
+static int swconfig_close_portlist(struct swconfig_callback *cb, void *arg)
+{
+	if (cb->nest[0])
+		nla_nest_end(cb->msg, cb->nest[0]);
+	return 0;
+}
+
+static int swconfig_send_port(struct swconfig_callback *cb, void *arg)
+{
+	const struct switch_port *port = arg;
+	struct nlattr *p = NULL;
+
+	if (!cb->nest[0]) {
+		cb->nest[0] = nla_nest_start(cb->msg, cb->cmd);
+		if (!cb->nest[0])
+			return -1;
+	}
+
+	p = nla_nest_start(cb->msg, SWITCH_ATTR_PORT);
+	if (!p)
+		goto error;
+
+	if (nla_put_u32(cb->msg, SWITCH_PORT_ID, port->id))
+		goto nla_put_failure;
+	if (port->flags & (1 << SWITCH_PORT_FLAG_TAGGED)) {
+		if (nla_put_flag(cb->msg, SWITCH_PORT_FLAG_TAGGED))
+			goto nla_put_failure;
+	}
+
+	nla_nest_end(cb->msg, p);
+	return 0;
+
+nla_put_failure:
+	nla_nest_cancel(cb->msg, p);
+error:
+	nla_nest_cancel(cb->msg, cb->nest[0]);
+	return -1;
+}
+
+static int swconfig_send_ports(struct sk_buff **msg, struct genl_info *info,
+			       int attr, const struct switch_val *val)
+{
+	struct swconfig_callback cb;
+	int err = 0;
+	int i;
+
+	if (!val->value.ports)
+		return -EINVAL;
+
+	memset(&cb, 0, sizeof(cb));
+	cb.cmd = attr;
+	cb.msg = *msg;
+	cb.info = info;
+	cb.fill = swconfig_send_port;
+	cb.close = swconfig_close_portlist;
+
+	cb.nest[0] = nla_nest_start(cb.msg, cb.cmd);
+	for (i = 0; i < val->len; i++) {
+		err = swconfig_send_multipart(&cb, &val->value.ports[i]);
+		if (err)
+			goto done;
+	}
+	err = val->len;
+	swconfig_close_portlist(&cb, NULL);
+	*msg = cb.msg;
+
+done:
+	return err;
+}
+
+static int swconfig_send_link(struct sk_buff *msg, struct genl_info *info,
+			      int attr, const struct switch_port_link *link)
+{
+	struct nlattr *p = NULL;
+	int err = 0;
+
+	p = nla_nest_start(msg, attr);
+	if (link->link) {
+		if (nla_put_flag(msg, SWITCH_LINK_FLAG_LINK))
+			goto nla_put_failure;
+	}
+	if (link->duplex) {
+		if (nla_put_flag(msg, SWITCH_LINK_FLAG_DUPLEX))
+			goto nla_put_failure;
+	}
+	if (link->aneg) {
+		if (nla_put_flag(msg, SWITCH_LINK_FLAG_ANEG))
+			goto nla_put_failure;
+	}
+	if (link->tx_flow) {
+		if (nla_put_flag(msg, SWITCH_LINK_FLAG_TX_FLOW))
+			goto nla_put_failure;
+	}
+	if (link->rx_flow) {
+		if (nla_put_flag(msg, SWITCH_LINK_FLAG_RX_FLOW))
+			goto nla_put_failure;
+	}
+	if (nla_put_u32(msg, SWITCH_LINK_SPEED, link->speed))
+		goto nla_put_failure;
+	if (link->eee & ADVERTISED_100baseT_Full) {
+		if (nla_put_flag(msg, SWITCH_LINK_FLAG_EEE_100BASET))
+			goto nla_put_failure;
+	}
+	if (link->eee & ADVERTISED_1000baseT_Full) {
+		if (nla_put_flag(msg, SWITCH_LINK_FLAG_EEE_1000BASET))
+			goto nla_put_failure;
+	}
+	nla_nest_end(msg, p);
+
+	return err;
+
+nla_put_failure:
+	nla_nest_cancel(msg, p);
+	return -1;
+}
+
+static int swconfig_get_attr(struct sk_buff *skb, struct genl_info *info)
+{
+	struct genlmsghdr *hdr = nlmsg_data(info->nlhdr);
+	const struct switch_attr *attr;
+	struct switch_dev *dev;
+	struct sk_buff *msg = NULL;
+	struct switch_val val;
+	int err = -EINVAL;
+	int cmd = hdr->cmd;
+
+	dev = swconfig_get_dev(info);
+	if (!dev)
+		return -EINVAL;
+
+	memset(&val, 0, sizeof(val));
+	attr = swconfig_lookup_attr(dev, info, &val);
+	if (!attr || !attr->get)
+		goto error;
+
+	if (attr->type == SWITCH_TYPE_PORTS) {
+		val.value.ports = dev->portbuf;
+		memset(dev->portbuf, 0,
+		       sizeof(struct switch_port) * dev->ports);
+	} else if (attr->type == SWITCH_TYPE_LINK) {
+		val.value.link = &dev->linkbuf;
+		memset(&dev->linkbuf, 0, sizeof(struct switch_port_link));
+	}
+
+	err = attr->get(dev, attr, &val);
+	if (err)
+		goto error;
+
+	msg = nlmsg_new(NLMSG_GOODSIZE, GFP_KERNEL);
+	if (!msg)
+		goto error;
+
+	hdr = genlmsg_put(msg, info->snd_portid, info->snd_seq, &switch_fam, 0,
+			  cmd);
+	if (IS_ERR(hdr))
+		goto nla_put_failure;
+
+	switch (attr->type) {
+	case SWITCH_TYPE_INT:
+		if (nla_put_u32(msg, SWITCH_ATTR_OP_VALUE_INT, val.value.i))
+			goto nla_put_failure;
+		break;
+	case SWITCH_TYPE_STRING:
+		if (nla_put_string(msg, SWITCH_ATTR_OP_VALUE_STR, val.value.s))
+			goto nla_put_failure;
+		break;
+	case SWITCH_TYPE_PORTS:
+		err = swconfig_send_ports(&msg, info,
+					  SWITCH_ATTR_OP_VALUE_PORTS, &val);
+		if (err < 0)
+			goto nla_put_failure;
+		break;
+	case SWITCH_TYPE_LINK:
+		err = swconfig_send_link(msg, info, SWITCH_ATTR_OP_VALUE_LINK,
+					 val.value.link);
+		if (err < 0)
+			goto nla_put_failure;
+		break;
+	default:
+		pr_debug("invalid type in attribute\n");
+		err = -EINVAL;
+		goto nla_put_failure;
+	}
+	genlmsg_end(msg, hdr);
+	err = msg->len;
+	if (err < 0)
+		goto nla_put_failure;
+
+	swconfig_put_dev(dev);
+	return genlmsg_reply(msg, info);
+
+nla_put_failure:
+	if (msg)
+		nlmsg_free(msg);
+error:
+	swconfig_put_dev(dev);
+	if (!err)
+		err = -ENOMEM;
+	return err;
+}
+
+static int swconfig_send_switch(struct sk_buff *msg, u32 pid, u32 seq,
+				int flags, const struct switch_dev *dev)
+{
+	struct nlattr *p = NULL, *m = NULL;
+	void *hdr;
+	int i;
+
+	hdr = genlmsg_put(msg, pid, seq, &switch_fam, flags,
+			  SWITCH_CMD_NEW_ATTR);
+	if (IS_ERR(hdr))
+		return -1;
+
+	if (nla_put_u32(msg, SWITCH_ATTR_ID, dev->id))
+		goto nla_put_failure;
+	if (nla_put_string(msg, SWITCH_ATTR_DEV_NAME, dev->devname))
+		goto nla_put_failure;
+	if (nla_put_string(msg, SWITCH_ATTR_ALIAS, dev->alias))
+		goto nla_put_failure;
+	if (nla_put_string(msg, SWITCH_ATTR_NAME, dev->name))
+		goto nla_put_failure;
+	if (nla_put_u32(msg, SWITCH_ATTR_VLANS, dev->vlans))
+		goto nla_put_failure;
+	if (nla_put_u32(msg, SWITCH_ATTR_PORTS, dev->ports))
+		goto nla_put_failure;
+	if (nla_put_u32(msg, SWITCH_ATTR_CPU_PORT, dev->cpu_port))
+		goto nla_put_failure;
+
+	m = nla_nest_start(msg, SWITCH_ATTR_PORTMAP);
+	if (!m)
+		goto nla_put_failure;
+	for (i = 0; i < dev->ports; i++) {
+		p = nla_nest_start(msg, SWITCH_ATTR_PORTS);
+		if (!p)
+			continue;
+		if (dev->portmap[i].s) {
+			if (nla_put_string(msg, SWITCH_PORTMAP_SEGMENT,
+					   dev->portmap[i].s))
+				goto nla_put_failure;
+			if (nla_put_u32(msg, SWITCH_PORTMAP_VIRT,
+					dev->portmap[i].virt))
+				goto nla_put_failure;
+		}
+		nla_nest_end(msg, p);
+	}
+	nla_nest_end(msg, m);
+	genlmsg_end(msg, hdr);
+	return msg->len;
+nla_put_failure:
+	genlmsg_cancel(msg, hdr);
+	return -EMSGSIZE;
+}
+
+static int swconfig_dump_switches(struct sk_buff *skb,
+				  struct netlink_callback *cb)
+{
+	struct switch_dev *dev;
+	int start = cb->args[0];
+	int idx = 0;
+
+	swconfig_lock();
+	list_for_each_entry(dev, &swdevs, dev_list) {
+		if (++idx <= start)
+			continue;
+		if (swconfig_send_switch(skb, NETLINK_CB(cb->skb).portid,
+					 cb->nlh->nlmsg_seq, NLM_F_MULTI,
+					 dev) < 0)
+			break;
+	}
+	swconfig_unlock();
+	cb->args[0] = idx;
+
+	return skb->len;
+}
+
+static int swconfig_done(struct netlink_callback *cb)
+{
+	return 0;
+}
+
+static struct genl_ops swconfig_ops[] = {
+	{
+		.cmd = SWITCH_CMD_LIST_GLOBAL,
+#if KERNEL_VERSION(5, 2, 0) <= LINUX_VERSION_CODE
+		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
+		.doit = swconfig_list_attrs,
+#if KERNEL_VERSION(5, 2, 0) > LINUX_VERSION_CODE
+		.policy = switch_policy,
+#endif
+	},
+	{
+		.cmd = SWITCH_CMD_LIST_VLAN,
+#if KERNEL_VERSION(5, 2, 0) <= LINUX_VERSION_CODE
+		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
+		.doit = swconfig_list_attrs,
+#if KERNEL_VERSION(5, 2, 0) > LINUX_VERSION_CODE
+		.policy = switch_policy,
+#endif
+	},
+	{
+		.cmd = SWITCH_CMD_LIST_PORT,
+#if KERNEL_VERSION(5, 2, 0) <= LINUX_VERSION_CODE
+		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
+		.doit = swconfig_list_attrs,
+#if KERNEL_VERSION(5, 2, 0) > LINUX_VERSION_CODE
+		.policy = switch_policy,
+#endif
+	},
+	{
+		.cmd = SWITCH_CMD_GET_GLOBAL,
+#if KERNEL_VERSION(5, 2, 0) <= LINUX_VERSION_CODE
+		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
+		.doit = swconfig_get_attr,
+#if KERNEL_VERSION(5, 2, 0) > LINUX_VERSION_CODE
+		.policy = switch_policy,
+#endif
+	},
+	{
+		.cmd = SWITCH_CMD_GET_VLAN,
+#if KERNEL_VERSION(5, 2, 0) <= LINUX_VERSION_CODE
+		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
+		.doit = swconfig_get_attr,
+#if KERNEL_VERSION(5, 2, 0) > LINUX_VERSION_CODE
+		.policy = switch_policy,
+#endif
+	},
+	{
+		.cmd = SWITCH_CMD_GET_PORT,
+#if KERNEL_VERSION(5, 2, 0) <= LINUX_VERSION_CODE
+		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
+		.doit = swconfig_get_attr,
+#if KERNEL_VERSION(5, 2, 0) > LINUX_VERSION_CODE
+		.policy = switch_policy,
+#endif
+	},
+	{
+		.cmd = SWITCH_CMD_SET_GLOBAL,
+#if KERNEL_VERSION(5, 2, 0) <= LINUX_VERSION_CODE
+		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
+		.flags = GENL_ADMIN_PERM,
+		.doit = swconfig_set_attr,
+#if KERNEL_VERSION(5, 2, 0) > LINUX_VERSION_CODE
+		.policy = switch_policy,
+#endif
+	},
+	{
+		.cmd = SWITCH_CMD_SET_VLAN,
+#if KERNEL_VERSION(5, 2, 0) <= LINUX_VERSION_CODE
+		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
+		.flags = GENL_ADMIN_PERM,
+		.doit = swconfig_set_attr,
+#if KERNEL_VERSION(5, 2, 0) > LINUX_VERSION_CODE
+		.policy = switch_policy,
+#endif
+	},
+	{
+		.cmd = SWITCH_CMD_SET_PORT,
+#if KERNEL_VERSION(5, 2, 0) <= LINUX_VERSION_CODE
+		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
+		.flags = GENL_ADMIN_PERM,
+		.doit = swconfig_set_attr,
+#if KERNEL_VERSION(5, 2, 0) > LINUX_VERSION_CODE
+		.policy = switch_policy,
+#endif
+	},
+	{
+		.cmd = SWITCH_CMD_GET_SWITCH,
+#if KERNEL_VERSION(5, 2, 0) <= LINUX_VERSION_CODE
+		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
+		.dumpit = swconfig_dump_switches,
+#if KERNEL_VERSION(5, 2, 0) > LINUX_VERSION_CODE
+		.policy = switch_policy,
+#endif
+		.done = swconfig_done,
+	}
+};
+
+static struct genl_family switch_fam = {
+	.name = "switch",
+	.hdrsize = 0,
+	.version = 1,
+	.maxattr = SWITCH_ATTR_MAX,
+#if KERNEL_VERSION(5, 2, 0) <= LINUX_VERSION_CODE
+	.policy = switch_policy,
+#endif
+	.module = THIS_MODULE,
+	.ops = swconfig_ops,
+	.n_ops = ARRAY_SIZE(swconfig_ops),
+};
+
+#ifdef CONFIG_OF
+void of_switch_load_portmap(struct switch_dev *dev)
+{
+	struct device_node *port;
+
+	if (!dev->of_node)
+		return;
+
+	for_each_child_of_node(dev->of_node, port) {
+		const __be32 *prop;
+		const char *segment;
+		int size, phys;
+
+		if (!of_device_is_compatible(port, "swconfig,port"))
+			continue;
+
+		if (of_property_read_string(port, "swconfig,segment", &segment))
+			continue;
+
+		prop = of_get_property(port, "swconfig,portmap", &size);
+		if (!prop)
+			continue;
+
+		if (size != (2 * sizeof(*prop))) {
+			pr_err("%s: failed to parse port mapping\n",
+			       port->name);
+			continue;
+		}
+
+		phys = be32_to_cpup(prop++);
+		if ((phys < 0) | (phys >= dev->ports)) {
+			pr_err("%s: physical port index out of range\n",
+			       port->name);
+			continue;
+		}
+
+		dev->portmap[phys].s = kstrdup(segment, GFP_KERNEL);
+		dev->portmap[phys].virt = be32_to_cpup(prop);
+		pr_debug("Found port: %s, physical: %d, virtual: %d\n", segment,
+			 phys, dev->portmap[phys].virt);
+	}
+}
+#endif
+
+int register_switch(struct switch_dev *dev, struct net_device *netdev)
+{
+	struct switch_dev *sdev;
+	const int max_switches = 8 * sizeof(unsigned long);
+	unsigned long in_use = 0;
+	int i;
+
+	INIT_LIST_HEAD(&dev->dev_list);
+	if (netdev) {
+		dev->netdev = netdev;
+		if (!dev->alias)
+			dev->alias = netdev->name;
+	}
+	BUG_ON(!dev->alias);
+
+	/* Make sure swdev_id doesn't overflow */
+	if (swdev_id == INT_MAX) {
+		return -ENOMEM;
+	}
+
+	if (dev->ports > 0) {
+		dev->portbuf = kcalloc(dev->ports, sizeof(struct switch_port),
+				       GFP_KERNEL);
+		if (!dev->portbuf)
+			return -ENOMEM;
+		dev->portmap = kcalloc(dev->ports,
+				       sizeof(struct switch_portmap),
+				       GFP_KERNEL);
+		if (!dev->portmap) {
+			kfree(dev->portbuf);
+			return -ENOMEM;
+		}
+	}
+	swconfig_defaults_init(dev);
+	mutex_init(&dev->sw_mutex);
+	swconfig_lock();
+	dev->id = ++swdev_id;
+
+	list_for_each_entry(sdev, &swdevs, dev_list) {
+		if (!sscanf(sdev->devname, SWCONFIG_DEVNAME, &i))
+			continue;
+		if (i < 0 || i > max_switches)
+			continue;
+
+		set_bit(i, &in_use);
+	}
+	i = find_first_zero_bit(&in_use, max_switches);
+
+	if (i == max_switches) {
+		swconfig_unlock();
+		return -ENFILE;
+	}
+
+#ifdef CONFIG_OF
+	if (dev->ports)
+		of_switch_load_portmap(dev);
+#endif
+
+	/* fill device name */
+	snprintf(dev->devname, IFNAMSIZ, SWCONFIG_DEVNAME, i);
+
+	list_add_tail(&dev->dev_list, &swdevs);
+	swconfig_unlock();
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(register_switch);
+
+void unregister_switch(struct switch_dev *dev)
+{
+	kfree(dev->portbuf);
+	mutex_lock(&dev->sw_mutex);
+	swconfig_lock();
+	list_del(&dev->dev_list);
+	swconfig_unlock();
+	mutex_unlock(&dev->sw_mutex);
+}
+EXPORT_SYMBOL_GPL(unregister_switch);
+
+int switch_generic_set_link(struct switch_dev *dev, int port,
+			    struct switch_port_link *link)
+{
+	if (WARN_ON(!dev->ops->phy_write16))
+		return -EOPNOTSUPP;
+
+	/* Generic implementation */
+	if (link->aneg) {
+		dev->ops->phy_write16(dev, port, MII_BMCR, 0x0000);
+		dev->ops->phy_write16(dev, port, MII_BMCR,
+				      BMCR_ANENABLE | BMCR_ANRESTART);
+	} else {
+		u16 bmcr = 0;
+
+		if (link->duplex)
+			bmcr |= BMCR_FULLDPLX;
+
+		switch (link->speed) {
+		case SWITCH_PORT_SPEED_10:
+			break;
+		case SWITCH_PORT_SPEED_100:
+			bmcr |= BMCR_SPEED100;
+			break;
+		case SWITCH_PORT_SPEED_1000:
+			bmcr |= BMCR_SPEED1000;
+			break;
+		default:
+			return -EOPNOTSUPP;
+		}
+
+		dev->ops->phy_write16(dev, port, MII_BMCR, bmcr);
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(switch_generic_set_link);
+
+static int __init swconfig_init(void)
+{
+	INIT_LIST_HEAD(&swdevs);
+
+	return genl_register_family(&switch_fam);
+}
+
+static void __exit swconfig_exit(void)
+{
+	genl_unregister_family(&switch_fam);
+}
+
+module_init(swconfig_init);
+module_exit(swconfig_exit);
diff --git a/drivers/pinctrl/stm32/pinctrl-stm32.c b/drivers/pinctrl/stm32/pinctrl-stm32.c
index 8934b4878fa8..4800f7138db9 100644
--- a/drivers/pinctrl/stm32/pinctrl-stm32.c
+++ b/drivers/pinctrl/stm32/pinctrl-stm32.c
@@ -308,13 +308,7 @@ static const struct gpio_chip stm32_gpio_template = {
 
 static void stm32_gpio_irq_trigger(struct irq_data *d)
 {
-	struct stm32_gpio_bank *bank = d->domain->host_data;
-	int level;
-
-	/* If level interrupt type then retrig */
-	level = stm32_gpio_get(&bank->gpio_chip, d->hwirq);
-	if ((level == 0 && bank->irq_type[d->hwirq] == IRQ_TYPE_LEVEL_LOW) ||
-	    (level == 1 && bank->irq_type[d->hwirq] == IRQ_TYPE_LEVEL_HIGH))
+	if (irqd_is_level_type(d))
 		irq_chip_retrigger_hierarchy(d);
 }
 
diff --git a/drivers/regulator/tps65218-regulator.c b/drivers/regulator/tps65218-regulator.c
index fa263545a70e..4e067184f431 100644
--- a/drivers/regulator/tps65218-regulator.c
+++ b/drivers/regulator/tps65218-regulator.c
@@ -101,7 +101,7 @@ static int tps65218_pmic_enable(struct regulator_dev *dev)
 	struct tps65218 *tps = rdev_get_drvdata(dev);
 	int rid = rdev_get_id(dev);
 
-	if (rid < TPS65218_DCDC_1 || rid > TPS65218_LDO_1)
+	if (!TPS65218_REG_ID_VALID(rid))
 		return -EINVAL;
 
 	/* Enable the regulator and password protection is level 1 */
@@ -115,7 +115,7 @@ static int tps65218_pmic_disable(struct regulator_dev *dev)
 	struct tps65218 *tps = rdev_get_drvdata(dev);
 	int rid = rdev_get_id(dev);
 
-	if (rid < TPS65218_DCDC_1 || rid > TPS65218_LDO_1)
+	if (!TPS65218_REG_ID_VALID(rid))
 		return -EINVAL;
 
 	/* Disable the regulator and password protection is level 1 */
@@ -126,9 +126,9 @@ static int tps65218_pmic_disable(struct regulator_dev *dev)
 static int tps65218_pmic_set_suspend_enable(struct regulator_dev *dev)
 {
 	struct tps65218 *tps = rdev_get_drvdata(dev);
-	unsigned int rid = rdev_get_id(dev);
+	int rid = rdev_get_id(dev);
 
-	if (rid > TPS65218_LDO_1)
+	if (!TPS65218_REG_ID_VALID(rid))
 		return -EINVAL;
 
 	return tps65218_clear_bits(tps, dev->desc->bypass_reg,
@@ -139,9 +139,9 @@ static int tps65218_pmic_set_suspend_enable(struct regulator_dev *dev)
 static int tps65218_pmic_set_suspend_disable(struct regulator_dev *dev)
 {
 	struct tps65218 *tps = rdev_get_drvdata(dev);
-	unsigned int rid = rdev_get_id(dev);
+	int rid = rdev_get_id(dev);
 
-	if (rid > TPS65218_LDO_1)
+	if (!TPS65218_REG_ID_VALID(rid))
 		return -EINVAL;
 
 	/*
diff --git a/drivers/rtc/rtc-rs5c372.c b/drivers/rtc/rtc-rs5c372.c
index 80980414890c..f25b6a87891b 100644
--- a/drivers/rtc/rtc-rs5c372.c
+++ b/drivers/rtc/rtc-rs5c372.c
@@ -346,6 +346,43 @@ static int rs5c372_get_trim(struct i2c_client *client, int *osc, int *trim)
 
 	return 0;
 }
+
+/*
+ * dev_bit: Bit DEV
+ * dec: bit F6 (a '1' will cause an increment of 1-second time count)
+ * trim: bits F5..F0 (adjustment factor)
+ * */
+static int rs5c372_set_trim(struct i2c_client *client, u8 dev_bit, u8 dec, int trim)
+{
+	struct rs5c372 *rs5c372 = i2c_get_clientdata(client);
+	unsigned char	buf[1];
+	int		addr;
+	int             tmp = 0;
+
+	dev_dbg(&client->dev, "%s: set trim to %d (0x%x).\n",
+		__func__, (trim & 0x3f), (trim & 0x3f));
+
+	if (dev_bit)
+		tmp |= 0x80;	/* set DEV Bit */
+
+	if (dec)
+		tmp |= 0x40;	/* set F6 Bit */
+
+	tmp |= (trim & 0x3f);
+
+	addr   = RS5C_ADDR(RS5C372_REG_TRIM);
+/* 	buf[0] = bin2bcd(tmp); */
+	buf[0] = tmp;
+
+	if (i2c_smbus_write_i2c_block_data(client, addr, sizeof(buf), buf) < 0) {
+		dev_err(&client->dev, "%s: write error\n", __func__);
+		return -EIO;
+	}
+
+	rs5c_get_regs(rs5c372);
+
+	return 0;
+}
 #endif
 
 static int rs5c_rtc_alarm_irq_enable(struct device *dev, unsigned int enabled)
@@ -698,6 +735,39 @@ static int rs5c372_probe(struct i2c_client *client,
 		goto exit;
 	}
 
+#ifdef	NEED_TRIM
+	{
+		struct device_node *node = client->dev.of_node;
+		u8 dev_bit, dec;
+		int trim;
+		u32 trim_data[3];
+
+		if (node) {
+			int ret = of_property_read_u32_array(node, "trim-data", trim_data,
+						ARRAY_SIZE(trim_data));
+			if (!ret) {
+				dev_bit = (u8) trim_data[0];
+				dec = (u8) trim_data[1];
+				trim = (int) trim_data[2];
+
+				dev_info(&client->dev, "set osc adjustment to 0x%x (%d)\n",
+						trim, trim);
+
+				/* Calculation is based on an empirical drift value of +32.47 ppm.
+				 * Set trim value to (32768.00 * 32.47 ppm * 10) + 1 = 11.6398 ~ 12.
+				 * Measurements provide better values for an adjustment value of 13
+				 * which results in a drift value of -1.41 ppm. Also Hardware measurements
+				 * of osc frequency indicate the need of a higher value. So we set 13 here.
+				 * See documentation of r2221 on page 34.
+				 */
+				rs5c372_set_trim(client, dev_bit, dec, trim);
+			} else {
+				dev_info(&client->dev, "skip osc adjustment\n");
+			}
+		}
+	}
+#endif
+
 	dev_info(&client->dev, "%s found, %s\n",
 			({ char *s; switch (rs5c372->type) {
 			case rtc_r2025sd:	s = "r2025sd"; break;
diff --git a/drivers/scsi/fcoe/fcoe.c b/drivers/scsi/fcoe/fcoe.c
index 5ae6c207d3ac..660908027dc5 100644
--- a/drivers/scsi/fcoe/fcoe.c
+++ b/drivers/scsi/fcoe/fcoe.c
@@ -1450,11 +1450,11 @@ static int fcoe_rcv(struct sk_buff *skb, struct net_device *netdev,
 static int fcoe_alloc_paged_crc_eof(struct sk_buff *skb, int tlen)
 {
 	struct fcoe_percpu_s *fps;
-	int rc;
+	int rc, cpu = get_cpu_light();
 
-	fps = &get_cpu_var(fcoe_percpu);
+	fps = &per_cpu(fcoe_percpu, cpu);
 	rc = fcoe_get_paged_crc_eof(skb, tlen, fps);
-	put_cpu_var(fcoe_percpu);
+	put_cpu_light();
 
 	return rc;
 }
@@ -1639,11 +1639,11 @@ static inline int fcoe_filter_frames(struct fc_lport *lport,
 		return 0;
 	}
 
-	stats = per_cpu_ptr(lport->stats, get_cpu());
+	stats = per_cpu_ptr(lport->stats, get_cpu_light());
 	stats->InvalidCRCCount++;
 	if (stats->InvalidCRCCount < 5)
 		printk(KERN_WARNING "fcoe: dropping frame with CRC error\n");
-	put_cpu();
+	put_cpu_light();
 	return -EINVAL;
 }
 
@@ -1684,7 +1684,7 @@ static void fcoe_recv_frame(struct sk_buff *skb)
 	 */
 	hp = (struct fcoe_hdr *) skb_network_header(skb);
 
-	stats = per_cpu_ptr(lport->stats, get_cpu());
+	stats = per_cpu_ptr(lport->stats, get_cpu_light());
 	if (unlikely(FC_FCOE_DECAPS_VER(hp) != FC_FCOE_VER)) {
 		if (stats->ErrorFrames < 5)
 			printk(KERN_WARNING "fcoe: FCoE version "
@@ -1716,13 +1716,13 @@ static void fcoe_recv_frame(struct sk_buff *skb)
 		goto drop;
 
 	if (!fcoe_filter_frames(lport, fp)) {
-		put_cpu();
+		put_cpu_light();
 		fc_exch_recv(lport, fp);
 		return;
 	}
 drop:
 	stats->ErrorFrames++;
-	put_cpu();
+	put_cpu_light();
 	kfree_skb(skb);
 }
 
diff --git a/drivers/scsi/fcoe/fcoe_ctlr.c b/drivers/scsi/fcoe/fcoe_ctlr.c
index 1756a0ac6f08..3a2cbf35ea3d 100644
--- a/drivers/scsi/fcoe/fcoe_ctlr.c
+++ b/drivers/scsi/fcoe/fcoe_ctlr.c
@@ -828,7 +828,7 @@ static unsigned long fcoe_ctlr_age_fcfs(struct fcoe_ctlr *fip)
 
 	INIT_LIST_HEAD(&del_list);
 
-	stats = per_cpu_ptr(fip->lp->stats, get_cpu());
+	stats = per_cpu_ptr(fip->lp->stats, get_cpu_light());
 
 	list_for_each_entry_safe(fcf, next, &fip->fcfs, list) {
 		deadline = fcf->time + fcf->fka_period + fcf->fka_period / 2;
@@ -864,7 +864,7 @@ static unsigned long fcoe_ctlr_age_fcfs(struct fcoe_ctlr *fip)
 				sel_time = fcf->time;
 		}
 	}
-	put_cpu();
+	put_cpu_light();
 
 	list_for_each_entry_safe(fcf, next, &del_list, list) {
 		/* Removes fcf from current list */
diff --git a/drivers/scsi/libfc/fc_exch.c b/drivers/scsi/libfc/fc_exch.c
index 841000445b9a..26d661ddc950 100644
--- a/drivers/scsi/libfc/fc_exch.c
+++ b/drivers/scsi/libfc/fc_exch.c
@@ -825,10 +825,10 @@ static struct fc_exch *fc_exch_em_alloc(struct fc_lport *lport,
 	}
 	memset(ep, 0, sizeof(*ep));
 
-	cpu = get_cpu();
+	cpu = get_cpu_light();
 	pool = per_cpu_ptr(mp->pool, cpu);
 	spin_lock_bh(&pool->lock);
-	put_cpu();
+	put_cpu_light();
 
 	/* peek cache of free slot */
 	if (pool->left != FC_XID_UNKNOWN) {
diff --git a/drivers/spi/Kconfig b/drivers/spi/Kconfig
index 83e352b0c8f9..52be618c8032 100644
--- a/drivers/spi/Kconfig
+++ b/drivers/spi/Kconfig
@@ -592,12 +592,28 @@ config SPI_TI_QSPI
 	  This device supports single, dual and quad read support, while
 	  it only supports single write mode.
 
+config SPI_KBUS_OMAP_EXTENSION
+	bool "KBUS Extension for OMAP MCSPI Driver (Read Notes!)"
+	depends on SPI_OMAP24XX
+	help
+	  KBUS Extension for the McSPI OMAP driver.
+	  It implements the communication protocol for the infineon XE164 Chip
+ 	  which does the communication with the KBUS logic.
+ 	  ATTENTION: This disbles the use of a worker thread (work queue).
+	  In its current state only one userspace process is allowed.
+
 config SPI_OMAP_100K
 	tristate "OMAP SPI 100K"
 	depends on ARCH_OMAP850 || ARCH_OMAP730 || COMPILE_TEST
 	help
 	  OMAP SPI 100K master controller for omap7xx boards.
 
+config SPI_KBUS
+	select SPI_KBUS_OMAP_EXTENSION
+	tristate "Wago KBUS Driver"
+	help
+	  This is driver provides access to the KBUS interface.
+
 config SPI_ORION
 	tristate "Orion SPI master"
 	depends on PLAT_ORION || ARCH_MVEBU || COMPILE_TEST
diff --git a/drivers/spi/Makefile b/drivers/spi/Makefile
index 699db95c8441..7aeea4f7d1e3 100644
--- a/drivers/spi/Makefile
+++ b/drivers/spi/Makefile
@@ -134,6 +134,8 @@ obj-$(CONFIG_SPI_XTENSA_XTFPGA)		+= spi-xtensa-xtfpga.o
 obj-$(CONFIG_SPI_ZYNQ_QSPI)		+= spi-zynq-qspi.o
 obj-$(CONFIG_SPI_ZYNQMP_GQSPI)		+= spi-zynqmp-gqspi.o
 obj-$(CONFIG_SPI_AMD)			+= spi-amd.o
+obj-$(CONFIG_SPI_KBUS)			+= spi-kbus.o
+obj-$(CONFIG_SPI_OMAP24XX)		+= spi-omap2-mcspi.o
 
 # SPI slave protocol handlers
 obj-$(CONFIG_SPI_SLAVE_TIME)		+= spi-slave-time.o
diff --git a/drivers/spi/spi-kbus.c b/drivers/spi/spi-kbus.c
new file mode 100644
index 000000000000..afcf96bb2925
--- /dev/null
+++ b/drivers/spi/spi-kbus.c
@@ -0,0 +1,1284 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/version.h>
+#include <linux/init.h>
+#include <linux/uaccess.h>
+#include <linux/module.h>
+#include <linux/fs.h>
+#include <linux/cdev.h>
+#include <linux/poll.h>
+#include <linux/gpio.h>
+#include <linux/interrupt.h>
+#include <linux/device.h>
+#include <linux/sched.h>
+#include <uapi/linux/sched/types.h>
+#include <linux/file.h>
+#include <linux/dma-mapping.h>
+
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+#include <linux/of_gpio.h>
+#include <linux/of_irq.h>
+
+#include <linux/delay.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/spidev.h>
+#include <linux/spi/kbus.h>
+
+#include <misc/wago-tests.h>
+
+#define PXC_SPI_KBUS_TRACER
+#define CREATE_TRACE_POINTS
+#include <trace/events/pxc.h>
+
+#define KBUS_DUMMY_BIT_PER_WORD 8
+#define KBUS_DUMMY_SPEED 1000000
+
+#if KBUS_TESTING
+struct wago_trace_data wago_ktest;
+#endif
+
+static dev_t kbus_dev;
+static struct cdev kbus_cdev;
+
+/* sysfs */
+extern struct class *wsysinit_sysfs_class;
+extern struct device *wsysinit_sysfs_device;
+static struct device *kbus_device;
+
+int kbus_wait_for_gpio(int gpio)
+{
+	unsigned long timeout;
+
+	timeout = jiffies + msecs_to_jiffies(1); /* 1000 ? */
+	while (gpio_get_value(gpio)) { /* active low */
+		if (time_after(jiffies, timeout))
+			return -1;
+		cpu_relax();
+	}
+	return 0;
+}
+
+int kbus_error(void)
+{
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+
+	/*
+	 * read error code from gpios
+	 */
+	kdrvdata->kbus_err = !gpiod_get_value(kdrvdata->gpio_nerr);
+	return kdrvdata->kbus_err ? -1 : 0;
+}
+
+int kbus_wait_for_irq(void)
+{
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+	unsigned long timeout;
+
+	timeout = jiffies + msecs_to_jiffies(1000);
+	while (!kdrvdata->kbus_irq_state) {
+		if (time_after(jiffies, timeout))
+			return -1;
+		cpu_relax();
+	}
+	kdrvdata->kbus_irq_state = 0;
+	return 0;
+}
+
+int kbus_wait_for_event(int *event)
+{
+	unsigned long timeout;
+
+	timeout = jiffies + msecs_to_jiffies(1000);
+	while (!(*event)) {
+		if (time_after(jiffies, timeout))
+			return -1;
+		cpu_relax();
+	}
+	*event = 0;
+	return 0;
+}
+
+static irqreturn_t kbus_isr(int irq, void *dev)
+{
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+
+	trace_pxc_kbus(__func__, "kbus-irq:in");
+	kdrvdata->kbus_irq_state = 0; /* attention: changed polarisation */
+
+	/* wake_up_interruptible(&kdrvdata->kbus_irq_wq); */
+	wake_up(&kdrvdata->kbus_irq_wq);
+
+	trace_pxc_kbus(__func__, "kbus-irq:out");
+	return IRQ_HANDLED;
+}
+
+static ssize_t kbus_write(struct file *filp, const char __user *buf,
+			  size_t count, loff_t *f_pos)
+{
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+	u32 irq_value = 0;
+	ssize_t status = 0;
+
+	status = __get_user(irq_value, buf);
+	if (status == 0) {
+		if (irq_value) {
+			if (!kdrvdata->kbus_irq_enabled)
+				KBUS_ENABLE_IRQ(kdrvdata->kbus_irq);
+			kdrvdata->kbus_irq_enabled = 1;
+			trace_pxc_kbus(__func__, "turned-on irqs!");
+		} else {
+			if (kdrvdata->kbus_irq_enabled)
+				KBUS_DISABLE_IRQ(kdrvdata->kbus_irq);
+			kdrvdata->kbus_irq_enabled = 0;
+			trace_pxc_kbus(__func__, "turned-off irqs!");
+		}
+	}
+
+	return status;
+}
+
+static struct task_struct *find_dma_task(void)
+{
+	struct task_struct *p, *found = NULL;
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+	struct device_node *dma_node;
+	int irq = 0;
+	char task_name[16];
+
+	dma_node = of_find_node_by_name(NULL, "dma");
+	if (!dma_node) {
+		dma_node = of_find_node_by_name(NULL, "dma-controller");
+		if (!dma_node)
+			return NULL;
+		irq = of_irq_get(dma_node, 1);
+	} else
+		irq = of_irq_get(dma_node, 0);
+	of_node_put(dma_node);
+	if (irq <= 0)
+		return NULL;
+
+	snprintf(task_name, 16, "irq/%d-%s", irq,
+		kdrvdata->kbus_dma_boost_irq_thread);
+
+	read_lock(&tasklist_lock);
+	for_each_process(p) {
+		if (p->flags & PF_KTHREAD) {
+			if ((strcmp(p->comm, task_name) == 0)) {
+				found = p;
+				break;
+			}
+		}
+	}
+	read_unlock(&tasklist_lock);
+
+	return found;
+}
+
+void kbus_boost_dma_task(u8 enable)
+{
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+	struct sched_param boost_param = {
+		.sched_priority = enable ? kdrvdata->kbus_dma_boost_prio :
+					   kdrvdata->kbus_dma_normal_prio
+	};
+
+	if (kdrvdata->dma_task) {
+		if ((enable && !kdrvdata->kbus_dma_boost_en) ||
+		    (!enable && kdrvdata->kbus_dma_boost_en)) {
+			kdrvdata->kbus_dma_boost_en =
+				!kdrvdata->kbus_dma_boost_en;
+			sched_setscheduler(kdrvdata->dma_task, SCHED_FIFO,
+					   &boost_param);
+		}
+	}
+}
+
+static int kbus_open(struct inode *node, struct file *file)
+{
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+
+#if KBUS_TESTING
+	wago_tests_init(&wago_ktest, 1);
+#endif
+	/* get pid of irq/12-DMA here
+	 * and set it in kdrvdata
+	 */
+	if (!kdrvdata->dma_task) {
+		kdrvdata->dma_task = find_dma_task();
+		if (kdrvdata->dma_task)
+			pr_info("dma-task pid is %u.\n",
+				kdrvdata->dma_task->pid);
+		else
+			printk("dma-task not found!\n");
+	}
+
+	return 0;
+}
+
+static int kbus_close(struct inode *node, struct file *file)
+{
+#if KBUS_TESTING
+	wago_tests_deinit();
+#endif
+	return 0;
+}
+
+static void kbus_complete(void *arg)
+{
+	kbus_wago_mpoint(); /* MX */
+	trace_pxc_kbus(__func__, "jump to complete()");
+	complete(arg);
+}
+
+static int kbus_spi_sync(struct spi_device *spi, struct spi_message *msg)
+{
+	DECLARE_COMPLETION_ONSTACK(done);
+	int status;
+
+	msg->complete = kbus_complete;
+	msg->context = &done;
+
+	trace_pxc_kbus(__func__, "jump to spi_async");
+	status = spi_async(spi, msg);
+	if (status == 0) {
+		wait_for_completion(&done);
+		status = msg->status;
+		if (status == 0)
+			status = msg->actual_length;
+	}
+
+	return status;
+}
+
+static int kbus_spi_message(struct spi_ioc_transfer *u_xfers, unsigned n_xfers)
+{
+	struct spi_message msg;
+	struct spi_transfer *k_xfers;
+	struct spi_transfer *k_tmp;
+	struct spi_ioc_transfer *u_tmp;
+	unsigned int n, total;
+	u8 *buf;
+	int status = -EFAULT;
+	u32 bufsiz = KBUS__MAX_BUF_LEN;
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+
+	spi_message_init(&msg);
+	k_xfers = kcalloc(n_xfers, sizeof(*k_tmp), GFP_KERNEL);
+	if (k_xfers == NULL)
+		return -ENOMEM;
+
+	/* Construct spi_message, copying any tx data to bounce buffer.
+	 * We walk the array of user-provided transfers, using each one
+	 * to initialize a kernel version of the same transfer.
+	 */
+	buf = kdrvdata->tx_buf; /* use in this case the buffer for tx and rx */
+	total = 0;
+	for (n = n_xfers, k_tmp = k_xfers, u_tmp = u_xfers; n;
+	     n--, k_tmp++, u_tmp++) {
+		k_tmp->len = u_tmp->len;
+
+		total += k_tmp->len;
+		if (total > bufsiz) {
+			status = -EMSGSIZE;
+			goto done;
+		}
+
+		if (u_tmp->rx_buf) {
+			k_tmp->rx_buf = buf;
+			if (!access_ok((u8 __user *)(uintptr_t)u_tmp->rx_buf,
+				       u_tmp->len))
+				goto done;
+		}
+		if (u_tmp->tx_buf) {
+			k_tmp->tx_buf = buf;
+			if (copy_from_user(
+				    buf,
+				    (const u8 __user *)(uintptr_t)u_tmp->tx_buf,
+				    u_tmp->len))
+				goto done;
+		}
+		buf += k_tmp->len;
+
+		k_tmp->cs_change = !!u_tmp->cs_change;
+		k_tmp->bits_per_word = u_tmp->bits_per_word;
+		k_tmp->delay.value = u_tmp->delay_usecs;
+		k_tmp->speed_hz = u_tmp->speed_hz;
+
+		spi_message_add_tail(k_tmp, &msg);
+	}
+
+	status = kbus_spi_sync(kdrvdata->spi, &msg);
+	if (status < 0)
+		goto done;
+
+	/* copy any rx data out of bounce buffer */
+	buf = kdrvdata->tx_buf;
+	for (n = n_xfers, u_tmp = u_xfers; n; n--, u_tmp++) {
+		if (u_tmp->rx_buf) {
+			if (__copy_to_user((u8 __user *)(uintptr_t)u_tmp->rx_buf,
+					   buf, u_tmp->len)) {
+				status = -EFAULT;
+				goto done;
+			}
+		}
+		buf += u_tmp->len;
+	}
+	status = total;
+
+done:
+	kfree(k_xfers);
+	return status;
+}
+
+static void kbus_dump(char *prefix, char *buf, int len)
+{
+	int i;
+
+	for (i = 0; i < len; i += 32) {
+		pr_info("DATADUMP(%s) copylen %4d buf %p"
+			"[%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x"
+			"-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x"
+			"-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x"
+			"-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x]\n",
+			prefix, (len - i), buf, buf[i + 0], buf[i + 1],
+			buf[i + 2], buf[i + 3], buf[i + 4], buf[i + 5],
+			buf[i + 6], buf[i + 7], buf[i + 8], buf[i + 9],
+			buf[i + 10], buf[i + 11], buf[i + 12], buf[i + 13],
+			buf[i + 14], buf[i + 15], buf[i + 16], buf[i + 17],
+			buf[i + 18], buf[i + 19], buf[i + 20], buf[i + 21],
+			buf[i + 22], buf[i + 23], buf[i + 24], buf[i + 25],
+			buf[i + 26], buf[i + 27], buf[i + 28], buf[i + 29],
+			buf[i + 30], buf[i + 31]);
+	}
+}
+
+static int kbus_data_txrx(struct kbus_data *kdata)
+{
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+	struct spi_message msg;
+	struct spi_transfer spi_t[] = {
+		{
+			.tx_buf = kdrvdata->tx_buf,
+			.len = kdata->byte_len,
+			.bits_per_word = KBUS_DUMMY_BIT_PER_WORD,
+			.speed_hz = KBUS_DUMMY_SPEED,
+		},
+		{
+			.rx_buf = kdrvdata->rx_buf,
+			.len = kdata->byte_len,
+			.bits_per_word = KBUS_DUMMY_BIT_PER_WORD,
+			.speed_hz = KBUS_DUMMY_SPEED,
+		},
+	};
+	int status;
+
+	trace_pxc_kbus(__func__, "enter");
+
+	if (!kdata->byte_len || kdata->byte_len > KBUS__MAX_BUF_LEN)
+		return -EINVAL;
+
+	if (kdata->timeout_ms)
+		kdrvdata->timeout_ms = kdata->timeout_ms;
+	else
+		kdrvdata->timeout_ms = KBUS_IRQ_TIMEOUT;
+
+	/* get the userspace data */
+	if (copy_from_user(kdrvdata->tx_buf, kdata->tx_buf, kdata->byte_len))
+		return -EFAULT;
+
+	if (trace_pxc_buf32_enabled())
+		kbus_dump("KTX", kdrvdata->tx_buf, kdata->byte_len);
+
+	/* clear rx buf */
+	memset(kdrvdata->rx_buf, 0, kdata->byte_len);
+
+	/*
+	 * set some valid dummy data.
+	 * This configuration will not be valid during transfer.
+	 * It is only set by kbus_spi_config().
+	 *
+	 */
+
+	kbus_wago_mpoint(); /* M1 */
+
+	/* create message and add transfers to it */
+	spi_message_init(&msg);
+
+	/* setup dma */
+	if (kdrvdata->use_dma) {
+		trace_pxc_kbus(__func__, "dma transfer enabled");
+		spi_t[0].tx_dma = kdrvdata->tx_buf_dma;
+		spi_t[1].rx_dma = kdrvdata->rx_buf_dma;
+		msg.is_dma_mapped = 1;
+	}
+
+	spi_message_add_tail(&spi_t[0], &msg);
+	spi_message_add_tail(&spi_t[1], &msg);
+
+	trace_pxc_kbusmsg(__func__, &msg, "");
+	status = kbus_spi_sync(kdrvdata->spi, &msg);
+	if (status > 0)
+		if (copy_to_user(kdata->rx_buf, kdrvdata->rx_buf,
+				 kdata->byte_len))
+			return -EFAULT;
+	trace_pxc_kbusmsg(__func__, &msg, "");
+
+	/* tell the user about the error, if occured */
+	if (status < 0 && kdrvdata->kbus_err) {
+		if (__put_user(kdrvdata->kbus_err, kdata->err))
+			return -EFAULT;
+	}
+
+	kbus_wago_mpoint(); /* M5 */
+
+	if (trace_pxc_buf32_enabled())
+		kbus_dump("KRX", kdrvdata->rx_buf, kdata->byte_len);
+
+	trace_pxc_kbus(__func__, "leave");
+
+	return status;
+}
+
+static int kbus_binary_txrx(struct kbus_data *kbinary)
+{
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+	struct spi_message msg;
+	struct spi_transfer spi_t[] = {
+		{
+			.len = kbinary->byte_len,
+			.bits_per_word = kdrvdata->spi->bits_per_word,
+			.speed_hz = kdrvdata->spi->max_speed_hz,
+		},
+	};
+	int status;
+
+	trace_pxc_kbus(__func__, "enter");
+
+	if (!kbinary->byte_len || kbinary->byte_len > KBUS__MAX_BUF_LEN)
+		return -EINVAL;
+
+	if (!kbinary->tx_buf && !kbinary->rx_buf)
+		return -EINVAL;
+
+	if (kbinary->tx_buf) {
+		spi_t[0].tx_buf = kdrvdata->tx_buf;
+		/* get the userspace data */
+		if (copy_from_user(kdrvdata->tx_buf, kbinary->tx_buf,
+				   kbinary->byte_len))
+			return -EFAULT;
+	}
+
+	if (kbinary->rx_buf) {
+		spi_t[0].rx_buf = kdrvdata->rx_buf;
+		/* clear rx buf */
+		memset(kdrvdata->rx_buf, 0, kbinary->byte_len);
+	}
+
+	/* create message and add transfer to it */
+	spi_message_init(&msg);
+	spi_message_add_tail(&spi_t[0], &msg);
+
+	trace_pxc_kbusmsg(__func__, &msg, "");
+	status = kbus_spi_sync(kdrvdata->spi, &msg);
+	if (status && kbinary->rx_buf)
+		if (copy_to_user(kbinary->rx_buf, kdrvdata->rx_buf,
+				 kbinary->byte_len))
+			return -EFAULT;
+	trace_pxc_kbusmsg(__func__, &msg, "");
+
+	trace_pxc_kbus(__func__, "leave");
+	return status;
+}
+
+static int kbus_cmd_txrx(struct kbus_cmd *kcmd)
+{
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+	struct spi_message msg;
+	/*
+	 * set some valid dummy data for bits_per_word and speed_hz.
+	 * This configuration will not be valid during transfer.
+	 * It is only set by kbus_spi_config(). */
+	struct spi_transfer spi_t[] = {
+		{
+			/* TX */
+			.tx_buf = kdrvdata->tx_buf,
+			.len = kcmd->byte_len_tx,
+			.bits_per_word = KBUS_DUMMY_BIT_PER_WORD,
+			.speed_hz = KBUS_DUMMY_SPEED,
+		},
+		{
+			/* RX0 */
+			.rx_buf = kdrvdata->rx_buf,
+			.len = 6,
+			.bits_per_word = KBUS_DUMMY_BIT_PER_WORD,
+			.speed_hz = KBUS_DUMMY_SPEED,
+		},
+		{
+			/* RX1 */
+			.rx_buf = kdrvdata->rx_buf + 6,
+			.len = kcmd->byte_len_rx -
+			       6, /* set remaining max bytes.
+							  * RX0 will update it later. */
+			.bits_per_word = KBUS_DUMMY_BIT_PER_WORD,
+			.speed_hz = KBUS_DUMMY_SPEED,
+		},
+	};
+	int status;
+
+	trace_pxc_kbus(__func__, "enter");
+
+	if ((!kcmd->byte_len_tx && !kcmd->byte_len_rx) ||
+	    kcmd->byte_len_tx > KBUS__MAX_BUF_LEN ||
+	    kcmd->byte_len_rx > KBUS__MAX_BUF_LEN)
+		return -EINVAL;
+
+	if (kcmd->timeout_ms)
+		kdrvdata->timeout_ms = kcmd->timeout_ms;
+	else
+		kdrvdata->timeout_ms = KBUS_IRQ_TIMEOUT;
+
+	/* get the userspace data */
+	if (copy_from_user(kdrvdata->tx_buf, kcmd->tx_buf, kcmd->byte_len_tx))
+		return -EFAULT;
+
+	/* clear rx buf */
+	memset(kdrvdata->rx_buf, 0, kcmd->byte_len_rx);
+
+	kbus_wago_mpoint(); /* M1 */
+	trace_pxc_kbus(__func__, "M1");
+
+	/* create message and add transfers to it */
+	spi_message_init(&msg);
+
+	/* setup dma */
+	if (kdrvdata->use_dma) {
+		trace_pxc_kbus(__func__, "dma transfer enabled");
+		spi_t[0].tx_dma = kdrvdata->tx_buf_dma;
+		spi_t[1].rx_dma = kdrvdata->rx_buf_dma;
+		spi_t[2].rx_dma = kdrvdata->rx_buf_dma + 6;
+		msg.is_dma_mapped = 1;
+	}
+
+	spi_message_add_tail(&spi_t[0], &msg);
+	spi_message_add_tail(&spi_t[1], &msg);
+	spi_message_add_tail(&spi_t[2], &msg);
+
+	/* do the actual spi msg transfer */
+	trace_pxc_kbusmsg(__func__, &msg, "");
+	status = kbus_spi_sync(kdrvdata->spi, &msg);
+	if (status)
+		if (copy_to_user(kcmd->rx_buf, kdrvdata->rx_buf,
+				 spi_t[2].len + 6))
+			return -EFAULT;
+	trace_pxc_kbusmsg(__func__, &msg, "");
+
+	/* tell the user about the error, if occured */
+	if (status < 0 && kdrvdata->kbus_err) {
+		if (__put_user(kdrvdata->kbus_err, kcmd->err))
+			return -EFAULT;
+	}
+
+	kbus_wago_mpoint(); /* M5 */
+	trace_pxc_kbus(__func__, "leave");
+
+	return status;
+}
+
+static int kbus_spi_config(struct kbus_spi_config *kconfig)
+{
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+	int retval = 0;
+	u8 save = 0;
+
+	if (!kconfig->bits_per_word && !kconfig->mode)
+		return -EINVAL;
+
+	/* update values */
+	if (kconfig->bits_per_word) {
+		if (kconfig->bits_per_word != 16)
+			trace_pxc_kbus(__func__,
+				       "WARNING: bits_per_word != 16Bit.");
+		kdrvdata->spi->bits_per_word = kconfig->bits_per_word;
+	}
+	if (kconfig->max_speed_hz)
+		kdrvdata->spi->max_speed_hz = kconfig->max_speed_hz;
+	if (kconfig->mode) {
+		if (kconfig->mode & ~SPI_MODE_MASK)
+			return -EINVAL;
+		save = kdrvdata->spi->mode;
+		kconfig->mode |= kdrvdata->spi->mode & ~SPI_MODE_MASK;
+		kdrvdata->spi->mode = (u8)kconfig->mode;
+	}
+
+	/* do the actual spi setup */
+	retval = spi_setup(kdrvdata->spi);
+	if (retval < 0) { /* restore mode if changed */
+		if (save)
+			kdrvdata->spi->mode = save;
+	} else
+		kbus_dbg("%s: spi mode is updated: %02x\n", __func__,
+			 kconfig->mode);
+
+	return retval;
+}
+
+static long kbus_ioctl(struct file *file, uint cmd, ulong arg)
+{
+	long ret = 0;
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+	struct spi_device *spi = kdrvdata->spi;
+
+	switch (cmd) {
+	case KBUS_IOC_CMD: /* FIXME */
+	{
+		struct kbus_cmd kcmd;
+		struct kbus_cmd __user *kcmd_user;
+
+		trace_pxc_kbus(__func__,
+			       "KCMD: Enter: Set kbus_irq_state to 1.");
+		kbus_wago_mpoint(); /* M0 */
+
+		spi_set_drvdata(spi, kdrvdata);
+		kdrvdata->kbus_irq_state =
+			1; /* will be set to 0 by kbus_isr() */
+
+		gpiod_set_value(kdrvdata->gpio_cmdsel, 0);
+		kdrvdata->cmdsel = 1;
+		/* Indicate Transfer Start */
+		gpiod_set_value(kdrvdata->gpio_nirq, 0);
+
+		kcmd_user = (struct kbus_cmd __user *)arg;
+		if (copy_from_user(&kcmd, kcmd_user, sizeof(kcmd))) {
+			/* release the irq pin */
+			gpiod_set_value(kdrvdata->gpio_nirq, 1);
+			return -EFAULT;
+		}
+
+		ret = kbus_cmd_txrx(&kcmd);
+		if (ret < 0) {
+			/* release the irq pin */
+			gpiod_set_value(kdrvdata->gpio_nirq, 1);
+			trace_pxc_kbus(
+				__func__,
+				"KCMD: kbus_cmd_txrx() returned with error!");
+		}
+
+		/* FIXME: JUST FOR TESTING */
+		gpiod_set_value(kdrvdata->gpio_cmdsel, 1);
+
+		kbus_wago_mpoint(); /* M6 */
+		trace_pxc_kbus(__func__, "KCMD: Leave");
+	} break;
+	case KBUS_IOC_DATA: {
+		struct kbus_data kdata;
+		struct kbus_data __user *kdata_user;
+
+		trace_pxc_kbus(__func__,
+			       "KDATA: Enter: Set kbus_irq_state to 1.");
+		kbus_wago_mpoint(); /* M0 */
+
+		spi_set_drvdata(spi, kdrvdata);
+		kdrvdata->kbus_irq_state =
+			1; /* will be set to 0 by kbus_isr() */
+
+		gpiod_set_value(kdrvdata->gpio_cmdsel, 1);
+		kdrvdata->cmdsel = 0;
+		/* Indicate Transfer Start */
+		gpiod_set_value(kdrvdata->gpio_nirq, 0);
+
+		kdata_user = (struct kbus_data __user *)arg;
+
+		if (copy_from_user(&kdata, kdata_user, sizeof(kdata))) {
+			/* release the irq pin */
+			gpiod_set_value(kdrvdata->gpio_nirq, 1);
+			return -EFAULT;
+		}
+
+		ret = kbus_data_txrx(&kdata);
+		if (ret < 0) {
+			/* release the irq pin */
+			gpiod_set_value(kdrvdata->gpio_nirq, 1);
+			trace_pxc_kbus(
+				__func__,
+				"KDATA: kbus_data_txrx() returned with error!");
+		}
+
+		/* FIXME: JUST FOR TESTING */
+		gpiod_set_value(kdrvdata->gpio_cmdsel, 0);
+
+		kbus_wago_mpoint(); /* M6 */
+		trace_pxc_kbus(__func__, "KDATA: Leave");
+	} break;
+	case KBUS_IOC_CONFIG: {
+		struct kbus_spi_config kconfig;
+		struct kbus_spi_config __user *kconfig_user;
+
+		trace_pxc_kbus(__func__, "KCONFIG: Enter");
+
+		spi_set_drvdata(spi, kdrvdata);
+		kconfig_user = (struct kbus_spi_config __user *)arg;
+
+		if (copy_from_user(&kconfig, kconfig_user, sizeof(kconfig)))
+			return -EFAULT;
+
+		ret = kbus_spi_config(&kconfig);
+		if (ret < 0)
+			trace_pxc_kbus(
+				__func__,
+				"KCONFIG: kbus_spi_config() returned with error!");
+
+		trace_pxc_kbus(__func__, "KCONFIG: Leave");
+	} break;
+	case KBUS_IOC_BINARY: {
+		struct kbus_data kbinary;
+		struct kbus_data __user *kbinary_user;
+
+		trace_pxc_kbus(__func__, "KBINARY: Enter.");
+
+		spi_set_drvdata(
+			spi,
+			NULL); /* don't use kbus algorithm in spi-omap2-mcspi.c */
+		kbinary_user = (struct kbus_data __user *)arg;
+		if (copy_from_user(&kbinary, kbinary_user, sizeof(kbinary)))
+			return -EFAULT;
+
+		ret = kbus_binary_txrx(&kbinary);
+		if (ret < 0)
+			trace_pxc_kbus(
+				__func__,
+				"KBINARY: kbus_binary_txrx() returned with error!");
+
+		trace_pxc_kbus(__func__, "KBINARY: Leave");
+	} break;
+	default: /* FIXME: make it possible to use the spidev-way of communication. Not yet tested! */
+	{
+		u32 tmp;
+		unsigned int n_ioc;
+		struct spi_ioc_transfer *ioc;
+
+		spi_set_drvdata(
+			spi,
+			NULL); /* don't use kbus algorithm in spi-omap2-mcspi.c */
+		/* segmented and/or full-duplex I/O request */
+		if (_IOC_NR(cmd) != _IOC_NR(SPI_IOC_MESSAGE(0)) ||
+		    _IOC_DIR(cmd) != _IOC_WRITE) {
+			ret = -ENOTTY;
+			break;
+		}
+
+		tmp = _IOC_SIZE(cmd);
+		if ((tmp % sizeof(struct spi_ioc_transfer)) != 0) {
+			ret = -EINVAL;
+			break;
+		}
+		n_ioc = tmp / sizeof(struct spi_ioc_transfer);
+		if (n_ioc == 0)
+			break;
+
+		/* copy into scratch area */
+		ioc = kmalloc(tmp, GFP_KERNEL);
+		if (!ioc) {
+			ret = -ENOMEM;
+			break;
+		}
+		if (__copy_from_user(ioc, (void __user *)arg, tmp)) {
+			kfree(ioc);
+			ret = -EFAULT;
+			break;
+		}
+
+		/* translate to spi_message, execute */
+		ret = kbus_spi_message(ioc, n_ioc);
+		kfree(ioc);
+		break;
+	}
+	}
+
+	return ret;
+}
+
+static struct file_operations kbus_fops = {
+	.owner = THIS_MODULE,
+	.unlocked_ioctl = kbus_ioctl,
+	.write = kbus_write,
+	.open = kbus_open,
+	.release = kbus_close,
+};
+
+static ssize_t kbus_sysfs_prio_show(struct device *dev,
+				    struct device_attribute *attr, char *buf);
+static ssize_t kbus_sysfs_prio_set(struct device *dev,
+				   struct device_attribute *attr,
+				   const char *buf, size_t count);
+static ssize_t kbus_sysfs_trig_reset(struct device *dev,
+				     struct device_attribute *attr,
+				     const char *buf, size_t count);
+
+DEVICE_ATTR(kbus_dma_boost_prio, 0600, kbus_sysfs_prio_show,
+	    kbus_sysfs_prio_set);
+
+DEVICE_ATTR(kbus_dma_normal_prio, 0600, kbus_sysfs_prio_show,
+	    kbus_sysfs_prio_set);
+
+DEVICE_ATTR(kbus_trig_reset, 0200, NULL, kbus_sysfs_trig_reset);
+
+static ssize_t kbus_sysfs_prio_show(struct device *dev,
+				    struct device_attribute *attr, char *buf)
+{
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+	u8 prio = 0;
+
+	if (attr == &dev_attr_kbus_dma_boost_prio)
+		prio = kdrvdata->kbus_dma_boost_prio; /* boost */
+	else if (attr == &dev_attr_kbus_dma_normal_prio)
+		prio = kdrvdata->kbus_dma_normal_prio; /* normal */
+
+	return sprintf(buf, "%d\n", (int)prio);
+}
+
+static ssize_t kbus_sysfs_prio_set(struct device *dev,
+				   struct device_attribute *attr,
+				   const char *buf, size_t count)
+{
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+	u32 tmp = simple_strtoul(buf, NULL, 10);
+
+	/* check if value is valid */
+	if (tmp < 1 || tmp > 99)
+		return -EINVAL;
+
+	if (attr == &dev_attr_kbus_dma_boost_prio) {
+		pr_info("dma-boost prio changed from %d to %d.\n",
+			(int)kdrvdata->kbus_dma_boost_prio, (int)tmp);
+		kdrvdata->kbus_dma_boost_prio = (u8)tmp; /* boost */
+	} else if (attr == &dev_attr_kbus_dma_normal_prio) {
+		pr_info("dma-normal prio changed from %d to %d.\n",
+			(int)kdrvdata->kbus_dma_normal_prio, (int)tmp);
+		kdrvdata->kbus_dma_normal_prio = (u8)tmp; /* normal */
+	}
+
+	return count;
+}
+
+static int kbus_trig_reset(struct kbus_drv_data *kdrvdata)
+{
+	/* check if value is valid */
+	if (kdrvdata == NULL)
+		return -EINVAL;
+
+	/* reset kbus slave cpu (Infineon XE164) */
+	gpiod_set_value_cansleep(kdrvdata->gpio_nrst, 1);
+	udelay(100);
+	gpiod_set_value_cansleep(kdrvdata->gpio_nrst, 0);
+
+	pr_info("PFCxxx-KBUS: Kbus Slave CPU Reset.\n");
+
+	return 0;
+}
+
+static ssize_t kbus_sysfs_trig_reset(struct device *dev,
+				     struct device_attribute *attr,
+				     const char *buf, size_t count)
+{
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+	u32 val = simple_strtoul(buf, NULL, 10);
+
+	/* check if value is valid */
+	if (val != 1)
+		return -EINVAL;
+
+	kbus_trig_reset(kdrvdata);
+
+	return count;
+}
+
+static ssize_t kbus_sysfs_boost_en_show(struct device *dev,
+					struct device_attribute *attr,
+					char *buf)
+{
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+
+	return sprintf(buf, "%d\n", (int)kdrvdata->kbus_dma_boost_en);
+}
+
+static ssize_t kbus_sysfs_boost_en_set(struct device *dev,
+				       struct device_attribute *attr,
+				       const char *buf, size_t count)
+{
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+	u32 tmp = simple_strtoul(buf, NULL, 10);
+
+	/* check if valid */
+	if (tmp > 1)
+		return -EINVAL;
+
+	/* get pid of irq/12-DMA here
+	 * and set it in kdrvdata
+	 */
+	if (!kdrvdata->dma_task) {
+		kdrvdata->dma_task = find_dma_task();
+		if (kdrvdata->dma_task)
+			pr_info("dma-task pid is %u.\n",
+				kdrvdata->dma_task->pid);
+		else
+			pr_info("dma-task not found!\n");
+	}
+
+	kbus_boost_dma_task((u8)tmp);
+	pr_info("dma-boost %s.\n", tmp ? "enabled" : "disabled");
+
+	return count;
+}
+DEVICE_ATTR(kbus_dma_boost_en, 0600, kbus_sysfs_boost_en_show,
+	    kbus_sysfs_boost_en_set);
+
+static ssize_t kbus_sysfs_tty_device_name_show(struct device *dev,
+					       struct device_attribute *attr,
+					       char *buf)
+{
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+
+	return sprintf(buf, "%s\n", kdrvdata->kbus_tty_device_name);
+}
+DEVICE_ATTR(kbus_tty_device_name, 0444, kbus_sysfs_tty_device_name_show, NULL);
+
+static struct kbus_drv_data *kbus_probe_dt(struct spi_device *spi)
+{
+	struct kbus_drv_data *kdrvdata;
+	struct device_node *np = spi->dev.of_node;
+	u32 val;
+	int ret;
+
+	pr_debug("%s: probing device tree node (%s)\n", __func__, np->name);
+
+	/* alloc kernel space buffers */
+	kdrvdata = devm_kmalloc(&spi->dev, sizeof(struct kbus_drv_data),
+				GFP_KERNEL);
+
+	if (!kdrvdata)
+		return ERR_PTR(-ENOMEM);
+
+	kdrvdata->dma_task = NULL;
+
+	kdrvdata->use_dma = of_property_read_bool(np, "kbus,use-dma-always");
+	kdrvdata->kbus_dma_boost_en =
+		of_property_read_bool(np, "kbus,dma-boost");
+	if (kdrvdata->kbus_dma_boost_en) {
+		ret = of_property_read_u32(np, "kbus,dma-boost-prio", &val);
+		if (ret < 0) {
+			pr_err("%s: dt: dma-boost-prio must be set\n",
+			       __func__);
+			goto out_err;
+		}
+		kdrvdata->kbus_dma_boost_prio = (u8)val;
+		ret = of_property_read_u32(np, "kbus,dma-default-prio", &val);
+		if (ret < 0) {
+			pr_err("%s: dt: dma-default-prio must be set\n",
+			       __func__);
+			goto out_err;
+		}
+		kdrvdata->kbus_dma_normal_prio = (u8)val;
+	}
+
+	ret = of_property_read_string(np, "kbus,tty-device",
+				      &kdrvdata->kbus_tty_device_name);
+	if (ret < 0) {
+		pr_err("%s: dt: kbus tty-device must be set (e.g. ttyO4)\n",
+		       __func__);
+		goto out_err;
+	}
+
+	ret = of_property_read_string(np, "kbus,dma-boost-irq-thread",
+				      &kdrvdata->kbus_dma_boost_irq_thread);
+	if (ret < 0) {
+		pr_err("%s: dt: kbus dma-irq-thread must be set (e.g. irq/19-edma)\n",
+		       __func__);
+		goto out_err;
+	}
+
+	/* get gpios from device tree */
+	kdrvdata->gpio_nrst =
+		devm_gpiod_get(&spi->dev, "kbus,nrst", GPIOD_OUT_HIGH);
+	if (IS_ERR(kdrvdata->gpio_nrst)) {
+		ret = PTR_ERR(kdrvdata->gpio_nrst);
+		goto out_err;
+	}
+
+	kdrvdata->gpio_nsync =
+		devm_gpiod_get(&spi->dev, "kbus,nsync", GPIOD_IN);
+	if (IS_ERR(kdrvdata->gpio_nsync)) {
+		ret = PTR_ERR(kdrvdata->gpio_nsync);
+		goto out_gpio_nrst;
+	}
+
+	kdrvdata->gpio_cmdsel =
+		devm_gpiod_get(&spi->dev, "kbus,cmdsel", GPIOD_OUT_HIGH);
+	if (IS_ERR(kdrvdata->gpio_cmdsel)) {
+		ret = PTR_ERR(kdrvdata->gpio_cmdsel);
+		goto out_gpio_nsync;
+	}
+
+	kdrvdata->gpio_nirq =
+		devm_gpiod_get(&spi->dev, "kbus,nirq", GPIOD_OUT_HIGH);
+	if (IS_ERR(kdrvdata->gpio_nirq)) {
+		ret = PTR_ERR(kdrvdata->gpio_nirq);
+		goto out_gpio_cmdsel;
+	}
+
+	kdrvdata->gpio_nerr =
+		devm_gpiod_get(&spi->dev, "kbus,nerr", GPIOD_IN);
+	if (IS_ERR(kdrvdata->gpio_nerr)) {
+		ret = PTR_ERR(kdrvdata->gpio_nerr);
+		goto out_gpio_nirq;
+	}
+
+	/* reset kbus slave cpu (Infineon XE164) */
+	if (of_property_read_bool(np, "kbus,reset-on-boot"))
+		kbus_trig_reset(kdrvdata);
+
+	/* get irq pin */
+	kdrvdata->gpio_nrdy =
+		devm_gpiod_get(&spi->dev, "kbus,nrdy", GPIOD_IN);
+	ret = IS_ERR(kdrvdata->gpio_nrdy) ? PTR_ERR(kdrvdata->gpio_nrdy) : 0;
+	if (ret == -EPROBE_DEFER)
+		goto out_gpio_nerr;
+	else if (ret < 0) {
+		kdrvdata->kbus_irq = irq_of_parse_and_map(np, 0);
+		if (!kdrvdata->kbus_irq) {
+			pr_err("KBUS Probe: failed to get irq pin!\n");
+			goto out_gpio_nerr;
+		}
+	}
+
+	kdrvdata->kbus_irq = gpiod_to_irq(kdrvdata->gpio_nrdy);
+	kdrvdata->spi = spi;
+
+	return kdrvdata;
+
+out_gpio_nerr:
+	devm_gpiod_put(&spi->dev, kdrvdata->gpio_nerr);
+out_gpio_nirq:
+	devm_gpiod_put(&spi->dev, kdrvdata->gpio_nirq);
+out_gpio_cmdsel:
+	devm_gpiod_put(&spi->dev, kdrvdata->gpio_cmdsel);
+out_gpio_nsync:
+	devm_gpiod_put(&spi->dev, kdrvdata->gpio_nsync);
+out_gpio_nrst:
+	devm_gpiod_put(&spi->dev, kdrvdata->gpio_nrst);
+out_err:
+	if (ret != -EPROBE_DEFER)
+		pr_err("%s: failed to probe kbus oftree (%d)\n", __func__, ret);
+	devm_kfree(&spi->dev, kdrvdata);
+	return ERR_PTR(ret);
+}
+
+static int kbus_probe(struct spi_device *spi)
+{
+	int ret = 0;
+	u8 save = 0;
+	struct kbus_drv_data *kdrvdata;
+
+	if (!spi->dev.of_node) {
+		pr_err("Wago KBUS Driver: No DT node found!\n");
+		return -EFAULT;
+	}
+
+	kdrvdata = kbus_probe_dt(spi);
+	if (IS_ERR(kdrvdata))
+		return PTR_ERR(kdrvdata);
+
+	init_waitqueue_head(&kdrvdata->kbus_irq_wq);
+
+	ret = request_irq(kdrvdata->kbus_irq, kbus_isr,
+			  IRQF_SHARED | IRQ_TYPE_EDGE_BOTH |
+				  IRQF_THREAD_TBL_LOOKUP,
+			  "kbus", &kbus_dev);
+	if (ret) {
+		pr_err("%s: could not request irq %d: ret=%d\n", __func__,
+		       kdrvdata->kbus_irq, ret);
+		goto out3;
+	}
+
+	/* disable kbus irq per default */
+	KBUS_DISABLE_IRQ(kdrvdata->kbus_irq);
+	kdrvdata->kbus_irq_enabled = 0;
+
+	/* allocate memory */
+	if (kdrvdata->use_dma) {
+		spi->dev.coherent_dma_mask = ~0; /* why that? */
+
+		/*
+		 * Minimum coherent DMA allocation is PAGE_SIZE, so allocate
+		 * that much and share it between Tx and Rx DMA buffers.
+		 */
+		kdrvdata->tx_buf = dma_alloc_coherent(
+			&spi->dev, PAGE_SIZE, &kdrvdata->tx_buf_dma, GFP_DMA);
+
+		if (kdrvdata->tx_buf) {
+			kdrvdata->rx_buf =
+				(u8 *)(kdrvdata->tx_buf + (PAGE_SIZE / 2));
+			/* set bus address based on allocated space */
+			kdrvdata->rx_buf_dma = (dma_addr_t)(
+				kdrvdata->tx_buf_dma + (PAGE_SIZE / 2));
+			kbus_dbg("%s: allocated dma space (%lu).", __func__,
+				 PAGE_SIZE);
+		} else {
+			/* Fall back to non-DMA */
+			kdrvdata->use_dma = 0;
+			kbus_dbg("%s: failed to allocate dma space (%lu).",
+				 __func__, PAGE_SIZE);
+		}
+	}
+
+	if (!kdrvdata->use_dma) {
+		kdrvdata->tx_buf = kmalloc(KBUS__MAX_BUF_LEN, GFP_KERNEL);
+		kdrvdata->rx_buf = kmalloc(KBUS__MAX_BUF_LEN, GFP_KERNEL);
+	}
+
+	/* create device node in /dev */
+	if (!wsysinit_sysfs_class) {
+		pr_err("PFCXXX: Wago SYSFS class not defined!\n");
+		ret = -EFAULT;
+		goto out1;
+	}
+
+	kbus_device = device_create(wsysinit_sysfs_class, NULL, kbus_dev, NULL,
+				    "kbus%d", MINOR(kbus_dev));
+	dev_set_drvdata(kbus_device, kdrvdata);
+	spi_set_drvdata(spi, kdrvdata);
+
+	/* create sysfs entries for dma boost support */
+	device_create_file(wsysinit_sysfs_device,
+			   &dev_attr_kbus_dma_normal_prio);
+	device_create_file(wsysinit_sysfs_device,
+			   &dev_attr_kbus_dma_boost_prio);
+	device_create_file(wsysinit_sysfs_device, &dev_attr_kbus_dma_boost_en);
+	device_create_file(wsysinit_sysfs_device, &dev_attr_kbus_trig_reset);
+
+	/* create sysfs entrie for tty device-name */
+	device_create_file(wsysinit_sysfs_device,
+			   &dev_attr_kbus_tty_device_name);
+
+	/* do the initial spi setup - it can be updated through kbus_spi_config() */
+	kdrvdata->spi->bits_per_word = 16;
+	kdrvdata->spi->max_speed_hz = KBUS__DEFAULT_SPEED;
+	save = kdrvdata->spi->mode;
+	kdrvdata->spi->mode &= (u8)~SPI_MODE_MASK;
+	kdrvdata->spi->mode |= SPI_CPHA;
+	ret = spi_setup(kdrvdata->spi);
+	if (ret < 0)
+		kdrvdata->spi->mode = save;
+	else
+		pr_info("%s: spi mode set to: %02x\n", __func__,
+			kdrvdata->spi->mode);
+
+	pr_info("probe (%d)\n", ret);
+
+	return ret;
+
+out1:
+	/* clean up */
+	if (kdrvdata->use_dma) {
+		dma_free_coherent(&spi->dev, PAGE_SIZE, kdrvdata->tx_buf,
+				  kdrvdata->tx_buf_dma);
+	} else {
+		kfree(kdrvdata->rx_buf);
+		kfree(kdrvdata->tx_buf);
+	}
+
+out3:
+	kfree(kdrvdata);
+
+	return ret;
+}
+
+static int kbus_remove(struct spi_device *spi)
+{
+	struct kbus_drv_data *kdrvdata = dev_get_drvdata(kbus_device);
+
+	device_destroy(wsysinit_sysfs_class, kbus_dev);
+	free_irq(kdrvdata->kbus_irq, &kbus_dev);
+
+	devm_gpiod_put(&spi->dev, kdrvdata->gpio_cmdsel);
+	devm_gpiod_put(&spi->dev, kdrvdata->gpio_nerr);
+	devm_gpiod_put(&spi->dev, kdrvdata->gpio_nirq);
+	devm_gpiod_put(&spi->dev, kdrvdata->gpio_nrdy);
+	devm_gpiod_put(&spi->dev, kdrvdata->gpio_nrst);
+	devm_gpiod_put(&spi->dev, kdrvdata->gpio_nsync);
+
+	if (kdrvdata->use_dma) {
+		dma_free_coherent(&spi->dev, PAGE_SIZE, kdrvdata->tx_buf,
+				  kdrvdata->tx_buf_dma);
+	} else {
+		kfree(kdrvdata->rx_buf);
+		kfree(kdrvdata->tx_buf);
+	}
+
+	dev_set_drvdata(kbus_device, NULL);
+	spi_set_drvdata(spi, NULL);
+
+	return 0;
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id kbus_spi_dt_ids[] = {
+	{ .compatible = "wago,spi-kbus" },
+	{}
+};
+MODULE_DEVICE_TABLE(of, kbus_spi_dt_ids);
+#endif
+
+static const struct spi_device_id kbus_spi_device_id = {
+	.name = "spi-kbus",
+};
+
+struct spi_driver kbus_driver = {
+	.id_table = &kbus_spi_device_id,
+	.driver = {
+		.name	= "kbus-cpu",
+		.owner	= THIS_MODULE,
+		.of_match_table = of_match_ptr(kbus_spi_dt_ids),
+	},
+	.probe		= kbus_probe,
+	.remove		= kbus_remove,
+};
+
+static int __init kbus_init(void)
+{
+	int ret;
+
+	kbus_dbg("%s ...\n", __func__);
+
+	kbus_dev = MKDEV(KBUS_DRIVER_MAJOR, 0);
+	if ((ret = register_chrdev_region(kbus_dev, 1, "kbus")) < 0) {
+		pr_err("%s: register_chrdev_region(): ret=%d\n", __func__, ret);
+		return ret;
+	}
+
+	cdev_init(&kbus_cdev, &kbus_fops);
+	if ((ret = cdev_add(&kbus_cdev, kbus_dev, 1)) < 0) {
+		pr_err("%s: cdev_add(): ret=%d\n", __func__, ret);
+		unregister_chrdev_region(kbus_dev, 1);
+		return ret;
+	}
+
+	return spi_register_driver(&kbus_driver);
+}
+
+static void __exit kbus_exit(void)
+{
+	spi_unregister_driver(&kbus_driver);
+	cdev_del(&kbus_cdev);
+	unregister_chrdev_region(kbus_dev, 1);
+}
+
+module_init(kbus_init);
+module_exit(kbus_exit);
+
+MODULE_DESCRIPTION("WAGO KBUS SPI Driver");
+MODULE_AUTHOR("Heinrich Toews <heinrich.toews@wago.com>");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/spi/spi-omap2-mcspi.c b/drivers/spi/spi-omap2-mcspi.c
index 60c9cdf1c94b..a15f7405a6a7 100644
--- a/drivers/spi/spi-omap2-mcspi.c
+++ b/drivers/spi/spi-omap2-mcspi.c
@@ -29,6 +29,20 @@
 
 #include <linux/platform_data/spi-omap2-mcspi.h>
 
+#include <linux/errno.h>
+
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+#include <linux/sched.h>
+#endif
+
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+#include <linux/spi/kbus.h>
+#include <misc/wago-tests.h>
+#define PXC_SPI_KBUS_TRACER
+#include <trace/events/pxc.h>
+static int kbusdelay = 0;	/* KBUS Inter-Frame-Delay in nanoseconds */
+#endif
+
 #define OMAP2_MCSPI_MAX_FREQ		48000000
 #define OMAP2_MCSPI_MAX_DIVIDER		4096
 #define OMAP2_MCSPI_MAX_FIFODEPTH	64
@@ -289,6 +303,25 @@ static void omap2_mcspi_set_mode(struct spi_master *master)
 	ctx->modulctrl = l;
 }
 
+#ifdef CONFIG_SPI_KBUS_OMAP_SET_SPIDAT_DIR
+static void omap2_mcspi_set_spidat_direction(struct spi_master *master)
+{
+	u32 l;
+
+#define OMAP2_MCSPI_SYST_SPIDATDIR0_INPUT_EN      BIT(8)
+#define OMAP2_MCSPI_SYST_SPIDATDIR1_INPUT_EN      BIT(9)
+	l = mcspi_read_reg(master, OMAP2_MCSPI_SYST);
+	pr_info("%s: read-OMAP2_MCSPI_SYST: 0x%x\n", __func__, l);
+	l &= ~(OMAP2_MCSPI_SYST_SPIDATDIR0_INPUT_EN | OMAP2_MCSPI_SYST_SPIDATDIR1_INPUT_EN);
+	l |= OMAP2_MCSPI_SYST_SPIDATDIR0_INPUT_EN;
+	pr_info("%s: write-OMAP2_MCSPI_SYST: 0x%x\n", __func__, l);
+	mcspi_write_reg(master, OMAP2_MCSPI_SYST, l);
+
+	l = mcspi_read_reg(master, OMAP2_MCSPI_SYST);
+	pr_info("%s: (update) read-OMAP2_MCSPI_SYST: 0x%x\n", __func__, l);
+}
+#endif
+
 static void omap2_mcspi_set_fifo(const struct spi_device *spi,
 				struct spi_transfer *t, int enable)
 {
@@ -385,6 +418,11 @@ static void omap2_mcspi_rx_callback(void *data)
 	/* We must disable the DMA RX request */
 	omap2_mcspi_set_dma_req(spi, 1, 0);
 
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+	if (spi->dev.driver == &kbus_driver.driver)
+		trace_pxc_kbus(__func__, "DMA: RX completed!");
+#endif
+
 	complete(&mcspi_dma->dma_rx_completion);
 }
 
@@ -397,6 +435,11 @@ static void omap2_mcspi_tx_callback(void *data)
 	/* We must disable the DMA TX request */
 	omap2_mcspi_set_dma_req(spi, 0, 0);
 
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+	if (spi->dev.driver == &kbus_driver.driver)
+		trace_pxc_kbus(__func__, "DMA: TX completed!");
+#endif
+
 	complete(&mcspi_dma->dma_tx_completion);
 }
 
@@ -521,6 +564,11 @@ omap2_mcspi_rx_dma(struct spi_device *spi, struct spi_transfer *xfer,
 		return 0;
 	}
 
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+	if (spi->dev.driver == &kbus_driver.driver)
+		if (xfer->rx_buf && ((char *) xfer->rx_buf)[96-1] == 0x66)
+			trace_pxc_kbus(__func__, "DMA: RX Data MATCH (0x66)");
+#endif
 	for (x = 0; x < nb_sizes; x++)
 		kfree(sg_out[x]);
 
@@ -591,6 +639,12 @@ omap2_mcspi_txrx_dma(struct spi_device *spi, struct spi_transfer *xfer)
 	void __iomem            *irqstat_reg;
 	int			wait_res;
 
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+	trace_pxc_kbus(__func__, "enter");
+
+	kbus_boost_dma_task(1);
+#endif
+
 	mcspi = spi_master_get_devdata(spi->master);
 	mcspi_dma = &mcspi->dma_channels[spi->chip_select];
 
@@ -681,6 +735,11 @@ omap2_mcspi_txrx_dma(struct spi_device *spi, struct spi_transfer *xfer)
 				dev_err(&spi->dev, "EOT timed out\n");
 		}
 	}
+
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+	trace_pxc_kbus(__func__, "leave");
+#endif
+
 	return count;
 }
 
@@ -695,11 +754,20 @@ omap2_mcspi_txrx_pio(struct spi_device *spi, struct spi_transfer *xfer)
 	void __iomem		*rx_reg;
 	void __iomem		*chstat_reg;
 	int			word_len;
+	struct omap2_mcspi_device_config *cd;
 
+	cd = spi->controller_data;
 	count = xfer->len;
 	c = count;
 	word_len = cs->word_len;
 
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+	trace_pxc_kbus(__func__, "enter");
+	kbus_dbg("%s[%d]: count: %d\n", __func__,__LINE__, count);
+
+	kbus_boost_dma_task(0);
+#endif
+
 	l = mcspi_cached_chconf0(spi);
 
 	/* We store the pre-calculated register addresses on stack to speed
@@ -711,6 +779,10 @@ omap2_mcspi_txrx_pio(struct spi_device *spi, struct spi_transfer *xfer)
 	if (c < (word_len>>3))
 		return 0;
 
+	dev_dbg(&spi->dev, "xx: %s-%d %d %s:%s\n", xfer->tx_buf ? "tx" : "rx",
+		word_len, count, cd->turbo_mode ? "turbo" : "-",
+		(l & OMAP2_MCSPI_CHCONF_TURBO) ? "1" : "-");
+
 	if (word_len <= 8) {
 		u8		*rx;
 		const u8	*tx;
@@ -721,6 +793,9 @@ omap2_mcspi_txrx_pio(struct spi_device *spi, struct spi_transfer *xfer)
 		do {
 			c -= 1;
 			if (tx != NULL) {
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+				kbus_wago_mpoint(); /* MX */
+#endif
 				if (mcspi_wait_for_reg_bit(chstat_reg,
 						OMAP2_MCSPI_CHSTAT_TXS) < 0) {
 					dev_err(&spi->dev, "TXS timed out\n");
@@ -728,9 +803,15 @@ omap2_mcspi_txrx_pio(struct spi_device *spi, struct spi_transfer *xfer)
 				}
 				dev_vdbg(&spi->dev, "write-%d %02x\n",
 						word_len, *tx);
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+				trace_pxc_kbusdump(__func__, "write", word_len, *tx);
+#endif
 				writel_relaxed(*tx++, tx_reg);
 			}
 			if (rx != NULL) {
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+				kbus_wago_mpoint(); /* MX */
+#endif
 				if (mcspi_wait_for_reg_bit(chstat_reg,
 						OMAP2_MCSPI_CHSTAT_RXS) < 0) {
 					dev_err(&spi->dev, "RXS timed out\n");
@@ -743,6 +824,9 @@ omap2_mcspi_txrx_pio(struct spi_device *spi, struct spi_transfer *xfer)
 					*rx++ = readl_relaxed(rx_reg);
 					dev_vdbg(&spi->dev, "read-%d %02x\n",
 						    word_len, *(rx - 1));
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+					trace_pxc_kbusdump(__func__, "readtb", word_len, *(rx - 1));
+#endif
 					if (mcspi_wait_for_reg_bit(chstat_reg,
 						OMAP2_MCSPI_CHSTAT_RXS) < 0) {
 						dev_err(&spi->dev,
@@ -755,8 +839,14 @@ omap2_mcspi_txrx_pio(struct spi_device *spi, struct spi_transfer *xfer)
 				}
 
 				*rx++ = readl_relaxed(rx_reg);
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+				kbus_wago_mpoint(); /* MX */
+#endif
 				dev_vdbg(&spi->dev, "read-%d %02x\n",
 						word_len, *(rx - 1));
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+				trace_pxc_kbusdump(__func__, "read", word_len, *(rx - 1));
+#endif
 			}
 		} while (c);
 	} else if (word_len <= 16) {
@@ -765,22 +855,34 @@ omap2_mcspi_txrx_pio(struct spi_device *spi, struct spi_transfer *xfer)
 
 		rx = xfer->rx_buf;
 		tx = xfer->tx_buf;
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+		kbus_wago_mpoint(); /* MX */
+#endif
 		do {
 			c -= 2;
 			if (tx != NULL) {
 				if (mcspi_wait_for_reg_bit(chstat_reg,
 						OMAP2_MCSPI_CHSTAT_TXS) < 0) {
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+					trace_pxc_kbus(__func__, "TXS timed out");
+#endif
 					dev_err(&spi->dev, "TXS timed out\n");
 					goto out;
 				}
 				dev_vdbg(&spi->dev, "write-%d %04x\n",
 						word_len, *tx);
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+				trace_pxc_kbusdump(__func__, "write", word_len, *tx);
+#endif
 				writel_relaxed(*tx++, tx_reg);
 			}
 			if (rx != NULL) {
 				if (mcspi_wait_for_reg_bit(chstat_reg,
 						OMAP2_MCSPI_CHSTAT_RXS) < 0) {
 					dev_err(&spi->dev, "RXS timed out\n");
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+					trace_pxc_kbus(__func__, "RXS timed out");
+#endif
 					goto out;
 				}
 
@@ -790,6 +892,9 @@ omap2_mcspi_txrx_pio(struct spi_device *spi, struct spi_transfer *xfer)
 					*rx++ = readl_relaxed(rx_reg);
 					dev_vdbg(&spi->dev, "read-%d %04x\n",
 						    word_len, *(rx - 1));
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+					trace_pxc_kbusdump(__func__, "readtb", word_len, *(rx - 1));
+#endif
 					if (mcspi_wait_for_reg_bit(chstat_reg,
 						OMAP2_MCSPI_CHSTAT_RXS) < 0) {
 						dev_err(&spi->dev,
@@ -801,11 +906,28 @@ omap2_mcspi_txrx_pio(struct spi_device *spi, struct spi_transfer *xfer)
 					omap2_mcspi_set_enable(spi, 0);
 				}
 
+				/* INFO:
+				 *    We have a timing problem here!!!
+				 *    During extensive spi traffic some bytes were lost
+				 *    during read. Some tests also showed that the Infineon
+				 *    needs some more time between the spi words.
+				 */
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+				if (kbusdelay)
+					ndelay(kbusdelay); /* 400: With this delay we did a test over 14h successfully! */
+#endif
+
 				*rx++ = readl_relaxed(rx_reg);
 				dev_vdbg(&spi->dev, "read-%d %04x\n",
 						word_len, *(rx - 1));
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+				trace_pxc_kbusdump(__func__, "read", word_len, *(rx - 1));
+#endif
 			}
 		} while (c >= 2);
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+		kbus_wago_mpoint(); /* MX */
+#endif
 	} else if (word_len <= 32) {
 		u32		*rx;
 		const u32	*tx;
@@ -835,6 +957,14 @@ omap2_mcspi_txrx_pio(struct spi_device *spi, struct spi_transfer *xfer)
 				    (l & OMAP2_MCSPI_CHCONF_TURBO)) {
 					omap2_mcspi_set_enable(spi, 0);
 					*rx++ = readl_relaxed(rx_reg);
+
+					/* For some reason while beeing in
+					 * turbo mode we need a short delay
+					 * here. Otherwise it will hang if we
+					 * try to disable and enable
+					 * turbo mode again */
+					ndelay(1);
+
 					dev_vdbg(&spi->dev, "read-%d %08x\n",
 						    word_len, *(rx - 1));
 					if (mcspi_wait_for_reg_bit(chstat_reg,
@@ -872,6 +1002,10 @@ omap2_mcspi_txrx_pio(struct spi_device *spi, struct spi_transfer *xfer)
 	}
 out:
 	omap2_mcspi_set_enable(spi, 1);
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+	kbus_wago_mpoint(); /* MX */
+	trace_pxc_kbus(__func__, "leave");
+#endif
 	return count - c;
 }
 
@@ -928,6 +1062,9 @@ static int omap2_mcspi_setup_transfer(struct spi_device *spi,
 		l &= ~OMAP2_MCSPI_CHCONF_IS;
 		l &= ~OMAP2_MCSPI_CHCONF_DPE1;
 		l |= OMAP2_MCSPI_CHCONF_DPE0;
+#ifdef CONFIG_SPI_KBUS_OMAP_SET_SPIDAT_DIR
+		omap2_mcspi_set_spidat_direction(spi->master);
+#endif
 	} else {
 		l |= OMAP2_MCSPI_CHCONF_IS;
 		l |= OMAP2_MCSPI_CHCONF_DPE1;
@@ -1053,6 +1190,12 @@ static int omap2_mcspi_setup(struct spi_device *spi)
 	struct omap2_mcspi_regs	*ctx = &mcspi->ctx;
 	struct omap2_mcspi_cs	*cs = spi->controller_state;
 
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+	if (spi->max_speed_hz < (OMAP2_MCSPI_MAX_FREQ >> 15) ||
+	    spi->max_speed_hz > OMAP2_MCSPI_MAX_FREQ)
+		return -EINVAL;
+#endif
+
 	if (!cs) {
 		cs = kzalloc(sizeof(*cs), GFP_KERNEL);
 		if (!cs)
@@ -1133,15 +1276,29 @@ static int omap2_mcspi_transfer_one(struct spi_master *master,
 	struct omap2_mcspi_dma		*mcspi_dma;
 	struct omap2_mcspi_cs		*cs;
 	struct omap2_mcspi_device_config *cd;
-	int				par_override = 0;
+#ifndef CONFIG_SPI_KBUS_OMAP_EXTENSION
+	int                             par_override = 0;
+#endif
 	int				status = 0;
 	u32				chconf;
 
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+	struct kbus_drv_data            *kdrvdata = NULL;
+
+	trace_pxc_kbus(__func__, "enter");
+	kbus_wago_mpoint(); /* M4 */
+#endif
+
 	mcspi = spi_master_get_devdata(master);
 	mcspi_dma = mcspi->dma_channels + spi->chip_select;
 	cs = spi->controller_state;
 	cd = spi->controller_data;
 
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+	if (spi->dev.driver == &kbus_driver.driver)
+		kdrvdata = spi_get_drvdata(spi);
+#endif
+#ifndef CONFIG_SPI_KBUS_OMAP_EXTENSION
 	/*
 	 * The slave driver could have changed spi->mode in which case
 	 * it will be different from cs->mode (the current hardware setup).
@@ -1151,12 +1308,14 @@ static int omap2_mcspi_transfer_one(struct spi_master *master,
 	 */
 	if (spi->mode != cs->mode)
 		par_override = 1;
+#endif
 
 	omap2_mcspi_set_enable(spi, 0);
 
 	if (spi->cs_gpiod)
 		omap2_mcspi_set_cs(spi, spi->mode & SPI_CS_HIGH);
 
+#ifndef CONFIG_SPI_KBUS_OMAP_EXTENSION
 	if (par_override ||
 	    (t->speed_hz != spi->max_speed_hz) ||
 	    (t->bits_per_word != spi->bits_per_word)) {
@@ -1168,6 +1327,8 @@ static int omap2_mcspi_transfer_one(struct spi_master *master,
 		    t->bits_per_word == spi->bits_per_word)
 			par_override = 0;
 	}
+#endif
+
 	if (cd && cd->cs_per_word) {
 		chconf = mcspi->ctx.modulctrl;
 		chconf &= ~OMAP2_MCSPI_MODULCTRL_SINGLE;
@@ -1195,11 +1356,19 @@ static int omap2_mcspi_transfer_one(struct spi_master *master,
 
 	if (t->len) {
 		unsigned	count;
-
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+		int                 i;
+#endif
+
+#ifndef CONFIG_SPI_KBUS_OMAP_EXTENSION
+		/* FIXME
+		   At this moment keep fifo disabled due to some issues
+		   that were coming up with large kbus nodes. */
 		if ((mcspi_dma->dma_rx && mcspi_dma->dma_tx) &&
 		    master->cur_msg_mapped &&
 		    master->can_dma(master, spi, t))
 			omap2_mcspi_set_fifo(spi, t, 1);
+#endif
 
 		omap2_mcspi_set_enable(spi, 1);
 
@@ -1208,10 +1377,47 @@ static int omap2_mcspi_transfer_one(struct spi_master *master,
 			writel_relaxed(0, cs->base
 					+ OMAP2_MCSPI_TX0);
 
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+		/*
+		 * kbus:
+		 *  release irq and check the sync signal
+		 *  before sending data
+		 */
+		if (kdrvdata && t->tx_buf) {
+			/*
+			 * XE164 should be ready a long time ago (several us).
+			 * Otherwise something is wrong with the controller!
+			 */
+			for (i = 0; i < PAC_KBUS_SYNC_CYCLES; i++) {
+				if (gpiod_get_value(kdrvdata->gpio_nsync)) /* active low */
+					continue;
+				break;
+			}
+
+			if (i >= PAC_KBUS_SYNC_CYCLES) {
+				trace_pxc_kbus(__func__, "err: sync pin is always high [-EBUSY(-16)]!");
+				status = -EBUSY;
+				goto out;
+			}
+
+			/* release the irq pin */
+			gpiod_set_value(kdrvdata->gpio_nirq, 1);
+
+		}
+#endif
+
 		if ((mcspi_dma->dma_rx && mcspi_dma->dma_tx) &&
 		    master->cur_msg_mapped &&
-		    master->can_dma(master, spi, t))
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+		    master->can_dma(master, spi, t)) {
+			if (kdrvdata)
+				trace_pxc_kbus(__func__, "DMA: TXRX: Trigger DMA Transfer.");
+#endif
+#ifndef CONFIG_SPI_KBUS_OMAP_EXTENSION
+		    master->can_dma(master, spi, t)) {
+#endif
 			count = omap2_mcspi_txrx_dma(spi, t);
+		}
 		else
 			count = omap2_mcspi_txrx_pio(spi, t);
 
@@ -1226,12 +1432,97 @@ static int omap2_mcspi_transfer_one(struct spi_master *master,
 	if (mcspi->fifo_depth > 0)
 		omap2_mcspi_set_fifo(spi, t, 0);
 
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+	/*
+	 * Special KBUS Treatment
+	 *
+	 */
+	if (kdrvdata) {
+		static u16 *kcmd_txbuf;
+		int tmp_ret;
+
+		kbus_wago_mpoint(); /* MX */
+		if (t->tx_buf) { /* after tx transfer */
+			kcmd_txbuf = (u16 *) t->tx_buf;
+			/* wait for READYn IRQ from xe164 */
+
+			trace_pxc_kbus(__func__, "TX0");
+			kbus_dbg("%s: irq timeout is %dms\n",
+				 __func__, kdrvdata->timeout_ms);
+			tmp_ret = wait_event_interruptible_timeout(kdrvdata->kbus_irq_wq,
+								   kdrvdata->kbus_irq_state == 0,
+								   msecs_to_jiffies(kdrvdata->timeout_ms));
+
+			if (tmp_ret == 0 && kdrvdata->kbus_irq_state) {
+				status = -ETIMEDOUT;
+				trace_pxc_kbus(__func__, "TX0: IRQ timeout!");
+				goto out;
+			}
+			if (kbus_error() < 0) {
+				status = -ENODATA;
+				trace_pxc_kbus(__func__, "TX0: KBUS ERROR.");
+				goto out;
+			}
+			trace_pxc_kbus(__func__, "TX0: IRQ received");
+		}
+
+		if (kdrvdata->cmdsel) { /* special treatment in command mode */
+			/* We're getting the data in two nibbles.
+			 * First: 6 bytes header where we get the length for the rest.
+			 * Second: The remaining N bytes.
+			 */
+			if (t->rx_buf == kdrvdata->rx_buf) { /* This RX0 */
+				u16 *kcmd_hdr = (u16 *) t->rx_buf;
+				u8 lb_cmd = kcmd_hdr[0] & 0xff;
+				u8 hb_cmd_inv = ~(kcmd_hdr[0] >> 8) & 0xff;
+				u8 lb_wlen = kcmd_hdr[2] & 0xff;
+				u8 hb_wlen_inv = ~(kcmd_hdr[2] >> 8) & 0xff;
+				unsigned int byte_len;
+				struct spi_transfer *kcmd_tnext;
+
+				trace_pxc_kbus(__func__, "RX0");
+
+				/* validate header data here */
+				if (lb_cmd != (kcmd_txbuf[0] & 0xff) ||
+				    hb_cmd_inv != lb_cmd ||
+				    hb_wlen_inv != lb_wlen) {
+					trace_pxc_kbus(__func__, "RX0: RX0 HDR not valid.");
+					kbus_dbg("%s[%d]: RX0 HDR not valid: 0x%.4x(TX:0x%.2x)|0x%.4x|0x%.4x\n",
+						 __func__, __LINE__, kcmd_hdr[0], kcmd_txbuf[0] & 0xff,
+						 kcmd_hdr[1], kcmd_hdr[2]);
+					status = -EPROTO;
+					goto out;
+				}
+
+				/* get next transfer entry */
+				kcmd_tnext = list_entry(t->transfer_list.next,
+							struct spi_transfer, transfer_list);
+
+				/* regard word (16bit) count */
+				byte_len = (kcmd_hdr[2] & 0xff) << 1;
+				if (byte_len < kcmd_tnext->len) {
+					kcmd_tnext->len = byte_len;
+					trace_pxc_kbus(__func__, "RX0: RX1 len updated.");
+				}
+
+				kbus_dbg("%s[%d]: RX1 len set to: %d\n",
+					 __func__, __LINE__, kcmd_tnext->len);
+			} else if (t->rx_buf != NULL) {
+				trace_pxc_kbus(__func__, "RX1");
+			}
+		}
+		kbus_wago_mpoint(); /* MX */
+	}
+#endif
+
 out:
+#ifndef CONFIG_SPI_KBUS_OMAP_EXTENSION
 	/* Restore defaults if they were overriden */
 	if (par_override) {
 		par_override = 0;
 		status = omap2_mcspi_setup_transfer(spi, NULL);
 	}
+#endif
 
 	if (cd && cd->cs_per_word) {
 		chconf = mcspi->ctx.modulctrl;
@@ -1516,8 +1807,8 @@ static int omap2_mcspi_probe(struct platform_device *pdev)
 	}
 	init_completion(&mcspi->txdone);
 	status = devm_request_irq(&pdev->dev, status,
-				  omap2_mcspi_irq_handler, 0, pdev->name,
-				  mcspi);
+				  omap2_mcspi_irq_handler,
+				  IRQF_THREAD_TBL_LOOKUP, pdev->name, mcspi);
 	if (status) {
 		dev_err(&pdev->dev, "Cannot request IRQ");
 		goto free_master;
@@ -1535,6 +1826,16 @@ static int omap2_mcspi_probe(struct platform_device *pdev)
 	if (status < 0)
 		goto disable_pm;
 
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+	dev_dbg(&pdev->dev, "kbusdelay=%d, %s interframe gap delay.\n",
+		kbusdelay, kbusdelay ? "using" : "NOT using");
+#endif
+
+#if 0 /* #ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION */
+	if (omap2_mcspi_enable_clocks(mcspi) < 0)
+		goto free_master;
+#endif
+
 	return status;
 
 disable_pm:
@@ -1615,4 +1916,7 @@ static struct platform_driver omap2_mcspi_driver = {
 };
 
 module_platform_driver(omap2_mcspi_driver);
+#ifdef CONFIG_SPI_KBUS_OMAP_EXTENSION
+core_param(kbusdelay, kbusdelay, int, 0000);
+#endif
 MODULE_LICENSE("GPL");
diff --git a/drivers/spi/spi.c b/drivers/spi/spi.c
index a42b9e8521ce..e17c628ed832 100644
--- a/drivers/spi/spi.c
+++ b/drivers/spi/spi.c
@@ -34,6 +34,10 @@
 #include <linux/idr.h>
 #include <linux/platform_data/x86/apple.h>
 
+#ifdef CONFIG_IRQ_PRIORITY_TABLE
+#include <linux/wsysinit-prio.h>
+#endif
+
 #define CREATE_TRACE_POINTS
 #include <trace/events/spi.h>
 EXPORT_TRACEPOINT_SYMBOL(spi_transfer_start);
@@ -1754,6 +1758,10 @@ static int spi_init_queue(struct spi_controller *ctlr)
 		return PTR_ERR(ctlr->kworker);
 	}
 
+#ifdef CONFIG_IRQ_PRIORITY_TABLE
+	wsysinit_set_fifo_nocheck(ctlr->kworker->task);
+#endif
+
 	kthread_init_work(&ctlr->pump_messages, spi_pump_messages);
 
 	/*
diff --git a/drivers/tty/n_tty.c b/drivers/tty/n_tty.c
index 0ec93f1a61f5..f0f544b0d4b1 100644
--- a/drivers/tty/n_tty.c
+++ b/drivers/tty/n_tty.c
@@ -791,8 +791,11 @@ static void commit_echoes(struct tty_struct *tty)
 	echoed = __process_echoes(tty);
 	mutex_unlock(&ldata->output_lock);
 
-	if (echoed && tty->ops->flush_chars)
-		tty->ops->flush_chars(tty);
+	if (echoed && tty->ops->flush_chars) {
+                /* flush chars if not prohibited by the driver */
+                if (!(tty->driver && (tty->driver->flags & TTY_DRIVER_IGNORE_FLUSH)))
+                        tty->ops->flush_chars(tty);
+        }
 }
 
 static void process_echoes(struct tty_struct *tty)
@@ -808,8 +811,11 @@ static void process_echoes(struct tty_struct *tty)
 	echoed = __process_echoes(tty);
 	mutex_unlock(&ldata->output_lock);
 
-	if (echoed && tty->ops->flush_chars)
-		tty->ops->flush_chars(tty);
+	if (echoed && tty->ops->flush_chars) {
+                /* flush chars if not prohibited by the driver */
+                if (!(tty->driver && (tty->driver->flags & TTY_DRIVER_IGNORE_FLUSH)))
+                        tty->ops->flush_chars(tty);
+        }
 }
 
 /* NB: echo_mark and echo_head should be equivalent here */
@@ -1221,10 +1227,13 @@ static void n_tty_receive_parity_error(struct tty_struct *tty, unsigned char c)
 {
 	struct n_tty_data *ldata = tty->disc_data;
 
+	n_tty_trace("%d: char 0x%x\n", __LINE__, c);
+
 	if (I_INPCK(tty)) {
 		if (I_IGNPAR(tty))
 			return;
 		if (I_PARMRK(tty)) {
+			n_tty_trace("%d: I_PARMRK: char 0x%x\n", __LINE__, c);
 			put_tty_queue('\377', ldata);
 			put_tty_queue('\0', ldata);
 			put_tty_queue(c, ldata);
@@ -1577,8 +1586,11 @@ static void __receive_buf(struct tty_struct *tty, const unsigned char *cp,
 		n_tty_receive_buf_standard(tty, cp, fp, count);
 
 		flush_echoes(tty);
-		if (tty->ops->flush_chars)
-			tty->ops->flush_chars(tty);
+                if (tty->ops->flush_chars) {
+                        /* flush chars if not prohibited by the driver */
+                        if (!(tty->driver && (tty->driver->flags & TTY_DRIVER_IGNORE_FLUSH)))
+                                tty->ops->flush_chars(tty);
+                }
 	}
 
 	if (ldata->icanon && !L_EXTPROC(tty))
@@ -1784,6 +1796,7 @@ static void n_tty_set_termios(struct tty_struct *tty, struct ktermios *old)
 		clear_bit(__DISABLED_CHAR, ldata->char_map);
 		ldata->raw = 0;
 		ldata->real_raw = 0;
+                n_tty_trace("%d: real_raw = 0\n", __LINE__);
 	} else {
 		ldata->raw = 1;
 		if ((I_IGNBRK(tty) || (!I_BRKINT(tty) && !I_PARMRK(tty))) &&
@@ -2301,8 +2314,11 @@ static ssize_t n_tty_write(struct tty_struct *tty, struct file *file,
 					break;
 				b++; nr--;
 			}
-			if (tty->ops->flush_chars)
-				tty->ops->flush_chars(tty);
+                        if (tty->ops->flush_chars) {
+                                /* flush chars if not prohibited by the driver */
+                                if (!(tty->driver && (tty->driver->flags & TTY_DRIVER_IGNORE_FLUSH)))
+                                        tty->ops->flush_chars(tty);
+                        }
 		} else {
 			struct n_tty_data *ldata = tty->disc_data;
 
diff --git a/drivers/tty/serial/8250/8250.h b/drivers/tty/serial/8250/8250.h
index 6473361525d1..2321d02e9b7a 100644
--- a/drivers/tty/serial/8250/8250.h
+++ b/drivers/tty/serial/8250/8250.h
@@ -132,12 +132,55 @@ static inline void serial_dl_write(struct uart_8250_port *up, int value)
 	up->dl_write(up, value);
 }
 
+static inline void serial8250_set_IER(struct uart_8250_port *up,
+				      unsigned char ier)
+{
+	struct uart_port *port = &up->port;
+	unsigned long flags;
+	bool is_console;
+
+	is_console = uart_console(port);
+
+	if (is_console)
+		console_atomic_lock(flags);
+
+	serial_out(up, UART_IER, ier);
+
+	if (is_console)
+		console_atomic_unlock(flags);
+}
+
+static inline unsigned char serial8250_clear_IER(struct uart_8250_port *up)
+{
+	struct uart_port *port = &up->port;
+	unsigned int clearval = 0;
+	unsigned long flags;
+	unsigned int prior;
+	bool is_console;
+
+	is_console = uart_console(port);
+
+	if (up->capabilities & UART_CAP_UUE)
+		clearval = UART_IER_UUE;
+
+	if (is_console)
+		console_atomic_lock(flags);
+
+	prior = serial_port_in(port, UART_IER);
+	serial_port_out(port, UART_IER, clearval);
+
+	if (is_console)
+		console_atomic_unlock(flags);
+
+	return prior;
+}
+
 static inline bool serial8250_set_THRI(struct uart_8250_port *up)
 {
 	if (up->ier & UART_IER_THRI)
 		return false;
 	up->ier |= UART_IER_THRI;
-	serial_out(up, UART_IER, up->ier);
+	serial8250_set_IER(up, up->ier);
 	return true;
 }
 
@@ -146,7 +189,7 @@ static inline bool serial8250_clear_THRI(struct uart_8250_port *up)
 	if (!(up->ier & UART_IER_THRI))
 		return false;
 	up->ier &= ~UART_IER_THRI;
-	serial_out(up, UART_IER, up->ier);
+	serial8250_set_IER(up, up->ier);
 	return true;
 }
 
diff --git a/drivers/tty/serial/8250/8250_core.c b/drivers/tty/serial/8250/8250_core.c
index 1ce193daea7f..fad00c0414e3 100644
--- a/drivers/tty/serial/8250/8250_core.c
+++ b/drivers/tty/serial/8250/8250_core.c
@@ -264,10 +264,8 @@ static void serial8250_backup_timeout(struct timer_list *t)
 	 * Must disable interrupts or else we risk racing with the interrupt
 	 * based handler.
 	 */
-	if (up->port.irq) {
-		ier = serial_in(up, UART_IER);
-		serial_out(up, UART_IER, 0);
-	}
+	if (up->port.irq)
+		ier = serial8250_clear_IER(up);
 
 	iir = serial_in(up, UART_IIR);
 
@@ -290,7 +288,7 @@ static void serial8250_backup_timeout(struct timer_list *t)
 		serial8250_tx_chars(up);
 
 	if (up->port.irq)
-		serial_out(up, UART_IER, ier);
+		serial8250_set_IER(up, ier);
 
 	spin_unlock_irqrestore(&up->port.lock, flags);
 
@@ -568,6 +566,14 @@ serial8250_register_ports(struct uart_driver *drv, struct device *dev)
 
 #ifdef CONFIG_SERIAL_8250_CONSOLE
 
+static void univ8250_console_write_atomic(struct console *co, const char *s,
+					  unsigned int count)
+{
+	struct uart_8250_port *up = &serial8250_ports[co->index];
+
+	serial8250_console_write_atomic(up, s, count);
+}
+
 static void univ8250_console_write(struct console *co, const char *s,
 				   unsigned int count)
 {
@@ -661,6 +667,7 @@ static int univ8250_console_match(struct console *co, char *name, int idx,
 
 static struct console univ8250_console = {
 	.name		= "ttyS",
+	.write_atomic	= univ8250_console_write_atomic,
 	.write		= univ8250_console_write,
 	.device		= uart_console_device,
 	.setup		= univ8250_console_setup,
diff --git a/drivers/tty/serial/8250/8250_fsl.c b/drivers/tty/serial/8250/8250_fsl.c
index fc65a2293ce9..19a92530040f 100644
--- a/drivers/tty/serial/8250/8250_fsl.c
+++ b/drivers/tty/serial/8250/8250_fsl.c
@@ -60,9 +60,18 @@ int fsl8250_handle_irq(struct uart_port *port)
 
 	/* Stop processing interrupts on input overrun */
 	if ((orig_lsr & UART_LSR_OE) && (up->overrun_backoff_time_ms > 0)) {
+		unsigned long flags;
 		unsigned long delay;
+		bool is_console;
 
+		is_console = uart_console(port);
+
+		if (is_console)
+			console_atomic_lock(flags);
 		up->ier = port->serial_in(port, UART_IER);
+		if (is_console)
+			console_atomic_unlock(flags);
+
 		if (up->ier & (UART_IER_RLSI | UART_IER_RDI)) {
 			port->ops->stop_rx(port);
 		} else {
diff --git a/drivers/tty/serial/8250/8250_ingenic.c b/drivers/tty/serial/8250/8250_ingenic.c
index 65402d05eff9..8122645ab05c 100644
--- a/drivers/tty/serial/8250/8250_ingenic.c
+++ b/drivers/tty/serial/8250/8250_ingenic.c
@@ -146,6 +146,8 @@ OF_EARLYCON_DECLARE(x1000_uart, "ingenic,x1000-uart",
 
 static void ingenic_uart_serial_out(struct uart_port *p, int offset, int value)
 {
+	unsigned long flags;
+	bool is_console;
 	int ier;
 
 	switch (offset) {
@@ -167,7 +169,12 @@ static void ingenic_uart_serial_out(struct uart_port *p, int offset, int value)
 		 * If we have enabled modem status IRQs we should enable
 		 * modem mode.
 		 */
+		is_console = uart_console(p);
+		if (is_console)
+			console_atomic_lock(flags);
 		ier = p->serial_in(p, UART_IER);
+		if (is_console)
+			console_atomic_unlock(flags);
 
 		if (ier & UART_IER_MSI)
 			value |= UART_MCR_MDCE | UART_MCR_FCM;
diff --git a/drivers/tty/serial/8250/8250_mtk.c b/drivers/tty/serial/8250/8250_mtk.c
index fb65dc601b23..9af18b5d8296 100644
--- a/drivers/tty/serial/8250/8250_mtk.c
+++ b/drivers/tty/serial/8250/8250_mtk.c
@@ -218,12 +218,37 @@ static void mtk8250_shutdown(struct uart_port *port)
 
 static void mtk8250_disable_intrs(struct uart_8250_port *up, int mask)
 {
-	serial_out(up, UART_IER, serial_in(up, UART_IER) & (~mask));
+	struct uart_port *port = &up->port;
+	unsigned long flags;
+	unsigned int ier;
+	bool is_console;
+
+	is_console = uart_console(port);
+
+	if (is_console)
+		console_atomic_lock(flags);
+
+	ier = serial_in(up, UART_IER);
+	serial_out(up, UART_IER, ier & (~mask));
+
+	if (is_console)
+		console_atomic_unlock(flags);
 }
 
 static void mtk8250_enable_intrs(struct uart_8250_port *up, int mask)
 {
-	serial_out(up, UART_IER, serial_in(up, UART_IER) | mask);
+	struct uart_port *port = &up->port;
+	unsigned long flags;
+	unsigned int ier;
+
+	if (uart_console(port))
+		console_atomic_lock(flags);
+
+	ier = serial_in(up, UART_IER);
+	serial_out(up, UART_IER, ier | mask);
+
+	if (uart_console(port))
+		console_atomic_unlock(flags);
 }
 
 static void mtk8250_set_flow_ctrl(struct uart_8250_port *up, int mode)
diff --git a/drivers/tty/serial/8250/8250_port.c b/drivers/tty/serial/8250/8250_port.c
index ec88b706e882..7774c63ce53d 100644
--- a/drivers/tty/serial/8250/8250_port.c
+++ b/drivers/tty/serial/8250/8250_port.c
@@ -762,7 +762,7 @@ static void serial8250_set_sleep(struct uart_8250_port *p, int sleep)
 			serial_out(p, UART_EFR, UART_EFR_ECB);
 			serial_out(p, UART_LCR, 0);
 		}
-		serial_out(p, UART_IER, sleep ? UART_IERX_SLEEP : 0);
+		serial8250_set_IER(p, sleep ? UART_IERX_SLEEP : 0);
 		if (p->capabilities & UART_CAP_EFR) {
 			serial_out(p, UART_LCR, UART_LCR_CONF_MODE_B);
 			serial_out(p, UART_EFR, efr);
@@ -1436,7 +1436,7 @@ static void serial8250_stop_rx(struct uart_port *port)
 
 	up->ier &= ~(UART_IER_RLSI | UART_IER_RDI);
 	up->port.read_status_mask &= ~UART_LSR_DR;
-	serial_port_out(port, UART_IER, up->ier);
+	serial8250_set_IER(up, up->ier);
 
 	serial8250_rpm_put(up);
 }
@@ -1466,7 +1466,7 @@ void serial8250_em485_stop_tx(struct uart_8250_port *p)
 		serial8250_clear_and_reinit_fifos(p);
 
 		p->ier |= UART_IER_RLSI | UART_IER_RDI;
-		serial_port_out(&p->port, UART_IER, p->ier);
+		serial8250_set_IER(p, p->ier);
 	}
 }
 EXPORT_SYMBOL_GPL(serial8250_em485_stop_tx);
@@ -1688,7 +1688,7 @@ static void serial8250_disable_ms(struct uart_port *port)
 	mctrl_gpio_disable_ms(up->gpios);
 
 	up->ier &= ~UART_IER_MSI;
-	serial_port_out(port, UART_IER, up->ier);
+	serial8250_set_IER(up, up->ier);
 }
 
 static void serial8250_enable_ms(struct uart_port *port)
@@ -1704,7 +1704,7 @@ static void serial8250_enable_ms(struct uart_port *port)
 	up->ier |= UART_IER_MSI;
 
 	serial8250_rpm_get(up);
-	serial_port_out(port, UART_IER, up->ier);
+	serial8250_set_IER(up, up->ier);
 	serial8250_rpm_put(up);
 }
 
@@ -2125,14 +2125,7 @@ static void serial8250_put_poll_char(struct uart_port *port,
 	struct uart_8250_port *up = up_to_u8250p(port);
 
 	serial8250_rpm_get(up);
-	/*
-	 *	First save the IER then disable the interrupts
-	 */
-	ier = serial_port_in(port, UART_IER);
-	if (up->capabilities & UART_CAP_UUE)
-		serial_port_out(port, UART_IER, UART_IER_UUE);
-	else
-		serial_port_out(port, UART_IER, 0);
+	ier = serial8250_clear_IER(up);
 
 	wait_for_xmitr(up, BOTH_EMPTY);
 	/*
@@ -2145,7 +2138,7 @@ static void serial8250_put_poll_char(struct uart_port *port,
 	 *	and restore the IER
 	 */
 	wait_for_xmitr(up, BOTH_EMPTY);
-	serial_port_out(port, UART_IER, ier);
+	serial8250_set_IER(up, ier);
 	serial8250_rpm_put(up);
 }
 
@@ -2448,7 +2441,7 @@ void serial8250_do_shutdown(struct uart_port *port)
 	 */
 	spin_lock_irqsave(&port->lock, flags);
 	up->ier = 0;
-	serial_port_out(port, UART_IER, 0);
+	serial8250_set_IER(up, 0);
 	spin_unlock_irqrestore(&port->lock, flags);
 
 	synchronize_irq(port->irq);
@@ -2830,7 +2823,7 @@ serial8250_do_set_termios(struct uart_port *port, struct ktermios *termios,
 	if (up->capabilities & UART_CAP_RTOIE)
 		up->ier |= UART_IER_RTOIE;
 
-	serial_port_out(port, UART_IER, up->ier);
+	serial8250_set_IER(up, up->ier);
 
 	if (up->capabilities & UART_CAP_EFR) {
 		unsigned char efr = 0;
@@ -3296,7 +3289,7 @@ EXPORT_SYMBOL_GPL(serial8250_set_defaults);
 
 #ifdef CONFIG_SERIAL_8250_CONSOLE
 
-static void serial8250_console_putchar(struct uart_port *port, int ch)
+static void serial8250_console_putchar_locked(struct uart_port *port, int ch)
 {
 	struct uart_8250_port *up = up_to_u8250p(port);
 
@@ -3304,6 +3297,18 @@ static void serial8250_console_putchar(struct uart_port *port, int ch)
 	serial_port_out(port, UART_TX, ch);
 }
 
+static void serial8250_console_putchar(struct uart_port *port, int ch)
+{
+	struct uart_8250_port *up = up_to_u8250p(port);
+	unsigned long flags;
+
+	wait_for_xmitr(up, UART_LSR_THRE);
+
+	console_atomic_lock(flags);
+	serial8250_console_putchar_locked(port, ch);
+	console_atomic_unlock(flags);
+}
+
 /*
  *	Restore serial console when h/w power-off detected
  */
@@ -3325,6 +3330,32 @@ static void serial8250_console_restore(struct uart_8250_port *up)
 	serial8250_out_MCR(up, UART_MCR_DTR | UART_MCR_RTS);
 }
 
+void serial8250_console_write_atomic(struct uart_8250_port *up,
+				     const char *s, unsigned int count)
+{
+	struct uart_port *port = &up->port;
+	unsigned long flags;
+	unsigned int ier;
+
+	console_atomic_lock(flags);
+
+	touch_nmi_watchdog();
+
+	ier = serial8250_clear_IER(up);
+
+	if (atomic_fetch_inc(&up->console_printing)) {
+		uart_console_write(port, "\n", 1,
+				   serial8250_console_putchar_locked);
+	}
+	uart_console_write(port, s, count, serial8250_console_putchar_locked);
+	atomic_dec(&up->console_printing);
+
+	wait_for_xmitr(up, BOTH_EMPTY);
+	serial8250_set_IER(up, ier);
+
+	console_atomic_unlock(flags);
+}
+
 /*
  *	Print a string to the serial port trying not to disturb
  *	any possible real use of the port...
@@ -3341,24 +3372,12 @@ void serial8250_console_write(struct uart_8250_port *up, const char *s,
 	struct uart_port *port = &up->port;
 	unsigned long flags;
 	unsigned int ier;
-	int locked = 1;
 
 	touch_nmi_watchdog();
 
-	if (oops_in_progress)
-		locked = spin_trylock_irqsave(&port->lock, flags);
-	else
-		spin_lock_irqsave(&port->lock, flags);
-
-	/*
-	 *	First save the IER then disable the interrupts
-	 */
-	ier = serial_port_in(port, UART_IER);
+	spin_lock_irqsave(&port->lock, flags);
 
-	if (up->capabilities & UART_CAP_UUE)
-		serial_port_out(port, UART_IER, UART_IER_UUE);
-	else
-		serial_port_out(port, UART_IER, 0);
+	ier = serial8250_clear_IER(up);
 
 	/* check scratch reg to see if port powered off during system sleep */
 	if (up->canary && (up->canary != serial_port_in(port, UART_SCR))) {
@@ -3372,7 +3391,9 @@ void serial8250_console_write(struct uart_8250_port *up, const char *s,
 		mdelay(port->rs485.delay_rts_before_send);
 	}
 
+	atomic_inc(&up->console_printing);
 	uart_console_write(port, s, count, serial8250_console_putchar);
+	atomic_dec(&up->console_printing);
 
 	/*
 	 *	Finally, wait for transmitter to become empty
@@ -3385,8 +3406,7 @@ void serial8250_console_write(struct uart_8250_port *up, const char *s,
 		if (em485->tx_stopped)
 			up->rs485_stop_tx(up);
 	}
-
-	serial_port_out(port, UART_IER, ier);
+	serial8250_set_IER(up, ier);
 
 	/*
 	 *	The receive handling will happen properly because the
@@ -3398,8 +3418,7 @@ void serial8250_console_write(struct uart_8250_port *up, const char *s,
 	if (up->msr_saved_flags)
 		serial8250_modem_status(up);
 
-	if (locked)
-		spin_unlock_irqrestore(&port->lock, flags);
+	spin_unlock_irqrestore(&port->lock, flags);
 }
 
 static unsigned int probe_baud(struct uart_port *port)
@@ -3419,6 +3438,7 @@ static unsigned int probe_baud(struct uart_port *port)
 
 int serial8250_console_setup(struct uart_port *port, char *options, bool probe)
 {
+	struct uart_8250_port *up = up_to_u8250p(port);
 	int baud = 9600;
 	int bits = 8;
 	int parity = 'n';
@@ -3428,6 +3448,8 @@ int serial8250_console_setup(struct uart_port *port, char *options, bool probe)
 	if (!port->iobase && !port->membase)
 		return -ENODEV;
 
+	atomic_set(&up->console_printing, 0);
+
 	if (options)
 		uart_parse_options(options, &baud, &parity, &bits, &flow);
 	else if (probe)
diff --git a/drivers/tty/serial/Kconfig b/drivers/tty/serial/Kconfig
index 131a6a587acd..d7cd10410a08 100644
--- a/drivers/tty/serial/Kconfig
+++ b/drivers/tty/serial/Kconfig
@@ -969,6 +969,16 @@ config SERIAL_OMAP
 	  with the omap-serial driver. DMA support can be enabled from platform
 	  data.
 
+config SERIAL_OMAP_RTU
+	tristate "OMAP serial port support (RTU)"
+	depends on ARCH_OMAP2PLUS
+	select SERIAL_CORE
+	help
+         This driver is actually the SERIAL_OMAP driver from kernel 3.6.11
+         which was enhanced by RS485 and Modbus RTU functionallity.
+         Because this driver was tested and is stable this one is used for
+         fieldbus communication.
+
 config SERIAL_OMAP_CONSOLE
 	bool "Console on OMAP serial port"
 	depends on SERIAL_OMAP=y
@@ -1009,6 +1019,13 @@ config SERIAL_SIFIVE_CONSOLE
 	  your boot loader about how to pass options to the kernel at
 	  boot time.)
 
+config SERIAL_OMAP_MODBUS
+        bool "Modbus RTU support for OMAP"
+        default y
+        help
+          Select this option to enable Modbus RTU support.
+          This will allow a timing-based frame determination and address-based frame filtering.
+
 config SERIAL_LANTIQ
 	tristate "Lantiq serial driver"
 	depends on (LANTIQ || X86) || COMPILE_TEST
diff --git a/drivers/tty/serial/Makefile b/drivers/tty/serial/Makefile
index 7da0856cd198..efe6afbe20d3 100644
--- a/drivers/tty/serial/Makefile
+++ b/drivers/tty/serial/Makefile
@@ -57,6 +57,8 @@ obj-$(CONFIG_SERIAL_UARTLITE) += uartlite.o
 obj-$(CONFIG_SERIAL_MSM) += msm_serial.o
 obj-$(CONFIG_SERIAL_QCOM_GENI) += qcom_geni_serial.o
 obj-$(CONFIG_SERIAL_OMAP) += omap-serial.o
+obj-$(CONFIG_SERIAL_OMAP_MODBUS) += pfc-modbus-rtu.o
+obj-$(CONFIG_SERIAL_OMAP_RTU) += omap-serial-rtu.o
 obj-$(CONFIG_SERIAL_ALTERA_UART) += altera_uart.o
 obj-$(CONFIG_SERIAL_ST_ASC) += st-asc.o
 obj-$(CONFIG_SERIAL_QE) += ucc_uart.o
diff --git a/drivers/tty/serial/amba-pl011.c b/drivers/tty/serial/amba-pl011.c
index da54f827c5ef..6c486e08304c 100644
--- a/drivers/tty/serial/amba-pl011.c
+++ b/drivers/tty/serial/amba-pl011.c
@@ -2317,18 +2317,24 @@ pl011_console_write(struct console *co, const char *s, unsigned int count)
 {
 	struct uart_amba_port *uap = amba_ports[co->index];
 	unsigned int old_cr = 0, new_cr;
-	unsigned long flags;
+	unsigned long flags = 0;
 	int locked = 1;
 
 	clk_enable(uap->clk);
 
-	local_irq_save(flags);
+	/*
+	 * local_irq_save(flags);
+	 *
+	 * This local_irq_save() is nonsense. If we come in via sysrq
+	 * handling then interrupts are already disabled. Aside of
+	 * that the port.sysrq check is racy on SMP regardless.
+	*/
 	if (uap->port.sysrq)
 		locked = 0;
 	else if (oops_in_progress)
-		locked = spin_trylock(&uap->port.lock);
+		locked = spin_trylock_irqsave(&uap->port.lock, flags);
 	else
-		spin_lock(&uap->port.lock);
+		spin_lock_irqsave(&uap->port.lock, flags);
 
 	/*
 	 *	First save the CR then disable the interrupts
@@ -2354,8 +2360,7 @@ pl011_console_write(struct console *co, const char *s, unsigned int count)
 		pl011_write(old_cr, uap, REG_CR);
 
 	if (locked)
-		spin_unlock(&uap->port.lock);
-	local_irq_restore(flags);
+		spin_unlock_irqrestore(&uap->port.lock, flags);
 
 	clk_disable(uap->clk);
 }
diff --git a/drivers/tty/serial/omap-serial-rtu.c b/drivers/tty/serial/omap-serial-rtu.c
new file mode 100644
index 000000000000..02f68eaa0fd8
--- /dev/null
+++ b/drivers/tty/serial/omap-serial-rtu.c
@@ -0,0 +1,2093 @@
+/*
+ * Driver for OMAP-UART controller.
+ * Based on drivers/serial/8250.c
+ *
+ * Copyright (C) 2010 Texas Instruments.
+ *
+ * Authors:
+ *	Govindraj R	<govindraj.raja@ti.com>
+ *	Thara Gopinath	<thara@ti.com>
+ *
+ * RS485 support is based on
+ * http://code.google.com/p/meta-igep/source/browse/recipes-kernel/linux/
+ * linux-3.2/rs485/0010-omap-serial-add-RS-485-standard-support.patch
+ * by Javier Martinez Canillas
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * Note: This driver is made separate from 8250 driver as we cannot
+ * over load 8250 driver with omap platform specific configuration for
+ * features like DMA, it makes easier to implement features like DMA and
+ * hardware flow control and software flow control configuration with
+ * this driver as required for the omap-platform.
+ */
+#undef DEBUG
+
+#if defined(CONFIG_SERIAL_OMAP_CONSOLE) && defined(CONFIG_MAGIC_SYSRQ)
+#define SUPPORT_SYSRQ
+#endif
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/console.h>
+#include "serial_reg_rtu.h"
+#include <linux/delay.h>
+#include <linux/slab.h>
+#include <linux/tty.h>
+#include <linux/tty_flip.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/clk.h>
+#include <linux/serial_core.h>
+#include <linux/irq.h>
+#include <linux/interrupt.h>
+#include <linux/uaccess.h>
+#include <linux/pm_runtime.h>
+#include <linux/of.h>
+#include <linux/gpio.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/of_gpio.h>
+#include <linux/of_irq.h>
+
+#include <linux/platform_data/pfc-modbus-rtu.h>
+#include "omap-serial-rtu.h"
+
+#define to_uart_omap_port(p)	((container_of((p), struct uart_omap_port, port)))
+
+static struct uart_omap_port *ui[OMAP_MAX_HSUART_PORTS];
+
+/* Forward declaration of functions */
+static void serial_omap_mdr1_errataset(struct uart_omap_port *up, u8 mdr1);
+static inline void serial_omap_enable_ier_thri(struct uart_omap_port *up);
+
+static inline void serial_omap_irq_enable(struct uart_omap_port * up);
+static inline void serial_omap_irq_disable(struct uart_omap_port *up);
+
+static struct workqueue_struct *serial_omap_uart_wq;
+
+extern int __wsysinit_boot_id;
+
+inline void serial_omap_irq_disable(struct uart_omap_port * up)
+{
+	if(up->port.irq != -1)
+		disable_irq(up->port.irq);
+}
+
+inline void serial_omap_irq_enable(struct uart_omap_port * up)
+{
+	if(up->port.irq != -1)
+		enable_irq(up->port.irq);
+
+}
+
+inline unsigned int serial_in_rtu(struct uart_omap_port *up, int offset)
+{
+	offset <<= up->port.regshift;
+	return readw(up->port.membase + offset);
+}
+
+inline void serial_out_rtu(struct uart_omap_port *up, int offset, int value)
+{
+	pr_debug("%s: %s: offset = 0x%08x, value 0x%08x\n",
+		 up->name, __func__, offset, value);
+
+	offset <<= up->port.regshift;
+	writew(value, up->port.membase + offset);
+}
+
+static inline void serial_omap_clear_fifos(struct uart_omap_port *up)
+{
+	serial_out_rtu(up, UART_FCR, UART_FCR_ENABLE_FIFO);
+	serial_out_rtu(up, UART_FCR, UART_FCR_ENABLE_FIFO |
+		       UART_FCR_CLEAR_RCVR | UART_FCR_CLEAR_XMIT);
+	serial_out_rtu(up, UART_FCR, 0);
+}
+
+static int serial_omap_get_context_loss_count(struct uart_omap_port *up)
+{
+	struct omap_uart_port_info *pdata = up->dev->platform_data;
+
+	if (!pdata || !pdata->get_context_loss_count)
+		return 0;
+
+	return pdata->get_context_loss_count(up->dev);
+}
+
+static void serial_omap_set_forceidle(struct uart_omap_port *up)
+{
+	struct omap_uart_port_info *pdata = up->dev->platform_data;
+
+	if (!pdata || !pdata->set_forceidle)
+		return;
+
+	pdata->set_forceidle(up->dev);
+}
+
+static void serial_omap_set_noidle(struct uart_omap_port *up)
+{
+	struct omap_uart_port_info *pdata = up->dev->platform_data;
+
+	if (!pdata || !pdata->set_noidle)
+		return;
+
+	pdata->set_noidle(up->dev);
+}
+
+static void serial_omap_enable_wakeup(struct uart_omap_port *up, bool enable)
+{
+	struct omap_uart_port_info *pdata = up->dev->platform_data;
+
+	if (!pdata || !pdata->enable_wakeup)
+		return;
+
+	pdata->enable_wakeup(up->dev, enable);
+}
+
+/*
+ * serial_omap_baud_is_mode16 - check if baud rate is MODE16X
+ * @port: uart port info
+ * @baud: baudrate for which mode needs to be determined
+ *
+ * Returns true if baud rate is MODE16X and false if MODE13X
+ * Original table in OMAP TRM named "UART Mode Baud Rates, Divisor Values,
+ * and Error Rates" determines modes not for all common baud rates.
+ * E.g. for 1000000 baud rate mode must be 16x, but according to that
+ * table it's determined as 13x.
+ */
+static bool
+serial_omap_baud_is_mode16(struct uart_port *port, unsigned int baud)
+{
+	unsigned int n13 = port->uartclk / (13 * baud);
+	unsigned int n16 = port->uartclk / (16 * baud);
+	int baudAbsDiff13 = baud - (port->uartclk / (13 * n13));
+	int baudAbsDiff16 = baud - (port->uartclk / (16 * n16));
+	if(baudAbsDiff13 < 0)
+		baudAbsDiff13 = -baudAbsDiff13;
+	if(baudAbsDiff16 < 0)
+		baudAbsDiff16 = -baudAbsDiff16;
+
+	return (baudAbsDiff13 > baudAbsDiff16);
+}
+
+#ifdef CONFIG_SERIAL_OMAP_RS485
+static inline int rts_on_send(struct uart_omap_port *up)
+{
+	return up->rs485.flags & SER_RS485_RTS_ON_SEND;
+}
+
+inline void serial_omap_disable_ier_thri(struct uart_omap_port *up)
+{
+	up->ier &= ~UART_IER_THRI;
+	serial_out_rtu(up, UART_IER, up->ier);
+}
+
+/*
++ * Switch transmit interrupt mode (to transmit last data chunk before
++ * end of transmit)
++ */
+static inline void serial_omap_thri_mode(struct uart_omap_port *up)
+{
+	unsigned char scr = serial_in_rtu(up, UART_OMAP_SCR);
+
+	if(up->tx_wait_end)
+                /* wait for remaining data to be sent: interrupt when FIFO empty */
+		scr |= UART_OMAP_SCR_TX_EMPTY_CTL_IT;
+	else
+		/*
+		 * default IRQ mode: interrupt when FIFO not full (reset by filling
+		 * it again)
+		 */
+		scr &= ~UART_OMAP_SCR_TX_EMPTY_CTL_IT;
+
+	serial_out_rtu(up, UART_OMAP_SCR, scr);
+}
+
+/*
+ *  Toggle RTS pin according to configuration settings (RTS high/low on send?)
+ */
+static inline void serial_omap_update_rts(struct uart_omap_port *up)
+{
+	pr_debug("%s: %s: enter\n", up->name, __func__);
+
+	if(up->rs485.flags & SER_RS485_ENABLED) {
+
+		if(up->tx_in_progress) {
+			pr_debug("%s: %s: deassert RTS (~UART_MCR_RTS)\n", up->name, __func__);
+			/* See AM35x docs 14.6.2.10 MCR_REG: 0x0 -> RTS high, 0x1 -> RTS low */
+			up->mcr &= ~UART_MCR_RTS;
+		} else {
+			pr_debug("%s: %s: assert RTS (UART_MCR_RTS)\n", up->name, __func__);
+			up->mcr |= UART_MCR_RTS;
+		}
+
+		serial_out_rtu(up, UART_MCR, up->mcr);
+	}
+}
+
+static void serial_omap_config_rs485(struct uart_omap_port *up, struct serial_rs485 *rs485conf)
+{
+	if (gpio_is_valid(up->rs485en_gpio)) {
+		int val;
+
+		/* way from uart_port to tty_port: ugly :( */
+		struct tty_struct *tty = up->port.state->port.tty;
+
+		up->rs485 = *rs485conf;
+
+		val = up->rs485.flags & SER_RS485_ENABLED;
+
+		/*
+		 * WAGO: PARMRK is set by CODESYS when parity is enabled.
+		 * 		This way CODESYS libraries are notified about parity errors.
+		 * 		N_TTY line discipline disables raw connection mode with PARMRK
+		 * 		active and triggers a flush_chars() on each RX operation.
+		 * 		flush_chars() activates TX during a running RX operation, leading
+		 * 		to framing and parity errors (RS485 is half-duplex!)
+		 * 		That's why we deactivate flush_chars() for RS485 mode
+		 */
+
+
+		if(val) { /* Enable RS485 */
+                        tty->driver->flags |= TTY_DRIVER_IGNORE_FLUSH;
+		} else { /* Enable RS232 */
+			up->tx_in_progress = 0;
+			up->tx_wait_end = 0;
+
+                        tty->driver->flags &= ~TTY_DRIVER_IGNORE_FLUSH;
+		}
+
+		gpio_set_value(up->rs485en_gpio, up->rs485en_alow ? !val : val);
+
+#ifdef CONFIG_SERIAL_OMAP_MODBUS
+		/*
+		 * We need to make sure, that a distant Modbus Server does not
+		 * interpret the first signals on RX/TX- as valid data because
+		 * of transition from RS232 to RS485. So make sure, that we wait
+		 * long enough for the Modbus Server to discard the first few
+		 * bytes which are garbage anyway.
+		 */
+		if (val) {
+			ktime_t delay = ns_to_ktime(up->mb_port.to_35);
+			mdelay(ktime_to_ms(delay));
+		}
+#endif
+
+		pr_info("%s: %s mode enabled\n", __func__, val ? "rs485" : "rs232");
+                pr_info("tty driver flags: 0x%08lx", tty->driver->flags);
+	}
+}
+
+#endif
+
+/*
+ * serial_omap_get_divisor - calculate divisor value
+ * @port: uart port info
+ * @baud: baudrate for which divisor needs to be calculated.
+ */
+static unsigned int
+serial_omap_get_divisor(struct uart_port *port, unsigned int baud)
+{
+	unsigned int divisor;
+
+	if (!serial_omap_baud_is_mode16(port, baud))
+		divisor = 13;
+	else
+		divisor = 16;
+	return port->uartclk/(baud * divisor);
+}
+
+static void serial_omap_enable_ms(struct uart_port *port)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+
+	dev_dbg(up->port.dev, "serial_omap_enable_ms+%d\n", up->port.line);
+
+	pm_runtime_get_sync(up->dev);
+	up->ier |= UART_IER_MSI;
+	serial_out_rtu(up, UART_IER, up->ier);
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+}
+
+void serial_omap_stop_tx(struct uart_port *port)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+
+	pm_runtime_get_sync(up->dev);
+
+#ifdef CONFIG_SERIAL_OMAP_RS485
+	if(up->rs485.flags & SER_RS485_ENABLED){
+		up->tx_in_progress = 0;
+		up->tx_wait_end = 1;
+		serial_omap_thri_mode(up);
+		serial_omap_enable_ier_thri(up);
+	} else
+#endif
+	serial_omap_disable_ier_thri(up);
+
+	serial_omap_set_forceidle(up);
+
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+}
+
+static void serial_omap_stop_rx(struct uart_port *port)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+
+	pm_runtime_get_sync(up->dev);
+	up->ier &= ~UART_IER_RLSI;
+	up->port.read_status_mask &= ~UART_LSR_DR;
+	serial_out_rtu(up, UART_IER, up->ier);
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+}
+
+static inline unsigned int __serial_omap_tx_empty(struct uart_omap_port *up){
+	return serial_in_rtu(up, UART_LSR) & UART_LSR_TEMT ? TIOCSER_TEMT : 0;
+}
+
+#ifdef CONFIG_SERIAL_OMAP_RS485
+// TCe: new
+inline int serial_omap_end_tx(struct uart_omap_port *up)
+{
+	if((up->rs485.flags & SER_RS485_ENABLED) && up->tx_wait_end &&
+	   __serial_omap_tx_empty(up)){
+
+		up->tx_wait_end = 0;
+		up->tx_in_progress = 0;
+
+		if(rts_on_send(up))
+			serial_omap_update_rts(up);
+
+		/* rts change causes a break condition, just remove it */
+		serial_in_rtu(up, UART_RX);
+
+		/* Enable RX interrupt */
+		up->ier = UART_IER_RLSI | UART_IER_RDI;
+		up->port.read_status_mask |= UART_LSR_DR;
+		serial_out_rtu(up, UART_IER, up->ier);
+
+		serial_out_rtu(up, UART_OMAP_SCR, up->scr);
+
+		return 1;
+	}
+
+	return 0;
+}
+#endif
+
+void transmit_chars_rtu(struct uart_omap_port *up, unsigned int lsr)
+{
+	struct circ_buf *xmit = &up->port.state->xmit;
+	int count;
+
+#ifdef CONFIG_SERIAL_OMAP_RS485
+	if(up->rs485.flags & SER_RS485_ENABLED){
+		if(!up->tx_in_progress){
+			up->tx_in_progress = 1;
+
+                        /* Clear LSR (error/status bits, especially Data Ready bit) */
+                        serial_in_rtu(up, UART_LSR);
+
+                        /* Disable RX */
+                        up->ier &= ~(UART_IER_RLSI | UART_IER_RDI);
+                        up->port.read_status_mask &= ~UART_LSR_DR;
+	                serial_out_rtu(up, UART_IER, up->ier);
+
+			if(rts_on_send(up))
+				serial_omap_update_rts(up);
+		}
+
+		if(up->tx_wait_end) {
+			up->tx_wait_end = 0;
+			serial_omap_thri_mode(up);
+			serial_omap_disable_ier_thri(up); /* it gets reenabled below */
+		}
+	}
+#endif
+
+	if (up->port.x_char) {
+		serial_out_rtu(up, UART_TX, up->port.x_char);
+		up->port.icount.tx++;
+		up->port.x_char = 0;
+		return;
+	}
+	if (uart_circ_empty(xmit) || uart_tx_stopped(&up->port)) {
+		serial_omap_stop_tx(&up->port);
+		return;
+	}
+	count = up->port.fifosize / 4;
+
+	do {
+		serial_out_rtu(up, UART_TX, xmit->buf[xmit->tail]);
+		xmit->tail = (xmit->tail + 1) & (UART_XMIT_SIZE - 1);
+		up->port.icount.tx++;
+		if (uart_circ_empty(xmit))
+			break;
+	} while (--count > 0);
+
+	if (uart_circ_chars_pending(xmit) < WAKEUP_CHARS) {
+		spin_unlock(&up->port.lock);
+		uart_write_wakeup(&up->port);
+		spin_lock(&up->port.lock);
+	}
+
+	if (uart_circ_empty(xmit))
+		serial_omap_stop_tx(&up->port);
+	else
+		serial_omap_start_tx(&up->port);
+}
+
+static inline void serial_omap_enable_ier_thri(struct uart_omap_port *up)
+{
+	if (!(up->ier & UART_IER_THRI)) {
+		up->ier |= UART_IER_THRI;
+		serial_out_rtu(up, UART_IER, up->ier);
+	}
+}
+
+void serial_omap_start_tx(struct uart_port *port)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+
+	pm_runtime_get_sync(up->dev);
+	serial_omap_enable_ier_thri(up);
+	serial_omap_set_noidle(up);
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+}
+
+static void serial_omap_throttle(struct uart_port *port)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+	unsigned long flags;
+
+	pm_runtime_get_sync(up->dev);
+	serial_omap_irq_disable(up);
+	spin_lock_irqsave(&up->port.lock, flags);
+	up->ier &= ~(UART_IER_RLSI | UART_IER_RDI);
+	serial_out_rtu(up, UART_IER, up->ier);
+	spin_unlock_irqrestore(&up->port.lock, flags);
+	serial_omap_irq_enable(up);
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+}
+
+static void serial_omap_unthrottle(struct uart_port *port)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+	unsigned long flags;
+
+	pm_runtime_get_sync(up->dev);
+	serial_omap_irq_disable(up);
+	spin_lock_irqsave(&up->port.lock, flags);
+	up->ier |= UART_IER_RLSI | UART_IER_RDI;
+	serial_out_rtu(up, UART_IER, up->ier);
+	spin_unlock_irqrestore(&up->port.lock, flags);
+	serial_omap_irq_enable(up);
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+}
+
+static unsigned int check_modem_status(struct uart_omap_port *up)
+{
+	unsigned int status;
+
+	status = serial_in_rtu(up, UART_MSR);
+	status |= up->msr_saved_flags;
+	up->msr_saved_flags = 0;
+	if ((status & UART_MSR_ANY_DELTA) == 0)
+		return status;
+
+	if (status & UART_MSR_ANY_DELTA && up->ier & UART_IER_MSI &&
+	    up->port.state != NULL) {
+		if (status & UART_MSR_TERI)
+			up->port.icount.rng++;
+		if (status & UART_MSR_DDSR)
+			up->port.icount.dsr++;
+		if (status & UART_MSR_DDCD)
+			uart_handle_dcd_change
+				(&up->port, status & UART_MSR_DCD);
+		if (status & UART_MSR_DCTS)
+			uart_handle_cts_change
+				(&up->port, status & UART_MSR_CTS);
+		wake_up_interruptible(&up->port.state->port.delta_msr_wait);
+	}
+
+	return status;
+}
+
+#define SET_LSR(val, lsr) ((val) |= ((lsr) << 8))
+#define GET_LSR(val) ((val) >> 8)
+
+#define SET_CH(val, ch) ((val) |= (ch))
+#define GET_CH(val) ((val) & 0xff)
+
+void inline static serial_omap_do_rx(struct uart_omap_port *up, unsigned char ch, unsigned int lsr)
+{
+	unsigned int flag = TTY_NORMAL;
+
+	up->port.icount.rx++;
+
+	if (uart_handle_sysrq_char(&up->port, ch))
+		return;
+
+	uart_insert_char(&up->port, lsr, UART_LSR_OE, ch, flag);
+}
+
+static void serial_omap_rlsi(struct uart_omap_port *up, unsigned int lsr)
+{
+	uint16_t val = 0;
+	unsigned char ch = 0;
+
+	/* clear byte in rx fifo */
+	if (likely(lsr & UART_LSR_DR))
+		ch = serial_in_rtu(up, UART_RX);
+
+	SET_LSR(val, lsr);
+	/* error happened -> ignore ch */
+	kfifo_put(&up->rx_fifo, val);
+	tasklet_hi_schedule(&up->rx_tsklt);
+}
+
+// serial_omap_rlsi() bottom half
+void inline static serial_omap_rx_handle_errors(struct uart_omap_port *up, unsigned int lsr)
+{
+	unsigned int flag = TTY_NORMAL;
+
+	up->port.icount.rx++;
+
+	if (lsr & UART_LSR_BI) {
+		flag = TTY_BREAK;
+		lsr &= ~(UART_LSR_FE | UART_LSR_PE);
+		up->port.icount.brk++;
+		/*
+		 * We do the SysRQ and SAK checking
+		 * here because otherwise the break
+		 * may get masked by ignore_status_mask
+		 * or read_status_mask.
+		 */
+		if (uart_handle_break(&up->port))
+			return;
+
+	}
+
+	if (lsr & UART_LSR_PE) {
+		flag = TTY_PARITY;
+		up->port.icount.parity++;
+	}
+
+	if (lsr & UART_LSR_FE) {
+		flag = TTY_FRAME;
+		up->port.icount.frame++;
+	}
+
+	if (lsr & UART_LSR_OE)
+		up->port.icount.overrun++;
+
+#ifdef CONFIG_SERIAL_OMAP_CONSOLE
+	if (up->port.line == up->port.cons->index) {
+		/* Recover the break flag from console xmit */
+		lsr |= up->lsr_break_flag;
+	}
+#endif
+	uart_insert_char(&up->port, lsr, UART_LSR_OE, 0, flag);
+}
+
+static void serial_omap_rdi(struct uart_omap_port *up, unsigned int lsr)
+{
+	uint16_t val = 0;
+
+	if (!(lsr & UART_LSR_DR))
+		return;
+
+	SET_CH(val, serial_in_rtu(up, UART_RX));
+	SET_LSR(val, lsr);
+
+	kfifo_put(&up->rx_fifo, val);
+
+	tasklet_hi_schedule(&up->rx_tsklt);
+}
+
+/* BUGME: version for PSV was lacking pm calls here! */
+void serial_omap_modem_status_bh(unsigned long dev_id)
+{
+	struct uart_omap_port *up = (void*) dev_id;
+
+	pm_runtime_get_sync(up->dev);
+
+	spin_lock_bh(&up->port.lock);
+	check_modem_status(up);
+	spin_unlock_bh(&up->port.lock);
+
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+
+}
+
+
+/*
+ * Wrapper to load off transmit_chars into a tasklet. Identical to modbus_omap_transmit()
+ */
+void serial_omap_transmit_bh(unsigned long dev_id)
+{
+	struct uart_omap_port *up = (void*) dev_id;
+
+	pm_runtime_get_sync(up->dev);
+
+	spin_lock(&up->port.lock);
+	transmit_chars_rtu(up, serial_in_rtu(up, UART_LSR));
+	spin_unlock(&up->port.lock);
+
+	serial_omap_set_noidle(up);
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+}
+
+#define UART_LSR_ERROR_MASK (UART_LSR_BI | UART_LSR_FE | UART_LSR_PE |UART_LSR_OE)
+
+void serial_omap_receive_bh(unsigned long dev_id)
+{
+	struct uart_omap_port *up = (void*) dev_id;
+	uint16_t val = 0;
+	unsigned char ch = 0;
+	unsigned int lsr, nr_processed;
+
+	pm_runtime_get_sync(up->dev);
+	spin_lock_bh(&up->port.lock);
+
+	while(!kfifo_is_empty(&up->rx_fifo)) {
+
+		nr_processed = kfifo_get(&up->rx_fifo, &val);
+
+		if((lsr = GET_LSR(val)) & UART_LSR_ERROR_MASK)
+			serial_omap_rx_handle_errors(up, lsr);
+		else
+		{
+			ch = GET_CH(val);
+			/* regular rx; should be last statement in while (because of handle_sysrq) */
+			serial_omap_do_rx(up, ch, lsr);
+		}
+	}
+
+	spin_unlock_bh(&up->port.lock);
+
+	/* stuff from vanilla irq handler that may hold port.lock */
+	tty_flip_buffer_push(&up->port.state->port);
+
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+}
+
+/**
+ * serial_omap_irq_rtu() - This handles the interrupt from one port
+ * @irq: uart port irq number
+ * @dev_id: uart port info
+ */
+irqreturn_t serial_omap_irq_rtu(int irq, void *dev_id)
+{
+	struct uart_omap_port *up = dev_id;
+	unsigned int iir, lsr;
+	unsigned int type;
+	irqreturn_t ret = IRQ_NONE;
+	int max_count = 256;
+
+	do {
+		iir = serial_in_rtu(up, UART_IIR);
+		if (iir & UART_IIR_NO_INT)
+			break;
+
+		ret = IRQ_HANDLED;
+		lsr = serial_in_rtu(up, UART_LSR);
+
+		/* extract IRQ type from IIR register */
+		type = iir & 0x3e;
+
+		switch (type) {
+		case UART_IIR_MSI:
+			/*
+			 * This should be safe towards process context functions because
+			 * we don't clear any existing bits, only adding new ones.
+			 */
+			up->msr_saved_flags |= serial_in_rtu(up, UART_MSR);
+			tasklet_hi_schedule(&up->mdm_status_tsklt);
+			break;
+		case UART_IIR_THRI:
+			/*
+			 * THR irq is cleared by writing to TX FIFO in tasklet
+			 * It gets reenabled there
+			 */
+			serial_omap_disable_ier_thri(up);
+
+#ifdef CONFIG_SERIAL_OMAP_RS485
+			if(!serial_omap_end_tx(up))
+				tasklet_hi_schedule(&up->tx_tsklt);
+#else
+			tasklet_hi_schedule(&up->tx_tsklt);
+#endif
+			break;
+		case UART_IIR_RX_TIMEOUT:
+			/* FALLTHROUGH */
+		case UART_IIR_RDI:
+			serial_omap_rdi(up, lsr);
+			break;
+		case UART_IIR_RLSI:
+			serial_omap_rlsi(up, lsr);
+			break;
+		case UART_IIR_CTS_RTS_DSR:
+			/* simply try again */
+			break;
+		case UART_IIR_XOFF:
+			/* FALLTHROUGH */
+		default:
+			break;
+		}
+	} while (!(iir & UART_IIR_NO_INT) && max_count--);
+
+	up->port_activity = jiffies;
+
+	return ret;
+}
+
+static unsigned int serial_omap_tx_empty(struct uart_port *port)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+	unsigned long flags = 0;
+	unsigned int ret = 0;
+
+	pm_runtime_get_sync(up->dev);
+	dev_dbg(up->port.dev, "serial_omap_tx_empty+%d\n", up->port.line);
+
+	serial_omap_irq_disable(up);
+	spin_lock_irqsave(&up->port.lock, flags);
+	//FIXME: use __serial_omap_tx_empty instead?
+	ret = serial_in_rtu(up, UART_LSR) & UART_LSR_TEMT ? TIOCSER_TEMT : 0;
+	spin_unlock_irqrestore(&up->port.lock, flags);
+	serial_omap_irq_enable(up);
+
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+	return ret;
+}
+
+static unsigned int serial_omap_get_mctrl(struct uart_port *port)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+	unsigned int status;
+	unsigned int ret = 0;
+
+	pm_runtime_get_sync(up->dev);
+	status = check_modem_status(up);
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+
+	dev_dbg(up->port.dev, "serial_omap_get_mctrl+%d\n", up->port.line);
+
+	if (status & UART_MSR_DCD)
+		ret |= TIOCM_CAR;
+	if (status & UART_MSR_RI)
+		ret |= TIOCM_RNG;
+	if (status & UART_MSR_DSR)
+		ret |= TIOCM_DSR;
+	if (status & UART_MSR_CTS)
+		ret |= TIOCM_CTS;
+	return ret;
+}
+
+static void serial_omap_set_mctrl(struct uart_port *port, unsigned int mctrl)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+	unsigned char mcr = 0, old_mcr;
+
+	dev_dbg(up->port.dev, "serial_omap_set_mctrl+%d\n", up->port.line);
+	if (mctrl & TIOCM_RTS)
+		mcr |= UART_MCR_RTS;
+	if (mctrl & TIOCM_DTR)
+		mcr |= UART_MCR_DTR;
+	if (mctrl & TIOCM_OUT1)
+		mcr |= UART_MCR_OUT1;
+	if (mctrl & TIOCM_OUT2)
+		mcr |= UART_MCR_OUT2;
+	if (mctrl & TIOCM_LOOP)
+		mcr |= UART_MCR_LOOP;
+
+	pm_runtime_get_sync(up->dev);
+	old_mcr = serial_in_rtu(up, UART_MCR);
+	old_mcr &= ~(UART_MCR_LOOP | UART_MCR_OUT2 | UART_MCR_OUT1 |
+		     UART_MCR_DTR | UART_MCR_RTS);
+	up->mcr = old_mcr | mcr;
+#ifdef CONFIG_SERIAL_OMAP_RS485
+	if(up->rs485.flags & SER_RS485_ENABLED && rts_on_send(up))
+		serial_omap_update_rts(up);
+#endif
+	serial_out_rtu(up, UART_MCR, up->mcr);
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+
+}
+
+static void serial_omap_break_ctl(struct uart_port *port, int break_state)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+	unsigned long flags = 0;
+
+	dev_dbg(up->port.dev, "serial_omap_break_ctl+%d\n", up->port.line);
+	pm_runtime_get_sync(up->dev);
+	serial_omap_irq_disable(up);
+	spin_lock_irqsave(&up->port.lock, flags);
+	if (break_state == -1)
+		up->lcr |= UART_LCR_SBC;
+	else
+		up->lcr &= ~UART_LCR_SBC;
+	serial_out_rtu(up, UART_LCR, up->lcr);
+	spin_unlock_irqrestore(&up->port.lock, flags);
+	serial_omap_irq_enable(up);
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+}
+
+static int serial_omap_startup(struct uart_port *port)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+	unsigned long flags = 0;
+	int retval;
+
+	/*
+	 * Allocate the IRQ
+	 */
+	retval = request_irq(up->port.irq, serial_omap_irq_rtu, up->port.irqflags | IRQF_NO_THREAD,
+				up->name, up);
+	if (retval)
+		return retval;
+
+	dev_dbg(up->port.dev, "serial_omap_startup+%d\n", up->port.line);
+
+	pm_runtime_get_sync(up->dev);
+	/*
+	 * Clear the FIFO buffers and disable them.
+	 * (they will be reenabled in set_termios())
+	 */
+	serial_omap_clear_fifos(up);
+	/* For Hardware flow control */
+	serial_out_rtu(up, UART_MCR, UART_MCR_RTS);
+
+	/*
+	 * Clear the interrupt registers.
+	 */
+	(void) serial_in_rtu(up, UART_LSR);
+	if (serial_in_rtu(up, UART_LSR) & UART_LSR_DR)
+		(void) serial_in_rtu(up, UART_RX);
+	(void) serial_in_rtu(up, UART_IIR);
+	(void) serial_in_rtu(up, UART_MSR);
+
+	/*
+	 * Now, initialize the UART
+	 */
+	serial_out_rtu(up, UART_LCR, UART_LCR_WLEN8);
+	serial_omap_irq_disable(up);
+	spin_lock_irqsave(&up->port.lock, flags);
+	/*
+	 * Most PC uarts need OUT2 raised to enable interrupts.
+	 */
+	up->port.mctrl |= TIOCM_OUT2;
+	serial_omap_set_mctrl(&up->port, up->port.mctrl);
+	spin_unlock_irqrestore(&up->port.lock, flags);
+	serial_omap_irq_enable(up);
+
+	up->msr_saved_flags = 0;
+
+	retval = kfifo_alloc(&up->rx_fifo, 128, 0);
+
+	if(retval) {
+		dev_err(up->dev, "Unable to allocate memory (%d)\n", retval);
+		return retval;
+	}
+
+	tasklet_init(&up->tx_tsklt, serial_omap_transmit_bh, (unsigned long)up);
+	tasklet_init(&up->rx_tsklt, serial_omap_receive_bh, (unsigned long)up);
+	tasklet_init(&up->mdm_status_tsklt, serial_omap_modem_status_bh, (unsigned long)up);
+
+	/*
+	 * Finally, enable interrupts. Note: Modem status interrupts
+	 * are set via set_termios(), which will be occurring imminently
+	 * anyway, so we don't enable them here.
+	 */
+	up->ier = UART_IER_RLSI | UART_IER_RDI;
+	serial_out_rtu(up, UART_IER, up->ier);
+
+	/* Enable module level wake up */
+	serial_out_rtu(up, UART_OMAP_WER, OMAP_UART_WER_MOD_WKUP);
+
+#ifdef CONFIG_SERIAL_OMAP_MODBUS
+	modbus_omap_startup(up);
+#endif
+
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+	up->port_activity = jiffies;
+
+	return 0;
+}
+
+static void serial_omap_shutdown(struct uart_port *port)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+	unsigned long flags = 0;
+
+	dev_dbg(up->port.dev, "serial_omap_shutdown+%d\n", up->port.line);
+
+	pm_runtime_get_sync(up->dev);
+
+#ifdef CONFIG_SERIAL_OMAP_MODBUS
+	modbus_omap_shutdown(up);
+#endif
+
+	/*
+	 * Disable interrupts from this port
+	 */
+	up->ier = 0;
+	serial_out_rtu(up, UART_IER, 0);
+
+	serial_omap_irq_disable(up);
+	spin_lock_irqsave(&up->port.lock, flags);
+	up->port.mctrl &= ~TIOCM_OUT2;
+	serial_omap_set_mctrl(&up->port, up->port.mctrl);
+	spin_unlock_irqrestore(&up->port.lock, flags);
+	serial_omap_irq_enable(up);
+
+	/*
+	 * Disable break condition and FIFOs
+	 */
+	serial_out_rtu(up, UART_LCR, serial_in_rtu(up, UART_LCR) & ~UART_LCR_SBC);
+	serial_omap_clear_fifos(up);
+
+	/*
+	 * Read data port to reset things, and then free the irq
+	 */
+	if (serial_in_rtu(up, UART_LSR) & UART_LSR_DR)
+		(void) serial_in_rtu(up, UART_RX);
+
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+	free_irq(up->port.irq, up);
+
+	up->tx_in_progress = 0;
+	up->tx_wait_end = 0;
+
+	tasklet_kill(&up->tx_tsklt);
+	tasklet_kill(&up->rx_tsklt);
+	tasklet_kill(&up->mdm_status_tsklt);
+	kfifo_free(&up->rx_fifo);
+}
+
+static void serial_omap_uart_qos_work(struct work_struct *work)
+{
+	struct uart_omap_port *up = container_of(work, struct uart_omap_port,
+						qos_work);
+
+	cpu_latency_qos_update_request(&up->pm_qos_request, up->latency);
+}
+
+static void
+serial_omap_set_termios(struct uart_port *port, struct ktermios *termios,
+			struct ktermios *old)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+	unsigned char cval = 0;
+	unsigned int baud, quot;
+
+	switch (termios->c_cflag & CSIZE) {
+	case CS5:
+		cval = UART_LCR_WLEN5;
+		break;
+	case CS6:
+		cval = UART_LCR_WLEN6;
+		break;
+	case CS7:
+		cval = UART_LCR_WLEN7;
+		break;
+	default:
+	case CS8:
+		cval = UART_LCR_WLEN8;
+		break;
+	}
+
+	if (termios->c_cflag & CSTOPB)
+		cval |= UART_LCR_STOP;
+	if (termios->c_cflag & PARENB)
+		cval |= UART_LCR_PARITY;
+	if (!(termios->c_cflag & PARODD))
+		cval |= UART_LCR_EPAR;
+	if (termios->c_cflag & CMSPAR)
+		cval |= UART_LCR_SPAR;
+
+	/*
+	 * Ask the core to calculate the divisor for us.
+	 */
+
+	baud = uart_get_baud_rate(port, termios, old, 0, port->uartclk/13);
+	quot = serial_omap_get_divisor(port, baud);
+
+#ifdef CONFIG_SERIAL_OMAP_MODBUS
+	modbus_omap_calc_to(up, baud);
+#endif
+
+	/* calculate wakeup latency constraint */
+	up->calc_latency = (USEC_PER_SEC * up->port.fifosize) / (baud / 8);
+	up->latency = up->calc_latency;
+	schedule_work(&up->qos_work);
+
+	up->dll = quot & 0xff;
+	up->dlh = quot >> 8;
+	up->mdr1 = UART_OMAP_MDR1_DISABLE;
+
+	up->fcr = UART_FCR_R_TRIG_01 | UART_FCR_T_TRIG_01 |
+			UART_FCR_ENABLE_FIFO;
+
+	/*
+	 * Ok, we're now changing the port state. Do it with
+	 * interrupts disabled.
+	 */
+	pm_runtime_get_sync(up->dev);
+	serial_omap_irq_disable(up);
+	spin_lock(&up->port.lock);
+
+	/*
+	 * Update the per-port timeout.
+	 */
+	uart_update_timeout(port, termios->c_cflag, baud);
+
+	up->port.read_status_mask = UART_LSR_OE | UART_LSR_THRE | UART_LSR_DR;
+	if (termios->c_iflag & INPCK)
+		up->port.read_status_mask |= UART_LSR_FE | UART_LSR_PE;
+	if (termios->c_iflag & (BRKINT | PARMRK))
+		up->port.read_status_mask |= UART_LSR_BI;
+
+	/*
+	 * Characters to ignore
+	 */
+	up->port.ignore_status_mask = 0;
+	if (termios->c_iflag & IGNPAR)
+		up->port.ignore_status_mask |= UART_LSR_PE | UART_LSR_FE;
+	if (termios->c_iflag & IGNBRK) {
+		up->port.ignore_status_mask |= UART_LSR_BI;
+		/*
+		 * If we're ignoring parity and break indicators,
+		 * ignore overruns too (for real raw support).
+		 */
+		if (termios->c_iflag & IGNPAR)
+			up->port.ignore_status_mask |= UART_LSR_OE;
+	}
+
+	/*
+	 * ignore all characters if CREAD is not set
+	 */
+	if ((termios->c_cflag & CREAD) == 0)
+		up->port.ignore_status_mask |= UART_LSR_DR;
+
+	/*
+	 * Modem status interrupts
+	 */
+	up->ier &= ~UART_IER_MSI;
+	if (UART_ENABLE_MS(&up->port, termios->c_cflag))
+		up->ier |= UART_IER_MSI;
+	serial_out_rtu(up, UART_IER, up->ier);
+	serial_out_rtu(up, UART_LCR, cval);		/* reset DLAB */
+	up->lcr = cval;
+	up->scr = 0;
+
+	/* FIFOs and DMA Settings */
+
+	/* FCR can be changed only when the
+	 * baud clock is not running
+	 * DLL_REG and DLH_REG set to 0.
+	 */
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_A);
+	serial_out_rtu(up, UART_DLL, 0);
+	serial_out_rtu(up, UART_DLM, 0);
+	serial_out_rtu(up, UART_LCR, 0);
+
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_B);
+
+	up->efr = serial_in_rtu(up, UART_EFR) & ~UART_EFR_ECB;
+	up->efr &= ~UART_EFR_SCD;
+	serial_out_rtu(up, UART_EFR, up->efr | UART_EFR_ECB);
+
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_A);
+	up->mcr = serial_in_rtu(up, UART_MCR) & ~UART_MCR_TCRTLR;
+	serial_out_rtu(up, UART_MCR, up->mcr | UART_MCR_TCRTLR);
+	/* FIFO ENABLE, DMA MODE */
+
+	up->scr |= OMAP_UART_SCR_RX_TRIG_GRANU1_MASK;
+	/*
+	 * NOTE: Setting OMAP_UART_SCR_RX_TRIG_GRANU1_MASK
+	 * sets Enables the granularity of 1 for TRIGGER RX
+	 * level. Along with setting RX FIFO trigger level
+	 * to 1 (as noted below, 16 characters) and TLR[3:0]
+	 * to zero this will result RX FIFO threshold level
+	 * to 1 character, instead of 16 as noted in comment
+	 * below.
+	 */
+
+	/* Set receive FIFO threshold to 16 characters and
+	 * transmit FIFO threshold to 16 spaces
+	 */
+	up->fcr &= ~OMAP_UART_FCR_RX_FIFO_TRIG_MASK;
+	up->fcr &= ~OMAP_UART_FCR_TX_FIFO_TRIG_MASK;
+	up->fcr |= UART_FCR6_R_TRIGGER_16 | UART_FCR6_T_TRIGGER_24 |
+		UART_FCR_ENABLE_FIFO;
+
+	serial_out_rtu(up, UART_FCR, up->fcr);
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_B);
+
+	serial_out_rtu(up, UART_OMAP_SCR, up->scr);
+
+	/* Reset UART_MCR00CRTLR: this must be done with the EFR_ECB bit set */
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_A);
+	serial_out_rtu(up, UART_MCR, up->mcr);
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_B);
+	serial_out_rtu(up, UART_EFR, up->efr);
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_A);
+
+	/* Protocol, Baud Rate, and Interrupt Settings */
+
+	if (up->errata & UART_ERRATA_i202_MDR1_ACCESS)
+		serial_omap_mdr1_errataset(up, up->mdr1);
+	else
+		serial_out_rtu(up, UART_OMAP_MDR1, up->mdr1);
+
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_B);
+	serial_out_rtu(up, UART_EFR, up->efr | UART_EFR_ECB);
+
+	serial_out_rtu(up, UART_LCR, 0);
+	serial_out_rtu(up, UART_IER, 0);
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_B);
+
+	serial_out_rtu(up, UART_DLL, up->dll);	/* LS of divisor */
+	serial_out_rtu(up, UART_DLM, up->dlh);	/* MS of divisor */
+
+	serial_out_rtu(up, UART_LCR, 0);
+	serial_out_rtu(up, UART_IER, up->ier);
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_B);
+
+	serial_out_rtu(up, UART_EFR, up->efr);
+	serial_out_rtu(up, UART_LCR, cval);
+
+	if (!serial_omap_baud_is_mode16(port, baud))
+		up->mdr1 = UART_OMAP_MDR1_13X_MODE;
+	else
+		up->mdr1 = UART_OMAP_MDR1_16X_MODE;
+
+	if (up->errata & UART_ERRATA_i202_MDR1_ACCESS)
+		serial_omap_mdr1_errataset(up, up->mdr1);
+	else
+		serial_out_rtu(up, UART_OMAP_MDR1, up->mdr1);
+
+	/* Configure flow control */
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_B);
+
+	/* XON1/XOFF1 accessible mode B, TCRTLR=0, ECB=0 */
+	serial_out_rtu(up, UART_XON1, termios->c_cc[VSTART]);
+	serial_out_rtu(up, UART_XOFF1, termios->c_cc[VSTOP]);
+
+	/* Enable access to TCR/TLR */
+	serial_out_rtu(up, UART_EFR, up->efr | UART_EFR_ECB);
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_A);
+	serial_out_rtu(up, UART_MCR, up->mcr | UART_MCR_TCRTLR);
+
+	serial_out_rtu(up, UART_TI752_TCR, OMAP_UART_TCR_TRIG);
+
+	if (termios->c_cflag & CRTSCTS && up->port.flags & UPF_HARD_FLOW) {
+		/* Enable AUTORTS and AUTOCTS */
+		up->efr |= UART_EFR_CTS | UART_EFR_RTS;
+
+		/* Ensure MCR RTS is asserted */
+		up->mcr |= UART_MCR_RTS;
+	} else {
+		/* Disable AUTORTS and AUTOCTS */
+		up->efr &= ~(UART_EFR_CTS | UART_EFR_RTS);
+	}
+
+	if (up->port.flags & UPF_SOFT_FLOW) {
+		/* clear SW control mode bits */
+		up->efr &= OMAP_UART_SW_CLR;
+
+		/*
+		 * IXON Flag:
+		 * Enable XON/XOFF flow control on input.
+		 * Receiver compares XON1, XOFF1.
+		 */
+		if (termios->c_iflag & IXON)
+			up->efr |= OMAP_UART_SW_RX;
+
+		/*
+		 * IXOFF Flag:
+		 * Enable XON/XOFF flow control on output.
+		 * Transmit XON1, XOFF1
+		 */
+		if (termios->c_iflag & IXOFF)
+			up->efr |= OMAP_UART_SW_TX;
+
+		/*
+		 * IXANY Flag:
+		 * Enable any character to restart output.
+		 * Operation resumes after receiving any
+		 * character after recognition of the XOFF character
+		 */
+		if (termios->c_iflag & IXANY)
+			up->mcr |= UART_MCR_XONANY;
+		else
+			up->mcr &= ~UART_MCR_XONANY;
+	}
+	serial_out_rtu(up, UART_MCR, up->mcr);
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_B);
+	serial_out_rtu(up, UART_EFR, up->efr);
+	serial_out_rtu(up, UART_LCR, up->lcr);
+
+	serial_omap_set_mctrl(&up->port, up->port.mctrl);
+
+	spin_unlock(&up->port.lock);
+	serial_omap_irq_enable(up);
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+	dev_dbg(up->port.dev, "serial_omap_set_termios+%d\n", up->port.line);
+}
+
+/* static int serial_omap_set_wake(struct uart_port *port, unsigned int state) */
+/* { */
+/* 	struct uart_omap_port *up = to_uart_omap_port(port); */
+
+/* 	serial_omap_enable_wakeup(up, state); */
+
+/* 	return 0; */
+/* } */
+
+static void
+serial_omap_pm(struct uart_port *port, unsigned int state,
+	       unsigned int oldstate)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+	unsigned char efr;
+
+	dev_dbg(up->port.dev, "serial_omap_pm+%d\n", up->port.line);
+
+	pm_runtime_get_sync(up->dev);
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_B);
+	efr = serial_in_rtu(up, UART_EFR);
+	serial_out_rtu(up, UART_EFR, efr | UART_EFR_ECB);
+	serial_out_rtu(up, UART_LCR, 0);
+
+	serial_out_rtu(up, UART_IER, (state != 0) ? UART_IERX_SLEEP : 0);
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_B);
+	serial_out_rtu(up, UART_EFR, efr);
+	serial_out_rtu(up, UART_LCR, 0);
+
+	if (!device_may_wakeup(up->dev)) {
+		if (!state)
+			pm_runtime_forbid(up->dev);
+		else
+			pm_runtime_allow(up->dev);
+	}
+
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+}
+
+static void serial_omap_release_port(struct uart_port *port)
+{
+	dev_dbg(port->dev, "serial_omap_release_port+\n");
+}
+
+static int serial_omap_request_port(struct uart_port *port)
+{
+	dev_dbg(port->dev, "serial_omap_request_port+\n");
+	return 0;
+}
+
+static void serial_omap_config_port(struct uart_port *port, int flags)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+
+	dev_dbg(up->port.dev, "serial_omap_config_port+%d\n",
+							up->port.line);
+	up->port.type = PORT_OMAP;
+	up->port.flags |= UPF_SOFT_FLOW | UPF_HARD_FLOW;
+}
+
+static int
+serial_omap_verify_port(struct uart_port *port, struct serial_struct *ser)
+{
+	/* we don't want the core code to modify any port params */
+	dev_dbg(port->dev, "serial_omap_verify_port+\n");
+	return -EINVAL;
+}
+
+static const char *
+serial_omap_type(struct uart_port *port)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+
+	dev_dbg(up->port.dev, "serial_omap_type+%d\n", up->port.line);
+	return up->name;
+}
+
+#define BOTH_EMPTY (UART_LSR_TEMT | UART_LSR_THRE)
+
+static inline void wait_for_xmitr(struct uart_omap_port *up)
+{
+	unsigned int status, tmout = 10000;
+
+	/* Wait up to 10ms for the character(s) to be sent. */
+	do {
+		status = serial_in_rtu(up, UART_LSR);
+
+		if (status & UART_LSR_BI)
+			up->lsr_break_flag = UART_LSR_BI;
+
+		if (--tmout == 0)
+			break;
+		udelay(1);
+	} while ((status & BOTH_EMPTY) != BOTH_EMPTY);
+
+	/* Wait up to 1s for flow control if necessary */
+	if (up->port.flags & UPF_CONS_FLOW) {
+		tmout = 1000000;
+		for (tmout = 1000000; tmout; tmout--) {
+			unsigned int msr = serial_in_rtu(up, UART_MSR);
+
+			up->msr_saved_flags |= msr & MSR_SAVE_FLAGS;
+			if (msr & UART_MSR_CTS)
+				break;
+
+			udelay(1);
+		}
+	}
+}
+
+#ifdef CONFIG_CONSOLE_POLL
+
+static void serial_omap_poll_put_char(struct uart_port *port, unsigned char ch)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+
+	pm_runtime_get_sync(up->dev);
+	wait_for_xmitr(up);
+	serial_out_rtu(up, UART_TX, ch);
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+}
+
+static int serial_omap_poll_get_char(struct uart_port *port)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+	unsigned int status;
+
+	pm_runtime_get_sync(up->dev);
+	status = serial_in_rtu(up, UART_LSR);
+	if (!(status & UART_LSR_DR)) {
+		status = NO_POLL_CHAR;
+		goto out;
+	}
+
+	status = serial_in_rtu(up, UART_RX);
+
+out:
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+
+	return status;
+}
+
+#endif /* CONFIG_CONSOLE_POLL */
+
+#ifdef CONFIG_SERIAL_OMAP_CONSOLE
+
+static struct uart_omap_port *serial_omap_console_ports[OMAP_MAX_HSUART_PORTS];
+
+static struct uart_driver serial_omap_reg;
+
+static void serial_omap_console_putchar(struct uart_port *port, int ch)
+{
+	struct uart_omap_port *up = to_uart_omap_port(port);
+
+	wait_for_xmitr(up);
+	serial_out_rtu(up, UART_TX, ch);
+}
+
+static void
+serial_omap_console_write(struct console *co, const char *s,
+		unsigned int count)
+{
+	struct uart_omap_port *up = serial_omap_console_ports[co->index];
+	unsigned long flags;
+	unsigned int ier;
+	int locked = 1;
+
+	pm_runtime_get_sync(up->dev);
+
+	serial_omap_irq_disable(up);
+	if (up->port.sysrq)
+		locked = 0;
+	else if (oops_in_progress)
+		locked = spin_trylock_irqsave(&up->port.lock, flags);
+	else
+		spin_lock_irqsave(&up->port.lock, flags);
+
+	/*
+	 * First save the IER then disable the interrupts
+	 */
+	ier = serial_in_rtu(up, UART_IER);
+	serial_out_rtu(up, UART_IER, 0);
+
+	uart_console_write(&up->port, s, count, serial_omap_console_putchar);
+
+	/*
+	 * Finally, wait for transmitter to become empty
+	 * and restore the IER
+	 */
+	wait_for_xmitr(up);
+	serial_out_rtu(up, UART_IER, ier);
+	/*
+	 * The receive handling will happen properly because the
+	 * receive ready bit will still be set; it is not cleared
+	 * on read.  However, modem control will not, we must
+	 * call it if we have saved something in the saved flags
+	 * while processing with interrupts off.
+	 */
+	if (up->msr_saved_flags)
+		check_modem_status(up);
+
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+	if (locked)
+		spin_unlock_irqrestore(&up->port.lock, flags);
+
+	serial_omap_irq_enable(up);
+}
+
+#ifdef CONFIG_SERIAL_OMAP_RS485
+static int
+serial_omap_ioctl(struct uart_port *port, unsigned int cmd, unsigned long arg)
+{
+	struct uart_omap_port *up = (struct uart_omap_port *) port;
+	struct serial_rs485 rs485conf;
+	unsigned long flags;
+
+	switch(cmd) {
+	case TIOCSRS485:
+		if(copy_from_user(&rs485conf, (struct serial_rs485*) arg, sizeof(rs485conf)))
+			return -EFAULT;
+
+		serial_omap_irq_disable(up);
+		spin_lock_irqsave(&up->port.lock, flags);
+
+		serial_omap_config_rs485(up, &rs485conf);
+
+		if(rts_on_send(up))
+			serial_omap_update_rts(up);
+		serial_omap_thri_mode(up);
+
+		spin_unlock_irqrestore(&up->port.lock, flags);
+		serial_omap_irq_enable(up);
+
+		break;
+
+	case TIOCGRS485:
+		if(copy_to_user((struct serial_rs485 *) arg, &(up->rs485), sizeof(rs485conf)))
+			return -EFAULT;
+		break;
+#ifdef CONFIG_SERIAL_OMAP_MODBUS
+	case TIOCSMBRTU:
+		switch(arg)
+		{
+		case 0:
+			modbus_omap_disable(up);
+			break;
+		case 1:
+			modbus_omap_enable(up);
+			break;
+		default: break;
+		}
+		break;
+	case TIOCSMBRTUADDR:
+		dev_info(up->dev, "Setting slave ID to %lu", arg);
+		up->mb_port.slave_id = arg;
+		break;
+	case TIOCSMBRTUIFT:
+		dev_info(up->dev, "Setting interframe timeout to %luns %s",
+		         arg, arg ? "" : "(auto)");
+		up->mb_port.to_35_override = arg;
+		break;
+	case TIOCSMBRTUICT:
+		dev_info(up->dev, "Setting intercharacter timeout to %luns %s",
+		         arg, arg ? "" : "(auto)");
+		up->mb_port.to_15_override = arg;
+		break;
+	case TIOCSMBRTUTS:
+		switch(arg)
+		{
+		case 0:
+			modbus_omap_timestamp_disable(up);
+			break;
+		case 1:
+			modbus_omap_timestamp_enable(up);
+			break;
+		default: break;
+		}
+	break;
+#endif
+	default:
+		return -ENOIOCTLCMD;
+	}
+	return 0;
+}
+#endif
+
+static int __init
+serial_omap_console_setup(struct console *co, char *options)
+{
+	struct uart_omap_port *up;
+	int baud = 115200;
+	int bits = 8;
+	int parity = 'n';
+	int flow = 'n';
+
+	if (serial_omap_console_ports[co->index] == NULL)
+		return -ENODEV;
+	up = serial_omap_console_ports[co->index];
+
+	if (options)
+		uart_parse_options(options, &baud, &parity, &bits, &flow);
+
+	return uart_set_options(&up->port, co, baud, parity, bits, flow);
+}
+
+static struct console serial_omap_console = {
+	.name		= OMAP_SERIAL_NAME,
+	.write		= serial_omap_console_write,
+	.device		= uart_console_device,
+	.setup		= serial_omap_console_setup,
+	.flags		= CON_PRINTBUFFER,
+	.index		= -1,
+	.data		= &serial_omap_reg,
+};
+
+static void serial_omap_add_console_port(struct uart_omap_port *up)
+{
+	serial_omap_console_ports[up->port.line] = up;
+}
+
+#define OMAP_CONSOLE	(&serial_omap_console)
+
+#else
+
+#define OMAP_CONSOLE	NULL
+
+static inline void serial_omap_add_console_port(struct uart_omap_port *up)
+{}
+
+#endif
+
+static struct uart_ops serial_omap_pops = {
+	.tx_empty	= serial_omap_tx_empty,
+	.set_mctrl	= serial_omap_set_mctrl,
+	.get_mctrl	= serial_omap_get_mctrl,
+	.stop_tx	= serial_omap_stop_tx,
+	.start_tx	= serial_omap_start_tx,
+	.throttle	= serial_omap_throttle,
+	.unthrottle	= serial_omap_unthrottle,
+	.stop_rx	= serial_omap_stop_rx,
+	.enable_ms	= serial_omap_enable_ms,
+	.break_ctl	= serial_omap_break_ctl,
+	.startup	= serial_omap_startup,
+	.shutdown	= serial_omap_shutdown,
+	.set_termios	= serial_omap_set_termios,
+	.pm		= serial_omap_pm,
+	//	.set_wake	= serial_omap_set_wake,
+	.type		= serial_omap_type,
+	.release_port	= serial_omap_release_port,
+	.request_port	= serial_omap_request_port,
+	.config_port	= serial_omap_config_port,
+	.verify_port	= serial_omap_verify_port,
+#ifdef CONFIG_SERIAL_OMAP_RS485
+	.ioctl = serial_omap_ioctl,
+#endif
+#ifdef CONFIG_CONSOLE_POLL
+	.poll_put_char  = serial_omap_poll_put_char,
+	.poll_get_char  = serial_omap_poll_get_char,
+#endif
+};
+
+static struct uart_driver serial_omap_reg = {
+	.owner		= THIS_MODULE,
+	.driver_name	= "OMAP-SERIAL-RTU",
+	.dev_name	= OMAP_SERIAL_NAME,
+	.nr		= OMAP_MAX_HSUART_PORTS,
+	.cons		= OMAP_CONSOLE,
+};
+
+#ifdef CONFIG_PM_SLEEP
+static int serial_omap_suspend(struct device *dev)
+{
+	struct uart_omap_port *up = dev_get_drvdata(dev);
+
+	uart_suspend_port(&serial_omap_reg, &up->port);
+	flush_work(&up->qos_work);
+
+	return 0;
+}
+
+static int serial_omap_resume(struct device *dev)
+{
+	struct uart_omap_port *up = dev_get_drvdata(dev);
+
+	uart_resume_port(&serial_omap_reg, &up->port);
+
+	return 0;
+}
+#endif
+
+static void omap_serial_fill_features_erratas(struct uart_omap_port *up)
+{
+	u32 mvr, scheme;
+	u16 revision, major, minor;
+
+	mvr = serial_in_rtu(up, UART_OMAP_MVER);
+
+	/* Check revision register scheme */
+	scheme = mvr >> OMAP_UART_MVR_SCHEME_SHIFT;
+
+	switch (scheme) {
+	case 0: /* Legacy Scheme: OMAP2/3 */
+		/* MINOR_REV[0:4], MAJOR_REV[4:7] */
+		major = (mvr & OMAP_UART_LEGACY_MVR_MAJ_MASK) >>
+					OMAP_UART_LEGACY_MVR_MAJ_SHIFT;
+		minor = (mvr & OMAP_UART_LEGACY_MVR_MIN_MASK);
+		break;
+	case 1:
+		/* New Scheme: OMAP4+ */
+		/* MINOR_REV[0:5], MAJOR_REV[8:10] */
+		major = (mvr & OMAP_UART_MVR_MAJ_MASK) >>
+					OMAP_UART_MVR_MAJ_SHIFT;
+		minor = (mvr & OMAP_UART_MVR_MIN_MASK);
+		break;
+	default:
+		dev_warn(up->dev,
+			"Unknown %s revision, defaulting to highest\n",
+			up->name);
+		/* highest possible revision */
+		major = 0xff;
+		minor = 0xff;
+	}
+
+	/* normalize revision for the driver */
+	revision = UART_BUILD_REVISION(major, minor);
+
+	switch (revision) {
+	case OMAP_UART_REV_46:
+		up->errata |= (UART_ERRATA_i202_MDR1_ACCESS |
+				UART_ERRATA_i291_DMA_FORCEIDLE);
+		break;
+	case OMAP_UART_REV_52:
+		up->errata |= (UART_ERRATA_i202_MDR1_ACCESS |
+				UART_ERRATA_i291_DMA_FORCEIDLE);
+		break;
+	case OMAP_UART_REV_63:
+		up->errata |= UART_ERRATA_i202_MDR1_ACCESS;
+		break;
+	default:
+		break;
+	}
+}
+
+static struct omap_uart_port_info *of_get_uart_port_info(struct device *dev)
+{
+	struct omap_uart_port_info *omap_up_info;
+
+	omap_up_info = devm_kzalloc(dev, sizeof(*omap_up_info), GFP_KERNEL);
+	if (!omap_up_info)
+		return NULL; /* out of memory */
+
+	of_property_read_u32(dev->of_node, "clock-frequency",
+					 &omap_up_info->uartclk);
+	return omap_up_info;
+}
+
+static int of_probe_rs485(struct uart_omap_port *up,
+			  struct device_node *np)
+{
+	struct serial_rs485 *rs485conf = &up->rs485;
+	u32 rs485_delay[2];
+	enum of_gpio_flags flags;
+	int ret;
+
+	rs485conf->flags = 0;
+	up->rts_gpio = -EINVAL;
+
+	if (!np)
+		return 0;
+
+	if (of_property_read_bool(np, "rs485-rts-active-high"))
+		rs485conf->flags |= SER_RS485_RTS_ON_SEND;
+	else
+		rs485conf->flags |= SER_RS485_RTS_AFTER_SEND;
+
+	/* check for tx enable gpio */
+	up->rs485en_gpio = of_get_named_gpio_flags(np, "rs485en-gpio", 0, &flags);
+	if (gpio_is_valid(up->rs485en_gpio)) {
+		ret = gpio_request(up->rs485en_gpio, "omap-serial-rtu-rs485en");
+		if (ret < 0)
+			return ret;
+	} else if (up->rs485en_gpio == -EPROBE_DEFER) {
+		return -EPROBE_DEFER;
+	} else {
+		up->rs485en_gpio = -EINVAL;
+	}
+
+	/*
+	 * This is only used in newer omap-serial driver
+	 * but keep it here ...
+	 */
+	if (of_property_read_u32_array(np, "rs485-rts-delay",
+				rs485_delay, 2) == 0) {
+		rs485conf->delay_rts_before_send = rs485_delay[0];
+		rs485conf->delay_rts_after_send = rs485_delay[1];
+	}
+
+	if (of_property_read_bool(np, "rs485-rx-during-tx"))
+		rs485conf->flags |= SER_RS485_RX_DURING_TX;
+
+	if (of_property_read_bool(np, "linux,rs485-enabled-at-boot-time"))
+		rs485conf->flags |= SER_RS485_ENABLED;
+
+	if (gpio_is_valid(up->rs485en_gpio)) {
+		int val = rs485conf->flags & SER_RS485_ENABLED;
+
+		up->rs485en_alow = flags & OF_GPIO_ACTIVE_LOW;
+
+		pr_info("%s: rs485en-gpio is %s\n", __func__,
+				up->rs485en_alow ? "active_low" : "active_high");
+
+		/* turn on or off rs485 hw path */
+		ret = gpio_direction_output(up->rs485en_gpio, up->rs485en_alow ? !val : val);
+		if (ret < 0)
+			return ret;
+
+		pr_info("%s: %s mode enabled\n", __func__, val ? "rs485" : "rs232");
+	}
+
+	return 0;
+}
+
+static int serial_omap_probe(struct platform_device *pdev)
+{
+	struct uart_omap_port	*up;
+	struct resource		*mem;
+	struct omap_uart_port_info *omap_up_info = pdev->dev.platform_data;
+	int uartirq = 0;
+	int ret;
+
+	if (pdev->dev.of_node) {
+		uartirq = irq_of_parse_and_map(pdev->dev.of_node, 0);
+		if (!uartirq)
+			return -EPROBE_DEFER;
+
+		omap_up_info = of_get_uart_port_info(&pdev->dev);
+	} else {
+		uartirq = platform_get_irq(pdev, 0);
+		if (uartirq < 0)
+			return -EPROBE_DEFER;
+	}
+
+	mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!mem) {
+		dev_err(&pdev->dev, "no mem resource?\n");
+		return -ENODEV;
+	}
+
+	if (!devm_request_mem_region(&pdev->dev, mem->start, resource_size(mem),
+				pdev->dev.driver->name)) {
+		dev_err(&pdev->dev, "memory region already claimed\n");
+		return -EBUSY;
+	}
+
+	up = devm_kzalloc(&pdev->dev, sizeof(*up), GFP_KERNEL);
+	if (!up)
+		return -ENOMEM;
+
+	if (pdev->dev.of_node) {
+		ret = of_probe_rs485(up, pdev->dev.of_node);
+		if (ret == -EPROBE_DEFER) {
+			devm_kfree(&pdev->dev, up);
+			return -EPROBE_DEFER;
+		}
+	}
+
+	up->dev = &pdev->dev;
+	up->port.dev = &pdev->dev;
+	up->port.type = PORT_OMAP;
+	up->port.iotype = UPIO_MEM;
+	up->port.irq = uartirq;
+
+	up->port.regshift = 2;
+	up->port.fifosize = 64;
+	up->port.ops = &serial_omap_pops;
+
+	if (pdev->dev.of_node)
+		up->port.line = of_alias_get_id(pdev->dev.of_node, "serial");
+	else
+		up->port.line = pdev->id;
+
+	if (up->port.line < 0) {
+		dev_err(&pdev->dev, "failed to get alias/pdev id, errno %d\n",
+								up->port.line);
+		ret = -ENODEV;
+		goto err_port_line;
+	}
+
+	up->pins = devm_pinctrl_get_select_default(&pdev->dev);
+	if (IS_ERR(up->pins)) {
+		dev_warn(&pdev->dev, "did not get pins for uart%i error: %li\n",
+			 up->port.line, PTR_ERR(up->pins));
+		up->pins = NULL;
+	}
+
+	sprintf(up->name, "OMAP UART%d HWIRQ", up->port.line);
+	up->port.mapbase = mem->start;
+	up->port.membase = devm_ioremap(&pdev->dev, mem->start,
+						resource_size(mem));
+	if (!up->port.membase) {
+		dev_err(&pdev->dev, "can't ioremap UART\n");
+		ret = -ENOMEM;
+		goto err_ioremap;
+	}
+
+	up->port.flags = omap_up_info->flags;
+	up->port.uartclk = omap_up_info->uartclk;
+	if (!up->port.uartclk) {
+		up->port.uartclk = DEFAULT_CLK_SPEED;
+		dev_warn(&pdev->dev, "No clock speed specified: using default:"
+						"%d\n", DEFAULT_CLK_SPEED);
+	}
+
+	up->latency = PM_QOS_CPU_LATENCY_DEFAULT_VALUE;
+	up->calc_latency = PM_QOS_CPU_LATENCY_DEFAULT_VALUE;
+	cpu_latency_qos_add_request(&up->pm_qos_request, up->latency);
+	serial_omap_uart_wq = create_singlethread_workqueue(up->name);
+	INIT_WORK(&up->qos_work, serial_omap_uart_qos_work);
+
+	platform_set_drvdata(pdev, up);
+	pm_runtime_enable(&pdev->dev);
+	pm_runtime_use_autosuspend(&pdev->dev);
+	pm_runtime_set_autosuspend_delay(&pdev->dev,
+			omap_up_info->autosuspend_timeout);
+
+	pm_runtime_irq_safe(&pdev->dev);
+	pm_runtime_get_sync(&pdev->dev);
+
+	omap_serial_fill_features_erratas(up);
+
+	ui[up->port.line] = up;
+	serial_omap_add_console_port(up);
+
+	ret = uart_add_one_port(&serial_omap_reg, &up->port);
+	if (ret != 0)
+		goto err_add_port;
+
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+
+	return 0;
+
+err_add_port:
+	pm_runtime_put(&pdev->dev);
+	pm_runtime_disable(&pdev->dev);
+err_ioremap:
+err_port_line:
+	dev_err(&pdev->dev, "[UART%d]: failure [%s]: %d\n",
+				pdev->id, __func__, ret);
+	return ret;
+}
+
+static int serial_omap_remove(struct platform_device *dev)
+{
+	struct uart_omap_port *up = platform_get_drvdata(dev);
+
+	pm_runtime_put_sync(up->dev);
+	pm_runtime_disable(up->dev);
+	uart_remove_one_port(&serial_omap_reg, &up->port);
+	cpu_latency_qos_remove_request(&up->pm_qos_request);
+
+	return 0;
+}
+
+/*
+ * Work Around for Errata i202 (2430, 3430, 3630, 4430 and 4460)
+ * The access to uart register after MDR1 Access
+ * causes UART to corrupt data.
+ *
+ * Need a delay =
+ * 5 L4 clock cycles + 5 UART functional clock cycle (@48MHz = ~0.2uS)
+ * give 10 times as much
+ */
+static void serial_omap_mdr1_errataset(struct uart_omap_port *up, u8 mdr1)
+{
+	u8 timeout = 255;
+
+	serial_out_rtu(up, UART_OMAP_MDR1, mdr1);
+	udelay(2);
+	serial_out_rtu(up, UART_FCR, up->fcr | UART_FCR_CLEAR_XMIT |
+			UART_FCR_CLEAR_RCVR);
+	/*
+	 * Wait for FIFO to empty: when empty, RX_FIFO_E bit is 0 and
+	 * TX_FIFO_E bit is 1.
+	 */
+	while (UART_LSR_THRE != (serial_in_rtu(up, UART_LSR) &
+				(UART_LSR_THRE | UART_LSR_DR))) {
+		timeout--;
+		if (!timeout) {
+			/* Should *never* happen. we warn and carry on */
+			dev_crit(up->dev, "Errata i202: timedout %x\n",
+						serial_in_rtu(up, UART_LSR));
+			break;
+		}
+		udelay(1);
+	}
+}
+
+#ifdef CONFIG_PM
+static void serial_omap_restore_context(struct uart_omap_port *up)
+{
+	if (up->errata & UART_ERRATA_i202_MDR1_ACCESS)
+		serial_omap_mdr1_errataset(up, UART_OMAP_MDR1_DISABLE);
+	else
+		serial_out_rtu(up, UART_OMAP_MDR1, UART_OMAP_MDR1_DISABLE);
+
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_B); /* Config B mode */
+	serial_out_rtu(up, UART_EFR, UART_EFR_ECB);
+	serial_out_rtu(up, UART_LCR, 0x0); /* Operational mode */
+	serial_out_rtu(up, UART_IER, 0x0);
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_B); /* Config B mode */
+	serial_out_rtu(up, UART_DLL, up->dll);
+	serial_out_rtu(up, UART_DLM, up->dlh);
+	serial_out_rtu(up, UART_LCR, 0x0); /* Operational mode */
+	serial_out_rtu(up, UART_IER, up->ier);
+	serial_out_rtu(up, UART_FCR, up->fcr);
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_A);
+	serial_out_rtu(up, UART_MCR, up->mcr);
+	serial_out_rtu(up, UART_LCR, UART_LCR_CONF_MODE_B); /* Config B mode */
+	serial_out_rtu(up, UART_OMAP_SCR, up->scr);
+	serial_out_rtu(up, UART_EFR, up->efr);
+	serial_out_rtu(up, UART_LCR, up->lcr);
+	if (up->errata & UART_ERRATA_i202_MDR1_ACCESS)
+		serial_omap_mdr1_errataset(up, up->mdr1);
+	else
+		serial_out_rtu(up, UART_OMAP_MDR1, up->mdr1);
+}
+
+static int serial_omap_runtime_suspend(struct device *dev)
+{
+	struct uart_omap_port *up = dev_get_drvdata(dev);
+	struct omap_uart_port_info *pdata = dev->platform_data;
+
+	if (!up)
+		return -EINVAL;
+
+	if (!pdata)
+		return 0;
+
+	up->context_loss_cnt = serial_omap_get_context_loss_count(up);
+
+	if (device_may_wakeup(dev)) {
+		if (!up->wakeups_enabled) {
+			serial_omap_enable_wakeup(up, true);
+			up->wakeups_enabled = true;
+		}
+	} else {
+		if (up->wakeups_enabled) {
+			serial_omap_enable_wakeup(up, false);
+			up->wakeups_enabled = false;
+		}
+	}
+
+	up->latency = PM_QOS_CPU_LATENCY_DEFAULT_VALUE;
+	schedule_work(&up->qos_work);
+
+	return 0;
+}
+
+static int serial_omap_runtime_resume(struct device *dev)
+{
+	struct uart_omap_port *up = dev_get_drvdata(dev);
+
+	int loss_cnt = serial_omap_get_context_loss_count(up);
+
+	if (loss_cnt < 0) {
+		dev_err(dev, "serial_omap_get_context_loss_count failed : %d\n",
+			loss_cnt);
+		serial_omap_restore_context(up);
+	} else if (up->context_loss_cnt != loss_cnt) {
+		serial_omap_restore_context(up);
+	}
+	up->latency = up->calc_latency;
+	schedule_work(&up->qos_work);
+
+	return 0;
+}
+#endif
+
+static const struct dev_pm_ops serial_omap_dev_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(serial_omap_suspend, serial_omap_resume)
+	SET_RUNTIME_PM_OPS(serial_omap_runtime_suspend,
+				serial_omap_runtime_resume, NULL)
+};
+
+#if defined(CONFIG_OF)
+static const struct of_device_id omap_serial_of_match[] = {
+	{ .compatible = "ti,omap2-uart-rtu" },
+	{ .compatible = "ti,omap3-uart-rtu" },
+	{ .compatible = "ti,omap4-uart-rtu" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, omap_serial_of_match);
+#endif
+
+static struct platform_driver serial_omap_driver = {
+	.probe          = serial_omap_probe,
+	.remove         = serial_omap_remove,
+	.driver		= {
+		.name	= DRIVER_NAME,
+		.pm	= &serial_omap_dev_pm_ops,
+		.of_match_table = of_match_ptr(omap_serial_of_match),
+	},
+};
+
+static int __init serial_omap_init(void)
+{
+	int ret;
+
+	ret = uart_register_driver(&serial_omap_reg);
+	if (ret != 0)
+		return ret;
+	ret = platform_driver_register(&serial_omap_driver);
+	if (ret != 0)
+		uart_unregister_driver(&serial_omap_reg);
+	return ret;
+}
+
+static void __exit serial_omap_exit(void)
+{
+	platform_driver_unregister(&serial_omap_driver);
+	uart_unregister_driver(&serial_omap_reg);
+}
+
+module_init(serial_omap_init);
+module_exit(serial_omap_exit);
+
+MODULE_DESCRIPTION("OMAP High Speed UART driver");
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Texas Instruments Inc");
diff --git a/drivers/tty/serial/omap-serial-rtu.h b/drivers/tty/serial/omap-serial-rtu.h
new file mode 100644
index 000000000000..fc690d4ce60d
--- /dev/null
+++ b/drivers/tty/serial/omap-serial-rtu.h
@@ -0,0 +1,222 @@
+/*
+ * Driver for OMAP-UART controller.
+ * Based on drivers/serial/8250.c
+ *
+ * Copyright (C) 2010 Texas Instruments.
+ *
+ * Authors:
+ *	Govindraj R	<govindraj.raja@ti.com>
+ *	Thara Gopinath	<thara@ti.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#ifndef __OMAP_SERIAL_H__
+#define __OMAP_SERIAL_H__
+
+#include <linux/serial_core.h>
+#include <linux/platform_device.h>
+#include <linux/pm_qos.h>
+#include <linux/kfifo.h>
+
+//#include <plat/mux.h>
+//#include <plat/pfc-modbus-rtu.h>
+
+#define DRIVER_NAME	"omap_uart_rtu"
+
+/*
+ * Use tty device name as ttyO, [O -> OMAP]
+ * in bootargs we specify as console=ttyO0 if uart1
+ * is used as console uart.
+ */
+#define OMAP_SERIAL_NAME	"ttyO"
+
+#define OMAP_MODE13X_SPEED	230400
+
+/* WER = 0x7F
+ * Enable module level wakeup in WER reg
+ */
+#define OMAP_UART_WER_MOD_WKUP	0X7F
+
+#define OMAP_UART_SYSC_RESET	0X07
+#define OMAP_UART_FIFO_CLR	0X06
+
+#define OMAP_UART_DMA_CH_FREE	-1
+
+#define MSR_SAVE_FLAGS		UART_MSR_ANY_DELTA
+
+#define UART_ERRATA_i202_MDR1_ACCESS	BIT(0)
+#define UART_ERRATA_i291_DMA_FORCEIDLE	BIT(1)
+
+#define OMAP_MAX_HSUART_PORTS	6
+
+#define UART_BUILD_REVISION(x, y)	(((x) << 8) | (y))
+
+#define OMAP_UART_REV_42 0x0402
+#define OMAP_UART_REV_46 0x0406
+#define OMAP_UART_REV_52 0x0502
+#define OMAP_UART_REV_63 0x0603
+
+#define UART_ERRATA_i202_MDR1_ACCESS	BIT(0)
+#define UART_ERRATA_i291_DMA_FORCEIDLE	BIT(1)
+
+#define DEFAULT_CLK_SPEED 48000000 /* 48Mhz*/
+
+/* SCR register bitmasks */
+#define OMAP_UART_SCR_RX_TRIG_GRANU1_MASK		(1 << 7)
+#define OMAP_UART_SCR_TX_TRIG_GRANU1_MASK		(1 << 6)
+#define OMAP_UART_SCR_TX_EMPTY			(1 << 3)
+
+/* FCR register bitmasks */
+#define OMAP_UART_FCR_RX_FIFO_TRIG_MASK			(0x3 << 6)
+#define OMAP_UART_FCR_TX_FIFO_TRIG_MASK			(0x3 << 4)
+
+/* MVR register bitmasks */
+#define OMAP_UART_MVR_SCHEME_SHIFT	30
+
+#define OMAP_UART_LEGACY_MVR_MAJ_MASK	0xf0
+#define OMAP_UART_LEGACY_MVR_MAJ_SHIFT	4
+#define OMAP_UART_LEGACY_MVR_MIN_MASK	0x0f
+
+#define OMAP_UART_MVR_MAJ_MASK		0x700
+#define OMAP_UART_MVR_MAJ_SHIFT		8
+#define OMAP_UART_MVR_MIN_MASK		0x3f
+
+#define OMAP_UART_DMA_CH_FREE	-1
+
+#define MSR_SAVE_FLAGS		UART_MSR_ANY_DELTA
+#define OMAP_MODE13X_SPEED	230400
+
+/* WER = 0x7F
+ * Enable module level wakeup in WER reg
+ */
+#define OMAP_UART_WER_MOD_WKUP	0X7F
+
+/* Enable XON/XOFF flow control on output */
+#define OMAP_UART_SW_TX		0x08
+
+/* Enable XON/XOFF flow control on input */
+#define OMAP_UART_SW_RX		0x02
+
+#define OMAP_UART_SW_CLR	0xF0
+
+#define OMAP_UART_TCR_TRIG	0x0F
+
+
+struct omap_uart_port_info {
+	bool			dma_enabled;	/* To specify DMA Mode */
+	unsigned int		uartclk;	/* UART clock rate */
+	upf_t			flags;		/* UPF_* flags */
+	unsigned int		dma_rx_buf_size;
+	unsigned int		dma_rx_timeout;
+	unsigned int		autosuspend_timeout;
+	unsigned int		dma_rx_poll_rate;
+	int			DTR_gpio;
+	int			DTR_inverted;
+	int			DTR_present;
+
+  //	int                     disable_port;
+
+	int (*get_context_loss_count)(struct device *);
+	void (*set_forceidle)(struct device *);
+	void (*set_noidle)(struct device *);
+	void (*enable_wakeup)(struct device *, bool);
+};
+
+struct uart_omap_dma {
+	u8			uart_dma_tx;
+	u8			uart_dma_rx;
+	int			rx_dma_channel;
+	int			tx_dma_channel;
+	dma_addr_t		rx_buf_dma_phys;
+	dma_addr_t		tx_buf_dma_phys;
+	unsigned int		uart_base;
+	/*
+	 * Buffer for rx dma.It is not required for tx because the buffer
+	 * comes from port structure.
+	 */
+	unsigned char		*rx_buf;
+	unsigned int		prev_rx_dma_pos;
+	int			tx_buf_size;
+	int			tx_dma_used;
+	int			rx_dma_used;
+	spinlock_t		tx_lock;
+	spinlock_t		rx_lock;
+	/* timer to poll activity on rx dma */
+	struct timer_list	rx_timer;
+	unsigned int		rx_buf_size;
+	unsigned int		rx_poll_rate;
+	unsigned int		rx_timeout;
+};
+
+struct uart_omap_port {
+	struct uart_port	port;
+	struct uart_omap_dma	uart_dma;
+	struct device		*dev;
+
+#ifdef CONFIG_SERIAL_OMAP_MODBUS
+	struct modbus_port	mb_port;
+#endif
+
+	unsigned char		ier;
+	unsigned char		lcr;
+	unsigned char		mcr;
+	unsigned char		fcr;
+	unsigned char		efr;
+	unsigned char		dll;
+	unsigned char		dlh;
+	unsigned char		mdr1;
+	unsigned char		scr;
+
+	int			use_dma;
+	/*
+	 * Some bits in registers are cleared on a read, so they must
+	 * be saved whenever the register is read but the bits will not
+	 * be immediately processed.
+	 */
+	unsigned int		lsr_break_flag;
+	unsigned char		msr_saved_flags;
+	char			name[20];
+	unsigned long		port_activity;
+
+	struct serial_rs485     rs485;
+	unsigned int            tx_in_progress:1, tx_wait_end:1;
+	int			rts_gpio;
+	int 			rs485en_gpio;
+	u8 			rs485en_alow;
+
+	int			context_loss_cnt;
+	u32			errata;
+	u8			wakeups_enabled;
+
+	int			DTR_gpio;
+	int			DTR_inverted;
+	int			DTR_active;
+
+	struct pm_qos_request pm_qos_request;
+	u32			latency;
+	u32			calc_latency;
+	struct work_struct	qos_work;
+	struct pinctrl		*pins;
+
+       struct tasklet_struct   tx_tsklt;
+       struct tasklet_struct   rx_tsklt;
+       struct tasklet_struct   mdm_status_tsklt;
+       DECLARE_KFIFO_PTR(rx_fifo, uint16_t);
+};
+
+unsigned int serial_in(struct uart_omap_port *up, int offset);
+void serial_out(struct uart_omap_port *up, int offset, int value);
+void transmit_chars(struct uart_omap_port *up, unsigned int lsr);
+irqreturn_t serial_omap_irq(int irq, void *dev_id);
+void serial_omap_stop_tx(struct uart_port *port);
+void serial_omap_start_tx(struct uart_port *port);
+void serial_omap_disable_ier_thri(struct uart_omap_port *up);
+int serial_omap_end_tx(struct uart_omap_port *up);
+
+#define CONFIG_SERIAL_OMAP_RS485
+
+#endif /* __OMAP_SERIAL_H__ */
diff --git a/drivers/tty/serial/omap-serial.c b/drivers/tty/serial/omap-serial.c
index 0862941862c8..10970632f0e4 100644
--- a/drivers/tty/serial/omap-serial.c
+++ b/drivers/tty/serial/omap-serial.c
@@ -1255,13 +1255,10 @@ serial_omap_console_write(struct console *co, const char *s,
 	unsigned int ier;
 	int locked = 1;
 
-	local_irq_save(flags);
-	if (up->port.sysrq)
-		locked = 0;
-	else if (oops_in_progress)
-		locked = spin_trylock(&up->port.lock);
+	if (up->port.sysrq || oops_in_progress)
+		locked = spin_trylock_irqsave(&up->port.lock, flags);
 	else
-		spin_lock(&up->port.lock);
+		spin_lock_irqsave(&up->port.lock, flags);
 
 	/*
 	 * First save the IER then disable the interrupts
@@ -1288,8 +1285,7 @@ serial_omap_console_write(struct console *co, const char *s,
 		check_modem_status(up);
 
 	if (locked)
-		spin_unlock(&up->port.lock);
-	local_irq_restore(flags);
+		spin_unlock_irqrestore(&up->port.lock, flags);
 }
 
 static int __init
diff --git a/drivers/tty/serial/pfc-modbus-rtu.c b/drivers/tty/serial/pfc-modbus-rtu.c
new file mode 100644
index 000000000000..0b33b5cb5ff5
--- /dev/null
+++ b/drivers/tty/serial/pfc-modbus-rtu.c
@@ -0,0 +1,483 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+/*
+ * WAGO Serial Modbus RTU Driver
+ *
+ * Copyright (C) 2013 Wago Kontakttechnik GmbH
+ *
+ * Author: Timur Celik <timur.celik@wago.com>
+ *
+ */
+
+#undef DEBUG
+
+#ifdef CONFIG_SERIAL_OMAP_MODBUS
+
+//#include <linux/platform_data/serial-omap.h>
+#include <linux/module.h>
+#include <linux/platform_data/pfc-modbus-rtu.h>
+#include "omap-serial-rtu.h"
+
+#include <uapi/linux/serial_reg.h>
+#include <linux/pm_runtime.h>
+#include <linux/tty_flip.h>
+#include <linux/time64.h>
+#include <asm/ioctls.h>
+
+static struct kfifo valid_frame;
+
+extern unsigned int serial_in_rtu(struct uart_omap_port *up, int offset);
+extern void serial_out_rtu(struct uart_omap_port *up, int offset, int value);
+
+extern void transmit_chars_rtu(struct uart_omap_port *up, unsigned int lsr);
+extern irqreturn_t serial_omap_irq_rtu(int irq, void *dev_id);
+
+/* extern void serial_omap_enable_ier_thri(struct uart_omap_port *up); */
+/* extern void serial_omap_disable_ier_thri(struct uart_omap_port *up); */
+
+static irqreturn_t modbus_omap_irq(int irq, void *dev_id)
+{
+	struct uart_omap_port *up = dev_id;
+	unsigned int iir, lsr;
+	unsigned int type;
+	irqreturn_t ret = IRQ_NONE;
+	int max_count = 256;
+
+	raw_spin_lock(&up->port.lock);
+
+	do {
+		iir = serial_in_rtu(up, UART_IIR);
+		if (iir & UART_IIR_NO_INT)
+			break;
+
+		ret = IRQ_HANDLED;
+		lsr = serial_in_rtu(up, UART_LSR);
+
+		/* extract IRQ type from IIR register */
+		type = iir & 0x3e;
+
+		switch (type) {
+		case UART_IIR_MSI:
+			up->mb_port.modem_status = serial_in_rtu(up, UART_MSR);
+			tasklet_hi_schedule(&up->mb_port.mdr_tsklt);
+			break;
+		case UART_IIR_THRI:
+			serial_omap_disable_ier_thri(up);
+			if(!serial_omap_end_tx(up)) {
+				tasklet_hi_schedule(&up->mb_port.tx_tsklt);
+			}
+			break;
+		case UART_IIR_RLSI:
+			modbus_omap_rlsi_handler(up, lsr);
+			break;
+		case UART_IIR_RX_TIMEOUT:
+			/* FALLTHROUGH */
+		case UART_IIR_RDI:
+			modbus_omap_rhr_handler(up);
+			break;
+		case UART_IIR_CTS_RTS_DSR:
+			/* simply try again */
+			break;
+		case UART_IIR_XOFF:
+			/* FALLTHROUGH */
+		default:
+			break;
+		}
+	} while (!(iir & UART_IIR_NO_INT) && max_count--);
+
+	raw_spin_unlock(&up->port.lock);
+
+	up->port_activity = jiffies;
+
+	return ret;
+}
+
+static void modbus_check_modem_status(unsigned long dev_id)
+{
+	struct uart_omap_port *up = (void*) dev_id;
+	unsigned int status;
+
+	status = up->mb_port.modem_status;
+	status |= up->msr_saved_flags;
+	up->msr_saved_flags = 0;
+	if ((status & UART_MSR_ANY_DELTA) == 0)
+		return;
+
+	if (status & UART_MSR_ANY_DELTA && up->ier & UART_IER_MSI &&
+	    up->port.state != NULL) {
+		if (status & UART_MSR_TERI)
+			up->port.icount.rng++;
+		if (status & UART_MSR_DDSR)
+			up->port.icount.dsr++;
+		if (status & UART_MSR_DDCD)
+			uart_handle_dcd_change
+				(&up->port, status & UART_MSR_DCD);
+		if (status & UART_MSR_DCTS)
+			uart_handle_cts_change
+				(&up->port, status & UART_MSR_CTS);
+		wake_up_interruptible(&up->port.state->port.delta_msr_wait);
+	}
+}
+
+static void modbus_omap_transmit(unsigned long dev_id)
+{
+	struct uart_omap_port *up = (void*) dev_id;
+
+	spin_lock(&up->port.lock);
+	transmit_chars_rtu(up, serial_in_rtu(up, UART_LSR));
+	spin_unlock(&up->port.lock);
+}
+
+void modbus_omap_process_frame(struct uart_omap_port *up)
+{
+	unsigned char ch, is_valid;
+	unsigned int cnt;
+	int frame_len = 0;
+
+	spin_lock(&up->port.lock);
+start:
+	is_valid = true;
+	if(!kfifo_get(&up->mb_port.length, &frame_len)) {
+		goto exit;
+	}
+	while((frame_len > 0) && (kfifo_get(&up->mb_port.frame, &ch))) {
+		frame_len--;
+		up->port.icount.rx++;
+		if(!kfifo_put(&valid_frame, ch)) {
+			dev_dbg(up->dev, "Buffer overrun\n");
+			is_valid = false;
+		}
+	}
+
+	atomic_dec(&up->mb_port.frame_cnt);
+
+	if(!is_valid)
+		goto exit;
+
+	cnt = kfifo_len(&valid_frame);
+	if(up->mb_port.timestamp_enabled) {
+		cnt -= MB_TIMESTAMP_LENGTH;
+	}
+	if(cnt<MB_FRAME_MIN || cnt>MB_FRAME_MAX) {
+		dev_dbg(up->dev, "Frame length invalid\n");
+		up->port.icount.frame++;
+		goto exit;
+	}
+
+	dev_dbg(up->dev, "Frame of %u bytes received\n", cnt);
+
+	if(kfifo_peek(&valid_frame, &ch) &&
+	   ch != up->mb_port.slave_id && up->mb_port.slave_id && ch) {
+		dev_dbg(up->dev, "Dropping frame with slave id=%d\n", ch);
+		goto exit;
+	}
+
+	// push frame to the uart layer
+	while(kfifo_get(&valid_frame, &ch))
+		uart_insert_char(&up->port, 0, UART_LSR_OE, ch, TTY_NORMAL);
+
+exit:
+	kfifo_reset(&valid_frame);
+	if(atomic_read(&up->mb_port.frame_cnt) > 0) {
+		dev_dbg(up->dev, "Processing another frame\n");
+		goto start;
+	}
+
+	spin_unlock(&up->port.lock);
+}
+
+static void modbus_omap_finish_frame(unsigned long dev_id)
+{
+	struct uart_omap_port *up = (void*) dev_id;
+
+	pm_runtime_get_sync(up->dev);
+
+	modbus_omap_process_frame(up);
+
+	if(up->port.state->port.tty)
+		tty_flip_buffer_push(&up->port.state->port);
+
+	pm_runtime_mark_last_busy(up->dev);
+	pm_runtime_put_autosuspend(up->dev);
+}
+
+enum hrtimer_restart modbus_omap_to_handler(struct hrtimer* hrt)
+{
+	enum hrtimer_restart ret = HRTIMER_NORESTART;
+	struct modbus_port *mp = container_of(hrt, struct modbus_port, timer);
+	struct uart_omap_port *up =
+			container_of(mp, struct uart_omap_port, mb_port);
+	int frame_len = 0;
+	u64 to_35 = mp->to_35_override ? mp->to_35_override : mp->to_35;
+	u64 to_15 = mp->to_15_override ? mp->to_15_override : mp->to_15;
+
+	switch(mp->state) {
+		case ERR:
+			dev_dbg(up->dev, "Timeout at 3.5 char\n");
+
+			if(up->mb_port.timestamp_enabled) {
+				struct timespec64 ts;
+				ktime_get_ts64(&ts);
+				// push timestamp after frame
+				kfifo_put(&up->mb_port.frame, (ts.tv_sec >> 24) & 0xFF);
+				kfifo_put(&up->mb_port.frame, (ts.tv_sec >> 16) & 0xFF);
+				kfifo_put(&up->mb_port.frame, (ts.tv_sec >> 8) & 0xFF);
+				kfifo_put(&up->mb_port.frame, ts.tv_sec & 0xFF);
+				kfifo_put(&up->mb_port.frame, (ts.tv_nsec >> 24) & 0xFF);
+				kfifo_put(&up->mb_port.frame, (ts.tv_nsec >> 16) & 0xFF);
+				kfifo_put(&up->mb_port.frame, (ts.tv_nsec >> 8) & 0xFF);
+				kfifo_put(&up->mb_port.frame, ts.tv_nsec & 0xFF);
+				frame_len = MB_TIMESTAMP_LENGTH;
+			}
+			// push frame length including 8 bytes for timestamp if activated
+			frame_len += atomic_read(&up->mb_port.ch_cnt);
+			kfifo_put(&up->mb_port.length, frame_len);
+			atomic_set(&up->mb_port.ch_cnt, 0);
+			atomic_inc(&up->mb_port.frame_cnt);
+			tasklet_hi_schedule(&up->mb_port.rx_tsklt);
+
+			mp->state = IF;
+			break;
+		case IC:
+			mp->state = ERR;
+			hrtimer_forward(hrt, hrtimer_get_expires(hrt),
+			                ns_to_ktime(to_35-to_15));
+			ret = HRTIMER_RESTART;
+			dev_dbg(up->dev, "Timeout at 1.5 char\n");
+			break;
+		case IF: break;
+		default: break;
+	}
+
+	return ret;
+}
+
+int modbus_omap_rhr_handler(struct uart_omap_port *up)
+{
+	unsigned int ch;
+	int err = false;
+	struct modbus_port *mp = &up->mb_port;
+	u64 to_15 = mp->to_15_override ? mp->to_15_override : mp->to_15;
+
+        hrtimer_start(&mp->timer, ns_to_ktime(to_15), HRTIMER_MODE_REL_HARD);
+
+	ch = serial_in_rtu(up, UART_RX);
+
+	if(kfifo_put(&up->mb_port.frame, ch) != 0)
+		atomic_inc(&up->mb_port.ch_cnt);
+
+	switch(mp->state) {
+		case ERR:
+			dev_dbg(up->dev, "Protocol timing incorrect\n");
+			atomic_set(&up->mb_port.ch_cnt, 0);
+			kfifo_reset(&up->mb_port.frame);
+			up->port.icount.frame++;
+			mp->state = IC;
+			err = true;
+			break;
+		case IC: break;
+		case IF:
+			mp->state = IC;
+			break;
+		default: break;
+	}
+
+	return err;
+};
+
+int modbus_omap_rlsi_handler(struct uart_omap_port *up, unsigned int lsr)
+{
+	int err = false;
+	struct modbus_port *mp = &up->mb_port;
+	u64 to_15 = mp->to_15_override ? mp->to_15_override : mp->to_15;
+
+	if((lsr & (UART_LSR_BI | UART_LSR_PE | UART_LSR_FE | UART_LSR_OE)) == 0)
+		return modbus_omap_rhr_handler(up);
+
+	hrtimer_start(&mp->timer, ns_to_ktime(to_15), HRTIMER_MODE_REL_HARD);
+
+	dev_dbg(up->dev, "Line status error\n");
+	serial_in_rtu(up, UART_RX);
+	// TODO: kfifo_reset(&mp->frame);
+
+	raw_spin_lock(&up->port.lock);
+	if (lsr & UART_LSR_BI)
+		up->port.icount.brk++;
+
+	if (lsr & UART_LSR_PE)
+		up->port.icount.parity++;
+
+	if (lsr & UART_LSR_FE)
+		up->port.icount.frame++;
+
+	if (lsr & UART_LSR_OE)
+		up->port.icount.overrun++;
+	raw_spin_unlock(&up->port.lock);
+
+	return err;
+};
+
+void modbus_omap_calc_to(struct uart_omap_port *up, unsigned int baud)
+{
+	struct modbus_port *mp = &up->mb_port;
+
+	u8 char_bits = 11; /* TODO: get the actual value from the uart */
+	u64 char_duration = USEC_PER_SEC * char_bits / baud;
+	char_duration *= 1000; /* workaround for bug in gcc */
+
+	/*
+	 * When calculating the timeouts, always add one char_duration. The IRQ
+	 * measures the time between rx_end and rx_end, but the time from rx_end
+	 * to rx_start is needed.
+	 */
+	if(baud <= 19000) {
+		mp->to_15 = char_duration * 5/2;
+		mp->to_35 = char_duration * 9/2;
+	} else {
+		mp->to_15 = char_duration + 750000UL;
+		mp->to_35 = char_duration + 1750000UL;
+	}
+
+	dev_info(up->dev, "Baudrate = %u, TO_15 = %lluns, TO_35 = %lluns\n",
+	         baud, mp->to_15, mp->to_35);
+};
+
+void modbus_omap_timestamp_enable(struct uart_omap_port *up)
+{
+	dev_info(up->dev, "Enabling Modbus timestamp\n");
+	up->mb_port.timestamp_enabled = true;
+}
+
+void modbus_omap_timestamp_disable(struct uart_omap_port *up)
+{
+	dev_info(up->dev, "Disabling Modbus timestamp\n");
+	up->mb_port.timestamp_enabled = false;
+}
+
+int modbus_omap_enable(struct uart_omap_port *up)
+{
+	int err;
+	u64 to_35;
+	struct modbus_port *mp = &up->mb_port;
+	struct hrtimer* hrt = &mp->timer;
+
+	if(mp->activated) {
+		err = modbus_omap_disable(up);
+		if(err) return err;
+	}
+
+	dev_info(up->dev, "Enabling Modbus mode\n");
+
+	atomic_set(&mp->ch_cnt, 0);
+	atomic_set(&mp->frame_cnt, 0);
+
+	err = kfifo_alloc(&mp->frame, 640, 0);
+	if(err) {
+		dev_err(up->dev, "Unable to allocate memory (%d)\n", err);
+		return err;
+	}
+	err = kfifo_alloc(&mp->length, 64, 0);
+	if(err) {
+		dev_err(up->dev, "Unable to allocate memory (%d)\n", err);
+		return err;
+	}
+	err = kfifo_alloc(&valid_frame, 512, 0);
+	if(err) {
+		dev_err(up->dev, "Unable to allocate memory (%d)\n", err);
+		return err;
+	}
+
+	hrtimer_init(hrt, CLOCK_MONOTONIC, HRTIMER_MODE_REL_HARD);
+	hrt->function = modbus_omap_to_handler;
+
+	if(!hrtimer_is_hres_active(hrt))
+		dev_warn(up->dev, "No hi-res timer available\n");
+
+	/* init a timer which measures the time in between two chars */
+	to_35 = mp->to_35_override ? mp->to_35_override : mp->to_35;
+	hrtimer_start(hrt, ns_to_ktime(to_35), HRTIMER_MODE_REL_HARD);
+
+	/* create a tasklet for stuff that wants to sleep */
+	tasklet_init(&mp->rx_tsklt, modbus_omap_finish_frame, (unsigned long)up);
+	tasklet_init(&mp->tx_tsklt, modbus_omap_transmit, (unsigned long)up);
+	tasklet_init(&mp->mdr_tsklt, modbus_check_modem_status, (unsigned long)up);
+
+	/* set the new ISR to not threaded */
+	free_irq(up->port.irq, up);
+	err = request_irq(up->port.irq, modbus_omap_irq, IRQF_NO_THREAD,
+	                  up->name, up);
+	if(err) {
+		dev_err(up->dev, "irq-%d could not claim: err %d\n",
+		        up->port.irq, err);
+		return -1;
+	}
+
+	mp->activated = true;
+
+	return 0;
+};
+
+int modbus_omap_disable(struct uart_omap_port *up)
+{
+	int err;
+	struct modbus_port *mp = &up->mb_port;
+
+	if(!mp->activated)
+		return -1;
+
+	dev_info(up->dev, "Disabling Modbus mode\n");
+
+	tasklet_kill(&mp->rx_tsklt);
+	tasklet_kill(&mp->tx_tsklt);
+	tasklet_kill(&mp->mdr_tsklt);
+
+	hrtimer_cancel(&mp->timer);
+
+	/* restore old isr */
+	free_irq(up->port.irq, up);
+	err = request_irq(up->port.irq, serial_omap_irq_rtu, up->port.irqflags | IRQF_NO_THREAD,
+			  up->name, up);
+	if(err) {
+		dev_err(up->dev, "irq-%d could not claim: err %d\n",
+		        up->port.irq, err);
+		return -1;
+	}
+
+	kfifo_free(&mp->frame);
+	kfifo_free(&mp->length);
+	kfifo_free(&valid_frame);
+
+	mp->activated = false;
+
+	return 0;
+};
+
+int modbus_omap_startup(struct uart_omap_port *up)
+{
+	struct modbus_port *mp = &up->mb_port;
+	mp->activated = false;
+	mp->state = ERR;
+	mp->to_15 = ULLONG_MAX;
+	mp->to_35 = ULLONG_MAX;
+	mp->to_15_override = 0;
+	mp->to_35_override = 0;
+	mp->slave_id = 0;
+	mp->modem_status = 0;
+
+	dev_info(up->dev, "Initializing Modbus driver\n");
+	dev_dbg(up->dev,
+	        "IOCTLs are TIOCSMBRTU (%u), TIOCSMBRTUADDR (%u), "
+	        "TIOCSMBRTUIFT (%u) and TIOCSMBRTUICT (%u)\n",
+	        TIOCSMBRTU, TIOCSMBRTUADDR, TIOCSMBRTUIFT, TIOCSMBRTUICT);
+
+	return 0;
+};
+
+void modbus_omap_shutdown(struct uart_omap_port *up)
+{
+};
+
+MODULE_AUTHOR("Timur Celik <timur.celik@wago.com>");
+MODULE_DESCRIPTION("KSZ8863 Switch Reset Driver");
+MODULE_LICENSE("GPL v2");
+#endif
diff --git a/drivers/tty/serial/serial_core.c b/drivers/tty/serial/serial_core.c
index dc6129ddef85..c44f7f1108a3 100644
--- a/drivers/tty/serial/serial_core.c
+++ b/drivers/tty/serial/serial_core.c
@@ -1269,6 +1269,7 @@ static int uart_get_icount(struct tty_struct *tty,
 	return 0;
 }
 
+#ifndef CONFIG_SERIAL_OMAP_RTU
 static int uart_get_rs485_config(struct uart_port *port,
 			 struct serial_rs485 __user *rs485)
 {
@@ -1309,6 +1310,7 @@ static int uart_set_rs485_config(struct uart_port *port,
 
 	return 0;
 }
+#endif
 
 static int uart_get_iso7816_config(struct uart_port *port,
 				   struct serial_iso7816 __user *iso7816)
@@ -1424,6 +1426,7 @@ uart_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg)
 		ret = uart_get_lsr_info(tty, state, uarg);
 		break;
 
+#ifndef CONFIG_SERIAL_OMAP_RTU
 	case TIOCGRS485:
 		ret = uart_get_rs485_config(uport, uarg);
 		break;
@@ -1431,6 +1434,7 @@ uart_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg)
 	case TIOCSRS485:
 		ret = uart_set_rs485_config(uport, uarg);
 		break;
+#endif
 
 	case TIOCSISO7816:
 		ret = uart_set_iso7816_config(state->uart_port, uarg);
diff --git a/drivers/tty/serial/serial_reg_rtu.h b/drivers/tty/serial/serial_reg_rtu.h
new file mode 100644
index 000000000000..3e6ca531acd5
--- /dev/null
+++ b/drivers/tty/serial/serial_reg_rtu.h
@@ -0,0 +1,390 @@
+/*
+ * include/linux/serial_reg.h
+ *
+ * Copyright (C) 1992, 1994 by Theodore Ts'o.
+ * 
+ * Redistribution of this file is permitted under the terms of the GNU 
+ * Public License (GPL)
+ * 
+ * These are the UART port assignments, expressed as offsets from the base
+ * register.  These assignments should hold for any serial port based on
+ * a 8250, 16450, or 16550(A).
+ */
+
+#ifndef _LINUX_SERIAL_REG_H
+#define _LINUX_SERIAL_REG_H
+
+/*
+ * DLAB=0
+ */
+#define UART_RX		0	/* In:  Receive buffer */
+#define UART_TX		0	/* Out: Transmit buffer */
+
+#define UART_IER	1	/* Out: Interrupt Enable Register */
+#define UART_IER_MSI		0x08 /* Enable Modem status interrupt */
+#define UART_IER_RLSI		0x04 /* Enable receiver line status interrupt */
+#define UART_IER_THRI		0x02 /* Enable Transmitter holding register int. */
+#define UART_IER_RDI		0x01 /* Enable receiver data interrupt */
+/*
+ * Sleep mode for ST16650 and TI16750.  For the ST16650, EFR[4]=1
+ */
+#define UART_IERX_SLEEP		0x10 /* Enable sleep mode */
+
+#define UART_IIR	2	/* In:  Interrupt ID Register */
+#define UART_IIR_NO_INT		0x01 /* No interrupts pending */
+#define UART_IIR_ID		0x06 /* Mask for the interrupt ID */
+#define UART_IIR_MSI		0x00 /* Modem status interrupt */
+#define UART_IIR_THRI		0x02 /* Transmitter holding register empty */
+#define UART_IIR_RDI		0x04 /* Receiver data interrupt */
+#define UART_IIR_RLSI		0x06 /* Receiver line status interrupt */
+
+#define UART_IIR_BUSY		0x07 /* DesignWare APB Busy Detect */
+#define UART_IIR_RX_TIMEOUT	0x0c /* OMAP RX Timeout interrupt */
+#define UART_IIR_XOFF		0x10 /* OMAP XOFF/Special Character */
+#define UART_IIR_CTS_RTS_DSR	0x20 /* OMAP CTS/RTS/DSR Change */
+
+#define UART_FCR	2	/* Out: FIFO Control Register */
+#define UART_FCR_ENABLE_FIFO	0x01 /* Enable the FIFO */
+#define UART_FCR_CLEAR_RCVR	0x02 /* Clear the RCVR FIFO */
+#define UART_FCR_CLEAR_XMIT	0x04 /* Clear the XMIT FIFO */
+#define UART_FCR_DMA_SELECT	0x08 /* For DMA applications */
+/*
+ * Note: The FIFO trigger levels are chip specific:
+ *	RX:76 = 00  01  10  11	TX:54 = 00  01  10  11
+ * PC16550D:	 1   4   8  14		xx  xx  xx  xx
+ * TI16C550A:	 1   4   8  14          xx  xx  xx  xx
+ * TI16C550C:	 1   4   8  14          xx  xx  xx  xx
+ * ST16C550:	 1   4   8  14		xx  xx  xx  xx
+ * ST16C650:	 8  16  24  28		16   8  24  30	PORT_16650V2
+ * NS16C552:	 1   4   8  14		xx  xx  xx  xx
+ * ST16C654:	 8  16  56  60		 8  16  32  56	PORT_16654
+ * TI16C750:	 1  16  32  56		xx  xx  xx  xx	PORT_16750
+ * TI16C752:	 8  16  56  60		 8  16  32  56
+ * Tegra:	 1   4   8  14		16   8   4   1	PORT_TEGRA
+ */
+#define UART_FCR_R_TRIG_00	0x00
+#define UART_FCR_R_TRIG_01	0x40
+#define UART_FCR_R_TRIG_10	0x80
+#define UART_FCR_R_TRIG_11	0xc0
+#define UART_FCR_T_TRIG_00	0x00
+#define UART_FCR_T_TRIG_01	0x10
+#define UART_FCR_T_TRIG_10	0x20
+#define UART_FCR_T_TRIG_11	0x30
+
+#define UART_FCR_TRIGGER_MASK	0xC0 /* Mask for the FIFO trigger range */
+#define UART_FCR_TRIGGER_1	0x00 /* Mask for trigger set at 1 */
+#define UART_FCR_TRIGGER_4	0x40 /* Mask for trigger set at 4 */
+#define UART_FCR_TRIGGER_8	0x80 /* Mask for trigger set at 8 */
+#define UART_FCR_TRIGGER_14	0xC0 /* Mask for trigger set at 14 */
+/* 16650 definitions */
+#define UART_FCR6_R_TRIGGER_8	0x00 /* Mask for receive trigger set at 1 */
+#define UART_FCR6_R_TRIGGER_16	0x40 /* Mask for receive trigger set at 4 */
+#define UART_FCR6_R_TRIGGER_24  0x80 /* Mask for receive trigger set at 8 */
+#define UART_FCR6_R_TRIGGER_28	0xC0 /* Mask for receive trigger set at 14 */
+#define UART_FCR6_T_TRIGGER_16	0x00 /* Mask for transmit trigger set at 16 */
+#define UART_FCR6_T_TRIGGER_8	0x10 /* Mask for transmit trigger set at 8 */
+#define UART_FCR6_T_TRIGGER_24  0x20 /* Mask for transmit trigger set at 24 */
+#define UART_FCR6_T_TRIGGER_30	0x30 /* Mask for transmit trigger set at 30 */
+#define UART_FCR7_64BYTE	0x20 /* Go into 64 byte mode (TI16C750) */
+
+#define UART_LCR	3	/* Out: Line Control Register */
+/*
+ * Note: if the word length is 5 bits (UART_LCR_WLEN5), then setting 
+ * UART_LCR_STOP will select 1.5 stop bits, not 2 stop bits.
+ */
+#define UART_LCR_DLAB		0x80 /* Divisor latch access bit */
+#define UART_LCR_SBC		0x40 /* Set break control */
+#define UART_LCR_SPAR		0x20 /* Stick parity (?) */
+#define UART_LCR_EPAR		0x10 /* Even parity select */
+#define UART_LCR_PARITY		0x08 /* Parity Enable */
+#define UART_LCR_STOP		0x04 /* Stop bits: 0=1 bit, 1=2 bits */
+#define UART_LCR_WLEN5		0x00 /* Wordlength: 5 bits */
+#define UART_LCR_WLEN6		0x01 /* Wordlength: 6 bits */
+#define UART_LCR_WLEN7		0x02 /* Wordlength: 7 bits */
+#define UART_LCR_WLEN8		0x03 /* Wordlength: 8 bits */
+
+/*
+ * Access to some registers depends on register access / configuration
+ * mode.
+ */
+#define UART_LCR_CONF_MODE_A	UART_LCR_DLAB	/* Configutation mode A */
+#define UART_LCR_CONF_MODE_B	0xBF		/* Configutation mode B */
+
+#define UART_MCR	4	/* Out: Modem Control Register */
+#define UART_MCR_CLKSEL		0x80 /* Divide clock by 4 (TI16C752, EFR[4]=1) */
+#define UART_MCR_TCRTLR		0x40 /* Access TCR/TLR (TI16C752, EFR[4]=1) */
+#define UART_MCR_XONANY		0x20 /* Enable Xon Any (TI16C752, EFR[4]=1) */
+#define UART_MCR_AFE		0x20 /* Enable auto-RTS/CTS (TI16C550C/TI16C750) */
+#define UART_MCR_LOOP		0x10 /* Enable loopback test mode */
+#define UART_MCR_OUT2		0x08 /* Out2 complement */
+#define UART_MCR_OUT1		0x04 /* Out1 complement */
+#define UART_MCR_RTS		0x02 /* RTS complement */
+#define UART_MCR_DTR		0x01 /* DTR complement */
+
+#define UART_LSR	5	/* In:  Line Status Register */
+#define UART_LSR_FIFOE		0x80 /* Fifo error */
+#define UART_LSR_TEMT		0x40 /* Transmitter empty */
+#define UART_LSR_THRE		0x20 /* Transmit-hold-register empty */
+#define UART_LSR_BI		0x10 /* Break interrupt indicator */
+#define UART_LSR_FE		0x08 /* Frame error indicator */
+#define UART_LSR_PE		0x04 /* Parity error indicator */
+#define UART_LSR_OE		0x02 /* Overrun error indicator */
+#define UART_LSR_DR		0x01 /* Receiver data ready */
+#define UART_LSR_BRK_ERROR_BITS	0x1E /* BI, FE, PE, OE bits */
+
+#define UART_MSR	6	/* In:  Modem Status Register */
+#define UART_MSR_DCD		0x80 /* Data Carrier Detect */
+#define UART_MSR_RI		0x40 /* Ring Indicator */
+#define UART_MSR_DSR		0x20 /* Data Set Ready */
+#define UART_MSR_CTS		0x10 /* Clear to Send */
+#define UART_MSR_DDCD		0x08 /* Delta DCD */
+#define UART_MSR_TERI		0x04 /* Trailing edge ring indicator */
+#define UART_MSR_DDSR		0x02 /* Delta DSR */
+#define UART_MSR_DCTS		0x01 /* Delta CTS */
+#define UART_MSR_ANY_DELTA	0x0F /* Any of the delta bits! */
+
+#define UART_SCR	7	/* I/O: Scratch Register */
+
+/*
+ * DLAB=1
+ */
+#define UART_DLL	0	/* Out: Divisor Latch Low */
+#define UART_DLM	1	/* Out: Divisor Latch High */
+
+/*
+ * LCR=0xBF (or DLAB=1 for 16C660)
+ */
+#define UART_EFR	2	/* I/O: Extended Features Register */
+#define UART_XR_EFR	9	/* I/O: Extended Features Register (XR17D15x) */
+#define UART_EFR_CTS		0x80 /* CTS flow control */
+#define UART_EFR_RTS		0x40 /* RTS flow control */
+#define UART_EFR_SCD		0x20 /* Special character detect */
+#define UART_EFR_ECB		0x10 /* Enhanced control bit */
+/*
+ * the low four bits control software flow control
+ */
+
+/*
+ * LCR=0xBF, TI16C752, ST16650, ST16650A, ST16654
+ */
+#define UART_XON1	4	/* I/O: Xon character 1 */
+#define UART_XON2	5	/* I/O: Xon character 2 */
+#define UART_XOFF1	6	/* I/O: Xoff character 1 */
+#define UART_XOFF2	7	/* I/O: Xoff character 2 */
+
+/*
+ * EFR[4]=1 MCR[6]=1, TI16C752
+ */
+#define UART_TI752_TCR	6	/* I/O: transmission control register */
+#define UART_TI752_TLR	7	/* I/O: trigger level register */
+
+/*
+ * LCR=0xBF, XR16C85x
+ */
+#define UART_TRG	0	/* FCTR bit 7 selects Rx or Tx
+				 * In: Fifo count
+				 * Out: Fifo custom trigger levels */
+/*
+ * These are the definitions for the Programmable Trigger Register
+ */
+#define UART_TRG_1		0x01
+#define UART_TRG_4		0x04
+#define UART_TRG_8		0x08
+#define UART_TRG_16		0x10
+#define UART_TRG_32		0x20
+#define UART_TRG_64		0x40
+#define UART_TRG_96		0x60
+#define UART_TRG_120		0x78
+#define UART_TRG_128		0x80
+
+#define UART_FCTR	1	/* Feature Control Register */
+#define UART_FCTR_RTS_NODELAY	0x00  /* RTS flow control delay */
+#define UART_FCTR_RTS_4DELAY	0x01
+#define UART_FCTR_RTS_6DELAY	0x02
+#define UART_FCTR_RTS_8DELAY	0x03
+#define UART_FCTR_IRDA		0x04  /* IrDa data encode select */
+#define UART_FCTR_TX_INT	0x08  /* Tx interrupt type select */
+#define UART_FCTR_TRGA		0x00  /* Tx/Rx 550 trigger table select */
+#define UART_FCTR_TRGB		0x10  /* Tx/Rx 650 trigger table select */
+#define UART_FCTR_TRGC		0x20  /* Tx/Rx 654 trigger table select */
+#define UART_FCTR_TRGD		0x30  /* Tx/Rx 850 programmable trigger select */
+#define UART_FCTR_SCR_SWAP	0x40  /* Scratch pad register swap */
+#define UART_FCTR_RX		0x00  /* Programmable trigger mode select */
+#define UART_FCTR_TX		0x80  /* Programmable trigger mode select */
+
+/*
+ * LCR=0xBF, FCTR[6]=1
+ */
+#define UART_EMSR	7	/* Extended Mode Select Register */
+#define UART_EMSR_FIFO_COUNT	0x01  /* Rx/Tx select */
+#define UART_EMSR_ALT_COUNT	0x02  /* Alternating count select */
+
+/*
+ * The Intel XScale on-chip UARTs define these bits
+ */
+#define UART_IER_DMAE	0x80	/* DMA Requests Enable */
+#define UART_IER_UUE	0x40	/* UART Unit Enable */
+#define UART_IER_NRZE	0x20	/* NRZ coding Enable */
+#define UART_IER_RTOIE	0x10	/* Receiver Time Out Interrupt Enable */
+
+#define UART_IIR_TOD	0x08	/* Character Timeout Indication Detected */
+
+#define UART_FCR_PXAR1	0x00	/* receive FIFO threshold = 1 */
+#define UART_FCR_PXAR8	0x40	/* receive FIFO threshold = 8 */
+#define UART_FCR_PXAR16	0x80	/* receive FIFO threshold = 16 */
+#define UART_FCR_PXAR32	0xc0	/* receive FIFO threshold = 32 */
+
+/*
+ * Intel MID on-chip HSU (High Speed UART) defined bits
+ */
+#define UART_FCR_HSU_64_1B	0x00	/* receive FIFO treshold = 1 */
+#define UART_FCR_HSU_64_16B	0x40	/* receive FIFO treshold = 16 */
+#define UART_FCR_HSU_64_32B	0x80	/* receive FIFO treshold = 32 */
+#define UART_FCR_HSU_64_56B	0xc0	/* receive FIFO treshold = 56 */
+
+#define UART_FCR_HSU_16_1B	0x00	/* receive FIFO treshold = 1 */
+#define UART_FCR_HSU_16_4B	0x40	/* receive FIFO treshold = 4 */
+#define UART_FCR_HSU_16_8B	0x80	/* receive FIFO treshold = 8 */
+#define UART_FCR_HSU_16_14B	0xc0	/* receive FIFO treshold = 14 */
+
+#define UART_FCR_HSU_64B_FIFO	0x20	/* chose 64 bytes FIFO */
+#define UART_FCR_HSU_16B_FIFO	0x00	/* chose 16 bytes FIFO */
+
+#define UART_FCR_HALF_EMPT_TXI	0x00	/* trigger TX_EMPT IRQ for half empty */
+#define UART_FCR_FULL_EMPT_TXI	0x08	/* trigger TX_EMPT IRQ for full empty */
+
+/*
+ * These register definitions are for the 16C950
+ */
+#define UART_ASR	0x01	/* Additional Status Register */
+#define UART_RFL	0x03	/* Receiver FIFO level */
+#define UART_TFL 	0x04	/* Transmitter FIFO level */
+#define UART_ICR	0x05	/* Index Control Register */
+
+/* The 16950 ICR registers */
+#define UART_ACR	0x00	/* Additional Control Register */
+#define UART_CPR	0x01	/* Clock Prescalar Register */
+#define UART_TCR	0x02	/* Times Clock Register */
+#define UART_CKS	0x03	/* Clock Select Register */
+#define UART_TTL	0x04	/* Transmitter Interrupt Trigger Level */
+#define UART_RTL	0x05	/* Receiver Interrupt Trigger Level */
+#define UART_FCL	0x06	/* Flow Control Level Lower */
+#define UART_FCH	0x07	/* Flow Control Level Higher */
+#define UART_ID1	0x08	/* ID #1 */
+#define UART_ID2	0x09	/* ID #2 */
+#define UART_ID3	0x0A	/* ID #3 */
+#define UART_REV	0x0B	/* Revision */
+#define UART_CSR	0x0C	/* Channel Software Reset */
+#define UART_NMR	0x0D	/* Nine-bit Mode Register */
+#define UART_CTR	0xFF
+
+/*
+ * The 16C950 Additional Control Register
+ */
+#define UART_ACR_RXDIS	0x01	/* Receiver disable */
+#define UART_ACR_TXDIS	0x02	/* Transmitter disable */
+#define UART_ACR_DSRFC	0x04	/* DSR Flow Control */
+#define UART_ACR_TLENB	0x20	/* 950 trigger levels enable */
+#define UART_ACR_ICRRD	0x40	/* ICR Read enable */
+#define UART_ACR_ASREN	0x80	/* Additional status enable */
+
+
+
+/*
+ * These definitions are for the RSA-DV II/S card, from
+ *
+ * Kiyokazu SUTO <suto@ks-and-ks.ne.jp>
+ */
+
+#define UART_RSA_BASE (-8)
+
+#define UART_RSA_MSR ((UART_RSA_BASE) + 0) /* I/O: Mode Select Register */
+
+#define UART_RSA_MSR_SWAP (1 << 0) /* Swap low/high 8 bytes in I/O port addr */
+#define UART_RSA_MSR_FIFO (1 << 2) /* Enable the external FIFO */
+#define UART_RSA_MSR_FLOW (1 << 3) /* Enable the auto RTS/CTS flow control */
+#define UART_RSA_MSR_ITYP (1 << 4) /* Level (1) / Edge triger (0) */
+
+#define UART_RSA_IER ((UART_RSA_BASE) + 1) /* I/O: Interrupt Enable Register */
+
+#define UART_RSA_IER_Rx_FIFO_H (1 << 0) /* Enable Rx FIFO half full int. */
+#define UART_RSA_IER_Tx_FIFO_H (1 << 1) /* Enable Tx FIFO half full int. */
+#define UART_RSA_IER_Tx_FIFO_E (1 << 2) /* Enable Tx FIFO empty int. */
+#define UART_RSA_IER_Rx_TOUT (1 << 3) /* Enable char receive timeout int */
+#define UART_RSA_IER_TIMER (1 << 4) /* Enable timer interrupt */
+
+#define UART_RSA_SRR ((UART_RSA_BASE) + 2) /* IN: Status Read Register */
+
+#define UART_RSA_SRR_Tx_FIFO_NEMP (1 << 0) /* Tx FIFO is not empty (1) */
+#define UART_RSA_SRR_Tx_FIFO_NHFL (1 << 1) /* Tx FIFO is not half full (1) */
+#define UART_RSA_SRR_Tx_FIFO_NFUL (1 << 2) /* Tx FIFO is not full (1) */
+#define UART_RSA_SRR_Rx_FIFO_NEMP (1 << 3) /* Rx FIFO is not empty (1) */
+#define UART_RSA_SRR_Rx_FIFO_NHFL (1 << 4) /* Rx FIFO is not half full (1) */
+#define UART_RSA_SRR_Rx_FIFO_NFUL (1 << 5) /* Rx FIFO is not full (1) */
+#define UART_RSA_SRR_Rx_TOUT (1 << 6) /* Character reception timeout occurred (1) */
+#define UART_RSA_SRR_TIMER (1 << 7) /* Timer interrupt occurred */
+
+#define UART_RSA_FRR ((UART_RSA_BASE) + 2) /* OUT: FIFO Reset Register */
+
+#define UART_RSA_TIVSR ((UART_RSA_BASE) + 3) /* I/O: Timer Interval Value Set Register */
+
+#define UART_RSA_TCR ((UART_RSA_BASE) + 4) /* OUT: Timer Control Register */
+
+#define UART_RSA_TCR_SWITCH (1 << 0) /* Timer on */
+
+/*
+ * The RSA DSV/II board has two fixed clock frequencies.  One is the
+ * standard rate, and the other is 8 times faster.
+ */
+#define SERIAL_RSA_BAUD_BASE (921600)
+#define SERIAL_RSA_BAUD_BASE_LO (SERIAL_RSA_BAUD_BASE / 8)
+
+/*
+ * Extra serial register definitions for the internal UARTs
+ * in TI OMAP processors.
+ */
+#define UART_OMAP_MDR1		0x08	/* Mode definition register */
+#define UART_OMAP_MDR2		0x09	/* Mode definition register 2 */
+#define UART_OMAP_SCR		0x10	/* Supplementary control register */
+#define UART_OMAP_SSR		0x11	/* Supplementary status register */
+#define UART_OMAP_EBLR		0x12	/* BOF length register */
+#define UART_OMAP_OSC_12M_SEL	0x13	/* OMAP1510 12MHz osc select */
+#define UART_OMAP_MVER		0x14	/* Module version register */
+#define UART_OMAP_SYSC		0x15	/* System configuration register */
+#define UART_OMAP_SYSS		0x16	/* System status register */
+#define UART_OMAP_WER		0x17	/* Wake-up enable register */
+
+/*
+ * These are the definitions for the MDR1 register
+ */
+#define UART_OMAP_MDR1_16X_MODE		0x00	/* UART 16x mode */
+#define UART_OMAP_MDR1_SIR_MODE		0x01	/* SIR mode */
+#define UART_OMAP_MDR1_16X_ABAUD_MODE	0x02	/* UART 16x auto-baud */
+#define UART_OMAP_MDR1_13X_MODE		0x03	/* UART 13x mode */
+#define UART_OMAP_MDR1_MIR_MODE		0x04	/* MIR mode */
+#define UART_OMAP_MDR1_FIR_MODE		0x05	/* FIR mode */
+#define UART_OMAP_MDR1_CIR_MODE		0x06	/* CIR mode */
+#define UART_OMAP_MDR1_DISABLE		0x07	/* Disable (default state) */
+
+/*
+ * These are definitions for the Exar XR17V35X and XR17(C|D)15X
+ */
+#define UART_EXAR_8XMODE	0x88	/* 8X sampling rate select */
+#define UART_EXAR_SLEEP		0x8b	/* Sleep mode */
+#define UART_EXAR_DVID		0x8d	/* Device identification */
+
+#define UART_EXAR_FCTR		0x08	/* Feature Control Register */
+#define UART_FCTR_EXAR_IRDA	0x08	/* IrDa data encode select */
+#define UART_FCTR_EXAR_485	0x10	/* Auto 485 half duplex dir ctl */
+#define UART_FCTR_EXAR_TRGA	0x00	/* FIFO trigger table A */
+#define UART_FCTR_EXAR_TRGB	0x60	/* FIFO trigger table B */
+#define UART_FCTR_EXAR_TRGC	0x80	/* FIFO trigger table C */
+#define UART_FCTR_EXAR_TRGD	0xc0	/* FIFO trigger table D programmable */
+
+#define UART_EXAR_TXTRG		0x0a	/* Tx FIFO trigger level write-only */
+#define UART_EXAR_RXTRG		0x0b	/* Rx FIFO trigger level write-only */
+
+#define UART_OMAP_SCR_TX_EMPTY_CTL_IT 0x08 /* TX Empty IRQ mode */
+
+#endif /* _LINUX_SERIAL_REG_H */
+
diff --git a/drivers/tty/serial/stm32-usart.c b/drivers/tty/serial/stm32-usart.c
index 200cd293d14d..fc41bb15695e 100644
--- a/drivers/tty/serial/stm32-usart.c
+++ b/drivers/tty/serial/stm32-usart.c
@@ -656,13 +656,15 @@ static int stm32_usart_startup(struct uart_port *port)
 	const struct stm32_usart_offsets *ofs = &stm32_port->info->ofs;
 	const struct stm32_usart_config *cfg = &stm32_port->info->cfg;
 	const char *name = to_platform_device(port->dev)->name;
+	unsigned flags = IRQF_NO_SUSPEND | IRQF_ONESHOT;
 	u32 val;
 	int ret;
 
+	if (IS_ENABLED(CONFIG_PREEMPT_RT) && !stm32_port->rx_ch)
+		flags &= ~IRQF_ONESHOT;
+
 	ret = request_threaded_irq(port->irq, stm32_usart_interrupt,
-				   stm32_usart_threaded_interrupt,
-				   IRQF_ONESHOT | IRQF_NO_SUSPEND,
-				   name, port);
+			stm32_usart_threaded_interrupt, flags, name, port);
 	if (ret)
 		return ret;
 
diff --git a/drivers/tty/tty_ioctl.c b/drivers/tty/tty_ioctl.c
index 507a25d692bb..b35ad21a1848 100644
--- a/drivers/tty/tty_ioctl.c
+++ b/drivers/tty/tty_ioctl.c
@@ -430,7 +430,7 @@ static int set_termios(struct tty_struct *tty, void __user *arg, int opt)
 	}
 
 	if (opt & TERMIOS_WAIT) {
-		tty_wait_until_sent(tty, 0);
+		tty_wait_until_sent(tty, 5 * HZ); /* Wait 5 seconds in jiffies */
 		if (signal_pending(current))
 			return -ERESTARTSYS;
 	}
diff --git a/drivers/uio/uio.c b/drivers/uio/uio.c
index ea96e319c8a0..60e03d3f8c6a 100644
--- a/drivers/uio/uio.c
+++ b/drivers/uio/uio.c
@@ -976,7 +976,8 @@ int __uio_register_device(struct module *owner,
 		 * freed until they are released.
 		 */
 		ret = request_irq(info->irq, uio_interrupt,
-				  info->irq_flags, info->name, idev);
+				  info->irq_flags | IRQF_THREAD_TBL_LOOKUP,
+				  info->name, idev);
 		if (ret) {
 			info->uio_dev = NULL;
 			goto err_request_irq;
diff --git a/drivers/usb/gadget/function/f_rndis.c b/drivers/usb/gadget/function/f_rndis.c
index ee95e8f5f9d4..ff1ea59bfa83 100644
--- a/drivers/usb/gadget/function/f_rndis.c
+++ b/drivers/usb/gadget/function/f_rndis.c
@@ -16,6 +16,7 @@
 #include <linux/module.h>
 #include <linux/device.h>
 #include <linux/etherdevice.h>
+#include <linux/usb/misc.h>
 
 #include <linux/atomic.h>
 
@@ -694,6 +695,18 @@ rndis_bind(struct usb_configuration *c, struct usb_function *f)
 	rndis_iad_descriptor.bFunctionSubClass = rndis_opts->subclass;
 	rndis_iad_descriptor.bFunctionProtocol = rndis_opts->protocol;
 
+	/*
+	 * Starting with Vista, Windows will match this Class/SubClass/Protocol
+	 * with rndiscmp.inf and load the proper driver without the need for a
+	 * custom .inf.
+	 * Ref: https://msdn.microsoft.com/library/ff538820(v=vs.85).aspx
+	 */
+	if (rndis_opts->use_ms_rndiscmp) {
+		rndis_iad_descriptor.bFunctionClass = USB_CLASS_MISC;
+		rndis_iad_descriptor.bFunctionSubClass = USB_MISC_SUBCLASS_RNDIS;
+		rndis_iad_descriptor.bFunctionProtocol = USB_MISC_RNDIS_PROTO_ENET;
+	}
+
 	/*
 	 * in drivers/usb/gadget/configfs.c:configfs_composite_bind()
 	 * configurations are bound in sequence with list_for_each_entry,
@@ -878,6 +891,40 @@ USB_ETHER_CONFIGFS_ITEM_ATTR_U8_RW(rndis, subclass);
 /* f_rndis_opts_protocol */
 USB_ETHER_CONFIGFS_ITEM_ATTR_U8_RW(rndis, protocol);
 
+static ssize_t
+rndis_opts_use_ms_rndiscmp_show(struct config_item *item, char *page)
+{
+	struct f_rndis_opts *opts = to_f_rndis_opts(item);
+	int ret;
+
+	mutex_lock(&opts->lock);
+	ret = sprintf(page, "%d\n", opts->use_ms_rndiscmp);
+	mutex_unlock(&opts->lock);
+
+	return ret;
+}
+
+static ssize_t
+rndis_opts_use_ms_rndiscmp_store(struct config_item *item, const char *page,
+				 size_t len)
+{
+	struct f_rndis_opts *opts = to_f_rndis_opts(item);
+	int ret;
+	bool use;
+
+	mutex_lock(&opts->lock);
+	ret = strtobool(page, &use);
+	if (!ret) {
+		opts->use_ms_rndiscmp = use;
+		ret = len;
+	}
+	mutex_unlock(&opts->lock);
+
+	return ret;
+}
+
+CONFIGFS_ATTR(rndis_opts_, use_ms_rndiscmp);
+
 static struct configfs_attribute *rndis_attrs[] = {
 	&rndis_opts_attr_dev_addr,
 	&rndis_opts_attr_host_addr,
@@ -886,6 +933,7 @@ static struct configfs_attribute *rndis_attrs[] = {
 	&rndis_opts_attr_class,
 	&rndis_opts_attr_subclass,
 	&rndis_opts_attr_protocol,
+	&rndis_opts_attr_use_ms_rndiscmp,
 	NULL,
 };
 
diff --git a/drivers/usb/gadget/function/u_rndis.h b/drivers/usb/gadget/function/u_rndis.h
index a8c409b2f52f..5db269110504 100644
--- a/drivers/usb/gadget/function/u_rndis.h
+++ b/drivers/usb/gadget/function/u_rndis.h
@@ -22,6 +22,7 @@ struct f_rndis_opts {
 	struct net_device		*net;
 	bool				bound;
 	bool				borrowed_net;
+	bool				use_ms_rndiscmp;
 
 	struct config_group		*rndis_interf_group;
 	struct usb_os_desc		rndis_os_desc;
diff --git a/drivers/usb/musb/am35x.c b/drivers/usb/musb/am35x.c
index 660641ab1545..a9f12b3a0397 100644
--- a/drivers/usb/musb/am35x.c
+++ b/drivers/usb/musb/am35x.c
@@ -19,6 +19,8 @@
 #include <linux/dma-mapping.h>
 #include <linux/usb/usb_phy_generic.h>
 #include <linux/platform_data/usb-omap.h>
+#include <linux/of.h>
+#include <linux/of_platform.h>
 
 #include "musb_core.h"
 
@@ -440,6 +442,40 @@ static const struct platform_device_info am35x_dev_info = {
 	.dma_mask	= DMA_BIT_MASK(32),
 };
 
+static int of_am35x_probe(struct device_node *np,
+			  struct musb_hdrc_platform_data *pdata)
+{
+	struct musb_hdrc_config *config = (struct musb_hdrc_config *) pdata->config;
+	struct omap_musb_board_data *data = (struct omap_musb_board_data *)pdata->board_data;
+
+	/* we presume that pdata was already prepared in pdata-quirks.c */
+	if (!of_property_read_u32(np, "mode", (u32 *)&pdata->mode))
+		data->mode = pdata->mode;
+	else
+		goto out_inval;
+
+	if (of_property_read_u32(np, "interface-type",
+				(u32 *)&data->interface_type))
+		goto out_inval;
+
+	if (of_property_read_u32(np, "power", (u32 *)&pdata->power))
+		goto out_inval;
+
+	if (of_property_read_u32(np, "num-eps", (u32 *)&config->num_eps))
+		goto out_inval;
+
+	if (of_property_read_u32(np, "ram-bits", (u32 *)&config->ram_bits))
+		goto out_inval;
+
+	config->multipoint = of_property_read_bool(np, "multipoint");
+
+	return 0;
+
+out_inval:
+
+	return -EINVAL;
+}
+
 static int am35x_probe(struct platform_device *pdev)
 {
 	struct musb_hdrc_platform_data	*pdata = dev_get_platdata(&pdev->dev);
@@ -451,18 +487,21 @@ static int am35x_probe(struct platform_device *pdev)
 
 	int				ret = -ENOMEM;
 
+	if (pdev->dev.of_node)
+		of_am35x_probe(pdev->dev.of_node, pdata);
+
 	glue = kzalloc(sizeof(*glue), GFP_KERNEL);
 	if (!glue)
 		goto err0;
 
-	phy_clk = clk_get(&pdev->dev, "fck");
+	phy_clk = clk_get(&pdev->dev, "hsotgusb_fck");
 	if (IS_ERR(phy_clk)) {
 		dev_err(&pdev->dev, "failed to get PHY clock\n");
 		ret = PTR_ERR(phy_clk);
 		goto err3;
 	}
 
-	clk = clk_get(&pdev->dev, "ick");
+	clk = clk_get(&pdev->dev, "hsotgusb_ick");
 	if (IS_ERR(clk)) {
 		dev_err(&pdev->dev, "failed to get clock\n");
 		ret = PTR_ERR(clk);
@@ -593,12 +632,25 @@ static int am35x_resume(struct device *dev)
 
 static SIMPLE_DEV_PM_OPS(am35x_pm_ops, am35x_suspend, am35x_resume);
 
+#ifdef CONFIG_OF
+static const struct of_device_id am35x_id_table[] = {
+	{
+		.compatible = "ti,musb-am35x"
+	},
+	{},
+};
+MODULE_DEVICE_TABLE(of, am35x_id_table);
+#endif
+
 static struct platform_driver am35x_driver = {
 	.probe		= am35x_probe,
 	.remove		= am35x_remove,
 	.driver		= {
 		.name	= "musb-am35x",
 		.pm	= &am35x_pm_ops,
+#ifdef CONFIG_OF
+		.of_match_table = of_match_ptr(am35x_id_table),
+#endif
 	},
 };
 
diff --git a/drivers/usb/musb/musb_host.c b/drivers/usb/musb/musb_host.c
index 9ff7d891b4b7..23b2925750b5 100644
--- a/drivers/usb/musb/musb_host.c
+++ b/drivers/usb/musb/musb_host.c
@@ -114,7 +114,6 @@ static void musb_h_tx_flush_fifo(struct musb_hw_ep *ep)
 				"Could not flush host TX%d fifo: csr: %04x\n",
 				ep->epnum, csr))
 			return;
-		mdelay(1);
 	}
 }
 
diff --git a/drivers/usb/serial/option.c b/drivers/usb/serial/option.c
index 42420bfc983c..4ec6702acf9e 100644
--- a/drivers/usb/serial/option.c
+++ b/drivers/usb/serial/option.c
@@ -241,6 +241,7 @@ static void option_instat_callback(struct urb *urb);
 #define UBLOX_PRODUCT_R6XX			0x90fa
 /* These Yuga products use Qualcomm's vendor ID */
 #define YUGA_PRODUCT_CLM920_NC5			0x9625
+#define QUECTEL_PRODUCT_EC20			0x9215
 
 #define QUECTEL_VENDOR_ID			0x2c7c
 /* These Quectel products use Quectel's vendor ID */
@@ -585,6 +586,8 @@ static void option_instat_callback(struct urb *urb);
 
 
 static const struct usb_device_id option_ids[] = {
+	{ USB_DEVICE(0x2c7c, 0x0125) }, /* Quectel EC25, EC20 R2.0  Mini PCIe */
+	{ USB_DEVICE(0x2c7c, 0x0121) }, /* Quectel EC21 Mini PCIe */
 	{ USB_DEVICE(OPTION_VENDOR_ID, OPTION_PRODUCT_COLT) },
 	{ USB_DEVICE(OPTION_VENDOR_ID, OPTION_PRODUCT_RICOLA) },
 	{ USB_DEVICE(OPTION_VENDOR_ID, OPTION_PRODUCT_RICOLA_LIGHT) },
@@ -1096,6 +1099,7 @@ static const struct usb_device_id option_ids[] = {
 	  .driver_info = NCTRL(0) | NCTRL(1) | NCTRL(2) | NCTRL(3) | RSVD(4) },
 	/* Quectel products using Qualcomm vendor ID */
 	{ USB_DEVICE(QUALCOMM_VENDOR_ID, QUECTEL_PRODUCT_UC15)},
+	{ USB_DEVICE(QUALCOMM_VENDOR_ID, QUECTEL_PRODUCT_EC20)},
 	{ USB_DEVICE(QUALCOMM_VENDOR_ID, QUECTEL_PRODUCT_UC20),
 	  .driver_info = RSVD(4) },
 	/* Yuga products use Qualcomm vendor ID */
diff --git a/drivers/virt/acrn/irqfd.c b/drivers/virt/acrn/irqfd.c
index df5184979b28..d4ad211dce7a 100644
--- a/drivers/virt/acrn/irqfd.c
+++ b/drivers/virt/acrn/irqfd.c
@@ -17,7 +17,6 @@
 #include "acrn_drv.h"
 
 static LIST_HEAD(acrn_irqfd_clients);
-static DEFINE_MUTEX(acrn_irqfds_mutex);
 
 /**
  * struct hsm_irqfd - Properties of HSM irqfd
diff --git a/drivers/watchdog/gpio_wdt.c b/drivers/watchdog/gpio_wdt.c
index 0923201ce874..5ea38588b183 100644
--- a/drivers/watchdog/gpio_wdt.c
+++ b/drivers/watchdog/gpio_wdt.c
@@ -8,6 +8,7 @@
 #include <linux/err.h>
 #include <linux/delay.h>
 #include <linux/module.h>
+#include <linux/of_gpio.h>
 #include <linux/gpio/consumer.h>
 #include <linux/of.h>
 #include <linux/platform_device.h>
@@ -29,6 +30,7 @@ enum {
 
 struct gpio_wdt_priv {
 	struct gpio_desc	*gpiod;
+	struct gpio_desc	*gpio_en;
 	bool			state;
 	bool			always_running;
 	unsigned int		hw_algo;
@@ -43,6 +45,10 @@ static void gpio_wdt_disable(struct gpio_wdt_priv *priv)
 	/* Put GPIO back to tristate */
 	if (priv->hw_algo == HW_ALGO_TOGGLE)
 		gpiod_direction_input(priv->gpiod);
+
+	/* Turn the WDT off if supported by HW */
+	if (!IS_ERR_OR_NULL(priv->gpio_en))
+		gpiod_set_value_cansleep(priv->gpio_en, 0);
 }
 
 static int gpio_wdt_ping(struct watchdog_device *wdd)
@@ -69,6 +75,10 @@ static int gpio_wdt_start(struct watchdog_device *wdd)
 {
 	struct gpio_wdt_priv *priv = watchdog_get_drvdata(wdd);
 
+	/* Turn the WDT on if supported by HW */
+	if (!IS_ERR_OR_NULL(priv->gpio_en))
+		gpiod_set_value_cansleep(priv->gpio_en, 1);
+
 	priv->state = 0;
 	gpiod_direction_output(priv->gpiod, priv->state);
 
@@ -119,6 +129,10 @@ static int gpio_wdt_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, priv);
 
+	priv->gpio_en = devm_gpiod_get_optional(dev, "en", GPIOD_OUT_LOW);
+	if (IS_ERR_OR_NULL(priv->gpio_en))
+		dev_warn(&pdev->dev, "en-gpios property not found. Assume WDT is already enabled.\n");
+
 	ret = of_property_read_string(np, "hw_algo", &algo);
 	if (ret)
 		return ret;
diff --git a/drivers/watchdog/omap_wdt.c b/drivers/watchdog/omap_wdt.c
index 74d785b2b478..680a34588425 100644
--- a/drivers/watchdog/omap_wdt.c
+++ b/drivers/watchdog/omap_wdt.c
@@ -85,6 +85,13 @@ static void omap_wdt_reload(struct omap_wdt_dev *wdev)
 	/* reloaded WCRR from WLDR */
 }
 
+static void omap_wdt_init_trgr_pattern(struct omap_wdt_dev *wdev)
+{
+	void __iomem    *base = wdev->base;
+
+	wdev->wdt_trgr_pattern = readl_relaxed(base + OMAP_WATCHDOG_TGR);
+}
+
 static void omap_wdt_enable(struct omap_wdt_dev *wdev)
 {
 	void __iomem *base = wdev->base;
@@ -238,7 +245,6 @@ static int omap_wdt_probe(struct platform_device *pdev)
 
 	wdev->omap_wdt_users	= false;
 	wdev->dev		= &pdev->dev;
-	wdev->wdt_trgr_pattern	= 0x1234;
 	mutex_init(&wdev->lock);
 
 	/* reserve static register mappings */
@@ -253,6 +259,8 @@ static int omap_wdt_probe(struct platform_device *pdev)
 	wdev->wdog.timeout = TIMER_MARGIN_DEFAULT;
 	wdev->wdog.parent = &pdev->dev;
 
+	omap_wdt_init_trgr_pattern(wdev);
+
 	watchdog_init_timeout(&wdev->wdog, timer_margin, &pdev->dev);
 
 	watchdog_set_nowayout(&wdev->wdog, nowayout);
diff --git a/fs/afs/dir_silly.c b/fs/afs/dir_silly.c
index 45cfd50a9521..502b56597f10 100644
--- a/fs/afs/dir_silly.c
+++ b/fs/afs/dir_silly.c
@@ -239,7 +239,7 @@ int afs_silly_iput(struct dentry *dentry, struct inode *inode)
 	struct dentry *alias;
 	int ret;
 
-	DECLARE_WAIT_QUEUE_HEAD_ONSTACK(wq);
+	DECLARE_SWAIT_QUEUE_HEAD_ONSTACK(wq);
 
 	_enter("%p{%pd},%llx", dentry, dentry, vnode->fid.vnode);
 
diff --git a/fs/cifs/readdir.c b/fs/cifs/readdir.c
index 1929e80c09ee..48eb8c30c6db 100644
--- a/fs/cifs/readdir.c
+++ b/fs/cifs/readdir.c
@@ -69,7 +69,7 @@ cifs_prime_dcache(struct dentry *parent, struct qstr *name,
 	struct inode *inode;
 	struct super_block *sb = parent->d_sb;
 	struct cifs_sb_info *cifs_sb = CIFS_SB(sb);
-	DECLARE_WAIT_QUEUE_HEAD_ONSTACK(wq);
+	DECLARE_SWAIT_QUEUE_HEAD_ONSTACK(wq);
 
 	cifs_dbg(FYI, "%s: for %s\n", __func__, name->name);
 
diff --git a/fs/dcache.c b/fs/dcache.c
index cf871a81f4fd..02db80f2817f 100644
--- a/fs/dcache.c
+++ b/fs/dcache.c
@@ -2537,7 +2537,13 @@ EXPORT_SYMBOL(d_rehash);
 
 static inline unsigned start_dir_add(struct inode *dir)
 {
-
+	/*
+	 * The caller has a spinlock_t (dentry::d_lock) acquired which disables
+	 * preemption on !PREEMPT_RT. On PREEMPT_RT the lock does not disable
+	 * preemption and it has be done explicitly.
+	 */
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_disable();
 	for (;;) {
 		unsigned n = dir->i_dir_seq;
 		if (!(n & 1) && cmpxchg(&dir->i_dir_seq, n, n + 1) == n)
@@ -2549,25 +2555,30 @@ static inline unsigned start_dir_add(struct inode *dir)
 static inline void end_dir_add(struct inode *dir, unsigned n)
 {
 	smp_store_release(&dir->i_dir_seq, n + 2);
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_enable();
 }
 
 static void d_wait_lookup(struct dentry *dentry)
 {
-	if (d_in_lookup(dentry)) {
-		DECLARE_WAITQUEUE(wait, current);
-		add_wait_queue(dentry->d_wait, &wait);
-		do {
-			set_current_state(TASK_UNINTERRUPTIBLE);
-			spin_unlock(&dentry->d_lock);
-			schedule();
-			spin_lock(&dentry->d_lock);
-		} while (d_in_lookup(dentry));
-	}
+	struct swait_queue __wait;
+
+	if (!d_in_lookup(dentry))
+		return;
+
+	INIT_LIST_HEAD(&__wait.task_list);
+	do {
+		prepare_to_swait_exclusive(dentry->d_wait, &__wait, TASK_UNINTERRUPTIBLE);
+		spin_unlock(&dentry->d_lock);
+		schedule();
+		spin_lock(&dentry->d_lock);
+	} while (d_in_lookup(dentry));
+	finish_swait(dentry->d_wait, &__wait);
 }
 
 struct dentry *d_alloc_parallel(struct dentry *parent,
 				const struct qstr *name,
-				wait_queue_head_t *wq)
+				struct swait_queue_head *wq)
 {
 	unsigned int hash = name->hash;
 	struct hlist_bl_head *b = in_lookup_hash(parent, hash);
@@ -2682,7 +2693,7 @@ void __d_lookup_done(struct dentry *dentry)
 	hlist_bl_lock(b);
 	dentry->d_flags &= ~DCACHE_PAR_LOOKUP;
 	__hlist_bl_del(&dentry->d_u.d_in_lookup_hash);
-	wake_up_all(dentry->d_wait);
+	swake_up_all(dentry->d_wait);
 	dentry->d_wait = NULL;
 	hlist_bl_unlock(b);
 	INIT_HLIST_NODE(&dentry->d_u.d_alias);
diff --git a/fs/fscache/internal.h b/fs/fscache/internal.h
index c3e4804b8fcb..9edb87e11680 100644
--- a/fs/fscache/internal.h
+++ b/fs/fscache/internal.h
@@ -81,7 +81,6 @@ extern unsigned fscache_debug;
 extern struct kobject *fscache_root;
 extern struct workqueue_struct *fscache_object_wq;
 extern struct workqueue_struct *fscache_op_wq;
-DECLARE_PER_CPU(wait_queue_head_t, fscache_object_cong_wait);
 
 extern unsigned int fscache_hash(unsigned int salt, unsigned int *data, unsigned int n);
 
diff --git a/fs/fscache/main.c b/fs/fscache/main.c
index 4207f98e405f..85f8cf3a323d 100644
--- a/fs/fscache/main.c
+++ b/fs/fscache/main.c
@@ -41,8 +41,6 @@ struct kobject *fscache_root;
 struct workqueue_struct *fscache_object_wq;
 struct workqueue_struct *fscache_op_wq;
 
-DEFINE_PER_CPU(wait_queue_head_t, fscache_object_cong_wait);
-
 /* these values serve as lower bounds, will be adjusted in fscache_init() */
 static unsigned fscache_object_max_active = 4;
 static unsigned fscache_op_max_active = 2;
@@ -138,7 +136,6 @@ unsigned int fscache_hash(unsigned int salt, unsigned int *data, unsigned int n)
 static int __init fscache_init(void)
 {
 	unsigned int nr_cpus = num_possible_cpus();
-	unsigned int cpu;
 	int ret;
 
 	fscache_object_max_active =
@@ -161,9 +158,6 @@ static int __init fscache_init(void)
 	if (!fscache_op_wq)
 		goto error_op_wq;
 
-	for_each_possible_cpu(cpu)
-		init_waitqueue_head(&per_cpu(fscache_object_cong_wait, cpu));
-
 	ret = fscache_proc_init();
 	if (ret < 0)
 		goto error_proc;
diff --git a/fs/fscache/object.c b/fs/fscache/object.c
index 6a675652129b..7a972d144b54 100644
--- a/fs/fscache/object.c
+++ b/fs/fscache/object.c
@@ -798,6 +798,8 @@ void fscache_object_destroy(struct fscache_object *object)
 }
 EXPORT_SYMBOL(fscache_object_destroy);
 
+static DECLARE_WAIT_QUEUE_HEAD(fscache_object_cong_wait);
+
 /*
  * enqueue an object for metadata-type processing
  */
@@ -806,16 +808,12 @@ void fscache_enqueue_object(struct fscache_object *object)
 	_enter("{OBJ%x}", object->debug_id);
 
 	if (fscache_get_object(object, fscache_obj_get_queue) >= 0) {
-		wait_queue_head_t *cong_wq =
-			&get_cpu_var(fscache_object_cong_wait);
 
 		if (queue_work(fscache_object_wq, &object->work)) {
 			if (fscache_object_congested())
-				wake_up(cong_wq);
+				wake_up(&fscache_object_cong_wait);
 		} else
 			fscache_put_object(object, fscache_obj_put_queue);
-
-		put_cpu_var(fscache_object_cong_wait);
 	}
 }
 
@@ -833,16 +831,15 @@ void fscache_enqueue_object(struct fscache_object *object)
  */
 bool fscache_object_sleep_till_congested(signed long *timeoutp)
 {
-	wait_queue_head_t *cong_wq = this_cpu_ptr(&fscache_object_cong_wait);
 	DEFINE_WAIT(wait);
 
 	if (fscache_object_congested())
 		return true;
 
-	add_wait_queue_exclusive(cong_wq, &wait);
+	add_wait_queue_exclusive(&fscache_object_cong_wait, &wait);
 	if (!fscache_object_congested())
 		*timeoutp = schedule_timeout(*timeoutp);
-	finish_wait(cong_wq, &wait);
+	finish_wait(&fscache_object_cong_wait, &wait);
 
 	return fscache_object_congested();
 }
diff --git a/fs/fuse/readdir.c b/fs/fuse/readdir.c
index bc267832310c..3176913fae6c 100644
--- a/fs/fuse/readdir.c
+++ b/fs/fuse/readdir.c
@@ -158,7 +158,7 @@ static int fuse_direntplus_link(struct file *file,
 	struct inode *dir = d_inode(parent);
 	struct fuse_conn *fc;
 	struct inode *inode;
-	DECLARE_WAIT_QUEUE_HEAD_ONSTACK(wq);
+	DECLARE_SWAIT_QUEUE_HEAD_ONSTACK(wq);
 
 	if (!o->nodeid) {
 		/*
diff --git a/fs/namei.c b/fs/namei.c
index 3bb65f48fe1d..811d79976228 100644
--- a/fs/namei.c
+++ b/fs/namei.c
@@ -1633,7 +1633,7 @@ static struct dentry *__lookup_slow(const struct qstr *name,
 {
 	struct dentry *dentry, *old;
 	struct inode *inode = dir->d_inode;
-	DECLARE_WAIT_QUEUE_HEAD_ONSTACK(wq);
+	DECLARE_SWAIT_QUEUE_HEAD_ONSTACK(wq);
 
 	/* Don't go there if it's already dead */
 	if (unlikely(IS_DEADDIR(inode)))
@@ -3194,7 +3194,7 @@ static struct dentry *lookup_open(struct nameidata *nd, struct file *file,
 	struct dentry *dentry;
 	int error, create_error = 0;
 	umode_t mode = op->mode;
-	DECLARE_WAIT_QUEUE_HEAD_ONSTACK(wq);
+	DECLARE_SWAIT_QUEUE_HEAD_ONSTACK(wq);
 
 	if (unlikely(IS_DEADDIR(dir_inode)))
 		return ERR_PTR(-ENOENT);
diff --git a/fs/namespace.c b/fs/namespace.c
index b696543adab8..4799232935ee 100644
--- a/fs/namespace.c
+++ b/fs/namespace.c
@@ -343,8 +343,24 @@ int __mnt_want_write(struct vfsmount *m)
 	 * incremented count after it has set MNT_WRITE_HOLD.
 	 */
 	smp_mb();
-	while (READ_ONCE(mnt->mnt.mnt_flags) & MNT_WRITE_HOLD)
-		cpu_relax();
+	might_lock(&mount_lock.lock);
+	while (READ_ONCE(mnt->mnt.mnt_flags) & MNT_WRITE_HOLD) {
+		if (!IS_ENABLED(CONFIG_PREEMPT_RT)) {
+			cpu_relax();
+		} else {
+			/*
+			 * This prevents priority inversion, if the task
+			 * setting MNT_WRITE_HOLD got preempted on a remote
+			 * CPU, and it prevents life lock if the task setting
+			 * MNT_WRITE_HOLD has a lower priority and is bound to
+			 * the same CPU as the task that is spinning here.
+			 */
+			preempt_enable();
+			lock_mount_hash();
+			unlock_mount_hash();
+			preempt_disable();
+		}
+	}
 	/*
 	 * After the slowpath clears MNT_WRITE_HOLD, mnt_is_readonly will
 	 * be set to match its requirements. So we must not load that until
diff --git a/fs/nfs/dir.c b/fs/nfs/dir.c
index ed79c1bd84a2..d351950533e7 100644
--- a/fs/nfs/dir.c
+++ b/fs/nfs/dir.c
@@ -636,7 +636,7 @@ void nfs_prime_dcache(struct dentry *parent, struct nfs_entry *entry,
 		unsigned long dir_verifier)
 {
 	struct qstr filename = QSTR_INIT(entry->name, entry->len);
-	DECLARE_WAIT_QUEUE_HEAD_ONSTACK(wq);
+	DECLARE_SWAIT_QUEUE_HEAD_ONSTACK(wq);
 	struct dentry *dentry;
 	struct dentry *alias;
 	struct inode *inode;
@@ -1875,7 +1875,7 @@ int nfs_atomic_open(struct inode *dir, struct dentry *dentry,
 		    struct file *file, unsigned open_flags,
 		    umode_t mode)
 {
-	DECLARE_WAIT_QUEUE_HEAD_ONSTACK(wq);
+	DECLARE_SWAIT_QUEUE_HEAD_ONSTACK(wq);
 	struct nfs_open_context *ctx;
 	struct dentry *res;
 	struct iattr attr = { .ia_valid = ATTR_OPEN };
diff --git a/fs/nfs/unlink.c b/fs/nfs/unlink.c
index 5fa11e1aca4c..984f26eb888c 100644
--- a/fs/nfs/unlink.c
+++ b/fs/nfs/unlink.c
@@ -13,7 +13,7 @@
 #include <linux/sunrpc/clnt.h>
 #include <linux/nfs_fs.h>
 #include <linux/sched.h>
-#include <linux/wait.h>
+#include <linux/swait.h>
 #include <linux/namei.h>
 #include <linux/fsnotify.h>
 
@@ -180,7 +180,7 @@ nfs_async_unlink(struct dentry *dentry, const struct qstr *name)
 
 	data->cred = get_current_cred();
 	data->res.dir_attr = &data->dir_attr;
-	init_waitqueue_head(&data->wq);
+	init_swait_queue_head(&data->wq);
 
 	status = -EBUSY;
 	spin_lock(&dentry->d_lock);
diff --git a/fs/proc/base.c b/fs/proc/base.c
index 1f394095eb88..fade2c7c705b 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -96,6 +96,7 @@
 #include <linux/posix-timers.h>
 #include <linux/time_namespace.h>
 #include <linux/resctrl.h>
+#include <linux/swait.h>
 #include <linux/cn_proc.h>
 #include <trace/events/oom.h>
 #include "internal.h"
@@ -2043,7 +2044,7 @@ bool proc_fill_cache(struct file *file, struct dir_context *ctx,
 
 	child = d_hash_and_lookup(dir, &qname);
 	if (!child) {
-		DECLARE_WAIT_QUEUE_HEAD_ONSTACK(wq);
+		DECLARE_SWAIT_QUEUE_HEAD_ONSTACK(wq);
 		child = d_alloc_parallel(dir, &qname, &wq);
 		if (IS_ERR(child))
 			goto end_instantiate;
diff --git a/fs/proc/proc_sysctl.c b/fs/proc/proc_sysctl.c
index 5d66faecd4ef..619d8e114646 100644
--- a/fs/proc/proc_sysctl.c
+++ b/fs/proc/proc_sysctl.c
@@ -678,7 +678,7 @@ static bool proc_sys_fill_cache(struct file *file,
 
 	child = d_lookup(dir, &qname);
 	if (!child) {
-		DECLARE_WAIT_QUEUE_HEAD_ONSTACK(wq);
+		DECLARE_SWAIT_QUEUE_HEAD_ONSTACK(wq);
 		child = d_alloc_parallel(dir, &qname, &wq);
 		if (IS_ERR(child))
 			return false;
diff --git a/include/asm-generic/softirq_stack.h b/include/asm-generic/softirq_stack.h
index eceeecf6a5bd..d3e2d81656e0 100644
--- a/include/asm-generic/softirq_stack.h
+++ b/include/asm-generic/softirq_stack.h
@@ -2,7 +2,7 @@
 #ifndef __ASM_GENERIC_SOFTIRQ_STACK_H
 #define __ASM_GENERIC_SOFTIRQ_STACK_H
 
-#ifdef CONFIG_HAVE_SOFTIRQ_ON_OWN_STACK
+#if defined(CONFIG_HAVE_SOFTIRQ_ON_OWN_STACK) && !defined(CONFIG_PREEMPT_RT)
 void do_softirq_own_stack(void);
 #else
 static inline void do_softirq_own_stack(void)
diff --git a/include/linux/console.h b/include/linux/console.h
index a97f277cfdfa..487a4266ab2c 100644
--- a/include/linux/console.h
+++ b/include/linux/console.h
@@ -16,6 +16,13 @@
 
 #include <linux/atomic.h>
 #include <linux/types.h>
+#include <linux/printk.h>
+#include <linux/seqlock.h>
+
+struct latched_seq {
+	seqcount_latch_t	latch;
+	u64			val[2];
+};
 
 struct vc_data;
 struct console_font_op;
@@ -136,10 +143,12 @@ static inline int con_debug_leave(void)
 #define CON_ANYTIME	(16) /* Safe to call when cpu is offline */
 #define CON_BRL		(32) /* Used for a braille device */
 #define CON_EXTENDED	(64) /* Use the extended output format a la /dev/kmsg */
+#define CON_HANDOVER	(128) /* Device was previously a boot console. */
 
 struct console {
 	char	name[16];
 	void	(*write)(struct console *, const char *, unsigned);
+	void	(*write_atomic)(struct console *co, const char *s, unsigned int count);
 	int	(*read)(struct console *, char *, unsigned);
 	struct tty_driver *(*device)(struct console *, int *);
 	void	(*unblank)(void);
@@ -149,6 +158,16 @@ struct console {
 	short	flags;
 	short	index;
 	int	cflag;
+#ifdef CONFIG_PRINTK
+	char	sync_buf[CONSOLE_LOG_MAX];
+	struct latched_seq printk_seq;
+	struct latched_seq printk_sync_seq;
+#ifdef CONFIG_HAVE_NMI
+	struct latched_seq printk_sync_nmi_seq;
+#endif
+#endif /* CONFIG_PRINTK */
+
+	struct task_struct *thread;
 	uint	ispeed;
 	uint	ospeed;
 	void	*data;
diff --git a/include/linux/dcache.h b/include/linux/dcache.h
index 9e23d33bb6f1..9f89d4887e35 100644
--- a/include/linux/dcache.h
+++ b/include/linux/dcache.h
@@ -108,7 +108,7 @@ struct dentry {
 
 	union {
 		struct list_head d_lru;		/* LRU list */
-		wait_queue_head_t *d_wait;	/* in-lookup ones only */
+		struct swait_queue_head *d_wait;	/* in-lookup ones only */
 	};
 	struct list_head d_child;	/* child of parent list */
 	struct list_head d_subdirs;	/* our children */
@@ -240,7 +240,7 @@ extern void d_set_d_op(struct dentry *dentry, const struct dentry_operations *op
 extern struct dentry * d_alloc(struct dentry *, const struct qstr *);
 extern struct dentry * d_alloc_anon(struct super_block *);
 extern struct dentry * d_alloc_parallel(struct dentry *, const struct qstr *,
-					wait_queue_head_t *);
+					struct swait_queue_head *);
 extern struct dentry * d_splice_alias(struct inode *, struct dentry *);
 extern struct dentry * d_add_ci(struct dentry *, struct inode *, struct qstr *);
 extern struct dentry * d_exact_alias(struct dentry *, struct inode *);
diff --git a/include/linux/entry-common.h b/include/linux/entry-common.h
index 2e2b8d6140ed..71064a2c2caf 100644
--- a/include/linux/entry-common.h
+++ b/include/linux/entry-common.h
@@ -57,9 +57,15 @@
 # define ARCH_EXIT_TO_USER_MODE_WORK		(0)
 #endif
 
+#ifdef CONFIG_PREEMPT_LAZY
+# define _TIF_NEED_RESCHED_MASK	(_TIF_NEED_RESCHED | _TIF_NEED_RESCHED_LAZY)
+#else
+# define _TIF_NEED_RESCHED_MASK	(_TIF_NEED_RESCHED)
+#endif
+
 #define EXIT_TO_USER_MODE_WORK						\
 	(_TIF_SIGPENDING | _TIF_NOTIFY_RESUME | _TIF_UPROBE |		\
-	 _TIF_NEED_RESCHED | _TIF_PATCH_PENDING | _TIF_NOTIFY_SIGNAL |	\
+	 _TIF_NEED_RESCHED_MASK | _TIF_PATCH_PENDING | _TIF_NOTIFY_SIGNAL |	\
 	 ARCH_EXIT_TO_USER_MODE_WORK)
 
 /**
diff --git a/include/linux/interrupt.h b/include/linux/interrupt.h
index 1f22a30c0963..93af2e8db53a 100644
--- a/include/linux/interrupt.h
+++ b/include/linux/interrupt.h
@@ -83,6 +83,11 @@
 #define IRQF_NO_AUTOEN		0x00080000
 #define IRQF_NO_DEBUG		0x00100000
 
+/* PFCxxx Flag to lookup IRQ Thread priority in table
+ * defined in kernel/irq/wsysinit-prio-table.c
+ */
+#define IRQF_THREAD_TBL_LOOKUP 0x00200000
+
 #define IRQF_TIMER		(__IRQF_TIMER | IRQF_NO_SUSPEND | IRQF_NO_THREAD)
 
 /*
@@ -729,7 +734,7 @@ extern void tasklet_setup(struct tasklet_struct *t,
  * if more than one irq occurred.
  */
 
-#if !defined(CONFIG_GENERIC_IRQ_PROBE) 
+#if !defined(CONFIG_GENERIC_IRQ_PROBE)
 static inline unsigned long probe_irq_on(void)
 {
 	return 0;
diff --git a/include/linux/irq_work.h b/include/linux/irq_work.h
index ec2a47a81e42..8cd11a223260 100644
--- a/include/linux/irq_work.h
+++ b/include/linux/irq_work.h
@@ -3,6 +3,7 @@
 #define _LINUX_IRQ_WORK_H
 
 #include <linux/smp_types.h>
+#include <linux/rcuwait.h>
 
 /*
  * An entry can be in one of four states:
@@ -16,11 +17,13 @@
 struct irq_work {
 	struct __call_single_node node;
 	void (*func)(struct irq_work *);
+	struct rcuwait irqwait;
 };
 
 #define __IRQ_WORK_INIT(_func, _flags) (struct irq_work){	\
 	.node = { .u_flags = (_flags), },			\
 	.func = (_func),					\
+	.irqwait = __RCUWAIT_INITIALIZER(irqwait),		\
 }
 
 #define IRQ_WORK_INIT(_func) __IRQ_WORK_INIT(_func, 0)
@@ -46,6 +49,11 @@ static inline bool irq_work_is_busy(struct irq_work *work)
 	return atomic_read(&work->node.a_flags) & IRQ_WORK_BUSY;
 }
 
+static inline bool irq_work_is_hard(struct irq_work *work)
+{
+	return atomic_read(&work->node.a_flags) & IRQ_WORK_HARD_IRQ;
+}
+
 bool irq_work_queue(struct irq_work *work);
 bool irq_work_queue_on(struct irq_work *work, int cpu);
 
diff --git a/include/linux/irqdesc.h b/include/linux/irqdesc.h
index 59aea39785bf..ab70314af3d5 100644
--- a/include/linux/irqdesc.h
+++ b/include/linux/irqdesc.h
@@ -68,6 +68,7 @@ struct irq_desc {
 	unsigned int		irqs_unhandled;
 	atomic_t		threads_handled;
 	int			threads_handled_last;
+	u64			random_ip;
 	raw_spinlock_t		lock;
 	struct cpumask		*percpu_enabled;
 	const struct cpumask	*percpu_affinity;
diff --git a/include/linux/irqflags.h b/include/linux/irqflags.h
index 600c10da321a..4b140938b03e 100644
--- a/include/linux/irqflags.h
+++ b/include/linux/irqflags.h
@@ -71,14 +71,6 @@ do {						\
 do {						\
 	__this_cpu_dec(hardirq_context);	\
 } while (0)
-# define lockdep_softirq_enter()		\
-do {						\
-	current->softirq_context++;		\
-} while (0)
-# define lockdep_softirq_exit()			\
-do {						\
-	current->softirq_context--;		\
-} while (0)
 
 # define lockdep_hrtimer_enter(__hrtimer)		\
 ({							\
@@ -140,6 +132,21 @@ do {						\
 # define lockdep_irq_work_exit(__work)		do { } while (0)
 #endif
 
+#if defined(CONFIG_TRACE_IRQFLAGS) && !defined(CONFIG_PREEMPT_RT)
+# define lockdep_softirq_enter()		\
+do {						\
+	current->softirq_context++;		\
+} while (0)
+# define lockdep_softirq_exit()			\
+do {						\
+	current->softirq_context--;		\
+} while (0)
+
+#else
+# define lockdep_softirq_enter()		do { } while (0)
+# define lockdep_softirq_exit()			do { } while (0)
+#endif
+
 #if defined(CONFIG_IRQSOFF_TRACER) || \
 	defined(CONFIG_PREEMPT_TRACER)
  extern void stop_critical_timings(void);
diff --git a/include/linux/kernel.h b/include/linux/kernel.h
index 2776423a587e..e8696e4a45aa 100644
--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@ -111,8 +111,8 @@ static __always_inline void might_resched(void)
 #endif /* CONFIG_PREEMPT_* */
 
 #ifdef CONFIG_DEBUG_ATOMIC_SLEEP
-extern void ___might_sleep(const char *file, int line, int preempt_offset);
-extern void __might_sleep(const char *file, int line, int preempt_offset);
+extern void __might_resched(const char *file, int line, unsigned int offsets);
+extern void __might_sleep(const char *file, int line);
 extern void __cant_sleep(const char *file, int line, int preempt_offset);
 extern void __cant_migrate(const char *file, int line);
 
@@ -129,7 +129,7 @@ extern void __cant_migrate(const char *file, int line);
  * supposed to.
  */
 # define might_sleep() \
-	do { __might_sleep(__FILE__, __LINE__, 0); might_resched(); } while (0)
+	do { __might_sleep(__FILE__, __LINE__); might_resched(); } while (0)
 /**
  * cant_sleep - annotation for functions that cannot sleep
  *
@@ -168,10 +168,9 @@ extern void __cant_migrate(const char *file, int line);
  */
 # define non_block_end() WARN_ON(current->non_block_count-- == 0)
 #else
-  static inline void ___might_sleep(const char *file, int line,
-				   int preempt_offset) { }
-  static inline void __might_sleep(const char *file, int line,
-				   int preempt_offset) { }
+  static inline void __might_resched(const char *file, int line,
+				     unsigned int offsets) { }
+static inline void __might_sleep(const char *file, int line) { }
 # define might_sleep() do { might_resched(); } while (0)
 # define cant_sleep() do { } while (0)
 # define cant_migrate()		do { } while (0)
diff --git a/include/linux/kgdb.h b/include/linux/kgdb.h
index 258cdde8d356..9bca0d98db5a 100644
--- a/include/linux/kgdb.h
+++ b/include/linux/kgdb.h
@@ -212,6 +212,8 @@ extern void kgdb_call_nmi_hook(void *ignored);
  */
 extern void kgdb_roundup_cpus(void);
 
+extern void kgdb_roundup_cpu(unsigned int cpu);
+
 /**
  *	kgdb_arch_set_pc - Generic call back to the program counter
  *	@regs: Current &struct pt_regs.
@@ -365,5 +367,6 @@ extern void kgdb_free_init_mem(void);
 #define dbg_late_init()
 static inline void kgdb_panic(const char *msg) {}
 static inline void kgdb_free_init_mem(void) { }
+static inline void kgdb_roundup_cpu(unsigned int cpu) {}
 #endif /* ! CONFIG_KGDB */
 #endif /* _KGDB_H_ */
diff --git a/include/linux/ksz8863.h b/include/linux/ksz8863.h
new file mode 100644
index 000000000000..478ad2af6a89
--- /dev/null
+++ b/include/linux/ksz8863.h
@@ -0,0 +1,347 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/* Micrel ksz8863 common definitions
+ *
+ * Copyright (c) 2019 WAGO Kontakttechnik GmbH & Co. KG
+ */
+
+#ifndef __KSZ8863_H__
+#define __KSZ8863_H__
+
+#include <linux/device.h>
+#include <net/dsa.h>
+#include <linux/phy.h>
+#include <linux/gpio/consumer.h>
+#include <linux/mutex.h>
+
+#define KSZ8863_NUM_PORTS 3
+#define KSZ8863_PORT_OFFSET KSZ8863_EXT_PORT1_ID
+
+#define KSZ8863_EXT_PORTS 2
+
+#define KSZ8863_EXT_PORT1_ID 1
+#define KSZ8863_EXT_PORT2_ID 2
+
+// clang-format off
+#define KSZ8863_REG_CHIP_ID0			0x00
+#define KSZ8863_REG_CHIP_ID0_FAMILY_ID			0x88
+
+#define KSZ8863_REG_CHIP_ID1			0x01
+
+#define KSZ8863_REG_CHIP_ID1_ID_MASK			0xF0
+#define KSZ8863_REG_CHIP_ID1_ID_SHIFT			4
+#define KSZ8863_REG_CHIP_ID1_ID				0x03
+#define KSZ8863_REG_CHIP_ID1_REV_ID_MASK		0x0E
+#define KSZ8863_REG_CHIP_ID1_REV_ID_SHIFT		1
+#define KSZ8863_REG_CHIP_ID1_START			0x01
+
+#define KSZ8863_REG_GL_CTRL0			0x02
+
+#define KSZ8863_REG_GL_CTRL0_NEW_BACKOFF		BIT(7)
+#define KSZ8863_REG_GL_CTRL0_FLUSH_DYN_MAC_TABLE	BIT(5)
+#define KSZ8863_REG_GL_CTRL0_FLUSH_STA_MAC_TABLE	BIT(4)
+#define KSZ8863_REG_GL_CTRL0_PASS_PAUSE			BIT(3)
+#define KSZ8863_REG_GL_CTRL0_LINK_AUTO_AGING		BIT(0)
+
+#define KSZ8863_REG_GL_CTRL1			0x03
+
+#define KSZ8863_REG_GL_CTRL1_PASS_ALL			BIT(7)
+#define KSZ8863_REG_GL_CTRL1_TAIL_TAG_ENABLE		BIT(6)
+#define KSZ8863_REG_GL_CTRL1_TX_FLOW_CTRL		BIT(5)
+#define KSZ8863_REG_GL_CTRL1_RX_FLOW_CTRL		BIT(4)
+#define KSZ8863_REG_GL_CTRL1_CHECK_LENGTH		BIT(3)
+#define KSZ8863_REG_GL_CTRL1_AGING_ENABLE		BIT(2)
+#define KSZ8863_REG_GL_CTRL1_FAST_AGING			BIT(1)
+#define KSZ8863_REG_GL_CTRL1_AGGR_BACKOFF		BIT(0)
+
+#define KSZ8863_REG_GL_CTRL2			0x04
+
+#define KSZ8863_REG_GL_CTRL2_UNICAST_VLAN_BOUNDARY	BIT(7)
+#define KSZ8863_REG_GL_CTRL2_MULTICAST_STORM_DISABLE	BIT(6)
+#define KSZ8863_REG_GL_CTRL2_BACK_PRESSURE		BIT(5)
+#define KSZ8863_REG_GL_CTRL2_FAIR_FLOW_CTRL		BIT(4)
+#define KSZ8863_REG_GL_CTRL2_NO_EXC_COLLISION_DROP	BIT(3)
+#define KSZ8863_REG_GL_CTRL2_HUGE_PACKET		BIT(2)
+#define KSZ8863_REG_GL_CTRL2_LEGAL_PACKET		BIT(1)
+
+#define KSZ8863_REG_GL_CTRL3			0x05
+
+#define KSZ8863_REG_GL_CTRL3_VLAN_ENABLE		BIT(7)
+#define KSZ8863_REG_GL_CTRL3_IGMP_SNOOP			BIT(6)
+#define KSZ8863_REG_GL_CTRL3_WEIGHTED_FAIR_QUEUE_ENABLE	BIT(3)
+#define KSZ8863_REG_GL_CTRL3_MIRROR_RX_TX		BIT(0)
+
+#define KSZ8863_REG_GL_CTRL4			0x06
+
+#define KSZ8863_REG_GL_CTRL4_HALF_DUPLEX		BIT(6)
+#define KSZ8863_REG_GL_CTRL4_FLOW_CTRL			BIT(5)
+#define KSZ8863_REG_GL_CTRL4_10_MBIT			BIT(4)
+#define KSZ8863_REG_GL_CTRL4_REPLACE_VID		BIT(3)
+#define KSZ8863_REG_GL_CTRL4_BCAST_STORM_RATE_HI_MASK	0x07
+
+#define KSZ8863_REG_GL_CTRL5			0x07
+
+#define KSZ8863_REG_GL_CTRL5_BCAST_STORM_RATE_LO_MASK	0xFF
+
+#define KSZ8863_REG_GL_CTRL9			0x0B
+
+#define KSZ8863_REG_GL_CTRL9_SPI_CLK_125_MHZ		0x80
+#define KSZ8863_REG_GL_CTRL9_SPI_CLK_62_5_MHZ		0x40
+#define KSZ8863_REG_GL_CTRL9_SPI_CLK_31_25_MHZ		0x00
+
+#define KSZ8863_REG_GL_CTRL10			0x0C
+#define KSZ8863_REG_GL_CTRL11			0x0D
+
+#define KSZ8863_REG_GL_CTRL12			0x0E
+
+#define KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_ENABLE		BIT(7)
+#define KSZ8863_REG_GL_CTRL12_DRIVER_16MA		BIT(6)
+#define KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_2_PORT3	BIT(2)
+#define KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_2_PORT2	BIT(1)
+#define KSZ8863_REG_GL_CTRL12_UNKNOWN_DA_2_PORT1	BIT(0)
+#define KSZ8863_REG_GL_CTRL12_PORT_MASK			0x7
+
+#define KSZ8863_REG_GL_CTRL13			0x0F
+
+#define KSZ8863_REG_GL_CTRL13_PORT_PHY_ADDR_MASK	0xF8
+#define KSZ8863_REG_GL_CTRL13_PORT_PHY_ADDR_SHIFT	3
+
+#define KSZ8863_REG_PORTS_BASE			0x10
+
+#define KSZ8863_REG_PORT1_CTRL0			0x10
+#define KSZ8863_REG_PORT2_CTRL0			0x20
+#define KSZ8863_REG_PORT3_CTRL0			0x30
+
+#define KSZ8863_REG_PORT_CTRL0_BROADCAST_STORM		BIT(7)
+#define KSZ8863_REG_PORT_CTRL0_DIFFSERV_ENABLE		BIT(6)
+#define KSZ8863_REG_PORT_CTRL0_802_1P_ENABLE		BIT(5)
+#define KSZ8863_REG_PORT_CTRL0_PRIO_MASK		0x18
+#define KSZ8863_REG_PORT_CTRL0_PRIO_SHIFT		3
+#define KSZ8863_REG_PORT_CTRL0_PRIO_0			(0 << KSZ8863_REG_PORT_CTRL_PRIO_SHIFT)
+#define KSZ8863_REG_PORT_CTRL0_PRIO_1			(1 << KSZ8863_REG_PORT_CTRL_PRIO_SHIFT)
+#define KSZ8863_REG_PORT_CTRL0_PRIO_2			(2 << KSZ8863_REG_PORT_CTRL_PRIO_SHIFT)
+#define KSZ8863_REG_PORT_CTRL0_PRIO_3			(3 << KSZ8863_REG_PORT_CTRL_PRIO_SHIFT)
+#define KSZ8863_REG_PORT_CTRL0_INSERT_TAG		BIT(2)
+#define KSZ8863_REG_PORT_CTRL0_REMOVE_TAG		BIT(1)
+#define KSZ8863_REG_PORT_CTRL0_4_PRIOS_ENABLE		BIT(0)
+
+#define KSZ8863_REG_PORT1_CTRL1			0x11
+#define KSZ8863_REG_PORT2_CTRL1			0x21
+#define KSZ8863_REG_PORT3_CTRL1			0x31
+
+#define KSZ8863_REG_PORT_CTRL1_MIRROR_SNIFFER		BIT(7)
+#define KSZ8863_REG_PORT_CTRL1_MIRROR_RX		BIT(6)
+#define KSZ8863_REG_PORT_CTRL1_MIRROR_TX		BIT(5)
+#define KSZ8863_REG_PORT_CTRL1_MIRROR_MASK		0xE0
+#define KSZ8863_REG_PORT_CTRL1_DOUBLE_TAG		BIT(4)
+#define KSZ8863_REG_PORT_CTRL1_802_1P_REMAPPING		BIT(3)
+#define KSZ8863_REG_PORT_CTRL1_VLAN_MEMBERSHIP		0x07
+
+#define KSZ8863_PORT_CTL1_VLAN_MEMBERSHIP_PORT1		BIT(0)
+#define KSZ8863_PORT_CTL1_VLAN_MEMBERSHIP_PORT2		BIT(1)
+#define KSZ8863_PORT_CTL1_VLAN_MEMBERSHIP_PORT3		BIT(2)
+
+#define KSZ8863_REG_PORT1_CTRL2			0x12
+#define KSZ8863_REG_PORT2_CTRL2			0x22
+#define KSZ8863_REG_PORT3_CTRL2			0x32
+
+#define KSZ8863_REG_PORT_CTRL2_2_PRIORITIES_ENABLE	BIT(7)
+#define KSZ8863_REG_PORT_CTRL2_INGRESS_FILTER		BIT(6)
+#define KSZ8863_REG_PORT_CTRL2_DISCARD_NON_VID		BIT(5)
+#define KSZ8863_REG_PORT_CTRL2_FORCE_FLOW_CTRL		BIT(4)
+#define KSZ8863_REG_PORT_CTRL2_BACK_PRESSURE		BIT(3)
+#define KSZ8863_REG_PORT_CTRL2_TX_ENABLE		BIT(2)
+#define KSZ8863_REG_PORT_CTRL2_RX_ENABLE		BIT(1)
+#define KSZ8863_REG_PORT_CTRL2_LEARN_DISABLE		BIT(0)
+
+#define KSZ8863_REG_PORT1_CTRL5			0x15
+#define KSZ8863_REG_PORT2_CTRL5			0x25
+#define KSZ8863_REG_PORT3_CTRL5			0x35
+
+#define KSZ8863_REG_PORT_CTRL5_3_MII_MAC_MODE		BIT(7)
+#define KSZ8863_REG_PORT_CTRL5_SA_MAC2			BIT(6)
+#define KSZ8863_REG_PORT_CTRL5_SA_MAC1			BIT(5)
+#define KSZ8863_REG_PORT_CTRL5_DROP_TAG			BIT(4)
+#define KSZ8863_REG_PORT_CTRL5_INGRESS_LIMIT_MODE_MAS	0x0C
+#define KSZ8863_REG_PORT_CTRL5_INGRESS_ALL		0x00
+#define KSZ8863_REG_PORT_CTRL5_INGRESS_UNICAST		0x04
+#define KSZ8863_REG_PORT_CTRL5_INGRESS_MULTICAST	0x08
+#define KSZ8863_REG_PORT_CTRL5_INGRESS_BROADCAST	0x0C
+#define KSZ8863_REG_PORT_CTRL5_COUNT_IFG		BIT(1)
+#define KSZ8863_REG_PORT_CTRL5_COUNT_PREAMBLE		BIT(0)
+
+#define KSZ8863_REG_PORT1_CTRL13		0x1D
+#define KSZ8863_REG_PORT2_CTRL13		0x2D
+
+#define KSZ8863_REG_PORT_CTRL13_LED_OFF			BIT(7)
+#define KSZ8863_REG_PORT_CTRL13_TX_DISABLE		BIT(6)
+#define KSZ8863_REG_PORT_CTRL13_AUTO_NEG_RESTART	BIT(5)
+#define KSZ8863_REG_PORT_CTRL13_REMOTE_FAULT_DISABLE	BIT(4)
+#define KSZ8863_REG_PORT_CTRL13_POWER_DOWN		BIT(3)
+#define KSZ8863_REG_PORT_CTRL13_AUTO_MDIX_DISABLE	BIT(2)
+#define KSZ8863_REG_PORT_CTRL13_FORCE_MDIX		BIT(1)
+#define KSZ8863_REG_PORT_CTRL13_LOOPBACK		BIT(0)
+
+#define KSZ8863_REG_INDIRECT_ACCESS_CTRL0	0x79
+
+#define KSZ8863_REG_INDIRECT_ACCESS_CTRL0_READ		BIT(4)
+#define KSZ8863_REG_INDIRECT_ACCESS_CTRL0_WRITE		0
+#define KSZ8863_REG_INDIRECT_ACCESS_CTRL0_TBL_SHIFT	2
+/* table select see ksz8863_table enum */
+#define KSZ8863_REG_INDIRECT_ACCESS_CTRL0_ADDR_MASK	0x3
+
+#define KSZ8863_REG_INDIRECT_ACCESS_CTRL1	0x7A
+
+#define KSZ8863_REG_INDIRECT_DATA_REG8		0x7B
+
+#define KSZ8863_REG_INDIRECT_DATA_REG8_CPU_READ_WIP	BIT(7)
+#define KSZ8863_REG_INDIRECT_DATA_REG8_DATA_MASK	0x7
+
+#define KSZ8863_REG_INDIRECT_DATA_REG7		0x7C
+#define KSZ8863_REG_INDIRECT_DATA_REG6		0x7D
+#define KSZ8863_REG_INDIRECT_DATA_REG5		0x7E
+#define KSZ8863_REG_INDIRECT_DATA_REG4		0x7F
+#define KSZ8863_REG_INDIRECT_DATA_REG3		0x80
+#define KSZ8863_REG_INDIRECT_DATA_REG2		0x81
+#define KSZ8863_REG_INDIRECT_DATA_REG1		0x82
+#define KSZ8863_REG_INDIRECT_DATA_REG0		0x83
+
+#define KSZ8863_REG_INDIRECT_DATA_MAX_SIZE	9
+
+#define KSZ8863_REG_PORT1_EGRESS_RL_Q0		0x9A
+#define KSZ8863_REG_PORT2_EGRESS_RL_Q0		0x9E
+#define KSZ8863_REG_PORT3_EGRESS_RL_Q0		0xA2
+
+#define KSZ8863_REG_PORT1_EGRESS_RL_Q1		0x9B
+#define KSZ8863_REG_PORT2_EGRESS_RL_Q1		0x9F
+#define KSZ8863_REG_PORT3_EGRESS_RL_Q1		0xA3
+
+#define KSZ8863_REG_PORT1_EGRESS_RL_Q2		0x9C
+#define KSZ8863_REG_PORT2_EGRESS_RL_Q2		0xA0
+#define KSZ8863_REG_PORT3_EGRESS_RL_Q2		0xA4
+
+#define KSZ8863_REG_PORT1_EGRESS_RL_Q3		0x9D
+#define KSZ8863_REG_PORT2_EGRESS_RL_Q3		0xA1
+#define KSZ8863_REG_PORT3_EGRESS_RL_Q3		0xA5
+
+#define KSZ8863_REG_PORT_EGRESS_RL_Q0_ENABLE		BIT(7)
+#define KSZ8863_REG_PORT_EGRESS_RL_MASK			0x7F
+
+#define KSZ8863_REG_INTERNAL_1V8_LDO_CTRL	0xC1
+#define KSZ8863_REG_INTERNAL_1V8_LDO_CTRL_DISABLE	BIT(6)
+
+#define KSZ8863_REG_PWR_LED			0xC3
+#define KSZ8863_REG_PWR_LED_CPU_IF_PD			BIT(7)
+#define KSZ8863_REG_PWR_LED_SW_PD			BIT(6)
+#define KSZ8863_REG_PWR_LED_LED_MODE_SEL_MASK		0x30
+#define KSZ8863_REG_PWR_LED_LED_MODE_SEL_SHIFT		4
+#define KSZ8863_REG_PWR_LED_LED_MODE_0			0
+#define KSZ8863_REG_PWR_LED_LED_MODE_1			1
+#define KSZ8863_REG_PWR_LED_LED_MODE_2			2
+#define KSZ8863_REG_PWR_LED_LED_MODE_3			3
+#define KSZ8863_REG_PWR_LED_LED_OUT			BIT(3)
+#define KSZ8863_REG_PWR_LED_PLL_PD			BIT(2)
+#define KSZ8863_REG_PWR_LED_PWR_MODE_MASK		0x03
+#define KSZ8863_REG_PWR_LED_PWR_MODE_SEL_SHIFT		0
+
+// clang-format on
+
+struct ksz8863_port {
+	struct net_device *bridge;
+};
+
+struct ksz8863_chip {
+	/* The dsa_switch this structure is related to */
+	struct dsa_switch *ds;
+
+	/* The device this structure is associated to */
+	struct device *dev;
+
+	/* protection for switch register access */
+	struct mutex reg_lock;
+
+	/* The MII bus and the address on the bus that is used to
+	 * communication with the switch
+	 */
+	struct mii_bus *sw_bus;
+	u8 sw_addr;
+	const struct ksz8863_bus_ops *mii_ops;
+
+	/* A switch may have a GPIO line tied to its reset pin. Parse
+	 * this from the device tree, and use it before performing
+	 * switch soft reset.
+	 */
+	struct gpio_desc *reset_gpio;
+	bool reset;
+
+	/* If true driver will disable internal 1.8V LDO */
+	bool disable_internal_ldo;
+
+	/* Port information */
+	struct ksz8863_port ports[KSZ8863_NUM_PORTS];
+
+	/* switched / separated mode */
+	bool switched;
+
+	/* device mac address */
+	u8 eth_addr[ETH_ALEN];
+
+	/* directory within debugfs */
+	struct dentry *debugfs_root_entry;
+
+	/* switch ops */
+	struct ks8863_ops {
+		int (*flush_dyn_mac_table)(struct ksz8863_chip *chip);
+	} ops;
+};
+
+enum ksz8863_tables {
+	KSZ8863_TBL_STATIC_MAC,
+	KSZ8863_TBL_VLAN,
+	KSZ8863_TBL_DYN_MAC,
+	KSZ8863_TBL_MIB_CNT,
+};
+
+/* this struct is designed for easy coping to
+ * ksz8863 inderect data register. Do not alter
+ * the fields order!
+ */
+struct ksz8863_static_mac_tbl_entry {
+	u8 mac[ETH_ALEN];
+	u16 forward_ports:3;
+	u16 valid:1;
+	u16 override:1;
+	u16 use_fid:1;
+	u16 fid:4;
+	u16:6;
+} __packed;
+
+/* this struct is designed for easy coping to
+ * ksz8863 inderect data register. Do not alter
+ * the fields order!
+ */
+struct ksz8863_dyn_mac_tbl_entry {
+	u8 mac[ETH_ALEN];
+	u8 fid:4;
+	u8 port:2;
+	u8 time:2;
+	u16 valid_nb:10;
+	u16 empty:1;
+	u16:4;
+	u16 nrdy:1;
+} __packed;
+
+#define KSZ8863_SMAC_ENTRY_FWD_PORTS_PORT1	0x1
+#define KSZ8863_SMAC_ENTRY_FWD_PORTS_PORT2	0x2
+#define KSZ8863_SMAC_ENTRY_FWD_PORTS_PORT3	0x4
+#define KSZ8863_SMAC_MAX_ENTRIES		8
+
+struct ksz8863_bus_ops {
+	int (*read)(struct ksz8863_chip *chip, int reg, u8 *val);
+	int (*write)(struct ksz8863_chip *chip, int reg, u8 val);
+	int (*read_table)(struct ksz8863_chip *chip, enum ksz8863_tables table,
+			  u16 address, u8 *buffer, size_t size);
+	int (*write_table)(struct ksz8863_chip *chip, enum ksz8863_tables table,
+			   u16 address, u8 *buffer, size_t size);
+};
+
+#endif /* __KSZ8863_H__ */
diff --git a/include/linux/marvell_phy.h b/include/linux/marvell_phy.h
index 0f06c2287b52..68ca944bb740 100644
--- a/include/linux/marvell_phy.h
+++ b/include/linux/marvell_phy.h
@@ -25,6 +25,7 @@
 #define MARVELL_PHY_ID_88X3310		0x002b09a0
 #define MARVELL_PHY_ID_88E2110		0x002b09b0
 #define MARVELL_PHY_ID_88X2222		0x01410f10
+#define MARVELL_PHY_ID_88E6321		0x01410c00
 
 /* Marvel 88E1111 in Finisar SFP module with modified PHY ID */
 #define MARVELL_PHY_ID_88E1111_FINISAR	0x01ff0cc0
diff --git a/include/linux/mdio.h b/include/linux/mdio.h
index 5e6dc38f418e..6b551366dc32 100644
--- a/include/linux/mdio.h
+++ b/include/linux/mdio.h
@@ -16,6 +16,8 @@
 #define MII_DEVADDR_C45_SHIFT	16
 #define MII_REGADDR_C45_MASK	GENMASK(15, 0)
 
+#define MII_ADDR_KSZ (1<<15)        /* Special Treatment for KSZ8863 3-Port Switch */
+
 struct gpio_desc;
 struct mii_bus;
 struct reset_control;
diff --git a/include/linux/mfd/tps65218.h b/include/linux/mfd/tps65218.h
index f4ca367e3473..7f33a4042369 100644
--- a/include/linux/mfd/tps65218.h
+++ b/include/linux/mfd/tps65218.h
@@ -214,8 +214,14 @@ enum tps65218_regulator_id {
 	/* LS's */
 	TPS65218_LS_2,
 	TPS65218_LS_3,
+
+#define TPS65218_REGULATOR_FIRST	TPS65218_DCDC_1
+#define TPS65218_REGULATOR_LAST		TPS65218_LS_3
 };
 
+#define TPS65218_REG_ID_VALID(rid)						\
+	((rid) >= TPS65218_REGULATOR_FIRST && (rid) <= TPS65218_REGULATOR_LAST)
+
 #define TPS65218_MAX_REG_ID		TPS65218_LDO_1
 
 /* Number of step-down converters available */
diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h
index 7f8ee09c711f..e9672de22cf2 100644
--- a/include/linux/mm_types.h
+++ b/include/linux/mm_types.h
@@ -12,6 +12,7 @@
 #include <linux/completion.h>
 #include <linux/cpumask.h>
 #include <linux/uprobes.h>
+#include <linux/rcupdate.h>
 #include <linux/page-flags-layout.h>
 #include <linux/workqueue.h>
 #include <linux/seqlock.h>
@@ -572,6 +573,9 @@ struct mm_struct {
 		bool tlb_flush_batched;
 #endif
 		struct uprobes_state uprobes_state;
+#ifdef CONFIG_PREEMPT_RT
+		struct rcu_head delayed_drop;
+#endif
 #ifdef CONFIG_HUGETLB_PAGE
 		atomic_long_t hugetlb_usage;
 #endif
diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index fba54624191a..ef06cdb0792f 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -1916,7 +1916,6 @@ enum netdev_ml_priv_type {
  *	@sfp_bus:	attached &struct sfp_bus structure.
  *
  *	@qdisc_tx_busylock: lockdep class annotating Qdisc->busylock spinlock
- *	@qdisc_running_key: lockdep class annotating Qdisc->running seqcount
  *
  *	@proto_down:	protocol port state information can be sent to the
  *			switch driver and used to set the phys state of the
@@ -2250,7 +2249,6 @@ struct net_device {
 	struct phy_device	*phydev;
 	struct sfp_bus		*sfp_bus;
 	struct lock_class_key	*qdisc_tx_busylock;
-	struct lock_class_key	*qdisc_running_key;
 	bool			proto_down;
 	unsigned		wol_enabled:1;
 	unsigned		threaded:1;
@@ -2360,13 +2358,11 @@ static inline void netdev_for_each_tx_queue(struct net_device *dev,
 #define netdev_lockdep_set_classes(dev)				\
 {								\
 	static struct lock_class_key qdisc_tx_busylock_key;	\
-	static struct lock_class_key qdisc_running_key;		\
 	static struct lock_class_key qdisc_xmit_lock_key;	\
 	static struct lock_class_key dev_addr_list_lock_key;	\
 	unsigned int i;						\
 								\
 	(dev)->qdisc_tx_busylock = &qdisc_tx_busylock_key;	\
-	(dev)->qdisc_running_key = &qdisc_running_key;		\
 	lockdep_set_class(&(dev)->addr_list_lock,		\
 			  &dev_addr_list_lock_key);		\
 	for (i = 0; i < (dev)->num_tx_queues; i++)		\
@@ -3387,24 +3383,41 @@ DECLARE_PER_CPU_ALIGNED(struct softnet_data, softnet_data);
 
 static inline int dev_recursion_level(void)
 {
+#ifdef CONFIG_PREEMPT_RT
+	return atomic_read(&current->xmit_recursion);
+#else
 	return this_cpu_read(softnet_data.xmit.recursion);
+#endif
 }
 
 #define XMIT_RECURSION_LIMIT	8
 static inline bool dev_xmit_recursion(void)
 {
+#ifdef CONFIG_PREEMPT_RT
+	return unlikely(atomic_read(&current->xmit_recursion) >
+			XMIT_RECURSION_LIMIT);
+#else
 	return unlikely(__this_cpu_read(softnet_data.xmit.recursion) >
 			XMIT_RECURSION_LIMIT);
+#endif
 }
 
 static inline void dev_xmit_recursion_inc(void)
 {
+#ifdef CONFIG_PREEMPT_RT
+	atomic_inc(&current->xmit_recursion);
+#else
 	__this_cpu_inc(softnet_data.xmit.recursion);
+#endif
 }
 
 static inline void dev_xmit_recursion_dec(void)
 {
+#ifdef CONFIG_PREEMPT_RT
+	atomic_dec(&current->xmit_recursion);
+#else
 	__this_cpu_dec(softnet_data.xmit.recursion);
+#endif
 }
 
 void __netif_schedule(struct Qdisc *q);
diff --git a/include/linux/nfs_xdr.h b/include/linux/nfs_xdr.h
index e9698b6278a5..1c8393c1280c 100644
--- a/include/linux/nfs_xdr.h
+++ b/include/linux/nfs_xdr.h
@@ -1692,7 +1692,7 @@ struct nfs_unlinkdata {
 	struct nfs_removeargs args;
 	struct nfs_removeres res;
 	struct dentry *dentry;
-	wait_queue_head_t wq;
+	struct swait_queue_head wq;
 	const struct cred *cred;
 	struct nfs_fattr dir_attr;
 	long timeout;
diff --git a/include/linux/platform_data/pfc-modbus-rtu.h b/include/linux/platform_data/pfc-modbus-rtu.h
new file mode 100644
index 000000000000..e4f7c4b5afc0
--- /dev/null
+++ b/include/linux/platform_data/pfc-modbus-rtu.h
@@ -0,0 +1,66 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+/*
+ * WAGO Serial Modbus RTU Driver
+ *
+ * Copyright (C) 2013 Wago Kontakttechnik GmbH
+ *
+ * Author: Timur Celik <timur.celik@wago.com>
+ *
+ */
+
+#ifndef PFC_MODBUS_RTU_H_
+#define PFC_MODBUS_RTU_H_
+#ifdef CONFIG_SERIAL_OMAP_MODBUS
+
+
+#include <asm/atomic.h>
+#include <linux/kfifo.h>
+#include <linux/hrtimer.h>
+#include <linux/interrupt.h>
+
+#define MB_TIMESTAMP_LENGTH	8
+#define MB_FRAME_MAX		256
+#define MB_FRAME_MIN		4
+
+/* State machine definition */
+typedef enum { ERR, IF, IC } MB_STATE;
+
+/* Modbus specific data of the uart port */
+struct modbus_port
+{
+	MB_STATE		state;
+	struct hrtimer		timer;
+	struct kfifo		frame;
+	struct kfifo		length;	  /* contains frame length */
+	atomic_t		ch_cnt;
+	atomic_t		frame_cnt;
+	u8			slave_id; /* if zero all frames are received
+					     (master mode) */
+	u64			to_15;
+	u64			to_35;
+	u64			to_15_override;
+	u64			to_35_override;
+	bool			activated;
+	unsigned int		modem_status;
+	struct tasklet_struct	rx_tsklt;
+	struct tasklet_struct	tx_tsklt;
+	struct tasklet_struct	mdr_tsklt;
+	bool			timestamp_enabled;
+};
+
+struct uart_omap_port;
+
+enum hrtimer_restart modbus_omap_to_handler(struct hrtimer* hrt);
+int modbus_omap_rhr_handler(struct uart_omap_port *up);
+int modbus_omap_rlsi_handler(struct uart_omap_port *up, unsigned int lsr);
+void modbus_omap_calc_to(struct uart_omap_port *up, unsigned int baud);
+int modbus_omap_enable(struct uart_omap_port *up);
+int modbus_omap_disable(struct uart_omap_port *up);
+int modbus_omap_startup(struct uart_omap_port *up);
+void modbus_omap_shutdown(struct uart_omap_port *up);
+void modbus_omap_timestamp_enable(struct uart_omap_port *up);
+void modbus_omap_timestamp_disable(struct uart_omap_port *up);
+
+#endif
+#endif /* PFC_MODBUS_RTU_H_ */
diff --git a/include/linux/preempt.h b/include/linux/preempt.h
index 4d244e295e85..3da73c968211 100644
--- a/include/linux/preempt.h
+++ b/include/linux/preempt.h
@@ -122,9 +122,10 @@
  * The preempt_count offset after spin_lock()
  */
 #if !defined(CONFIG_PREEMPT_RT)
-#define PREEMPT_LOCK_OFFSET	PREEMPT_DISABLE_OFFSET
+#define PREEMPT_LOCK_OFFSET		PREEMPT_DISABLE_OFFSET
 #else
-#define PREEMPT_LOCK_OFFSET	0
+/* Locks on RT do not disable preemption */
+#define PREEMPT_LOCK_OFFSET		0
 #endif
 
 /*
@@ -174,6 +175,20 @@ extern void preempt_count_sub(int val);
 #define preempt_count_inc() preempt_count_add(1)
 #define preempt_count_dec() preempt_count_sub(1)
 
+#ifdef CONFIG_PREEMPT_LAZY
+#define add_preempt_lazy_count(val)	do { preempt_lazy_count() += (val); } while (0)
+#define sub_preempt_lazy_count(val)	do { preempt_lazy_count() -= (val); } while (0)
+#define inc_preempt_lazy_count()	add_preempt_lazy_count(1)
+#define dec_preempt_lazy_count()	sub_preempt_lazy_count(1)
+#define preempt_lazy_count()		(current_thread_info()->preempt_lazy_count)
+#else
+#define add_preempt_lazy_count(val)	do { } while (0)
+#define sub_preempt_lazy_count(val)	do { } while (0)
+#define inc_preempt_lazy_count()	do { } while (0)
+#define dec_preempt_lazy_count()	do { } while (0)
+#define preempt_lazy_count()		(0)
+#endif
+
 #ifdef CONFIG_PREEMPT_COUNT
 
 #define preempt_disable() \
@@ -182,13 +197,25 @@ do { \
 	barrier(); \
 } while (0)
 
+#define preempt_lazy_disable() \
+do { \
+	inc_preempt_lazy_count(); \
+	barrier(); \
+} while (0)
+
 #define sched_preempt_enable_no_resched() \
 do { \
 	barrier(); \
 	preempt_count_dec(); \
 } while (0)
 
-#define preempt_enable_no_resched() sched_preempt_enable_no_resched()
+#ifndef CONFIG_PREEMPT_RT
+# define preempt_enable_no_resched() sched_preempt_enable_no_resched()
+# define preempt_check_resched_rt() barrier();
+#else
+# define preempt_enable_no_resched() preempt_enable()
+# define preempt_check_resched_rt() preempt_check_resched()
+#endif
 
 #define preemptible()	(preempt_count() == 0 && !irqs_disabled())
 
@@ -213,6 +240,18 @@ do { \
 		__preempt_schedule(); \
 } while (0)
 
+/*
+ * open code preempt_check_resched() because it is not exported to modules and
+ * used by local_unlock() or bpf_enable_instrumentation().
+ */
+#define preempt_lazy_enable() \
+do { \
+	dec_preempt_lazy_count(); \
+	barrier(); \
+	if (should_resched(0)) \
+		__preempt_schedule(); \
+} while (0)
+
 #else /* !CONFIG_PREEMPTION */
 #define preempt_enable() \
 do { \
@@ -220,6 +259,12 @@ do { \
 	preempt_count_dec(); \
 } while (0)
 
+#define preempt_lazy_enable() \
+do { \
+	dec_preempt_lazy_count(); \
+	barrier(); \
+} while (0)
+
 #define preempt_enable_notrace() \
 do { \
 	barrier(); \
@@ -258,8 +303,12 @@ do { \
 #define preempt_disable_notrace()		barrier()
 #define preempt_enable_no_resched_notrace()	barrier()
 #define preempt_enable_notrace()		barrier()
+#define preempt_check_resched_rt()		barrier()
 #define preemptible()				0
 
+#define preempt_lazy_disable()			barrier()
+#define preempt_lazy_enable()			barrier()
+
 #endif /* CONFIG_PREEMPT_COUNT */
 
 #ifdef MODULE
@@ -278,7 +327,7 @@ do { \
 } while (0)
 #define preempt_fold_need_resched() \
 do { \
-	if (tif_need_resched()) \
+	if (tif_need_resched_now()) \
 		set_preempt_need_resched(); \
 } while (0)
 
@@ -394,8 +443,15 @@ extern void migrate_enable(void);
 
 #else
 
-static inline void migrate_disable(void) { }
-static inline void migrate_enable(void) { }
+static inline void migrate_disable(void)
+{
+	preempt_lazy_disable();
+}
+
+static inline void migrate_enable(void)
+{
+	preempt_lazy_enable();
+}
 
 #endif /* CONFIG_SMP */
 
diff --git a/include/linux/printk.h b/include/linux/printk.h
index 9497f6b98339..f1b9cd8d11d6 100644
--- a/include/linux/printk.h
+++ b/include/linux/printk.h
@@ -47,6 +47,12 @@ static inline const char *printk_skip_headers(const char *buffer)
 
 #define CONSOLE_EXT_LOG_MAX	8192
 
+/*
+ * The maximum size of a record formatted for console printing
+ * (i.e. with the prefix prepended to every line).
+ */
+#define CONSOLE_LOG_MAX		1024
+
 /* printk's without a loglevel use this.. */
 #define MESSAGE_LOGLEVEL_DEFAULT CONFIG_MESSAGE_LOGLEVEL_DEFAULT
 
@@ -155,20 +161,7 @@ int vprintk(const char *fmt, va_list args);
 asmlinkage __printf(1, 2) __cold
 int _printk(const char *fmt, ...);
 
-/*
- * Special printk facility for scheduler/timekeeping use only, _DO_NOT_USE_ !
- */
-__printf(1, 2) __cold int _printk_deferred(const char *fmt, ...);
-
-extern void __printk_safe_enter(void);
-extern void __printk_safe_exit(void);
-/*
- * The printk_deferred_enter/exit macros are available only as a hack for
- * some code paths that need to defer all printk console printing. Interrupts
- * must be disabled for the deferred duration.
- */
-#define printk_deferred_enter __printk_safe_enter
-#define printk_deferred_exit __printk_safe_exit
+bool pr_flush(int timeout_ms, bool reset_on_progress);
 
 /*
  * Please don't use printk_ratelimit(), because it shares ratelimiting state
@@ -210,18 +203,10 @@ int _printk(const char *s, ...)
 {
 	return 0;
 }
-static inline __printf(1, 2) __cold
-int _printk_deferred(const char *s, ...)
-{
-	return 0;
-}
-
-static inline void printk_deferred_enter(void)
-{
-}
 
-static inline void printk_deferred_exit(void)
+static inline bool pr_flush(int timeout_ms, bool reset_on_progress)
 {
+	return true;
 }
 
 static inline int printk_ratelimit(void)
@@ -284,17 +269,30 @@ static inline void printk_trigger_flush(void)
 extern int __printk_cpu_trylock(void);
 extern void __printk_wait_on_cpu_lock(void);
 extern void __printk_cpu_unlock(void);
+extern bool kgdb_roundup_delay(unsigned int cpu);
+
+#else
+
+#define __printk_cpu_trylock()		1
+#define __printk_wait_on_cpu_lock()
+#define __printk_cpu_unlock()
+
+static inline bool kgdb_roundup_delay(unsigned int cpu)
+{
+	return false;
+}
+#endif /* CONFIG_SMP */
 
 /**
- * printk_cpu_lock_irqsave() - Acquire the printk cpu-reentrant spinning
- *                             lock and disable interrupts.
+ * raw_printk_cpu_lock_irqsave() - Acquire the printk cpu-reentrant spinning
+ *                                 lock and disable interrupts.
  * @flags: Stack-allocated storage for saving local interrupt state,
- *         to be passed to printk_cpu_unlock_irqrestore().
+ *         to be passed to raw_printk_cpu_unlock_irqrestore().
  *
  * If the lock is owned by another CPU, spin until it becomes available.
  * Interrupts are restored while spinning.
  */
-#define printk_cpu_lock_irqsave(flags)		\
+#define raw_printk_cpu_lock_irqsave(flags)	\
 	for (;;) {				\
 		local_irq_save(flags);		\
 		if (__printk_cpu_trylock())	\
@@ -304,22 +302,30 @@ extern void __printk_cpu_unlock(void);
 	}
 
 /**
- * printk_cpu_unlock_irqrestore() - Release the printk cpu-reentrant spinning
- *                                  lock and restore interrupts.
- * @flags: Caller's saved interrupt state, from printk_cpu_lock_irqsave().
+ * raw_printk_cpu_unlock_irqrestore() - Release the printk cpu-reentrant
+ *                                      spinning lock and restore interrupts.
+ * @flags: Caller's saved interrupt state from raw_printk_cpu_lock_irqsave().
  */
-#define printk_cpu_unlock_irqrestore(flags)	\
+#define raw_printk_cpu_unlock_irqrestore(flags)	\
 	do {					\
 		__printk_cpu_unlock();		\
 		local_irq_restore(flags);	\
-	} while (0)				\
-
-#else
+	} while (0)
 
-#define printk_cpu_lock_irqsave(flags) ((void)flags)
-#define printk_cpu_unlock_irqrestore(flags) ((void)flags)
+/*
+ * Used to synchronize atomic consoles.
+ *
+ * The same as raw_printk_cpu_lock_irqsave() except that hardware interrupts
+ * are _not_ restored while spinning.
+ */
+#define console_atomic_lock(flags)		\
+	do {					\
+		local_irq_save(flags);		\
+		while (!__printk_cpu_trylock())	\
+			cpu_relax();		\
+	} while (0)
 
-#endif /* CONFIG_SMP */
+#define console_atomic_unlock raw_printk_cpu_unlock_irqrestore
 
 extern int kptr_restrict;
 
@@ -448,8 +454,6 @@ struct pi_entry {
  * See the vsnprintf() documentation for format string extensions over C99.
  */
 #define printk(fmt, ...) printk_index_wrap(_printk, fmt, ##__VA_ARGS__)
-#define printk_deferred(fmt, ...)					\
-	printk_index_wrap(_printk_deferred, fmt, ##__VA_ARGS__)
 
 /**
  * pr_emerg - Print an emergency-level message
@@ -587,13 +591,9 @@ struct pi_entry {
 #ifdef CONFIG_PRINTK
 #define printk_once(fmt, ...)					\
 	DO_ONCE_LITE(printk, fmt, ##__VA_ARGS__)
-#define printk_deferred_once(fmt, ...)				\
-	DO_ONCE_LITE(printk_deferred, fmt, ##__VA_ARGS__)
 #else
 #define printk_once(fmt, ...)					\
 	no_printk(fmt, ##__VA_ARGS__)
-#define printk_deferred_once(fmt, ...)				\
-	no_printk(fmt, ##__VA_ARGS__)
 #endif
 
 #define pr_emerg_once(fmt, ...)					\
diff --git a/include/linux/random.h b/include/linux/random.h
index f45b8be3e3c4..0e41d0527809 100644
--- a/include/linux/random.h
+++ b/include/linux/random.h
@@ -35,7 +35,7 @@ static inline void add_latent_entropy(void) {}
 
 extern void add_input_randomness(unsigned int type, unsigned int code,
 				 unsigned int value) __latent_entropy;
-extern void add_interrupt_randomness(int irq, int irq_flags) __latent_entropy;
+extern void add_interrupt_randomness(int irq, int irq_flags, __u64 ip) __latent_entropy;
 
 extern void get_random_bytes(void *buf, int nbytes);
 extern int wait_for_random_bytes(void);
diff --git a/include/linux/ratelimit_types.h b/include/linux/ratelimit_types.h
index b676aa419eef..c21c7f8103e2 100644
--- a/include/linux/ratelimit_types.h
+++ b/include/linux/ratelimit_types.h
@@ -4,7 +4,7 @@
 
 #include <linux/bits.h>
 #include <linux/param.h>
-#include <linux/spinlock_types.h>
+#include <linux/spinlock_types_raw.h>
 
 #define DEFAULT_RATELIMIT_INTERVAL	(5 * HZ)
 #define DEFAULT_RATELIMIT_BURST		10
diff --git a/include/linux/rcupdate.h b/include/linux/rcupdate.h
index 434d12fe2d4f..de6d1a21f113 100644
--- a/include/linux/rcupdate.h
+++ b/include/linux/rcupdate.h
@@ -94,6 +94,13 @@ void rcu_init_tasks_generic(void);
 static inline void rcu_init_tasks_generic(void) { }
 #endif
 
+#if defined(CONFIG_PROVE_RCU) && defined(CONFIG_TASKS_RCU_GENERIC)
+void rcu_tasks_initiate_self_tests(void);
+#else
+static inline void rcu_tasks_initiate_self_tests(void) {}
+#endif
+
+
 #ifdef CONFIG_RCU_STALL_COMMON
 void rcu_sysrq_start(void);
 void rcu_sysrq_end(void);
diff --git a/include/linux/rtmutex.h b/include/linux/rtmutex.h
index 9deedfeec2b1..7d049883a08a 100644
--- a/include/linux/rtmutex.h
+++ b/include/linux/rtmutex.h
@@ -99,13 +99,22 @@ extern void __rt_mutex_init(struct rt_mutex *lock, const char *name, struct lock
 
 #ifdef CONFIG_DEBUG_LOCK_ALLOC
 extern void rt_mutex_lock_nested(struct rt_mutex *lock, unsigned int subclass);
+extern void _rt_mutex_lock_nest_lock(struct rt_mutex *lock, struct lockdep_map *nest_lock);
 #define rt_mutex_lock(lock) rt_mutex_lock_nested(lock, 0)
+#define rt_mutex_lock_nest_lock(lock, nest_lock)			\
+	do {								\
+		typecheck(struct lockdep_map *, &(nest_lock)->dep_map);	\
+		_rt_mutex_lock_nest_lock(lock, &(nest_lock)->dep_map);	\
+	} while (0)
+
 #else
 extern void rt_mutex_lock(struct rt_mutex *lock);
 #define rt_mutex_lock_nested(lock, subclass) rt_mutex_lock(lock)
+#define rt_mutex_lock_nest_lock(lock, nest_lock) rt_mutex_lock(lock)
 #endif
 
 extern int rt_mutex_lock_interruptible(struct rt_mutex *lock);
+extern int rt_mutex_lock_killable(struct rt_mutex *lock);
 extern int rt_mutex_trylock(struct rt_mutex *lock);
 
 extern void rt_mutex_unlock(struct rt_mutex *lock);
diff --git a/include/linux/sched.h b/include/linux/sched.h
index c1a927ddec64..48b87c071e7d 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -118,12 +118,8 @@ struct task_group;
 
 #define task_is_running(task)		(READ_ONCE((task)->__state) == TASK_RUNNING)
 
-#define task_is_traced(task)		((READ_ONCE(task->__state) & __TASK_TRACED) != 0)
-
 #define task_is_stopped(task)		((READ_ONCE(task->__state) & __TASK_STOPPED) != 0)
 
-#define task_is_stopped_or_traced(task)	((READ_ONCE(task->__state) & (__TASK_STOPPED | __TASK_TRACED)) != 0)
-
 /*
  * Special states are those that do not use the normal wait-loop pattern. See
  * the comment with set_special_state().
@@ -1084,6 +1080,10 @@ struct task_struct {
 	/* Restored if set_restore_sigmask() was used: */
 	sigset_t			saved_sigmask;
 	struct sigpending		pending;
+#ifdef CONFIG_PREEMPT_RT
+	/* TODO: move me into ->restart_block ? */
+	struct				kernel_siginfo forced_info;
+#endif
 	unsigned long			sas_ss_sp;
 	size_t				sas_ss_size;
 	unsigned int			sas_ss_flags;
@@ -1488,6 +1488,10 @@ struct task_struct {
 	struct callback_head		l1d_flush_kill;
 #endif
 
+#ifdef CONFIG_PREEMPT_RT
+	atomic_t xmit_recursion;
+#endif
+
 	/*
 	 * New fields for task_struct should be added above here, so that
 	 * they are included in the randomized portion of task_struct.
@@ -1730,6 +1734,16 @@ static __always_inline bool is_percpu_thread(void)
 #endif
 }
 
+/* Is the current task guaranteed to stay on its current CPU? */
+static inline bool is_migratable(void)
+{
+#ifdef CONFIG_SMP
+	return preemptible() && !current->migration_disabled;
+#else
+	return false;
+#endif
+}
+
 /* Per-process atomic flags. */
 #define PFA_NO_NEW_PRIVS		0	/* May not gain new privileges. */
 #define PFA_SPREAD_PAGE			1	/* Spread page cache over cpuset */
@@ -2005,6 +2019,118 @@ static inline int test_tsk_need_resched(struct task_struct *tsk)
 	return unlikely(test_tsk_thread_flag(tsk,TIF_NEED_RESCHED));
 }
 
+#ifdef CONFIG_PREEMPT_LAZY
+static inline void set_tsk_need_resched_lazy(struct task_struct *tsk)
+{
+	set_tsk_thread_flag(tsk,TIF_NEED_RESCHED_LAZY);
+}
+
+static inline void clear_tsk_need_resched_lazy(struct task_struct *tsk)
+{
+	clear_tsk_thread_flag(tsk,TIF_NEED_RESCHED_LAZY);
+}
+
+static inline int test_tsk_need_resched_lazy(struct task_struct *tsk)
+{
+	return unlikely(test_tsk_thread_flag(tsk,TIF_NEED_RESCHED_LAZY));
+}
+
+static inline int need_resched_lazy(void)
+{
+	return test_thread_flag(TIF_NEED_RESCHED_LAZY);
+}
+
+static inline int need_resched_now(void)
+{
+	return test_thread_flag(TIF_NEED_RESCHED);
+}
+
+#else
+static inline void clear_tsk_need_resched_lazy(struct task_struct *tsk) { }
+static inline int need_resched_lazy(void) { return 0; }
+
+static inline int need_resched_now(void)
+{
+	return test_thread_flag(TIF_NEED_RESCHED);
+}
+
+#endif
+
+#ifdef CONFIG_PREEMPT_RT
+static inline bool task_match_saved_state(struct task_struct *p, long match_state)
+{
+	return p->saved_state == match_state;
+}
+
+static inline bool task_is_traced(struct task_struct *task)
+{
+	bool traced = false;
+
+	/* in case the task is sleeping on tasklist_lock */
+	raw_spin_lock_irq(&task->pi_lock);
+	if (READ_ONCE(task->__state) & __TASK_TRACED)
+		traced = true;
+	else if (task->saved_state & __TASK_TRACED)
+		traced = true;
+	raw_spin_unlock_irq(&task->pi_lock);
+	return traced;
+}
+
+static inline bool task_is_stopped_or_traced(struct task_struct *task)
+{
+	bool traced_stopped = false;
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&task->pi_lock, flags);
+
+	if (READ_ONCE(task->__state) & (__TASK_STOPPED | __TASK_TRACED))
+		traced_stopped = true;
+	else if (task->saved_state & (__TASK_STOPPED | __TASK_TRACED))
+		traced_stopped = true;
+
+	raw_spin_unlock_irqrestore(&task->pi_lock, flags);
+	return traced_stopped;
+}
+
+#else
+
+static inline bool task_match_saved_state(struct task_struct *p, long match_state)
+{
+	return false;
+}
+
+static inline bool task_is_traced(struct task_struct *task)
+{
+	return READ_ONCE(task->__state) & __TASK_TRACED;
+}
+
+static inline bool task_is_stopped_or_traced(struct task_struct *task)
+{
+	return READ_ONCE(task->__state) & (__TASK_STOPPED | __TASK_TRACED);
+}
+#endif
+
+static inline bool task_match_state_or_saved(struct task_struct *p,
+					     long match_state)
+{
+	if (READ_ONCE(p->__state) == match_state)
+		return true;
+
+	return task_match_saved_state(p, match_state);
+}
+
+static inline bool task_match_state_lock(struct task_struct *p,
+					 long match_state)
+{
+	bool match;
+
+	raw_spin_lock_irq(&p->pi_lock);
+	match = task_match_state_or_saved(p, match_state);
+	raw_spin_unlock_irq(&p->pi_lock);
+
+	return match;
+}
+
 /*
  * cond_resched() and cond_resched_lock(): latency reduction via
  * explicit rescheduling in places that are safe. The return
@@ -2039,7 +2165,7 @@ static inline int _cond_resched(void) { return 0; }
 #endif /* !defined(CONFIG_PREEMPTION) || defined(CONFIG_PREEMPT_DYNAMIC) */
 
 #define cond_resched() ({			\
-	___might_sleep(__FILE__, __LINE__, 0);	\
+	__might_resched(__FILE__, __LINE__, 0);	\
 	_cond_resched();			\
 })
 
@@ -2047,19 +2173,38 @@ extern int __cond_resched_lock(spinlock_t *lock);
 extern int __cond_resched_rwlock_read(rwlock_t *lock);
 extern int __cond_resched_rwlock_write(rwlock_t *lock);
 
-#define cond_resched_lock(lock) ({				\
-	___might_sleep(__FILE__, __LINE__, PREEMPT_LOCK_OFFSET);\
-	__cond_resched_lock(lock);				\
+#define MIGHT_RESCHED_RCU_SHIFT		8
+#define MIGHT_RESCHED_PREEMPT_MASK	((1U << MIGHT_RESCHED_RCU_SHIFT) - 1)
+
+#ifndef CONFIG_PREEMPT_RT
+/*
+ * Non RT kernels have an elevated preempt count due to the held lock,
+ * but are not allowed to be inside a RCU read side critical section
+ */
+# define PREEMPT_LOCK_RESCHED_OFFSETS	PREEMPT_LOCK_OFFSET
+#else
+/*
+ * spin/rw_lock() on RT implies rcu_read_lock(). The might_sleep() check in
+ * cond_resched*lock() has to take that into account because it checks for
+ * preempt_count() and rcu_preempt_depth().
+ */
+# define PREEMPT_LOCK_RESCHED_OFFSETS	\
+	(PREEMPT_LOCK_OFFSET + (1U << MIGHT_RESCHED_RCU_SHIFT))
+#endif
+
+#define cond_resched_lock(lock) ({						\
+	__might_resched(__FILE__, __LINE__, PREEMPT_LOCK_RESCHED_OFFSETS);	\
+	__cond_resched_lock(lock);						\
 })
 
-#define cond_resched_rwlock_read(lock) ({			\
-	__might_sleep(__FILE__, __LINE__, PREEMPT_LOCK_OFFSET);	\
-	__cond_resched_rwlock_read(lock);			\
+#define cond_resched_rwlock_read(lock) ({					\
+	__might_resched(__FILE__, __LINE__, PREEMPT_LOCK_RESCHED_OFFSETS);	\
+	__cond_resched_rwlock_read(lock);					\
 })
 
-#define cond_resched_rwlock_write(lock) ({			\
-	__might_sleep(__FILE__, __LINE__, PREEMPT_LOCK_OFFSET);	\
-	__cond_resched_rwlock_write(lock);			\
+#define cond_resched_rwlock_write(lock) ({					\
+	__might_resched(__FILE__, __LINE__, PREEMPT_LOCK_RESCHED_OFFSETS);	\
+	__cond_resched_rwlock_write(lock);					\
 })
 
 static inline void cond_resched_rcu(void)
diff --git a/include/linux/sched/mm.h b/include/linux/sched/mm.h
index 5561486fddef..8358352428d4 100644
--- a/include/linux/sched/mm.h
+++ b/include/linux/sched/mm.h
@@ -49,6 +49,26 @@ static inline void mmdrop(struct mm_struct *mm)
 		__mmdrop(mm);
 }
 
+#ifdef CONFIG_PREEMPT_RT
+extern void __mmdrop_delayed(struct rcu_head *rhp);
+
+/*
+ * Invoked from finish_task_switch(). Delegates the heavy lifting on RT
+ * kernels via RCU.
+ */
+static inline void mmdrop_sched(struct mm_struct *mm)
+{
+	/* Provides a full memory barrier. See mmdrop() */
+	if (atomic_dec_and_test(&mm->mm_count))
+		call_rcu(&mm->delayed_drop, __mmdrop_delayed);
+}
+#else
+static inline void mmdrop_sched(struct mm_struct *mm)
+{
+	mmdrop(mm);
+}
+#endif
+
 /**
  * mmget() - Pin the address space associated with a &struct mm_struct.
  * @mm: The address space to pin.
diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 5db211f43b29..aa011f668705 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -7,6 +7,7 @@
 #ifndef _LINUX_SERIAL_8250_H
 #define _LINUX_SERIAL_8250_H
 
+#include <linux/atomic.h>
 #include <linux/serial_core.h>
 #include <linux/serial_reg.h>
 #include <linux/platform_device.h>
@@ -125,6 +126,8 @@ struct uart_8250_port {
 #define MSR_SAVE_FLAGS UART_MSR_ANY_DELTA
 	unsigned char		msr_saved_flags;
 
+	atomic_t		console_printing;
+
 	struct uart_8250_dma	*dma;
 	const struct uart_8250_ops *ops;
 
@@ -180,6 +183,8 @@ void serial8250_init_port(struct uart_8250_port *up);
 void serial8250_set_defaults(struct uart_8250_port *up);
 void serial8250_console_write(struct uart_8250_port *up, const char *s,
 			      unsigned int count);
+void serial8250_console_write_atomic(struct uart_8250_port *up, const char *s,
+				     unsigned int count);
 int serial8250_console_setup(struct uart_port *port, char *options, bool probe);
 int serial8250_console_exit(struct uart_port *port);
 
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 532f5d402f06..d0faf14fe372 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -300,6 +300,7 @@ struct sk_buff_head {
 
 	__u32		qlen;
 	spinlock_t	lock;
+	raw_spinlock_t	raw_lock;
 };
 
 struct sk_buff;
@@ -1935,6 +1936,12 @@ static inline void skb_queue_head_init(struct sk_buff_head *list)
 	__skb_queue_head_init(list);
 }
 
+static inline void skb_queue_head_init_raw(struct sk_buff_head *list)
+{
+	raw_spin_lock_init(&list->raw_lock);
+	__skb_queue_head_init(list);
+}
+
 static inline void skb_queue_head_init_class(struct sk_buff_head *list,
 		struct lock_class_key *class)
 {
diff --git a/include/linux/smp.h b/include/linux/smp.h
index 510519e8a1eb..7ac9fdb5ad09 100644
--- a/include/linux/smp.h
+++ b/include/linux/smp.h
@@ -268,6 +268,9 @@ static inline int get_boot_cpu_id(void)
 #define get_cpu()		({ preempt_disable(); __smp_processor_id(); })
 #define put_cpu()		preempt_enable()
 
+#define get_cpu_light()		({ migrate_disable(); __smp_processor_id(); })
+#define put_cpu_light()		migrate_enable()
+
 /*
  * Callback to arch code if there's nosmp or maxcpus=0 on the
  * boot command line:
diff --git a/include/linux/spi/kbus.h b/include/linux/spi/kbus.h
new file mode 100644
index 000000000000..07e27b4cbd55
--- /dev/null
+++ b/include/linux/spi/kbus.h
@@ -0,0 +1,142 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * include/linux/spi/kbus.h
+ *
+ * Copyright (C) 2020 WAGO
+ *	Heinrich Toews <heinrich.toews@wago.com>
+ */
+
+#ifndef KBUS_H
+#define KBUS_H
+
+#include <linux/types.h>
+
+#define KBUS_DRIVER_MAJOR 240
+#define KBUS_IRQ_TIMEOUT 10 /* wait for a max. of 10 ms */
+
+#define KBUS__DEFAULT_SPEED 12000000
+#define KBUS_READYN_IRQ
+#define KBUS_DATA_FULLDPX
+
+#undef KBUS__WAIT_ACTIVE
+#undef KBUS_IRQN_IRQ
+
+/*---------------------------------------------------------------------------*/
+
+#define PAC_KBUS_SYNC_CYCLES 3
+#define SPI_MODE_MASK                                                          \
+	(SPI_CPHA | SPI_CPOL | SPI_CS_HIGH | SPI_LSB_FIRST | SPI_3WIRE |       \
+	 SPI_LOOP | SPI_NO_CS | SPI_READY)
+
+#define KBUS__MAX_BUF_LEN PAGE_SIZE /* FIXME */
+
+#define KBUS_TESTING 0 /* enable when gpio testing wanted */
+
+#define KBUS__USE_DMA_ONLY 0
+
+#if KBUS_TESTING
+#define kbus_wago_mpoint(k) wago_mpoint()
+#define kbus_dbg(format, arg...) pr_debug("kbus-dbg:" format, ##arg)
+#else
+#define kbus_wago_mpoint(k)                                                    \
+	({                                                                     \
+		if (0)                                                         \
+			wago_mpoint();                                         \
+		0;                                                             \
+	})
+#define kbus_dbg(format, arg...)                                               \
+	({                                                                     \
+		if (0)                                                         \
+			pr_debug("kbus-dbg:" format, ##arg);                   \
+		0;                                                             \
+	})
+#endif
+
+#define KBUS_ENABLE_IRQ(irq)                                                   \
+	do {                                                                   \
+		if (irq != -1)                                                 \
+			enable_irq(irq);                                       \
+	} while (0)
+
+#define KBUS_DISABLE_IRQ(irq)                                                  \
+	do {                                                                   \
+		if (irq != -1)                                                 \
+			disable_irq(irq);                                      \
+	} while (0)
+
+struct kbus_drv_data {
+	u8 cmdsel; /* 0: data, 1: cmd mode */
+	int kbus_err;
+	int kbus_err_state;
+	u8 *tx_buf;
+	u8 *rx_buf;
+	bool use_dma;
+	u32 timeout_ms;
+	dma_addr_t tx_buf_dma;
+	dma_addr_t rx_buf_dma;
+	int kbus_irq;
+	int kbus_irq_enabled;
+	int kbus_irq_state;
+	struct task_struct
+		*dma_task; /* task pointer to boost the dma task if necessary */
+	bool kbus_dma_boost_en;
+	u8 kbus_dma_boost_prio;
+	const char *kbus_dma_boost_irq_thread;
+	u8 kbus_dma_normal_prio;
+
+	/* gpios */
+	struct gpio_desc *gpio_nrdy;
+	struct gpio_desc *gpio_nrst;
+	struct gpio_desc *gpio_nsync;
+	struct gpio_desc *gpio_cmdsel;
+	struct gpio_desc *gpio_nirq;
+	struct gpio_desc *gpio_nerr;
+
+	wait_queue_head_t kbus_irq_wq;
+	struct spi_device *spi;
+	const char *kbus_tty_device_name;
+};
+
+/* For userspace ioctl communication */
+struct kbus_data {
+	__u8 __user *tx_buf;
+	__u8 __user *rx_buf;
+	__u32 byte_len;
+	__u8 __user *err; /* will only be set when err occurs! */
+	__u8 __user *err_state;
+	__u32 timeout_ms;
+};
+
+struct kbus_cmd {
+	__u8 __user *tx_buf;
+	__u8 __user *rx_buf;
+	__u32 byte_len_tx;
+	__u32 byte_len_rx;
+	__u8 __user *err; /* will only be set when err occurs! */
+	__u8 __user *err_state;
+	__u32 timeout_ms;
+};
+
+struct kbus_spi_config {
+	__u8 bits_per_word; /* bits_per_word */
+	__u8 mode; /* see SPI_ mode bits in spi.h */
+	__u32 max_speed_hz;
+};
+
+extern int kbus_wait_for_irq(void);
+extern int kbus_wait_for_event(int *event);
+extern int kbus_error(void);
+extern int kbus_wait_for_gpio(int gpio);
+extern void kbus_boost_dma_task(u8 enable);
+
+/* IOCTL commands */
+#define KBUS_IOC_MAGIC 'K'
+#define KBUS_IOC_DATA _IOW(KBUS_IOC_MAGIC, 1, struct kbus_data)
+#define KBUS_IOC_CMD _IOW(KBUS_IOC_MAGIC, 2, struct kbus_cmd)
+#define KBUS_IOC_CONFIG _IOW(KBUS_IOC_MAGIC, 3, struct kbus_spi_config)
+#define KBUS_IOC_BINARY _IOW(KBUS_IOC_MAGIC, 4, struct kbus_data)
+
+extern struct spi_driver
+	kbus_driver; /* used by spi-omap2-mcspi to recognize the kbus device */
+
+#endif /* KBUS_H */
diff --git a/include/linux/spinlock_types_up.h b/include/linux/spinlock_types_up.h
index c09b6407ae1b..7f86a2016ac5 100644
--- a/include/linux/spinlock_types_up.h
+++ b/include/linux/spinlock_types_up.h
@@ -1,7 +1,7 @@
 #ifndef __LINUX_SPINLOCK_TYPES_UP_H
 #define __LINUX_SPINLOCK_TYPES_UP_H
 
-#ifndef __LINUX_SPINLOCK_TYPES_H
+#ifndef __LINUX_SPINLOCK_TYPES_RAW_H
 # error "please don't include this file directly"
 #endif
 
diff --git a/include/linux/suspend.h b/include/linux/suspend.h
index 8af13ba60c7e..79b6933ef8a0 100644
--- a/include/linux/suspend.h
+++ b/include/linux/suspend.h
@@ -550,23 +550,17 @@ static inline void unlock_system_sleep(void) {}
 #ifdef CONFIG_PM_SLEEP_DEBUG
 extern bool pm_print_times_enabled;
 extern bool pm_debug_messages_on;
-extern __printf(2, 3) void __pm_pr_dbg(bool defer, const char *fmt, ...);
+extern __printf(1, 2) void pm_pr_dbg(const char *fmt, ...);
 #else
 #define pm_print_times_enabled	(false)
 #define pm_debug_messages_on	(false)
 
 #include <linux/printk.h>
 
-#define __pm_pr_dbg(defer, fmt, ...) \
+#define pm_pr_dbg(fmt, ...) \
 	no_printk(KERN_DEBUG fmt, ##__VA_ARGS__)
 #endif
 
-#define pm_pr_dbg(fmt, ...) \
-	__pm_pr_dbg(false, fmt, ##__VA_ARGS__)
-
-#define pm_deferred_pr_dbg(fmt, ...) \
-	__pm_pr_dbg(true, fmt, ##__VA_ARGS__)
-
 #ifdef CONFIG_PM_AUTOSLEEP
 
 /* kernel/power/autosleep.c */
diff --git a/include/linux/switch.h b/include/linux/switch.h
new file mode 100644
index 000000000000..cc866785adbe
--- /dev/null
+++ b/include/linux/switch.h
@@ -0,0 +1,180 @@
+/*
+ * switch.h: Switch configuration API
+ *
+ * Copyright (C) 2008 Felix Fietkau <nbd@nbd.name>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#ifndef _LINUX_SWITCH_H
+#define _LINUX_SWITCH_H
+
+#include <net/genetlink.h>
+#include <uapi/linux/switch.h>
+
+struct switch_dev;
+struct switch_op;
+struct switch_val;
+struct switch_attr;
+struct switch_attrlist;
+struct switch_led_trigger;
+
+int register_switch(struct switch_dev *dev, struct net_device *netdev);
+void unregister_switch(struct switch_dev *dev);
+
+/**
+ * struct switch_attrlist - attribute list
+ *
+ * @n_attr: number of attributes
+ * @attr: pointer to the attributes array
+ */
+struct switch_attrlist {
+	int n_attr;
+	const struct switch_attr *attr;
+};
+
+enum switch_port_speed {
+	SWITCH_PORT_SPEED_UNKNOWN = 0,
+	SWITCH_PORT_SPEED_10 = 10,
+	SWITCH_PORT_SPEED_100 = 100,
+	SWITCH_PORT_SPEED_1000 = 1000,
+};
+
+struct switch_port_link {
+	bool link;
+	bool duplex;
+	bool aneg;
+	bool tx_flow;
+	bool rx_flow;
+	enum switch_port_speed speed;
+	/* in ethtool adv_t format */
+	u32 eee;
+};
+
+struct switch_port_stats {
+	unsigned long long tx_bytes;
+	unsigned long long rx_bytes;
+};
+
+/**
+ * struct switch_dev_ops - switch driver operations
+ *
+ * @attr_global: global switch attribute list
+ * @attr_port: port attribute list
+ * @attr_vlan: vlan attribute list
+ *
+ * Callbacks:
+ *
+ * @get_vlan_ports: read the port list of a VLAN
+ * @set_vlan_ports: set the port list of a VLAN
+ *
+ * @get_port_pvid: get the primary VLAN ID of a port
+ * @set_port_pvid: set the primary VLAN ID of a port
+ *
+ * @apply_config: apply all changed settings to the switch
+ * @reset_switch: resetting the switch
+ */
+struct switch_dev_ops {
+	struct switch_attrlist attr_global, attr_port, attr_vlan;
+
+	int (*get_vlan_ports)(struct switch_dev *dev, struct switch_val *val);
+	int (*set_vlan_ports)(struct switch_dev *dev, struct switch_val *val);
+
+	int (*get_port_pvid)(struct switch_dev *dev, int port, int *val);
+	int (*set_port_pvid)(struct switch_dev *dev, int port, int val);
+
+	int (*apply_config)(struct switch_dev *dev);
+	int (*reset_switch)(struct switch_dev *dev);
+
+	int (*get_port_link)(struct switch_dev *dev, int port,
+			     struct switch_port_link *link);
+	int (*set_port_link)(struct switch_dev *dev, int port,
+			     struct switch_port_link *link);
+	int (*get_port_stats)(struct switch_dev *dev, int port,
+			      struct switch_port_stats *stats);
+
+	int (*phy_read16)(struct switch_dev *dev, int addr, u8 reg, u16 *value);
+	int (*phy_write16)(struct switch_dev *dev, int addr, u8 reg, u16 value);
+};
+
+struct switch_dev {
+	struct device_node *of_node;
+	const struct switch_dev_ops *ops;
+	/* will be automatically filled */
+	char devname[IFNAMSIZ];
+
+	const char *name;
+	/* NB: either alias or netdev must be set */
+	const char *alias;
+	struct net_device *netdev;
+	struct mii_bus *mii_bus;
+
+	unsigned int ports;
+	unsigned int vlans;
+	unsigned int cpu_port;
+
+	/* the following fields are internal for swconfig */
+	unsigned int id;
+	struct list_head dev_list;
+	unsigned long def_global, def_port, def_vlan;
+
+	struct mutex sw_mutex;
+	struct switch_port *portbuf;
+	struct switch_portmap *portmap;
+	struct switch_port_link linkbuf;
+
+	char buf[128];
+
+#ifdef CONFIG_SWCONFIG_LEDS
+	struct switch_led_trigger *led_trigger;
+#endif
+};
+
+struct switch_port {
+	u32 id;
+	u32 flags;
+};
+
+struct switch_portmap {
+	u32 virt;
+	const char *s;
+};
+
+struct switch_val {
+	const struct switch_attr *attr;
+	unsigned int port_vlan;
+	unsigned int len;
+	union {
+		const char *s;
+		u32 i;
+		struct switch_port *ports;
+		struct switch_port_link *link;
+	} value;
+};
+
+struct switch_attr {
+	int disabled;
+	int type;
+	const char *name;
+	const char *description;
+
+	int (*set)(struct switch_dev *dev, const struct switch_attr *attr, struct switch_val *val);
+	int (*get)(struct switch_dev *dev, const struct switch_attr *attr, struct switch_val *val);
+
+	/* for driver internal use */
+	int id;
+	int ofs;
+	int max;
+};
+
+int switch_generic_set_link(struct switch_dev *dev, int port,
+			    struct switch_port_link *link);
+
+#endif /* _LINUX_SWITCH_H */
diff --git a/include/linux/thread_info.h b/include/linux/thread_info.h
index 0999f6317978..7af834b7c114 100644
--- a/include/linux/thread_info.h
+++ b/include/linux/thread_info.h
@@ -163,7 +163,17 @@ static inline int test_ti_thread_flag(struct thread_info *ti, int flag)
 	clear_ti_thread_flag(task_thread_info(t), TIF_##fl)
 #endif /* !CONFIG_GENERIC_ENTRY */
 
-#define tif_need_resched() test_thread_flag(TIF_NEED_RESCHED)
+#ifdef CONFIG_PREEMPT_LAZY
+#define tif_need_resched()	(test_thread_flag(TIF_NEED_RESCHED) || \
+				 test_thread_flag(TIF_NEED_RESCHED_LAZY))
+#define tif_need_resched_now()	(test_thread_flag(TIF_NEED_RESCHED))
+#define tif_need_resched_lazy()	test_thread_flag(TIF_NEED_RESCHED_LAZY)
+
+#else
+#define tif_need_resched()	test_thread_flag(TIF_NEED_RESCHED)
+#define tif_need_resched_now()	test_thread_flag(TIF_NEED_RESCHED)
+#define tif_need_resched_lazy()	0
+#endif
 
 #ifndef CONFIG_HAVE_ARCH_WITHIN_STACK_FRAMES
 static inline int arch_within_stack_frames(const void * const stack,
diff --git a/include/linux/trace_events.h b/include/linux/trace_events.h
index 57113190448c..827725f41149 100644
--- a/include/linux/trace_events.h
+++ b/include/linux/trace_events.h
@@ -69,6 +69,7 @@ struct trace_entry {
 	unsigned char		flags;
 	unsigned char		preempt_count;
 	int			pid;
+	unsigned char		preempt_lazy_count;
 };
 
 #define TRACE_EVENT_TYPE_MAX						\
@@ -157,9 +158,10 @@ static inline void tracing_generic_entry_update(struct trace_entry *entry,
 						unsigned int trace_ctx)
 {
 	entry->preempt_count		= trace_ctx & 0xff;
+	entry->preempt_lazy_count	= (trace_ctx >> 16) & 0xff;
 	entry->pid			= current->pid;
 	entry->type			= type;
-	entry->flags =			trace_ctx >> 16;
+	entry->flags			= trace_ctx >> 24;
 }
 
 unsigned int tracing_gen_ctx_irq_test(unsigned int irqs_status);
@@ -172,6 +174,7 @@ enum trace_flag_type {
 	TRACE_FLAG_SOFTIRQ		= 0x10,
 	TRACE_FLAG_PREEMPT_RESCHED	= 0x20,
 	TRACE_FLAG_NMI			= 0x40,
+	TRACE_FLAG_NEED_RESCHED_LAZY	= 0x80,
 };
 
 #ifdef CONFIG_TRACE_IRQFLAGS_SUPPORT
diff --git a/include/linux/tty_driver.h b/include/linux/tty_driver.h
index c20431d8def8..d83be1b4d52a 100644
--- a/include/linux/tty_driver.h
+++ b/include/linux/tty_driver.h
@@ -404,6 +404,7 @@ static inline void tty_set_operations(struct tty_driver *driver,
 #define TTY_DRIVER_HARDWARE_BREAK	0x0020
 #define TTY_DRIVER_DYNAMIC_ALLOC	0x0040
 #define TTY_DRIVER_UNNUMBERED_NODE	0x0080
+#define TTY_DRIVER_IGNORE_FLUSH         0x0100
 
 /* tty driver types */
 #define TTY_DRIVER_TYPE_SYSTEM		0x0001
diff --git a/include/linux/u64_stats_sync.h b/include/linux/u64_stats_sync.h
index e81856c0ba13..81dc1f5e181a 100644
--- a/include/linux/u64_stats_sync.h
+++ b/include/linux/u64_stats_sync.h
@@ -66,7 +66,7 @@
 #include <linux/seqlock.h>
 
 struct u64_stats_sync {
-#if BITS_PER_LONG==32 && defined(CONFIG_SMP)
+#if BITS_PER_LONG==32 && (defined(CONFIG_SMP) || defined(CONFIG_PREEMPT_RT))
 	seqcount_t	seq;
 #endif
 };
@@ -83,6 +83,11 @@ static inline u64 u64_stats_read(const u64_stats_t *p)
 	return local64_read(&p->v);
 }
 
+static inline void u64_stats_set(u64_stats_t *p, u64 val)
+{
+	local64_set(&p->v, val);
+}
+
 static inline void u64_stats_add(u64_stats_t *p, unsigned long val)
 {
 	local64_add(val, &p->v);
@@ -104,6 +109,11 @@ static inline u64 u64_stats_read(const u64_stats_t *p)
 	return p->v;
 }
 
+static inline void u64_stats_set(u64_stats_t *p, u64 val)
+{
+	p->v = val;
+}
+
 static inline void u64_stats_add(u64_stats_t *p, unsigned long val)
 {
 	p->v += val;
@@ -115,7 +125,7 @@ static inline void u64_stats_inc(u64_stats_t *p)
 }
 #endif
 
-#if BITS_PER_LONG == 32 && defined(CONFIG_SMP)
+#if BITS_PER_LONG == 32 && (defined(CONFIG_SMP) || defined(CONFIG_PREEMPT_RT))
 #define u64_stats_init(syncp)	seqcount_init(&(syncp)->seq)
 #else
 static inline void u64_stats_init(struct u64_stats_sync *syncp)
@@ -125,15 +135,19 @@ static inline void u64_stats_init(struct u64_stats_sync *syncp)
 
 static inline void u64_stats_update_begin(struct u64_stats_sync *syncp)
 {
-#if BITS_PER_LONG==32 && defined(CONFIG_SMP)
+#if BITS_PER_LONG == 32 && (defined(CONFIG_SMP) || defined(CONFIG_PREEMPT_RT))
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_disable();
 	write_seqcount_begin(&syncp->seq);
 #endif
 }
 
 static inline void u64_stats_update_end(struct u64_stats_sync *syncp)
 {
-#if BITS_PER_LONG==32 && defined(CONFIG_SMP)
+#if BITS_PER_LONG == 32 && (defined(CONFIG_SMP) || defined(CONFIG_PREEMPT_RT))
 	write_seqcount_end(&syncp->seq);
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_enable();
 #endif
 }
 
@@ -142,8 +156,11 @@ u64_stats_update_begin_irqsave(struct u64_stats_sync *syncp)
 {
 	unsigned long flags = 0;
 
-#if BITS_PER_LONG==32 && defined(CONFIG_SMP)
-	local_irq_save(flags);
+#if BITS_PER_LONG == 32 && (defined(CONFIG_SMP) || defined(CONFIG_PREEMPT_RT))
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_disable();
+	else
+		local_irq_save(flags);
 	write_seqcount_begin(&syncp->seq);
 #endif
 	return flags;
@@ -153,15 +170,18 @@ static inline void
 u64_stats_update_end_irqrestore(struct u64_stats_sync *syncp,
 				unsigned long flags)
 {
-#if BITS_PER_LONG==32 && defined(CONFIG_SMP)
+#if BITS_PER_LONG == 32 && (defined(CONFIG_SMP) || defined(CONFIG_PREEMPT_RT))
 	write_seqcount_end(&syncp->seq);
-	local_irq_restore(flags);
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_enable();
+	else
+		local_irq_restore(flags);
 #endif
 }
 
 static inline unsigned int __u64_stats_fetch_begin(const struct u64_stats_sync *syncp)
 {
-#if BITS_PER_LONG==32 && defined(CONFIG_SMP)
+#if BITS_PER_LONG == 32 && (defined(CONFIG_SMP) || defined(CONFIG_PREEMPT_RT))
 	return read_seqcount_begin(&syncp->seq);
 #else
 	return 0;
@@ -170,7 +190,7 @@ static inline unsigned int __u64_stats_fetch_begin(const struct u64_stats_sync *
 
 static inline unsigned int u64_stats_fetch_begin(const struct u64_stats_sync *syncp)
 {
-#if BITS_PER_LONG==32 && !defined(CONFIG_SMP)
+#if BITS_PER_LONG == 32 && (!defined(CONFIG_SMP) && !defined(CONFIG_PREEMPT_RT))
 	preempt_disable();
 #endif
 	return __u64_stats_fetch_begin(syncp);
@@ -179,7 +199,7 @@ static inline unsigned int u64_stats_fetch_begin(const struct u64_stats_sync *sy
 static inline bool __u64_stats_fetch_retry(const struct u64_stats_sync *syncp,
 					 unsigned int start)
 {
-#if BITS_PER_LONG==32 && defined(CONFIG_SMP)
+#if BITS_PER_LONG == 32 && (defined(CONFIG_SMP) || defined(CONFIG_PREEMPT_RT))
 	return read_seqcount_retry(&syncp->seq, start);
 #else
 	return false;
@@ -189,7 +209,7 @@ static inline bool __u64_stats_fetch_retry(const struct u64_stats_sync *syncp,
 static inline bool u64_stats_fetch_retry(const struct u64_stats_sync *syncp,
 					 unsigned int start)
 {
-#if BITS_PER_LONG==32 && !defined(CONFIG_SMP)
+#if BITS_PER_LONG == 32 && (!defined(CONFIG_SMP) && !defined(CONFIG_PREEMPT_RT))
 	preempt_enable();
 #endif
 	return __u64_stats_fetch_retry(syncp, start);
@@ -203,7 +223,9 @@ static inline bool u64_stats_fetch_retry(const struct u64_stats_sync *syncp,
  */
 static inline unsigned int u64_stats_fetch_begin_irq(const struct u64_stats_sync *syncp)
 {
-#if BITS_PER_LONG==32 && !defined(CONFIG_SMP)
+#if BITS_PER_LONG == 32 && defined(CONFIG_PREEMPT_RT)
+	preempt_disable();
+#elif BITS_PER_LONG == 32 && !defined(CONFIG_SMP)
 	local_irq_disable();
 #endif
 	return __u64_stats_fetch_begin(syncp);
@@ -212,7 +234,9 @@ static inline unsigned int u64_stats_fetch_begin_irq(const struct u64_stats_sync
 static inline bool u64_stats_fetch_retry_irq(const struct u64_stats_sync *syncp,
 					     unsigned int start)
 {
-#if BITS_PER_LONG==32 && !defined(CONFIG_SMP)
+#if BITS_PER_LONG == 32 && defined(CONFIG_PREEMPT_RT)
+	preempt_enable();
+#elif BITS_PER_LONG == 32 && !defined(CONFIG_SMP)
 	local_irq_enable();
 #endif
 	return __u64_stats_fetch_retry(syncp, start);
diff --git a/include/linux/wsysinit-prio.h b/include/linux/wsysinit-prio.h
new file mode 100644
index 000000000000..b5cc5b6faf5c
--- /dev/null
+++ b/include/linux/wsysinit-prio.h
@@ -0,0 +1,27 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+/*
+ * Copyright (C) 2014 Wago Kontakttechnik GmbH
+ *
+ * Author: Heinrich Toews <heinrich.toews@wago.com>
+ *
+ */
+
+#ifndef __WSYSINIT_PRIO_H
+#define __WSYSINIT_PRIO_H
+
+struct wsysinit_irq_prio_tbl_entry {
+	const char *name;
+	int prio;
+};
+
+extern struct wsysinit_irq_prio_tbl_entry *
+wsysinit_tbl_get_entry_by_name(const char *name);
+extern int wsysinit_tbl_get_prio_by_name(const char *name);
+extern void wsysinit_tbl_dump(void);
+extern void wsysinit_tbl_sysfs_init(void);
+
+struct task_struct;
+extern void wsysinit_set_fifo_nocheck(struct task_struct *task);
+
+#endif /* __WSYSINIT_PRIO_H */
diff --git a/include/misc/wago-tests.h b/include/misc/wago-tests.h
new file mode 100644
index 000000000000..b92721349eeb
--- /dev/null
+++ b/include/misc/wago-tests.h
@@ -0,0 +1,40 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+/*
+ *
+ * Copyright (C) 2014 Wago Kontakttechnik GmbH
+ *
+ * Author: Heinrich Toews <heinrich.toews@wago.com>
+ *
+ */
+
+#ifndef _WAGO_TESTS_H_
+#define _WAGO_TESTS_H_
+
+#define WAGO_TEST_DEBUG
+
+#ifdef WAGO_TEST_DEBUG
+#define pac_kdebug(format, arg...)	\
+	printk(KERN_INFO "pac-kdebug: " format , ## arg)
+#else
+#define pac_kdebug(format, arg...)       \
+	({ if (0) printk(KERN_INFO "pac-kdebug: " format , ## arg); 0; })
+#endif
+
+#include <linux/gpio.h>
+#include <linux/time.h>
+
+#define WAGO_TEST__MAX_MEASUREMENTS       20
+#define WAGO_TEST__GPIO                  175  	/* FB-nINT_GPIO175 */
+
+struct wago_trace_data {
+	struct timespec64 mpoints[WAGO_TEST__MAX_MEASUREMENTS];
+	int mpoint_index;
+};
+
+extern void wago_tests_init(struct wago_trace_data *tdata, u8 gpios_enable);
+extern void wago_tests_deinit(void);
+extern void wago_measure_reset(void);
+extern void wago_mpoint(void);
+
+#endif /* _WAGO_TESTS_H_ */
diff --git a/include/net/act_api.h b/include/net/act_api.h
index f19f7f4a463c..b5b624c7e488 100644
--- a/include/net/act_api.h
+++ b/include/net/act_api.h
@@ -30,13 +30,13 @@ struct tc_action {
 	atomic_t			tcfa_bindcnt;
 	int				tcfa_action;
 	struct tcf_t			tcfa_tm;
-	struct gnet_stats_basic_packed	tcfa_bstats;
-	struct gnet_stats_basic_packed	tcfa_bstats_hw;
+	struct gnet_stats_basic_sync	tcfa_bstats;
+	struct gnet_stats_basic_sync	tcfa_bstats_hw;
 	struct gnet_stats_queue		tcfa_qstats;
 	struct net_rate_estimator __rcu *tcfa_rate_est;
 	spinlock_t			tcfa_lock;
-	struct gnet_stats_basic_cpu __percpu *cpu_bstats;
-	struct gnet_stats_basic_cpu __percpu *cpu_bstats_hw;
+	struct gnet_stats_basic_sync __percpu *cpu_bstats;
+	struct gnet_stats_basic_sync __percpu *cpu_bstats_hw;
 	struct gnet_stats_queue __percpu *cpu_qstats;
 	struct tc_cookie	__rcu *act_cookie;
 	struct tcf_chain	__rcu *goto_chain;
@@ -206,7 +206,7 @@ static inline void tcf_action_update_bstats(struct tc_action *a,
 					    struct sk_buff *skb)
 {
 	if (likely(a->cpu_bstats)) {
-		bstats_cpu_update(this_cpu_ptr(a->cpu_bstats), skb);
+		bstats_update(this_cpu_ptr(a->cpu_bstats), skb);
 		return;
 	}
 	spin_lock(&a->tcfa_lock);
diff --git a/include/net/dsa.h b/include/net/dsa.h
index d784e76113b8..343a3c0b4bbd 100644
--- a/include/net/dsa.h
+++ b/include/net/dsa.h
@@ -51,6 +51,7 @@ struct phylink_link_state;
 #define DSA_TAG_PROTO_SEVILLE_VALUE		21
 #define DSA_TAG_PROTO_BRCM_LEGACY_VALUE		22
 #define DSA_TAG_PROTO_SJA1110_VALUE		23
+#define DSA_TAG_PROTO_KSZ8863_VALUE		24
 
 enum dsa_tag_protocol {
 	DSA_TAG_PROTO_NONE		= DSA_TAG_PROTO_NONE_VALUE,
@@ -77,6 +78,7 @@ enum dsa_tag_protocol {
 	DSA_TAG_PROTO_OCELOT_8021Q	= DSA_TAG_PROTO_OCELOT_8021Q_VALUE,
 	DSA_TAG_PROTO_SEVILLE		= DSA_TAG_PROTO_SEVILLE_VALUE,
 	DSA_TAG_PROTO_SJA1110		= DSA_TAG_PROTO_SJA1110_VALUE,
+	DSA_TAG_PROTO_KSZ8863		= DSA_TAG_PROTO_KSZ8863_VALUE,
 };
 
 struct dsa_switch;
@@ -1151,4 +1153,3 @@ static struct dsa_tag_driver *dsa_tag_driver_array[] =	{		\
 };									\
 module_dsa_tag_drivers(dsa_tag_driver_array)
 #endif
-
diff --git a/include/net/gen_stats.h b/include/net/gen_stats.h
index 1424e02cef90..7aa2b8e1fb29 100644
--- a/include/net/gen_stats.h
+++ b/include/net/gen_stats.h
@@ -7,14 +7,17 @@
 #include <linux/rtnetlink.h>
 #include <linux/pkt_sched.h>
 
-/* Note: this used to be in include/uapi/linux/gen_stats.h */
-struct gnet_stats_basic_packed {
-	__u64	bytes;
-	__u64	packets;
-};
-
-struct gnet_stats_basic_cpu {
-	struct gnet_stats_basic_packed bstats;
+/* Throughput stats.
+ * Must be initialized beforehand with gnet_stats_basic_sync_init().
+ *
+ * If no reads can ever occur parallel to writes (e.g. stack-allocated
+ * bstats), then the internal stat values can be written to and read
+ * from directly. Otherwise, use _bstats_set/update() for writes and
+ * gnet_stats_add_basic() for reads.
+ */
+struct gnet_stats_basic_sync {
+	u64_stats_t bytes;
+	u64_stats_t packets;
 	struct u64_stats_sync syncp;
 } __aligned(2 * sizeof(u64));
 
@@ -34,6 +37,7 @@ struct gnet_dump {
 	struct tc_stats   tc_stats;
 };
 
+void gnet_stats_basic_sync_init(struct gnet_stats_basic_sync *b);
 int gnet_stats_start_copy(struct sk_buff *skb, int type, spinlock_t *lock,
 			  struct gnet_dump *d, int padattr);
 
@@ -42,41 +46,38 @@ int gnet_stats_start_copy_compat(struct sk_buff *skb, int type,
 				 spinlock_t *lock, struct gnet_dump *d,
 				 int padattr);
 
-int gnet_stats_copy_basic(const seqcount_t *running,
-			  struct gnet_dump *d,
-			  struct gnet_stats_basic_cpu __percpu *cpu,
-			  struct gnet_stats_basic_packed *b);
-void __gnet_stats_copy_basic(const seqcount_t *running,
-			     struct gnet_stats_basic_packed *bstats,
-			     struct gnet_stats_basic_cpu __percpu *cpu,
-			     struct gnet_stats_basic_packed *b);
-int gnet_stats_copy_basic_hw(const seqcount_t *running,
-			     struct gnet_dump *d,
-			     struct gnet_stats_basic_cpu __percpu *cpu,
-			     struct gnet_stats_basic_packed *b);
+int gnet_stats_copy_basic(struct gnet_dump *d,
+			  struct gnet_stats_basic_sync __percpu *cpu,
+			  struct gnet_stats_basic_sync *b, bool running);
+void gnet_stats_add_basic(struct gnet_stats_basic_sync *bstats,
+			  struct gnet_stats_basic_sync __percpu *cpu,
+			  struct gnet_stats_basic_sync *b, bool running);
+int gnet_stats_copy_basic_hw(struct gnet_dump *d,
+			     struct gnet_stats_basic_sync __percpu *cpu,
+			     struct gnet_stats_basic_sync *b, bool running);
 int gnet_stats_copy_rate_est(struct gnet_dump *d,
 			     struct net_rate_estimator __rcu **ptr);
 int gnet_stats_copy_queue(struct gnet_dump *d,
 			  struct gnet_stats_queue __percpu *cpu_q,
 			  struct gnet_stats_queue *q, __u32 qlen);
-void __gnet_stats_copy_queue(struct gnet_stats_queue *qstats,
-			     const struct gnet_stats_queue __percpu *cpu_q,
-			     const struct gnet_stats_queue *q, __u32 qlen);
+void gnet_stats_add_queue(struct gnet_stats_queue *qstats,
+			  const struct gnet_stats_queue __percpu *cpu_q,
+			  const struct gnet_stats_queue *q);
 int gnet_stats_copy_app(struct gnet_dump *d, void *st, int len);
 
 int gnet_stats_finish_copy(struct gnet_dump *d);
 
-int gen_new_estimator(struct gnet_stats_basic_packed *bstats,
-		      struct gnet_stats_basic_cpu __percpu *cpu_bstats,
+int gen_new_estimator(struct gnet_stats_basic_sync *bstats,
+		      struct gnet_stats_basic_sync __percpu *cpu_bstats,
 		      struct net_rate_estimator __rcu **rate_est,
 		      spinlock_t *lock,
-		      seqcount_t *running, struct nlattr *opt);
+		      bool running, struct nlattr *opt);
 void gen_kill_estimator(struct net_rate_estimator __rcu **ptr);
-int gen_replace_estimator(struct gnet_stats_basic_packed *bstats,
-			  struct gnet_stats_basic_cpu __percpu *cpu_bstats,
+int gen_replace_estimator(struct gnet_stats_basic_sync *bstats,
+			  struct gnet_stats_basic_sync __percpu *cpu_bstats,
 			  struct net_rate_estimator __rcu **ptr,
 			  spinlock_t *lock,
-			  seqcount_t *running, struct nlattr *opt);
+			  bool running, struct nlattr *opt);
 bool gen_estimator_active(struct net_rate_estimator __rcu **ptr);
 bool gen_estimator_read(struct net_rate_estimator __rcu **ptr,
 			struct gnet_stats_rate_est64 *sample);
diff --git a/include/net/netfilter/xt_rateest.h b/include/net/netfilter/xt_rateest.h
index 832ab69efda5..4c3809e141f4 100644
--- a/include/net/netfilter/xt_rateest.h
+++ b/include/net/netfilter/xt_rateest.h
@@ -6,7 +6,7 @@
 
 struct xt_rateest {
 	/* keep lock and bstats on same cache line to speedup xt_rateest_tg() */
-	struct gnet_stats_basic_packed	bstats;
+	struct gnet_stats_basic_sync	bstats;
 	spinlock_t			lock;
 
 
diff --git a/include/net/pkt_cls.h b/include/net/pkt_cls.h
index 83a6d0792180..4a5833108083 100644
--- a/include/net/pkt_cls.h
+++ b/include/net/pkt_cls.h
@@ -765,7 +765,7 @@ struct tc_cookie {
 };
 
 struct tc_qopt_offload_stats {
-	struct gnet_stats_basic_packed *bstats;
+	struct gnet_stats_basic_sync *bstats;
 	struct gnet_stats_queue *qstats;
 };
 
@@ -885,7 +885,7 @@ struct tc_gred_qopt_offload_params {
 };
 
 struct tc_gred_qopt_offload_stats {
-	struct gnet_stats_basic_packed bstats[MAX_DPs];
+	struct gnet_stats_basic_sync bstats[MAX_DPs];
 	struct gnet_stats_queue qstats[MAX_DPs];
 	struct red_stats *xstats[MAX_DPs];
 };
diff --git a/include/net/sch_generic.h b/include/net/sch_generic.h
index 4121ffd0faf8..2417d3ad6874 100644
--- a/include/net/sch_generic.h
+++ b/include/net/sch_generic.h
@@ -40,6 +40,13 @@ enum qdisc_state_t {
 	__QDISC_STATE_DRAINING,
 };
 
+enum qdisc_state2_t {
+	/* Only for !TCQ_F_NOLOCK qdisc. Never access it directly.
+	 * Use qdisc_run_begin/end() or qdisc_is_running() instead.
+	 */
+	__QDISC_STATE2_RUNNING,
+};
+
 #define QDISC_STATE_MISSED	BIT(__QDISC_STATE_MISSED)
 #define QDISC_STATE_DRAINING	BIT(__QDISC_STATE_DRAINING)
 
@@ -97,7 +104,7 @@ struct Qdisc {
 	struct netdev_queue	*dev_queue;
 
 	struct net_rate_estimator __rcu *rate_est;
-	struct gnet_stats_basic_cpu __percpu *cpu_bstats;
+	struct gnet_stats_basic_sync __percpu *cpu_bstats;
 	struct gnet_stats_queue	__percpu *cpu_qstats;
 	int			pad;
 	refcount_t		refcnt;
@@ -107,10 +114,10 @@ struct Qdisc {
 	 */
 	struct sk_buff_head	gso_skb ____cacheline_aligned_in_smp;
 	struct qdisc_skb_head	q;
-	struct gnet_stats_basic_packed bstats;
-	seqcount_t		running;
+	struct gnet_stats_basic_sync bstats;
 	struct gnet_stats_queue	qstats;
 	unsigned long		state;
+	unsigned long		state2; /* must be written under qdisc spinlock */
 	struct Qdisc            *next_sched;
 	struct sk_buff_head	skb_bad_txq;
 
@@ -143,11 +150,15 @@ static inline struct Qdisc *qdisc_refcount_inc_nz(struct Qdisc *qdisc)
 	return NULL;
 }
 
+/* For !TCQ_F_NOLOCK qdisc: callers must either call this within a qdisc
+ * root_lock section, or provide their own memory barriers -- ordering
+ * against qdisc_run_begin/end() atomic bit operations.
+ */
 static inline bool qdisc_is_running(struct Qdisc *qdisc)
 {
 	if (qdisc->flags & TCQ_F_NOLOCK)
 		return spin_is_locked(&qdisc->seqlock);
-	return (raw_read_seqcount(&qdisc->running) & 1) ? true : false;
+	return test_bit(__QDISC_STATE2_RUNNING, &qdisc->state2);
 }
 
 static inline bool nolock_qdisc_is_empty(const struct Qdisc *qdisc)
@@ -167,6 +178,9 @@ static inline bool qdisc_is_empty(const struct Qdisc *qdisc)
 	return !READ_ONCE(qdisc->q.qlen);
 }
 
+/* For !TCQ_F_NOLOCK qdisc, qdisc_run_begin/end() must be invoked with
+ * the qdisc root lock acquired.
+ */
 static inline bool qdisc_run_begin(struct Qdisc *qdisc)
 {
 	if (qdisc->flags & TCQ_F_NOLOCK) {
@@ -206,15 +220,8 @@ static inline bool qdisc_run_begin(struct Qdisc *qdisc)
 		 * after it releases the lock at the end of qdisc_run_end().
 		 */
 		return spin_trylock(&qdisc->seqlock);
-	} else if (qdisc_is_running(qdisc)) {
-		return false;
 	}
-	/* Variant of write_seqcount_begin() telling lockdep a trylock
-	 * was attempted.
-	 */
-	raw_write_seqcount_begin(&qdisc->running);
-	seqcount_acquire(&qdisc->running.dep_map, 0, 1, _RET_IP_);
-	return true;
+	return !__test_and_set_bit(__QDISC_STATE2_RUNNING, &qdisc->state2);
 }
 
 static inline void qdisc_run_end(struct Qdisc *qdisc)
@@ -226,7 +233,7 @@ static inline void qdisc_run_end(struct Qdisc *qdisc)
 				      &qdisc->state)))
 			__netif_schedule(qdisc);
 	} else {
-		write_seqcount_end(&qdisc->running);
+		__clear_bit(__QDISC_STATE2_RUNNING, &qdisc->state2);
 	}
 }
 
@@ -590,14 +597,6 @@ static inline spinlock_t *qdisc_root_sleeping_lock(const struct Qdisc *qdisc)
 	return qdisc_lock(root);
 }
 
-static inline seqcount_t *qdisc_root_sleeping_running(const struct Qdisc *qdisc)
-{
-	struct Qdisc *root = qdisc_root_sleeping(qdisc);
-
-	ASSERT_RTNL();
-	return &root->running;
-}
-
 static inline struct net_device *qdisc_dev(const struct Qdisc *qdisc)
 {
 	return qdisc->dev_queue->dev;
@@ -847,14 +846,16 @@ static inline int qdisc_enqueue(struct sk_buff *skb, struct Qdisc *sch,
 	return sch->enqueue(skb, sch, to_free);
 }
 
-static inline void _bstats_update(struct gnet_stats_basic_packed *bstats,
+static inline void _bstats_update(struct gnet_stats_basic_sync *bstats,
 				  __u64 bytes, __u32 packets)
 {
-	bstats->bytes += bytes;
-	bstats->packets += packets;
+	u64_stats_update_begin(&bstats->syncp);
+	u64_stats_add(&bstats->bytes, bytes);
+	u64_stats_add(&bstats->packets, packets);
+	u64_stats_update_end(&bstats->syncp);
 }
 
-static inline void bstats_update(struct gnet_stats_basic_packed *bstats,
+static inline void bstats_update(struct gnet_stats_basic_sync *bstats,
 				 const struct sk_buff *skb)
 {
 	_bstats_update(bstats,
@@ -862,26 +863,10 @@ static inline void bstats_update(struct gnet_stats_basic_packed *bstats,
 		       skb_is_gso(skb) ? skb_shinfo(skb)->gso_segs : 1);
 }
 
-static inline void _bstats_cpu_update(struct gnet_stats_basic_cpu *bstats,
-				      __u64 bytes, __u32 packets)
-{
-	u64_stats_update_begin(&bstats->syncp);
-	_bstats_update(&bstats->bstats, bytes, packets);
-	u64_stats_update_end(&bstats->syncp);
-}
-
-static inline void bstats_cpu_update(struct gnet_stats_basic_cpu *bstats,
-				     const struct sk_buff *skb)
-{
-	u64_stats_update_begin(&bstats->syncp);
-	bstats_update(&bstats->bstats, skb);
-	u64_stats_update_end(&bstats->syncp);
-}
-
 static inline void qdisc_bstats_cpu_update(struct Qdisc *sch,
 					   const struct sk_buff *skb)
 {
-	bstats_cpu_update(this_cpu_ptr(sch->cpu_bstats), skb);
+	bstats_update(this_cpu_ptr(sch->cpu_bstats), skb);
 }
 
 static inline void qdisc_bstats_update(struct Qdisc *sch,
@@ -970,10 +955,9 @@ static inline void qdisc_qstats_qlen_backlog(struct Qdisc *sch,  __u32 *qlen,
 					     __u32 *backlog)
 {
 	struct gnet_stats_queue qstats = { 0 };
-	__u32 len = qdisc_qlen_sum(sch);
 
-	__gnet_stats_copy_queue(&qstats, sch->cpu_qstats, &sch->qstats, len);
-	*qlen = qstats.qlen;
+	gnet_stats_add_queue(&qstats, sch->cpu_qstats, &sch->qstats);
+	*qlen = qstats.qlen + qdisc_qlen(sch);
 	*backlog = qstats.backlog;
 }
 
@@ -1319,7 +1303,7 @@ void psched_ppscfg_precompute(struct psched_pktrate *r, u64 pktrate64);
 struct mini_Qdisc {
 	struct tcf_proto *filter_list;
 	struct tcf_block *block;
-	struct gnet_stats_basic_cpu __percpu *cpu_bstats;
+	struct gnet_stats_basic_sync __percpu *cpu_bstats;
 	struct gnet_stats_queue	__percpu *cpu_qstats;
 	struct rcu_head rcu;
 };
@@ -1327,7 +1311,7 @@ struct mini_Qdisc {
 static inline void mini_qdisc_bstats_cpu_update(struct mini_Qdisc *miniq,
 						const struct sk_buff *skb)
 {
-	bstats_cpu_update(this_cpu_ptr(miniq->cpu_bstats), skb);
+	bstats_update(this_cpu_ptr(miniq->cpu_bstats), skb);
 }
 
 static inline void mini_qdisc_qstats_cpu_drop(struct mini_Qdisc *miniq)
diff --git a/include/trace/events/pxc.h b/include/trace/events/pxc.h
new file mode 100644
index 000000000000..77d265ae0d69
--- /dev/null
+++ b/include/trace/events/pxc.h
@@ -0,0 +1,377 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+/*
+ *
+ * Copyright (C) 2015 Wago Kontakttechnik GmbH
+ *
+ * Author: Heinrich Toews <heinrich.toews@wago.com>
+ *
+ */
+
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM pxc
+
+#if !defined(_TRACE_PXC_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _TRACE_PXC_H
+
+#include <linux/tracepoint.h>
+
+#ifdef PFC_CLOCK_TRACER
+TRACE_EVENT(pfc_clock, 	/* trace pfc clock events */
+
+	    TP_PROTO(cycle_t cycle_now, cycle_t cycle_delta, struct timekeeper *tk, s64 nsec, char *msg),
+
+	    TP_ARGS(cycle_now, cycle_delta, tk, nsec, msg),
+
+	TP_STRUCT__entry(
+		__field(cycle_t, cycle_now)
+		__field(cycle_t, cycle_delta)
+		__field(s64, nsec)
+		__field(u32, mult)
+		__field(u32, shift)
+		__field(u64, xtime_nsec)
+		__array(char, msg, 128)
+	),
+
+	TP_fast_assign(
+	        __entry->cycle_now = cycle_now;
+		__entry->cycle_delta = cycle_delta;
+		__entry->nsec = nsec;
+		__entry->mult = tk->mult;
+		__entry->shift = tk->shift;
+		__entry->xtime_nsec = tk->xtime_nsec;
+		strncpy(         __entry->msg, msg,                128);
+	),
+
+	TP_printk("%llu d:%llu->%lli|%u|%u|%llu|%s",
+		  __entry->cycle_now, __entry->cycle_delta, __entry->nsec,
+		  __entry->mult, __entry->shift, __entry->xtime_nsec,
+		  __entry->msg)
+);
+#endif
+
+#if defined(PXC_ETH_EMAC)
+TRACE_EVENT(pxc_eth_emac, 	/* trace davinci_emac events */
+
+	TP_PROTO(struct emac_priv *priv, char *msg),
+
+	TP_ARGS(priv, msg),
+
+	TP_STRUCT__entry(
+		__field(unsigned, link)
+		__field(unsigned, speed)
+		__field(unsigned, duplex)
+		__array(char, phy_id, 32)
+		__array(char, other_phy_id, 32)
+		__array(char, msg, 128)
+		__array(char, devname, 64)
+	),
+
+	TP_fast_assign(
+		__entry->link   = priv->link;
+		__entry->speed  = priv->speed;
+		__entry->duplex = priv->duplex;
+		strncpy(      __entry->phy_id, priv->phy_id,        32);
+		strncpy(__entry->other_phy_id, priv->other_phy_id,  32);
+		strncpy(         __entry->msg, msg,                128);
+		if (priv->ndev)
+			strncpy(__entry->devname, priv->ndev->name, 64);
+	),
+
+	TP_printk("%6s 1-%s 2-%s: %4s|%d/%4s %s", __entry->devname, __entry->phy_id,  __entry->other_phy_id,
+		  __entry->link ? "UP" : "DOWN", __entry->speed, __entry->duplex == 1 ? "Full" : "Half",
+		  __entry->msg)
+);
+
+TRACE_EVENT(pxc_eth_emac_phy,	/* trace phy events */
+
+	TP_PROTO(struct phy_device *phydev, char *msg),
+
+        TP_ARGS(phydev, msg),
+
+	TP_STRUCT__entry(
+		__array(char, msg, 128)
+		__array(char, phyname, 16)
+		__field(int, link)
+		__field(int, speed)
+		__field(int, duplex) /* DUPLEX_HALF=0, DUPLEX_FULL=1 */
+		__field(int, state)
+		__field(int, irq)
+		__array(char, devname, 64)
+		__field(u32, dev_flags)
+	),
+
+	TP_fast_assign(
+		if (phydev->attached_dev)
+			strncpy(__entry->devname, phydev->attached_dev->name, 64);
+		strncpy(__entry->msg, msg, 128);
+		strncpy(__entry->phyname, dev_name(&phydev->dev), 16);
+	        __entry->link = phydev->link;
+		__entry->speed = phydev->speed;
+		__entry->duplex = phydev->duplex;
+		__entry->state = phydev->state;
+		__entry->irq = phydev->irq;
+		__entry->dev_flags = phydev->dev_flags;
+	),
+
+	TP_printk("%6s(%s) %4s|%d/%4s|%d|%d|%u %s", __entry->devname, __entry->phyname,
+		  __entry->link ? "UP" : "DOWN", __entry->speed, __entry->duplex == 1 ? "Full" : "Half",
+		  __entry->state, __entry->irq, __entry->dev_flags, __entry->msg)
+);
+#endif
+
+#if defined(PXC_SPI_TRACER)
+TRACE_EVENT(pxc_spi, 	/* trace mcspi events */
+
+        TP_PROTO(char *msg, const char *func, int data),
+
+	TP_ARGS(msg, func, data),
+
+	TP_STRUCT__entry(
+		__array(char, msg, 128)
+		__array(char, func, 32)
+	        __field(int, data)
+	),
+
+	TP_fast_assign(
+		strncpy(         __entry->msg, msg,                128);
+		strncpy(         __entry->func, func,                32);
+	        __entry->data = data;
+	),
+
+	TP_printk("%s[%d]: %s", __entry->func, __entry->data, __entry->msg)
+);
+
+TRACE_EVENT(pxc_spi_measure_a, 	/* trace mcspi events */
+
+	    TP_PROTO(char *msg, struct wago_trace_data *tdata),
+
+	    TP_ARGS(msg, tdata),
+
+	TP_STRUCT__entry(
+		__array(char, msg, 128)
+	        __field(unsigned int, completion_delay)
+	        __field(unsigned int, completion_delay_work)
+	        __field(unsigned int, async_delay)
+	        __field(unsigned int, enqueue_delay)
+	        __field(unsigned int, work_delay)
+	),
+
+	TP_fast_assign(
+		strncpy(         __entry->msg, msg,                128);
+		if (tdata->mpoint_index > 5) {
+			__entry->completion_delay = tdata->mpoints[5].tv_nsec - tdata->mpoints[1].tv_nsec;
+			__entry->completion_delay_work = tdata->mpoints[4].tv_nsec - tdata->mpoints[2].tv_nsec;
+			__entry->async_delay = tdata->mpoints[1].tv_nsec - tdata->mpoints[0].tv_nsec;
+			__entry->enqueue_delay = tdata->mpoints[2].tv_nsec - tdata->mpoints[1].tv_nsec;
+			__entry->work_delay = tdata->mpoints[3].tv_nsec - tdata->mpoints[2].tv_nsec;
+		}
+	),
+
+	TP_printk("%s: completion_delay=%u, completion_delay_work=%u, async_delay=%u, enqueue_delay=%u, work_delay=%u",
+		  __entry->msg, __entry->completion_delay, __entry->completion_delay_work,
+		  __entry->async_delay, __entry->enqueue_delay, __entry->work_delay)
+);
+
+TRACE_EVENT(pxc_spi_measure_b, 	/* trace mcspi events */
+
+	    TP_PROTO(char *msg, struct wago_trace_data *tdata),
+
+	    TP_ARGS(msg, tdata),
+
+	TP_STRUCT__entry(
+		__array(char, msg, 128)
+	        __field(unsigned int, completion_delay)
+	        __field(unsigned int, completion_delay_work)
+	        __field(unsigned int, async_delay)
+	        __field(unsigned int, enqueue_delay)
+	        __field(unsigned int, work_delay)
+	        __field(unsigned int, delay1)
+	        __field(unsigned int, delay2)
+	),
+
+	TP_fast_assign(
+		strncpy(         __entry->msg, msg,                128);
+		if (tdata->mpoint_index > 8) {
+			__entry->completion_delay = tdata->mpoints[7].tv_nsec - tdata->mpoints[2].tv_nsec;
+			__entry->completion_delay_work = tdata->mpoints[6].tv_nsec - tdata->mpoints[4].tv_nsec;
+			__entry->async_delay = tdata->mpoints[2].tv_nsec - tdata->mpoints[1].tv_nsec;
+			__entry->enqueue_delay = tdata->mpoints[4].tv_nsec - tdata->mpoints[2].tv_nsec;
+			__entry->work_delay = tdata->mpoints[5].tv_nsec - tdata->mpoints[4].tv_nsec;
+			__entry->delay1 = tdata->mpoints[7].tv_nsec - tdata->mpoints[1].tv_nsec;
+			__entry->delay2 = tdata->mpoints[8].tv_nsec - tdata->mpoints[0].tv_nsec;
+		}
+	),
+
+	TP_printk("%s: completion_delay=%u, completion_delay_work=%u, async_delay=%u, enqueue_delay=%u, work_delay=%u, delay1=%u, delay2=%u",
+		  __entry->msg, __entry->completion_delay, __entry->completion_delay_work,
+		  __entry->async_delay, __entry->enqueue_delay, __entry->work_delay, __entry->delay1, __entry->delay2)
+);
+#endif	/* PXC_SPI_TRACER */
+
+#if defined(PXC_SPI_KBUS_TRACER)
+TRACE_EVENT(pxc_kbus, 	/* trace kbus events */
+
+        TP_PROTO(const char *func, char *msg),
+
+	TP_ARGS(func, msg),
+
+	TP_STRUCT__entry(
+		__array(char, msg, 128)
+		__array(char, func, 32)
+	),
+
+	TP_fast_assign(
+		strncpy(         __entry->msg, msg,                128);
+		strncpy(         __entry->func, func,               32);
+	),
+
+        TP_printk("%s:%s", __entry->func, __entry->msg)
+);
+
+TRACE_EVENT(pxc_kbusmsg, 	/* trace kbus events */
+
+	    TP_PROTO(const char *func, struct spi_message *m, char *msg),
+
+	    TP_ARGS(func, m, msg),
+
+	TP_STRUCT__entry(
+		__array(char, msg, 128)
+		__array(char, func, 32)
+	        __field(int, status)
+	),
+
+	TP_fast_assign(
+		strncpy(         __entry->msg, msg,                128);
+		strncpy(         __entry->func, func,               32);
+	        __entry->status = m->status;
+	),
+
+	    TP_printk("%s:%s m->status=%d", __entry->func, __entry->msg, __entry->status)
+);
+
+TRACE_EVENT(pxc_kbusdump, 	/* trace kbus events */
+
+	    TP_PROTO(const char *func, char *msg, int word_len, u16 word),
+
+	    TP_ARGS(func, msg, word_len, word),
+
+	TP_STRUCT__entry(
+		__array(char, func, 32)
+		__array(char, msg, 128)
+	        __field( int, word_len)
+	        __field( u16, word)
+	),
+
+	TP_fast_assign(
+		strncpy(         __entry->func, func,               32);
+		strncpy(         __entry->msg, msg,                128);
+	        __entry->word_len = word_len;
+	        __entry->word = word;
+	),
+
+	    TP_printk("%s:%s-%d 0x%x", __entry->func, __entry->msg, __entry->word_len, __entry->word) /* 0x%04x */
+);
+
+TRACE_EVENT(pxc_buf32,
+
+	TP_PROTO(const char *prefix, char *in_buf, int len, int offs),
+
+        TP_ARGS(prefix, in_buf, len, offs),
+
+	TP_STRUCT__entry(
+		__array(char, prefix, 32)
+	        __field(int, copy_len)
+		__array(char, buf, 32)
+		__field(char *, in_buf_p)
+	),
+
+	TP_fast_assign(
+		strncpy(__entry->prefix, prefix, 32);
+		if (len < 32)
+			memset(__entry->buf, 0, 32);
+		strncpy(__entry->buf, in_buf + offs, len > 32 ? 32 : len);
+		__entry->copy_len = len;
+		__entry->in_buf_p = in_buf;
+	),
+
+	TP_printk("DATADUMP(%s) copylen %4d (in_buf_p %p) "
+		  "[%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x"
+		  "-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x"
+		  "-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x"
+		  "-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x]",
+		  __entry->prefix,
+		  __entry->copy_len,
+		  __entry->in_buf_p,
+		  __entry->buf[0],  __entry->buf[1],  __entry->buf[2],  __entry->buf[3],
+		  __entry->buf[4],  __entry->buf[5],  __entry->buf[6],  __entry->buf[7],
+		  __entry->buf[8],  __entry->buf[9],  __entry->buf[10], __entry->buf[11],
+		  __entry->buf[12], __entry->buf[13], __entry->buf[14], __entry->buf[15],
+		  __entry->buf[16], __entry->buf[17], __entry->buf[18], __entry->buf[19],
+		  __entry->buf[20], __entry->buf[21], __entry->buf[22], __entry->buf[23],
+		  __entry->buf[24], __entry->buf[25], __entry->buf[26], __entry->buf[27],
+		  __entry->buf[28], __entry->buf[29], __entry->buf[30], __entry->buf[31])
+);
+
+TRACE_EVENT(pxc_kbus_mdata, 	/* trace kbus measurement events */
+
+        TP_PROTO(const char *func, char *msg, struct wago_trace_data *tdata),
+
+	TP_ARGS(func, msg, tdata),
+
+	TP_STRUCT__entry(
+		__array(char, msg, 128)
+		__array(char, func, 32)
+	        __field(unsigned int, delay1)
+	        __field(unsigned int, delay2)
+	),
+
+	TP_fast_assign(
+		strncpy(         __entry->msg, msg,                128);
+		strncpy(         __entry->func, func,               32);
+		if (tdata->mpoint_index > 3) {
+			__entry->delay1 = tdata->mpoints[3].tv_nsec - tdata->mpoints[0].tv_nsec;
+			__entry->delay2 = tdata->mpoints[2].tv_nsec - tdata->mpoints[1].tv_nsec;
+		}
+	),
+
+	TP_printk("%s:%s delay1=%u delay2=%u", __entry->func, __entry->msg,
+		  __entry->delay1, __entry->delay2)
+);
+#endif	/* PXC_SPI_KBUS_TRACER */
+
+#if defined(PXC_CAN_TRACER)
+TRACE_EVENT(pxc_canpkt,
+
+        TP_PROTO(struct can_frame *canframe),
+
+	TP_ARGS(canframe),
+
+	TP_STRUCT__entry(
+	        __field(struct can_frame *, canframe)
+	),
+
+	TP_fast_assign(
+		__entry->canframe = canframe;
+	),
+
+	TP_printk("%s-0x%x: can_id=0x%x, len=%d, data:%.2x.%.2x.%.2x.%.2x.%.2x.%.2x.%.2x.%.2x",
+		  (__entry->canframe->can_id & CAN_ERR_FLAG) ? " err" : "data",
+		  __entry->canframe->can_id >> CAN_EFF_ID_BITS,
+		  __entry->canframe->can_id & CAN_ERR_MASK,
+		  __entry->canframe->can_dlc,
+		  __entry->canframe->data[0],
+		  __entry->canframe->data[1],
+		  __entry->canframe->data[2],
+		  __entry->canframe->data[3],
+		  __entry->canframe->data[4],
+		  __entry->canframe->data[5],
+		  __entry->canframe->data[6],
+		  __entry->canframe->data[7])
+);
+#endif	/* PXC_CAN_TRACER */
+
+#endif /* if !defined(_TRACE_PXC_H) || defined(TRACE_HEADER_MULTI_READ) */
+
+/* This part must be outside protection */
+#include <trace/define_trace.h>
diff --git a/include/uapi/asm-generic/ioctls.h b/include/uapi/asm-generic/ioctls.h
index cdc9f4ca8c27..a8ee8f366e2b 100644
--- a/include/uapi/asm-generic/ioctls.h
+++ b/include/uapi/asm-generic/ioctls.h
@@ -75,6 +75,13 @@
 #define TCSETXW		0x5435
 #define TIOCSIG		_IOW('T', 0x36, int)  /* pty: generate signal */
 #define TIOCVHANGUP	0x5437
+
+#define TIOCSMBRTU     _IOW('T', 0x38, unsigned char) /* Enable/Disable Modbus RTU */
+#define TIOCSMBRTUADDR _IOW('T', 0x39, unsigned char) /* Set Modbus RTU Address */
+#define TIOCSMBRTUIFT  _IOW('T', 0x40, unsigned int) /* Set Modbus RTU interframe timeout */
+#define TIOCSMBRTUICT  _IOW('T', 0x41, unsigned int) /* Set Modbus RTU intercharacter timeout */
+#define TIOCSMBRTUTS   _IOW('T', 0x42, unsigned char) /* Enable/Disable Timestamp */
+
 #define TIOCGPKT	_IOR('T', 0x38, int) /* Get packet mode state */
 #define TIOCGPTLCK	_IOR('T', 0x39, int) /* Get Pty lock state */
 #define TIOCGEXCL	_IOR('T', 0x40, int) /* Get exclusive mode state */
diff --git a/include/uapi/linux/if_ether.h b/include/uapi/linux/if_ether.h
index 5f589c7a8382..725e3451ff46 100644
--- a/include/uapi/linux/if_ether.h
+++ b/include/uapi/linux/if_ether.h
@@ -154,6 +154,7 @@
 #define ETH_P_MCTP	0x00FA		/* Management component transport
 					 * protocol packets
 					 */
+#define ETH_P_TAIL	0x001D		/* Tail Tagging (micrel)        */
 
 /*
  *	This is an Ethernet frame header.
diff --git a/include/uapi/linux/switch.h b/include/uapi/linux/switch.h
new file mode 100644
index 000000000000..5f089bc8516e
--- /dev/null
+++ b/include/uapi/linux/switch.h
@@ -0,0 +1,120 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+/*
+ * switch.h: Switch configuration API
+ *
+ * Copyright (C) 2008 Felix Fietkau <nbd@nbd.name>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef _UAPI_LINUX_SWITCH_H
+#define _UAPI_LINUX_SWITCH_H
+
+#include <linux/types.h>
+#include <linux/netdevice.h>
+#include <linux/netlink.h>
+#include <linux/genetlink.h>
+#ifndef __KERNEL__
+#include <netlink/netlink.h>
+#include <netlink/genl/genl.h>
+#include <netlink/genl/ctrl.h>
+#endif
+
+/* main attributes */
+enum {
+	SWITCH_ATTR_UNSPEC,
+	/* global */
+	SWITCH_ATTR_TYPE,
+	/* device */
+	SWITCH_ATTR_ID,
+	SWITCH_ATTR_DEV_NAME,
+	SWITCH_ATTR_ALIAS,
+	SWITCH_ATTR_NAME,
+	SWITCH_ATTR_VLANS,
+	SWITCH_ATTR_PORTS,
+	SWITCH_ATTR_PORTMAP,
+	SWITCH_ATTR_CPU_PORT,
+	/* attributes */
+	SWITCH_ATTR_OP_ID,
+	SWITCH_ATTR_OP_TYPE,
+	SWITCH_ATTR_OP_NAME,
+	SWITCH_ATTR_OP_PORT,
+	SWITCH_ATTR_OP_VLAN,
+	SWITCH_ATTR_OP_VALUE_INT,
+	SWITCH_ATTR_OP_VALUE_STR,
+	SWITCH_ATTR_OP_VALUE_PORTS,
+	SWITCH_ATTR_OP_VALUE_LINK,
+	SWITCH_ATTR_OP_DESCRIPTION,
+	/* port lists */
+	SWITCH_ATTR_PORT,
+	SWITCH_ATTR_MAX
+};
+
+enum {
+	/* port map */
+	SWITCH_PORTMAP_PORTS,
+	SWITCH_PORTMAP_SEGMENT,
+	SWITCH_PORTMAP_VIRT,
+	SWITCH_PORTMAP_MAX
+};
+
+/* commands */
+enum {
+	SWITCH_CMD_UNSPEC,
+	SWITCH_CMD_GET_SWITCH,
+	SWITCH_CMD_NEW_ATTR,
+	SWITCH_CMD_LIST_GLOBAL,
+	SWITCH_CMD_GET_GLOBAL,
+	SWITCH_CMD_SET_GLOBAL,
+	SWITCH_CMD_LIST_PORT,
+	SWITCH_CMD_GET_PORT,
+	SWITCH_CMD_SET_PORT,
+	SWITCH_CMD_LIST_VLAN,
+	SWITCH_CMD_GET_VLAN,
+	SWITCH_CMD_SET_VLAN
+};
+
+/* data types */
+enum switch_val_type {
+	SWITCH_TYPE_UNSPEC,
+	SWITCH_TYPE_INT,
+	SWITCH_TYPE_STRING,
+	SWITCH_TYPE_PORTS,
+	SWITCH_TYPE_LINK,
+	SWITCH_TYPE_NOVAL,
+};
+
+/* port nested attributes */
+enum {
+	SWITCH_PORT_UNSPEC,
+	SWITCH_PORT_ID,
+	SWITCH_PORT_FLAG_TAGGED,
+	SWITCH_PORT_ATTR_MAX
+};
+
+/* link nested attributes */
+enum {
+	SWITCH_LINK_UNSPEC,
+	SWITCH_LINK_FLAG_LINK,
+	SWITCH_LINK_FLAG_DUPLEX,
+	SWITCH_LINK_FLAG_ANEG,
+	SWITCH_LINK_FLAG_TX_FLOW,
+	SWITCH_LINK_FLAG_RX_FLOW,
+	SWITCH_LINK_SPEED,
+	SWITCH_LINK_FLAG_EEE_100BASET,
+	SWITCH_LINK_FLAG_EEE_1000BASET,
+	SWITCH_LINK_ATTR_MAX,
+};
+
+#define SWITCH_ATTR_DEFAULTS_OFFSET	0x1000
+
+
+#endif /* _UAPI_LINUX_SWITCH_H */
diff --git a/include/uapi/linux/usb/misc.h b/include/uapi/linux/usb/misc.h
new file mode 100644
index 000000000000..a6661f607fb2
--- /dev/null
+++ b/include/uapi/linux/usb/misc.h
@@ -0,0 +1,14 @@
+/*
+ * USB Miscellaneous Device Class definitions
+ *
+ * Ref: http://www.usb.org/developers/defined_class/#BaseClassEFh
+ */
+
+#ifndef __UAPI_LINUX_USB_MISC_H
+#define __UAPI_LINUX_USB_MISC_H
+
+#define USB_MISC_SUBCLASS_RNDIS			0x04
+
+#define USB_MISC_RNDIS_PROTO_ENET		0x01
+
+#endif /* __UAPI_LINUX_USB_MISC_H */
diff --git a/init/Kconfig b/init/Kconfig
index 11f8a845f259..45bcaa8e7481 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -901,7 +901,7 @@ config NUMA_BALANCING
 	bool "Memory placement aware NUMA scheduler"
 	depends on ARCH_SUPPORTS_NUMA_BALANCING
 	depends on !ARCH_WANT_NUMA_VARIABLE_LOCALITY
-	depends on SMP && NUMA && MIGRATION
+	depends on SMP && NUMA && MIGRATION && !PREEMPT_RT
 	help
 	  This option adds support for automatic NUMA aware memory/task placement.
 	  The mechanism is quite primitive and is based on migrating memory when
@@ -1896,6 +1896,7 @@ choice
 
 config SLAB
 	bool "SLAB"
+	depends on !PREEMPT_RT
 	select HAVE_HARDENED_USERCOPY_ALLOCATOR
 	help
 	  The regular slab allocator that is established and known to work
@@ -1916,6 +1917,7 @@ config SLUB
 config SLOB
 	depends on EXPERT
 	bool "SLOB (Simple Allocator)"
+	depends on !PREEMPT_RT
 	help
 	   SLOB replaces the stock allocator with a drastically simpler
 	   allocator. SLOB is generally more space efficient but
diff --git a/init/main.c b/init/main.c
index bcd132d4e7bd..af4c7f963955 100644
--- a/init/main.c
+++ b/init/main.c
@@ -1604,6 +1604,7 @@ static noinline void __init kernel_init_freeable(void)
 
 	rcu_init_tasks_generic();
 	do_pre_smp_initcalls();
+	rcu_tasks_initiate_self_tests();
 	lockup_detector_init();
 
 	smp_init();
diff --git a/jenkins/Makefile b/jenkins/Makefile
new file mode 100644
index 000000000000..089090e164c6
--- /dev/null
+++ b/jenkins/Makefile
@@ -0,0 +1,201 @@
+# Usage:
+#
+# make -f jenkins/Makefile uImage/<defconfig> LOADADDR=<loadaddr>
+# make -f jenkins/Makefile dtbs/<defconfig>
+#
+# or
+#
+# make -f jenkins/Makefile [all|clean|...] DEFCONFIG=<defconfig> LOADADDR=<loadaddr>
+#
+# CROSS_COMPILE = default empty
+# ARCH = default auto detect using device config
+# VERBOSE = default off
+
+SHELL := /bin/sh
+
+.PHONY: default
+default: all
+
+space := 
+space += 
+
+TOOLCHAIN_PREFIX = 
+CROSS_COMPILE ?= $(TOOLCHAIN_PREFIX)
+ARCH ?= $(firstword $(subst /,$(space),$(DEFCONFIG)))
+
+VERBOSE =
+BUILDDIR = .build
+SRCDIR = .
+PROJECTNAME = $(notdir $(realpath $(SRCDIR)))
+SNAPSHOT_SUFFIX ?= $(addprefix -next.,$(SNAPSHOT))
+
+CONFIGURE_TARGETS  =
+CONFIGURE_TARGETS += $(addprefix $(BUILDDIR),$(defconfigsuffix))
+
+BUILD_TARGETS  =
+BUILD_TARGETS += $(kbuild_buildtargets)
+
+CHECK_TARGETS  =
+
+DIST_TARGETS  = 
+DIST_TARGETS += package_source
+DIST_TARGETS += package_binaries
+
+CLEAN_TARGETS  =
+CLEAN_TARGETS += $(addprefix clean,$(defconfigsuffix))
+
+#INSTALL_TARGETS  =
+#INSTALL_TARGETS += $(addprefix install,$(defconfigsuffix))
+
+########################################################################################################################
+# Internal macros and definitions
+packagesource_excludes  = 
+packagesource_excludes += '.git'
+packagesource_excludes += '.git/*'
+packagesource_excludes += 'jenkins'
+packagesource_excludes += 'jenkins/*'
+packagesource_excludes += '$(BUILDDIR)'
+packagesource_excludes += '$(BUILDDIR)/*'
+
+defconfigdir = $(SRCDIR)/arch
+defconfigfiles = $(shell find $(defconfigdir) -type f -name '*_defconfig')
+defconfigs = $(patsubst $(defconfigdir)/%,%,$(defconfigfiles))
+defconfigsuffix = $(addprefix /,$(filter $(DEFCONFIG),$(defconfigs)))
+
+kbuild_configuretargets  =
+kbuild_configuretargets += $(addprefix $(BUILDDIR)/,$(defconfigs))
+
+kbuild_buildtargets  =
+kbuild_buildtargets += uImage
+kbuild_buildtargets += dtbs
+kbuild_buildtargets += modules
+kbuild_buildtargets += modules_install
+
+kbuild_targets  = $(kbuild_buildtargets)
+kbuild_targets += vmlinux
+kbuild_targets += zImage
+kbuild_targets += clean
+kbuild_targets += image_name
+kbuild_targets += modules_install
+#kbuild_targets += headers_install
+#kbuild_targets += install
+
+# $(call makecmd,outputdir,targets[,makeflags])
+makecmd = INSTALL_MOD_PATH=. $(MAKE) $(MFLAGS) $3 '-C$(SRCDIR)' 'O=$1' $2
+# $(call tgzcmd,outputfile,inputdir[,archive-root][,excludes...][,inputs])
+tgzcmd = tar \
+  -P \
+  -I 'gzip -n' \
+  --sort name \
+  $(addprefix --mtime @,$(SOURCE_DATE_EPOCH)) \
+  --owner 0 \
+  --group 0 \
+  $(addprefix --exclude ,$4) \
+  --transform 's/$(subst /,\/,$(realpath $2))/$(subst /,\/,$(or $3,$(notdir $2)))/' \
+  -cvf \
+  $1 \
+  $(realpath $(or $(wildcard $(addprefix $2/,$5)),$2))
+
+# Force eager evaluation
+defconfigs := $(defconfigs)
+VERSIONSUFFIX := $(VERSIONSUFFIX)
+CROSS_COMPILE := $(CROSS_COMPILE)
+
+ifeq ($(VERBOSE),1)
+  Q =
+else
+  Q = @
+endif
+
+ifeq ($(strip $(MAKE_RESTARTS)),)
+  ifeq ($(strip $(ARCH)),)
+    $(error ARCH='$(ARCH)' invalid)
+  endif
+  ifeq ($(strip $(defconfigsuffix)),)
+    $(info DEFCONFIG='$(DEFCONFIG)' not found)
+  endif
+endif
+
+export ARCH
+export CROSS_COMPILE
+
+########################################################################################################################
+# Rules
+
+-include $(BUILDDIR)/rules.mk
+
+.PHONY: configure all check dist install clean distclean
+
+$(BUILDDIR)/rules.mk: $(defconfigfiles) $(filter-out $(BUILDDIR)/rules.mk,$(MAKEFILE_LIST)) | $(BUILDDIR)
+	@ \
+	{ \
+	  printf '.NOTPARALLEL:\n'; \
+	  $(foreach target,$(kbuild_targets), \
+	    printf '.PHONY: $(target)\n'; \
+	    printf   '$(target) : $$(addprefix $(target),$$(defconfigsuffix))\n'; \
+	    printf   '\n'; \
+	    $(foreach defconfig,$(defconfigs), \
+	      printf '.PHONY: $(target)/$(defconfig)\n'; \
+	      printf '$(target)/$(defconfig): $$(MAKEFILE_LIST) | $$(BUILDDIR)/$(defconfig)\n'; \
+	      printf   '\t+$$(Q)$$(call makecmd,$$(BUILDDIR)/$(defconfig),$(target) $$(MAKEOVERRIDES))\n'; \
+	      printf   '\n'; \
+	    ) \
+	  ) \
+	} > $@
+	@{ \
+	  printf '\n'; \
+	  $(foreach defconfig,$(defconfigs), \
+	    printf '.PHONY: $$(BUILDDIR)/$(defconfig)/linux-modules.tgz\n'; \
+	    printf '$$(BUILDDIR)/$(defconfig)/linux-modules.tgz: $$(BUILDDIR)/$(defconfig)/wago-kernelrelease.txt $(addsuffix /$(defconfig),uImage dtbs) $$(MAKEFILE_LIST) | $$(BUILDDIR)/$(defconfig)\n'; \
+	    printf   '\t$$(Q)$$(call tgzcmd,$$@,$$(BUILDDIR)/$(defconfig)/lib,,$$(packagebinary_excludes),modules) \\\n'; \
+	    printf   '\t  && cp -f $$(abspath $$@) $$(BUILDDIR)/$(defconfig)/linux-modules-"$$$$(cat $$<)"$$(SNAPSHOT_SUFFIX).tgz\n'; \
+	    printf   '\n'; \
+	    printf '.PHONY: $$(BUILDDIR)/$(defconfig)/linux-Source.tgz\n'; \
+	    printf '$$(BUILDDIR)/$(defconfig)/linux-Source.tgz: $$(BUILDDIR)/$(defconfig)/wago-kernelrelease.txt $$(BUILDDIR)/linux-Source.tgz $$(MAKEFILE_LIST) | $$(BUILDDIR)/$(defconfig)\n'; \
+	    printf   '\t$$(Q)cp -f $$(abspath $$(BUILDDIR)/linux-Source.tgz) $$(BUILDDIR)/$(defconfig)/linux-Source-"$$$$(cat $$<)"$$(SNAPSHOT_SUFFIX).tgz\n'; \
+	    printf   '\n'; \
+	    printf '.PHONY: $$(BUILDDIR)/$(defconfig)/wago-kernelrelease.txt\n'; \
+	    printf '$$(BUILDDIR)/$(defconfig)/wago-kernelrelease.txt: $$(MAKEFILE_LIST) | $$(BUILDDIR)/$(defconfig)\n'; \
+	    printf   '\t+$$(Q)$$(call makecmd,$$(BUILDDIR)/$(defconfig),kernelrelease $$(MAKEOVERRIDES),-s) 1>$$@\n'; \
+	    printf   '\n'; \
+	    ) \
+	} >> $@
+
+$(kbuild_configuretargets): $(MAKEFILE_LIST)
+	+$(Q)$(call makecmd,$@,$(notdir $@) $(MAKEOVERRIDES))
+
+.PHONY: $(BUILDDIR)/linux-Source.tgz
+$(BUILDDIR)/linux-Source.tgz: $(SRCDIR) $(MAKEFILE_LIST)
+	$(Q)$(call tgzcmd,$@,$<,$(PROJECTNAME),$(packagesource_excludes))
+
+.PHONY: package_binaries
+package_binaries : $(addsuffix /linux-modules.tgz,$(addprefix $(BUILDDIR),$(defconfigsuffix)))
+
+.PHONY: package_source
+package_source : $(addsuffix /linux-Source.tgz,$(addprefix $(BUILDDIR),$(defconfigsuffix)))
+
+.PHONY: kernelrelease
+kernelrelease : $(addsuffix /wago-kernelrelease.txt,$(addprefix $(BUILDDIR),$(defconfigsuffix)))
+	$(Q)$(addprefix cat ,$<)
+
+configure: $(CONFIGURE_TARGETS)
+
+all: $(BUILD_TARGETS)
+
+check: $(CHECK_TARGETS)
+
+dist: configure $(DIST_TARGETS)
+
+install: $(INSTALL_TARGETS)
+
+clean: $(CLEAN_TARGETS)
+
+distclean:
+	$(Q)-rm -rf $(BUILDDIR)
+
+$(BUILDDIR):
+	$(Q)mkdir -p $@
+
+debug-print-%:
+	@printf '%s:\n' $*; \
+	 printf '%s\n' $($*)
diff --git a/kernel/Kconfig.preempt b/kernel/Kconfig.preempt
index 5876e30c5740..5df0776264c2 100644
--- a/kernel/Kconfig.preempt
+++ b/kernel/Kconfig.preempt
@@ -1,5 +1,11 @@
 # SPDX-License-Identifier: GPL-2.0-only
 
+config HAVE_PREEMPT_LAZY
+	bool
+
+config PREEMPT_LAZY
+	def_bool y if HAVE_PREEMPT_LAZY && PREEMPT_RT
+
 choice
 	prompt "Preemption Model"
 	default PREEMPT_NONE
diff --git a/kernel/cgroup/rstat.c b/kernel/cgroup/rstat.c
index 1486768f2318..bb3b805436c4 100644
--- a/kernel/cgroup/rstat.c
+++ b/kernel/cgroup/rstat.c
@@ -156,8 +156,9 @@ static void cgroup_rstat_flush_locked(struct cgroup *cgrp, bool may_sleep)
 		raw_spinlock_t *cpu_lock = per_cpu_ptr(&cgroup_rstat_cpu_lock,
 						       cpu);
 		struct cgroup *pos = NULL;
+		unsigned long flags;
 
-		raw_spin_lock(cpu_lock);
+		raw_spin_lock_irqsave(cpu_lock, flags);
 		while ((pos = cgroup_rstat_cpu_pop_updated(pos, cgrp, cpu))) {
 			struct cgroup_subsys_state *css;
 
@@ -169,7 +170,7 @@ static void cgroup_rstat_flush_locked(struct cgroup *cgrp, bool may_sleep)
 				css->ss->css_rstat_flush(css, cpu);
 			rcu_read_unlock();
 		}
-		raw_spin_unlock(cpu_lock);
+		raw_spin_unlock_irqrestore(cpu_lock, flags);
 
 		/* if @may_sleep, play nice and yield if necessary */
 		if (may_sleep && (need_resched() ||
diff --git a/kernel/debug/debug_core.c b/kernel/debug/debug_core.c
index da06a5553835..3e39636da842 100644
--- a/kernel/debug/debug_core.c
+++ b/kernel/debug/debug_core.c
@@ -238,35 +238,42 @@ NOKPROBE_SYMBOL(kgdb_call_nmi_hook);
 static DEFINE_PER_CPU(call_single_data_t, kgdb_roundup_csd) =
 	CSD_INIT(kgdb_call_nmi_hook, NULL);
 
-void __weak kgdb_roundup_cpus(void)
+void __weak kgdb_roundup_cpu(unsigned int cpu)
 {
 	call_single_data_t *csd;
+	int ret;
+
+	csd = &per_cpu(kgdb_roundup_csd, cpu);
+
+	/*
+	 * If it didn't round up last time, don't try again
+	 * since smp_call_function_single_async() will block.
+	 *
+	 * If rounding_up is false then we know that the
+	 * previous call must have at least started and that
+	 * means smp_call_function_single_async() won't block.
+	 */
+	if (kgdb_info[cpu].rounding_up)
+		return;
+	kgdb_info[cpu].rounding_up = true;
+
+	ret = smp_call_function_single_async(cpu, csd);
+	if (ret)
+		kgdb_info[cpu].rounding_up = false;
+}
+NOKPROBE_SYMBOL(kgdb_roundup_cpu);
+
+void __weak kgdb_roundup_cpus(void)
+{
 	int this_cpu = raw_smp_processor_id();
 	int cpu;
-	int ret;
 
 	for_each_online_cpu(cpu) {
 		/* No need to roundup ourselves */
 		if (cpu == this_cpu)
 			continue;
 
-		csd = &per_cpu(kgdb_roundup_csd, cpu);
-
-		/*
-		 * If it didn't round up last time, don't try again
-		 * since smp_call_function_single_async() will block.
-		 *
-		 * If rounding_up is false then we know that the
-		 * previous call must have at least started and that
-		 * means smp_call_function_single_async() won't block.
-		 */
-		if (kgdb_info[cpu].rounding_up)
-			continue;
-		kgdb_info[cpu].rounding_up = true;
-
-		ret = smp_call_function_single_async(cpu, csd);
-		if (ret)
-			kgdb_info[cpu].rounding_up = false;
+		kgdb_roundup_cpu(cpu);
 	}
 }
 NOKPROBE_SYMBOL(kgdb_roundup_cpus);
diff --git a/kernel/debug/kdb/kdb_io.c b/kernel/debug/kdb/kdb_io.c
index 6735ac36b718..539a2f0dc89d 100644
--- a/kernel/debug/kdb/kdb_io.c
+++ b/kernel/debug/kdb/kdb_io.c
@@ -559,23 +559,17 @@ static void kdb_msg_write(const char *msg, int msg_len)
 		cp++;
 	}
 
+	/* mirror output on atomic consoles */
 	for_each_console(c) {
 		if (!(c->flags & CON_ENABLED))
 			continue;
 		if (c == dbg_io_ops->cons)
 			continue;
-		/*
-		 * Set oops_in_progress to encourage the console drivers to
-		 * disregard their internal spin locks: in the current calling
-		 * context the risk of deadlock is a bigger problem than risks
-		 * due to re-entering the console driver. We operate directly on
-		 * oops_in_progress rather than using bust_spinlocks() because
-		 * the calls bust_spinlocks() makes on exit are not appropriate
-		 * for this calling context.
-		 */
-		++oops_in_progress;
-		c->write(c, msg, msg_len);
-		--oops_in_progress;
+
+		if (!c->write_atomic)
+			continue;
+		c->write_atomic(c, msg, msg_len);
+
 		touch_nmi_watchdog();
 	}
 }
diff --git a/kernel/entry/common.c b/kernel/entry/common.c
index d5a61d565ad5..a9579f8bf4f0 100644
--- a/kernel/entry/common.c
+++ b/kernel/entry/common.c
@@ -159,9 +159,17 @@ static unsigned long exit_to_user_mode_loop(struct pt_regs *regs,
 
 		local_irq_enable_exit_to_user(ti_work);
 
-		if (ti_work & _TIF_NEED_RESCHED)
+		if (ti_work & _TIF_NEED_RESCHED_MASK)
 			schedule();
 
+#ifdef ARCH_RT_DELAYS_SIGNAL_SEND
+		if (unlikely(current->forced_info.si_signo)) {
+			struct task_struct *t = current;
+			force_sig_info(&t->forced_info);
+			t->forced_info.si_signo = 0;
+		}
+#endif
+
 		if (ti_work & _TIF_UPROBE)
 			uprobe_notify_resume(regs);
 
@@ -387,7 +395,7 @@ void irqentry_exit_cond_resched(void)
 		rcu_irq_exit_check_preempt();
 		if (IS_ENABLED(CONFIG_DEBUG_ENTRY))
 			WARN_ON_ONCE(!on_thread_stack());
-		if (need_resched())
+		if (should_resched(0))
 			preempt_schedule_irq();
 	}
 }
diff --git a/kernel/exit.c b/kernel/exit.c
index 91a43e57a32e..1d099609568d 100644
--- a/kernel/exit.c
+++ b/kernel/exit.c
@@ -64,6 +64,7 @@
 #include <linux/rcuwait.h>
 #include <linux/compat.h>
 #include <linux/io_uring.h>
+#include <linux/kprobes.h>
 
 #include <linux/uaccess.h>
 #include <asm/unistd.h>
@@ -168,8 +169,14 @@ static void delayed_put_task_struct(struct rcu_head *rhp)
 {
 	struct task_struct *tsk = container_of(rhp, struct task_struct, rcu);
 
+	kprobe_flush_task(tsk);
 	perf_event_delayed_put(tsk);
 	trace_sched_process_free(tsk);
+
+	/* RT enabled kernels delay freeing the VMAP'ed task stack */
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		put_task_stack(tsk);
+
 	put_task_struct(tsk);
 }
 
diff --git a/kernel/fork.c b/kernel/fork.c
index 10885c649ca4..61220e98e000 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -289,7 +289,10 @@ static inline void free_thread_stack(struct task_struct *tsk)
 			return;
 		}
 
-		vfree_atomic(tsk->stack);
+		if (!IS_ENABLED(CONFIG_PREEMPT_RT))
+			vfree_atomic(tsk->stack);
+		else
+			vfree(tsk->stack);
 		return;
 	}
 #endif
@@ -705,6 +708,19 @@ void __mmdrop(struct mm_struct *mm)
 }
 EXPORT_SYMBOL_GPL(__mmdrop);
 
+#ifdef CONFIG_PREEMPT_RT
+/*
+ * RCU callback for delayed mm drop. Not strictly RCU, but call_rcu() is
+ * by far the least expensive way to do that.
+ */
+void __mmdrop_delayed(struct rcu_head *rhp)
+{
+	struct mm_struct *mm = container_of(rhp, struct mm_struct, delayed_drop);
+
+	__mmdrop(mm);
+}
+#endif
+
 static void mmdrop_async_fn(struct work_struct *work)
 {
 	struct mm_struct *mm;
@@ -953,6 +969,10 @@ static struct task_struct *dup_task_struct(struct task_struct *orig, int node)
 	tsk->wake_q.next = NULL;
 	tsk->pf_io_worker = NULL;
 
+#ifdef CONFIG_PREEMPT_RT
+	atomic_set(&tsk->xmit_recursion, 0);
+#endif
+
 	account_kernel_stack(tsk, 1);
 
 	kcov_task_init(tsk);
diff --git a/kernel/irq/Makefile b/kernel/irq/Makefile
index b4f53717d143..3a37fae041ee 100644
--- a/kernel/irq/Makefile
+++ b/kernel/irq/Makefile
@@ -18,3 +18,4 @@ obj-$(CONFIG_GENERIC_IRQ_IPI) += ipi.o
 obj-$(CONFIG_SMP) += affinity.o
 obj-$(CONFIG_GENERIC_IRQ_DEBUGFS) += debugfs.o
 obj-$(CONFIG_GENERIC_IRQ_MATRIX_ALLOCATOR) += matrix.o
+obj-$(CONFIG_IRQ_PRIORITY_TABLE) += wsysinit-prio-table.o
diff --git a/kernel/irq/handle.c b/kernel/irq/handle.c
index 221d80c31e94..1543934f26d2 100644
--- a/kernel/irq/handle.c
+++ b/kernel/irq/handle.c
@@ -190,12 +190,18 @@ irqreturn_t __handle_irq_event_percpu(struct irq_desc *desc, unsigned int *flags
 
 irqreturn_t handle_irq_event_percpu(struct irq_desc *desc)
 {
-	irqreturn_t retval;
+	struct pt_regs *regs = get_irq_regs();
+	u64 ip = regs ? instruction_pointer(regs) : 0;
 	unsigned int flags = 0;
+	irqreturn_t retval;
 
 	retval = __handle_irq_event_percpu(desc, &flags);
 
-	add_interrupt_randomness(desc->irq_data.irq, flags);
+#ifdef CONFIG_PREEMPT_RT
+	desc->random_ip = ip;
+#else
+	add_interrupt_randomness(desc->irq_data.irq, flags, ip);
+#endif
 
 	if (!irq_settings_no_debug(desc))
 		note_interrupt(desc, retval);
diff --git a/kernel/irq/manage.c b/kernel/irq/manage.c
index 27667e82ecc9..e525f66da892 100644
--- a/kernel/irq/manage.c
+++ b/kernel/irq/manage.c
@@ -22,6 +22,10 @@
 #include <uapi/linux/sched/types.h>
 #include <linux/task_work.h>
 
+#ifdef CONFIG_IRQ_PRIORITY_TABLE
+#include <linux/wsysinit-prio.h>
+#endif
+
 #include "internals.h"
 
 #if defined(CONFIG_IRQ_FORCED_THREADING) && !defined(CONFIG_PREEMPT_RT)
@@ -1259,6 +1263,23 @@ static int irq_thread(void *data)
 	irqreturn_t (*handler_fn)(struct irq_desc *desc,
 			struct irqaction *action);
 
+	sched_set_fifo(current);
+
+#ifdef CONFIG_IRQ_PRIORITY_TABLE
+	if (action->flags & IRQF_THREAD_TBL_LOOKUP) {
+		int priority = wsysinit_tbl_get_prio_by_name(action->name);
+
+		if (priority > 0) {
+			struct sched_param sp = { .sched_priority = priority };
+
+			if (sp.sched_priority > MAX_RT_PRIO)
+				sp.sched_priority = MAX_RT_PRIO - 1;
+
+			sched_setscheduler_nocheck(current, SCHED_FIFO, &sp);
+		}
+	}
+#endif
+
 	if (force_irqthreads() && test_bit(IRQTF_FORCED_THREAD,
 					   &action->thread_flags))
 		handler_fn = irq_forced_thread_fn;
@@ -1279,6 +1300,12 @@ static int irq_thread(void *data)
 		if (action_ret == IRQ_WAKE_THREAD)
 			irq_wake_secondary(desc, action);
 
+		if (IS_ENABLED(CONFIG_PREEMPT_RT)) {
+			migrate_disable();
+			add_interrupt_randomness(action->irq, 0,
+				 desc->random_ip ^ (unsigned long) action);
+			migrate_enable();
+		}
 		wake_threads_waitq(desc);
 	}
 
@@ -1424,8 +1451,6 @@ setup_irq_thread(struct irqaction *new, unsigned int irq, bool secondary)
 	if (IS_ERR(t))
 		return PTR_ERR(t);
 
-	sched_set_fifo(t);
-
 	/*
 	 * We keep the reference to the task struct even if
 	 * the thread dies to avoid that the interrupt code
@@ -2827,7 +2852,7 @@ EXPORT_SYMBOL_GPL(irq_get_irqchip_state);
  *	This call sets the internal irqchip state of an interrupt,
  *	depending on the value of @which.
  *
- *	This function should be called with preemption disabled if the
+ *	This function should be called with migration disabled if the
  *	interrupt controller has per-cpu registers.
  */
 int irq_set_irqchip_state(unsigned int irq, enum irqchip_irq_state which,
diff --git a/kernel/irq/spurious.c b/kernel/irq/spurious.c
index c481d8458325..02b2daf07441 100644
--- a/kernel/irq/spurious.c
+++ b/kernel/irq/spurious.c
@@ -447,6 +447,10 @@ MODULE_PARM_DESC(noirqdebug, "Disable irq lockup detection when true");
 
 static int __init irqfixup_setup(char *str)
 {
+	if (IS_ENABLED(CONFIG_PREEMPT_RT)) {
+		pr_warn("irqfixup boot option not supported with PREEMPT_RT\n");
+		return 1;
+	}
 	irqfixup = 1;
 	printk(KERN_WARNING "Misrouted IRQ fixup support enabled.\n");
 	printk(KERN_WARNING "This may impact system performance.\n");
@@ -459,6 +463,10 @@ module_param(irqfixup, int, 0644);
 
 static int __init irqpoll_setup(char *str)
 {
+	if (IS_ENABLED(CONFIG_PREEMPT_RT)) {
+		pr_warn("irqpoll boot option not supported with PREEMPT_RT\n");
+		return 1;
+	}
 	irqfixup = 2;
 	printk(KERN_WARNING "Misrouted IRQ fixup and polling support "
 				"enabled\n");
diff --git a/kernel/irq/wsysinit-prio-table.c b/kernel/irq/wsysinit-prio-table.c
new file mode 100644
index 000000000000..6b3bb9d6f506
--- /dev/null
+++ b/kernel/irq/wsysinit-prio-table.c
@@ -0,0 +1,210 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2014 Wago Kontakttechnik GmbH
+ *
+ * Author: Heinrich Toews <heinrich.toews@wago.com>
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/export.h>
+#include <linux/sched.h>
+#include <uapi/linux/sched/types.h>
+
+#include <linux/wsysinit-prio.h>
+
+extern struct device *wsysinit_sysfs_device;
+static struct wsysinit_irq_prio_tbl_entry *tbl_entry;
+
+/* Don't forget:
+ *    You must not change the order of can and kbus, the entries are referenced
+ *    by their index further down below in the module.
+ *    You have to set the IRQF_THREAD_TBL_LOOKUP irq flag during
+ *    a request_irq() registration to enable table lookup.
+ */
+struct wsysinit_irq_prio_tbl_entry wsysinit_irq_prio_tbl[] = {
+	{ "can", 84 },
+	{ "kbus", 86 },
+	{ "spi", 86 },
+	{ "rmd", 82 },
+	{ "UIO_DPC31_XINT", 70 },
+	{ "UIO_DPC31_SYNC", 70 },
+	{ "UIO_DPC31_DXOUT", 70 },
+	{ "RUN", 90 },
+	{ "STOP", 90 },
+	{ "RESET", 90 },
+	{ "RESET_ALL", 90 },
+	{ "uio_alarm_usv", 91 },
+	{ "44e07000", 86 },
+	{ "49054000", 86 },
+	{ NULL, 0 },
+};
+EXPORT_SYMBOL(wsysinit_irq_prio_tbl);
+
+struct wsysinit_irq_prio_tbl_entry *
+wsysinit_tbl_get_entry_by_name(const char *name)
+{
+	struct wsysinit_irq_prio_tbl_entry *entry = NULL;
+	struct wsysinit_irq_prio_tbl_entry *p;
+
+	for (p = &wsysinit_irq_prio_tbl[0]; p->name != NULL; p++) {
+		if (!strcmp(name, p->name)) {
+			entry = p;
+			break;
+		} else if (strstr(name, p->name)) {
+			entry = p;
+		}
+	}
+
+	if (entry)
+		pr_info("matched %s with %s using priority %d\n", entry->name,
+			name, entry->prio);
+	else
+		pr_info("no entry found for %s\n", name);
+
+	return entry;
+}
+EXPORT_SYMBOL(wsysinit_tbl_get_entry_by_name);
+
+int wsysinit_tbl_get_prio_by_name(const char *name)
+{
+	struct wsysinit_irq_prio_tbl_entry *entry;
+
+	entry = wsysinit_tbl_get_entry_by_name(name);
+	if (entry == NULL)
+		return -1;
+
+	return entry->prio;
+}
+EXPORT_SYMBOL(wsysinit_tbl_get_prio_by_name);
+
+void wsysinit_tbl_dump(void)
+{
+	int i;
+
+	pr_info(">>>> PFCxxx IRQ Thread Priority Table:\n");
+	for (i = 0; wsysinit_irq_prio_tbl[i].name != NULL; i++)
+		pr_info("\t%s\t%d\n", wsysinit_irq_prio_tbl[i].name,
+			wsysinit_irq_prio_tbl[i].prio);
+	pr_info("<<<<\n");
+}
+EXPORT_SYMBOL(wsysinit_tbl_dump);
+
+void wsysinit_set_fifo_nocheck(struct task_struct *task)
+{
+	int prio;
+	char comm[TASK_COMM_LEN];
+
+	get_task_comm(comm, task);
+
+	prio = wsysinit_tbl_get_prio_by_name(comm);
+	if (prio != -1) {
+		struct sched_param p = { .sched_priority = prio };
+
+		sched_setscheduler_nocheck(task, SCHED_FIFO, &p);
+	}
+}
+EXPORT_SYMBOL(wsysinit_set_fifo_nocheck);
+
+static ssize_t wsysinit_sysfs_irqprio_show(struct device *dev,
+					   struct device_attribute *attr,
+					   char *buf)
+{
+	if (tbl_entry == NULL)
+		return -1;
+
+	sprintf(buf, "%d\n", tbl_entry->prio);
+	return strlen(buf);
+}
+
+static ssize_t wsysinit_sysfs_irqprio_store(struct device *dev,
+					    struct device_attribute *attr,
+					    const char *buf, size_t count)
+{
+	u32 new_prio;
+
+	if (tbl_entry == NULL)
+		return -1;
+
+	if (kstrtou32(buf, 10, &new_prio))
+		return -EINVAL;
+
+	if (new_prio < 1 || new_prio > 99)
+		return -EINVAL;
+
+	tbl_entry->prio = (int)new_prio;
+
+	pr_info("%s: prio updated to %d\n", tbl_entry->name, tbl_entry->prio);
+
+	return count;
+}
+
+static ssize_t can_irqprio_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	tbl_entry = &wsysinit_irq_prio_tbl[0];
+	return wsysinit_sysfs_irqprio_show(dev, attr, buf);
+}
+
+static ssize_t can_irqprio_store(struct device *dev,
+				 struct device_attribute *attr, const char *buf,
+				 size_t count)
+{
+	tbl_entry = &wsysinit_irq_prio_tbl[0];
+	return wsysinit_sysfs_irqprio_store(dev, attr, buf, count);
+}
+
+static ssize_t kbus_irqprio_show(struct device *dev,
+				 struct device_attribute *attr, char *buf)
+{
+	tbl_entry = &wsysinit_irq_prio_tbl[1];
+	return wsysinit_sysfs_irqprio_show(dev, attr, buf);
+}
+
+static ssize_t kbus_irqprio_store(struct device *dev,
+				  struct device_attribute *attr,
+				  const char *buf, size_t count)
+{
+	tbl_entry = &wsysinit_irq_prio_tbl[1];
+	return wsysinit_sysfs_irqprio_store(dev, attr, buf, count);
+}
+
+static ssize_t dump_irqprio_store(struct device *dev,
+				  struct device_attribute *attr,
+				  const char *buf, size_t count)
+{
+	u32 val;
+
+	if (kstrtou32(buf, 10, &val))
+		return -EINVAL;
+
+	if (val == 1)
+		wsysinit_tbl_dump();
+	else
+		return -EINVAL;
+
+	return count;
+}
+
+DEVICE_ATTR_ADMIN_RW(can_irqprio);
+DEVICE_ATTR_ADMIN_RW(kbus_irqprio);
+DEVICE_ATTR_WO(dump_irqprio);
+
+void wsysinit_tbl_sysfs_init(void)
+{
+	pr_info("%s: create sysfs entries\n", __func__);
+
+	if (device_create_file(wsysinit_sysfs_device, &dev_attr_can_irqprio))
+		pr_err("%s: can0: failed to create sysfs entry!\n", __func__);
+
+	if (device_create_file(wsysinit_sysfs_device, &dev_attr_kbus_irqprio))
+		pr_err("%s: kbus: failed to create sysfs entry!\n", __func__);
+
+	if (device_create_file(wsysinit_sysfs_device, &dev_attr_dump_irqprio))
+		pr_err("%s: failed to create sysfs entry: 'dump_irqprio'!\n",
+		       __func__);
+}
+EXPORT_SYMBOL(wsysinit_tbl_sysfs_init);
diff --git a/kernel/irq_work.c b/kernel/irq_work.c
index db8c248ebc8c..f7df715ec28e 100644
--- a/kernel/irq_work.c
+++ b/kernel/irq_work.c
@@ -18,11 +18,36 @@
 #include <linux/cpu.h>
 #include <linux/notifier.h>
 #include <linux/smp.h>
+#include <linux/smpboot.h>
 #include <asm/processor.h>
 #include <linux/kasan.h>
 
 static DEFINE_PER_CPU(struct llist_head, raised_list);
 static DEFINE_PER_CPU(struct llist_head, lazy_list);
+static DEFINE_PER_CPU(struct task_struct *, irq_workd);
+
+static void wake_irq_workd(void)
+{
+	struct task_struct *tsk = __this_cpu_read(irq_workd);
+
+	if (!llist_empty(this_cpu_ptr(&lazy_list)) && tsk)
+		wake_up_process(tsk);
+}
+
+#ifdef CONFIG_SMP
+static void irq_work_wake(struct irq_work *entry)
+{
+	wake_irq_workd();
+}
+
+static DEFINE_PER_CPU(struct irq_work, irq_work_wakeup) =
+	IRQ_WORK_INIT_HARD(irq_work_wake);
+#endif
+
+static int irq_workd_should_run(unsigned int cpu)
+{
+	return !llist_empty(this_cpu_ptr(&lazy_list));
+}
 
 /*
  * Claim the entry so that no one else will poke at it.
@@ -52,15 +77,29 @@ void __weak arch_irq_work_raise(void)
 /* Enqueue on current CPU, work must already be claimed and preempt disabled */
 static void __irq_work_queue_local(struct irq_work *work)
 {
+	struct llist_head *list;
+	bool rt_lazy_work = false;
+	bool lazy_work = false;
+	int work_flags;
+
+	work_flags = atomic_read(&work->node.a_flags);
+	if (work_flags & IRQ_WORK_LAZY)
+		lazy_work = true;
+	else if (IS_ENABLED(CONFIG_PREEMPT_RT) &&
+		 !(work_flags & IRQ_WORK_HARD_IRQ))
+		rt_lazy_work = true;
+
+	if (lazy_work || rt_lazy_work)
+		list = this_cpu_ptr(&lazy_list);
+	else
+		list = this_cpu_ptr(&raised_list);
+
+	if (!llist_add(&work->node.llist, list))
+		return;
+
 	/* If the work is "lazy", handle it from next tick if any */
-	if (atomic_read(&work->node.a_flags) & IRQ_WORK_LAZY) {
-		if (llist_add(&work->node.llist, this_cpu_ptr(&lazy_list)) &&
-		    tick_nohz_tick_stopped())
-			arch_irq_work_raise();
-	} else {
-		if (llist_add(&work->node.llist, this_cpu_ptr(&raised_list)))
-			arch_irq_work_raise();
-	}
+	if (!lazy_work || tick_nohz_tick_stopped())
+		arch_irq_work_raise();
 }
 
 /* Enqueue the irq work @work on the current CPU */
@@ -104,17 +143,34 @@ bool irq_work_queue_on(struct irq_work *work, int cpu)
 	if (cpu != smp_processor_id()) {
 		/* Arch remote IPI send/receive backend aren't NMI safe */
 		WARN_ON_ONCE(in_nmi());
+
+		/*
+		 * On PREEMPT_RT the items which are not marked as
+		 * IRQ_WORK_HARD_IRQ are added to the lazy list and a HARD work
+		 * item is used on the remote CPU to wake the thread.
+		 */
+		if (IS_ENABLED(CONFIG_PREEMPT_RT) &&
+		    !(atomic_read(&work->node.a_flags) & IRQ_WORK_HARD_IRQ)) {
+
+			if (!llist_add(&work->node.llist, &per_cpu(lazy_list, cpu)))
+				goto out;
+
+			work = &per_cpu(irq_work_wakeup, cpu);
+			if (!irq_work_claim(work))
+				goto out;
+		}
+
 		__smp_call_single_queue(cpu, &work->node.llist);
 	} else {
 		__irq_work_queue_local(work);
 	}
+out:
 	preempt_enable();
 
 	return true;
 #endif /* CONFIG_SMP */
 }
 
-
 bool irq_work_needs_cpu(void)
 {
 	struct llist_head *raised, *lazy;
@@ -160,6 +216,10 @@ void irq_work_single(void *arg)
 	 * else claimed it meanwhile.
 	 */
 	(void)atomic_cmpxchg(&work->node.a_flags, flags, flags & ~IRQ_WORK_BUSY);
+
+	if ((IS_ENABLED(CONFIG_PREEMPT_RT) && !irq_work_is_hard(work)) ||
+	    !arch_irq_work_has_interrupt())
+		rcuwait_wake_up(&work->irqwait);
 }
 
 static void irq_work_run_list(struct llist_head *list)
@@ -167,7 +227,12 @@ static void irq_work_run_list(struct llist_head *list)
 	struct irq_work *work, *tmp;
 	struct llist_node *llnode;
 
-	BUG_ON(!irqs_disabled());
+	/*
+	 * On PREEMPT_RT IRQ-work which is not marked as HARD will be processed
+	 * in a per-CPU thread in preemptible context. Only the items which are
+	 * marked as IRQ_WORK_HARD_IRQ will be processed in hardirq context.
+	 */
+	BUG_ON(!irqs_disabled() && !IS_ENABLED(CONFIG_PREEMPT_RT));
 
 	if (llist_empty(list))
 		return;
@@ -184,7 +249,10 @@ static void irq_work_run_list(struct llist_head *list)
 void irq_work_run(void)
 {
 	irq_work_run_list(this_cpu_ptr(&raised_list));
-	irq_work_run_list(this_cpu_ptr(&lazy_list));
+	if (!IS_ENABLED(CONFIG_PREEMPT_RT))
+		irq_work_run_list(this_cpu_ptr(&lazy_list));
+	else
+		wake_irq_workd();
 }
 EXPORT_SYMBOL_GPL(irq_work_run);
 
@@ -194,7 +262,11 @@ void irq_work_tick(void)
 
 	if (!llist_empty(raised) && !arch_irq_work_has_interrupt())
 		irq_work_run_list(raised);
-	irq_work_run_list(this_cpu_ptr(&lazy_list));
+
+	if (!IS_ENABLED(CONFIG_PREEMPT_RT))
+		irq_work_run_list(this_cpu_ptr(&lazy_list));
+	else
+		wake_irq_workd();
 }
 
 /*
@@ -204,8 +276,42 @@ void irq_work_tick(void)
 void irq_work_sync(struct irq_work *work)
 {
 	lockdep_assert_irqs_enabled();
+	might_sleep();
+
+	if ((IS_ENABLED(CONFIG_PREEMPT_RT) && !irq_work_is_hard(work)) ||
+	    !arch_irq_work_has_interrupt()) {
+		rcuwait_wait_event(&work->irqwait, !irq_work_is_busy(work),
+				   TASK_UNINTERRUPTIBLE);
+		return;
+	}
 
 	while (irq_work_is_busy(work))
 		cpu_relax();
 }
 EXPORT_SYMBOL_GPL(irq_work_sync);
+
+static void run_irq_workd(unsigned int cpu)
+{
+	irq_work_run_list(this_cpu_ptr(&lazy_list));
+}
+
+static void irq_workd_setup(unsigned int cpu)
+{
+	sched_set_fifo_low(current);
+}
+
+static struct smp_hotplug_thread irqwork_threads = {
+	.store                  = &irq_workd,
+	.setup			= irq_workd_setup,
+	.thread_should_run      = irq_workd_should_run,
+	.thread_fn              = run_irq_workd,
+	.thread_comm            = "irq_work/%u",
+};
+
+static __init int irq_work_init_threads(void)
+{
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		BUG_ON(smpboot_register_percpu_thread(&irqwork_threads));
+	return 0;
+}
+early_initcall(irq_work_init_threads);
diff --git a/kernel/kcov.c b/kernel/kcov.c
index 80bfe71bbe13..36ca640c4f8e 100644
--- a/kernel/kcov.c
+++ b/kernel/kcov.c
@@ -88,6 +88,7 @@ static struct list_head kcov_remote_areas = LIST_HEAD_INIT(kcov_remote_areas);
 
 struct kcov_percpu_data {
 	void			*irq_area;
+	local_lock_t		lock;
 
 	unsigned int		saved_mode;
 	unsigned int		saved_size;
@@ -96,7 +97,9 @@ struct kcov_percpu_data {
 	int			saved_sequence;
 };
 
-static DEFINE_PER_CPU(struct kcov_percpu_data, kcov_percpu_data);
+static DEFINE_PER_CPU(struct kcov_percpu_data, kcov_percpu_data) = {
+	.lock = INIT_LOCAL_LOCK(lock),
+};
 
 /* Must be called with kcov_remote_lock locked. */
 static struct kcov_remote *kcov_remote_find(u64 handle)
@@ -824,7 +827,7 @@ void kcov_remote_start(u64 handle)
 	if (!in_task() && !in_serving_softirq())
 		return;
 
-	local_irq_save(flags);
+	local_lock_irqsave(&kcov_percpu_data.lock, flags);
 
 	/*
 	 * Check that kcov_remote_start() is not called twice in background
@@ -832,7 +835,7 @@ void kcov_remote_start(u64 handle)
 	 */
 	mode = READ_ONCE(t->kcov_mode);
 	if (WARN_ON(in_task() && kcov_mode_enabled(mode))) {
-		local_irq_restore(flags);
+		local_unlock_irqrestore(&kcov_percpu_data.lock, flags);
 		return;
 	}
 	/*
@@ -841,14 +844,15 @@ void kcov_remote_start(u64 handle)
 	 * happened while collecting coverage from a background thread.
 	 */
 	if (WARN_ON(in_serving_softirq() && t->kcov_softirq)) {
-		local_irq_restore(flags);
+		local_unlock_irqrestore(&kcov_percpu_data.lock, flags);
 		return;
 	}
 
 	spin_lock(&kcov_remote_lock);
 	remote = kcov_remote_find(handle);
 	if (!remote) {
-		spin_unlock_irqrestore(&kcov_remote_lock, flags);
+		spin_unlock(&kcov_remote_lock);
+		local_unlock_irqrestore(&kcov_percpu_data.lock, flags);
 		return;
 	}
 	kcov_debug("handle = %llx, context: %s\n", handle,
@@ -869,19 +873,19 @@ void kcov_remote_start(u64 handle)
 		size = CONFIG_KCOV_IRQ_AREA_SIZE;
 		area = this_cpu_ptr(&kcov_percpu_data)->irq_area;
 	}
-	spin_unlock_irqrestore(&kcov_remote_lock, flags);
+	spin_unlock(&kcov_remote_lock);
 
 	/* Can only happen when in_task(). */
 	if (!area) {
+		local_unlock_irqrestore(&kcov_percpu_data.lock, flags);
 		area = vmalloc(size * sizeof(unsigned long));
 		if (!area) {
 			kcov_put(kcov);
 			return;
 		}
+		local_lock_irqsave(&kcov_percpu_data.lock, flags);
 	}
 
-	local_irq_save(flags);
-
 	/* Reset coverage size. */
 	*(u64 *)area = 0;
 
@@ -891,7 +895,7 @@ void kcov_remote_start(u64 handle)
 	}
 	kcov_start(t, kcov, size, area, mode, sequence);
 
-	local_irq_restore(flags);
+	local_unlock_irqrestore(&kcov_percpu_data.lock, flags);
 
 }
 EXPORT_SYMBOL(kcov_remote_start);
@@ -965,12 +969,12 @@ void kcov_remote_stop(void)
 	if (!in_task() && !in_serving_softirq())
 		return;
 
-	local_irq_save(flags);
+	local_lock_irqsave(&kcov_percpu_data.lock, flags);
 
 	mode = READ_ONCE(t->kcov_mode);
 	barrier();
 	if (!kcov_mode_enabled(mode)) {
-		local_irq_restore(flags);
+		local_unlock_irqrestore(&kcov_percpu_data.lock, flags);
 		return;
 	}
 	/*
@@ -978,12 +982,12 @@ void kcov_remote_stop(void)
 	 * actually found the remote handle and started collecting coverage.
 	 */
 	if (in_serving_softirq() && !t->kcov_softirq) {
-		local_irq_restore(flags);
+		local_unlock_irqrestore(&kcov_percpu_data.lock, flags);
 		return;
 	}
 	/* Make sure that kcov_softirq is only set when in softirq. */
 	if (WARN_ON(!in_serving_softirq() && t->kcov_softirq)) {
-		local_irq_restore(flags);
+		local_unlock_irqrestore(&kcov_percpu_data.lock, flags);
 		return;
 	}
 
@@ -1013,7 +1017,7 @@ void kcov_remote_stop(void)
 		spin_unlock(&kcov_remote_lock);
 	}
 
-	local_irq_restore(flags);
+	local_unlock_irqrestore(&kcov_percpu_data.lock, flags);
 
 	/* Get in kcov_remote_start(). */
 	kcov_put(kcov);
@@ -1034,8 +1038,8 @@ static int __init kcov_init(void)
 	int cpu;
 
 	for_each_possible_cpu(cpu) {
-		void *area = vmalloc(CONFIG_KCOV_IRQ_AREA_SIZE *
-				sizeof(unsigned long));
+		void *area = vmalloc_node(CONFIG_KCOV_IRQ_AREA_SIZE *
+				sizeof(unsigned long), cpu_to_node(cpu));
 		if (!area)
 			return -ENOMEM;
 		per_cpu_ptr(&kcov_percpu_data, cpu)->irq_area = area;
diff --git a/kernel/kprobes.c b/kernel/kprobes.c
index 2ef90d15699f..2ab883d856b5 100644
--- a/kernel/kprobes.c
+++ b/kernel/kprobes.c
@@ -1250,10 +1250,10 @@ void kprobe_busy_end(void)
 }
 
 /*
- * This function is called from finish_task_switch when task tk becomes dead,
- * so that we can recycle any function-return probe instances associated
- * with this task. These left over instances represent probed functions
- * that have been called but will never return.
+ * This function is called from delayed_put_task_struct() when a task is
+ * dead and cleaned up to recycle any function-return probe instances
+ * associated with this task. These left over instances represent probed
+ * functions that have been called but will never return.
  */
 void kprobe_flush_task(struct task_struct *tk)
 {
diff --git a/kernel/ksysfs.c b/kernel/ksysfs.c
index 35859da8bd4f..dfff31ed644a 100644
--- a/kernel/ksysfs.c
+++ b/kernel/ksysfs.c
@@ -138,6 +138,15 @@ KERNEL_ATTR_RO(vmcoreinfo);
 
 #endif /* CONFIG_CRASH_CORE */
 
+#if defined(CONFIG_PREEMPT_RT)
+static ssize_t realtime_show(struct kobject *kobj,
+			     struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%d\n", 1);
+}
+KERNEL_ATTR_RO(realtime);
+#endif
+
 /* whether file capabilities are enabled */
 static ssize_t fscaps_show(struct kobject *kobj,
 				  struct kobj_attribute *attr, char *buf)
@@ -228,6 +237,9 @@ static struct attribute * kernel_attrs[] = {
 #ifndef CONFIG_TINY_RCU
 	&rcu_expedited_attr.attr,
 	&rcu_normal_attr.attr,
+#endif
+#ifdef CONFIG_PREEMPT_RT
+	&realtime_attr.attr,
 #endif
 	NULL
 };
diff --git a/kernel/kthread.c b/kernel/kthread.c
index 5b37a8567168..4a4d7092a2d8 100644
--- a/kernel/kthread.c
+++ b/kernel/kthread.c
@@ -270,6 +270,7 @@ EXPORT_SYMBOL_GPL(kthread_parkme);
 
 static int kthread(void *_create)
 {
+	static const struct sched_param param = { .sched_priority = 0 };
 	/* Copy data: it's on kthread's stack */
 	struct kthread_create_info *create = _create;
 	int (*threadfn)(void *data) = create->threadfn;
@@ -300,6 +301,13 @@ static int kthread(void *_create)
 	init_completion(&self->parked);
 	current->vfork_done = &self->exited;
 
+	/*
+	 * The new thread inherited kthreadd's priority and CPU mask. Reset
+	 * back to default in case they have been changed.
+	 */
+	sched_setscheduler_nocheck(current, SCHED_NORMAL, &param);
+	set_cpus_allowed_ptr(current, housekeeping_cpumask(HK_FLAG_KTHREAD));
+
 	/* OK, tell user we're spawned, wait for stop or wakeup */
 	__set_current_state(TASK_UNINTERRUPTIBLE);
 	create->result = current;
@@ -397,7 +405,6 @@ struct task_struct *__kthread_create_on_node(int (*threadfn)(void *data),
 	}
 	task = create->result;
 	if (!IS_ERR(task)) {
-		static const struct sched_param param = { .sched_priority = 0 };
 		char name[TASK_COMM_LEN];
 
 		/*
@@ -406,13 +413,6 @@ struct task_struct *__kthread_create_on_node(int (*threadfn)(void *data),
 		 */
 		vsnprintf(name, sizeof(name), namefmt, args);
 		set_task_comm(task, name);
-		/*
-		 * root may have changed our (kthreadd's) priority or CPU mask.
-		 * The kernel thread should not inherit these properties.
-		 */
-		sched_setscheduler_nocheck(task, SCHED_NORMAL, &param);
-		set_cpus_allowed_ptr(task,
-				     housekeeping_cpumask(HK_FLAG_KTHREAD));
 	}
 	kfree(create);
 	return task;
diff --git a/kernel/locking/lockdep.c b/kernel/locking/lockdep.c
index d624231eab2b..823624b80b45 100644
--- a/kernel/locking/lockdep.c
+++ b/kernel/locking/lockdep.c
@@ -5473,6 +5473,7 @@ static noinstr void check_flags(unsigned long flags)
 		}
 	}
 
+#ifndef CONFIG_PREEMPT_RT
 	/*
 	 * We dont accurately track softirq state in e.g.
 	 * hardirq contexts (such as on 4KSTACKS), so only
@@ -5487,6 +5488,7 @@ static noinstr void check_flags(unsigned long flags)
 			DEBUG_LOCKS_WARN_ON(!current->softirqs_enabled);
 		}
 	}
+#endif
 
 	if (!debug_locks)
 		print_irqtrace_events(current);
diff --git a/kernel/locking/rtmutex.c b/kernel/locking/rtmutex.c
index ea5a701ab240..547752d1e9c0 100644
--- a/kernel/locking/rtmutex.c
+++ b/kernel/locking/rtmutex.c
@@ -1097,8 +1097,26 @@ static int __sched task_blocks_on_rt_mutex(struct rt_mutex_base *lock,
 	 * which is wrong, as the other waiter is not in a deadlock
 	 * situation.
 	 */
-	if (owner == task)
+	if (owner == task) {
+#if defined(DEBUG_WW_MUTEXES) && defined(CONFIG_DEBUG_LOCKING_API_SELFTESTS)
+		/*
+		 * The lockdep selftest for ww-mutex assumes in a few cases
+		 * the ww_ctx->contending_lock assignment via
+		 * __ww_mutex_check_kill() which does not happen if the rtmutex
+		 * detects the deadlock early.
+		 */
+		if (build_ww_mutex() && ww_ctx) {
+			struct rt_mutex *rtm;
+
+			/* Check whether the waiter should backout immediately */
+			rtm = container_of(lock, struct rt_mutex, rtmutex);
+
+			__ww_mutex_add_waiter(waiter, rtm, ww_ctx);
+			__ww_mutex_check_kill(rtm, waiter, ww_ctx);
+		}
+#endif
 		return -EDEADLK;
+	}
 
 	raw_spin_lock(&task->pi_lock);
 	waiter->task = task;
diff --git a/kernel/locking/rtmutex_api.c b/kernel/locking/rtmutex_api.c
index 5c9299aaabae..900220941caa 100644
--- a/kernel/locking/rtmutex_api.c
+++ b/kernel/locking/rtmutex_api.c
@@ -21,12 +21,13 @@ int max_lock_depth = 1024;
  */
 static __always_inline int __rt_mutex_lock_common(struct rt_mutex *lock,
 						  unsigned int state,
+						  struct lockdep_map *nest_lock,
 						  unsigned int subclass)
 {
 	int ret;
 
 	might_sleep();
-	mutex_acquire(&lock->dep_map, subclass, 0, _RET_IP_);
+	mutex_acquire_nest(&lock->dep_map, subclass, 0, nest_lock, _RET_IP_);
 	ret = __rt_mutex_lock(&lock->rtmutex, state);
 	if (ret)
 		mutex_release(&lock->dep_map, _RET_IP_);
@@ -48,10 +49,16 @@ EXPORT_SYMBOL(rt_mutex_base_init);
  */
 void __sched rt_mutex_lock_nested(struct rt_mutex *lock, unsigned int subclass)
 {
-	__rt_mutex_lock_common(lock, TASK_UNINTERRUPTIBLE, subclass);
+	__rt_mutex_lock_common(lock, TASK_UNINTERRUPTIBLE, NULL, subclass);
 }
 EXPORT_SYMBOL_GPL(rt_mutex_lock_nested);
 
+void __sched _rt_mutex_lock_nest_lock(struct rt_mutex *lock, struct lockdep_map *nest_lock)
+{
+	__rt_mutex_lock_common(lock, TASK_UNINTERRUPTIBLE, nest_lock, 0);
+}
+EXPORT_SYMBOL_GPL(_rt_mutex_lock_nest_lock);
+
 #else /* !CONFIG_DEBUG_LOCK_ALLOC */
 
 /**
@@ -61,7 +68,7 @@ EXPORT_SYMBOL_GPL(rt_mutex_lock_nested);
  */
 void __sched rt_mutex_lock(struct rt_mutex *lock)
 {
-	__rt_mutex_lock_common(lock, TASK_UNINTERRUPTIBLE, 0);
+	__rt_mutex_lock_common(lock, TASK_UNINTERRUPTIBLE, NULL, 0);
 }
 EXPORT_SYMBOL_GPL(rt_mutex_lock);
 #endif
@@ -77,10 +84,25 @@ EXPORT_SYMBOL_GPL(rt_mutex_lock);
  */
 int __sched rt_mutex_lock_interruptible(struct rt_mutex *lock)
 {
-	return __rt_mutex_lock_common(lock, TASK_INTERRUPTIBLE, 0);
+	return __rt_mutex_lock_common(lock, TASK_INTERRUPTIBLE, NULL, 0);
 }
 EXPORT_SYMBOL_GPL(rt_mutex_lock_interruptible);
 
+/**
+ * rt_mutex_lock_killable - lock a rt_mutex killable
+ *
+ * @lock:		the rt_mutex to be locked
+ *
+ * Returns:
+ *  0		on success
+ * -EINTR	when interrupted by a signal
+ */
+int __sched rt_mutex_lock_killable(struct rt_mutex *lock)
+{
+	return __rt_mutex_lock_common(lock, TASK_KILLABLE, NULL, 0);
+}
+EXPORT_SYMBOL_GPL(rt_mutex_lock_killable);
+
 /**
  * rt_mutex_trylock - try to lock a rt_mutex
  *
diff --git a/kernel/locking/spinlock_rt.c b/kernel/locking/spinlock_rt.c
index d2912e44d61f..9e396a09fe0f 100644
--- a/kernel/locking/spinlock_rt.c
+++ b/kernel/locking/spinlock_rt.c
@@ -24,6 +24,17 @@
 #define RT_MUTEX_BUILD_SPINLOCKS
 #include "rtmutex.c"
 
+/*
+ * __might_resched() skips the state check as rtlocks are state
+ * preserving. Take RCU nesting into account as spin/read/write_lock() can
+ * legitimately nest into an RCU read side critical section.
+ */
+#define RTLOCK_RESCHED_OFFSETS						\
+	(rcu_preempt_depth() << MIGHT_RESCHED_RCU_SHIFT)
+
+#define rtlock_might_resched()						\
+	__might_resched(__FILE__, __LINE__, RTLOCK_RESCHED_OFFSETS)
+
 static __always_inline void rtlock_lock(struct rt_mutex_base *rtm)
 {
 	if (unlikely(!rt_mutex_cmpxchg_acquire(rtm, NULL, current)))
@@ -32,7 +43,7 @@ static __always_inline void rtlock_lock(struct rt_mutex_base *rtm)
 
 static __always_inline void __rt_spin_lock(spinlock_t *lock)
 {
-	___might_sleep(__FILE__, __LINE__, 0);
+	rtlock_might_resched();
 	rtlock_lock(&lock->lock);
 	rcu_read_lock();
 	migrate_disable();
@@ -210,7 +221,7 @@ EXPORT_SYMBOL(rt_write_trylock);
 
 void __sched rt_read_lock(rwlock_t *rwlock)
 {
-	___might_sleep(__FILE__, __LINE__, 0);
+	rtlock_might_resched();
 	rwlock_acquire_read(&rwlock->dep_map, 0, 0, _RET_IP_);
 	rwbase_read_lock(&rwlock->rwbase, TASK_RTLOCK_WAIT);
 	rcu_read_lock();
@@ -220,7 +231,7 @@ EXPORT_SYMBOL(rt_read_lock);
 
 void __sched rt_write_lock(rwlock_t *rwlock)
 {
-	___might_sleep(__FILE__, __LINE__, 0);
+	rtlock_might_resched();
 	rwlock_acquire(&rwlock->dep_map, 0, 0, _RET_IP_);
 	rwbase_write_lock(&rwlock->rwbase, TASK_RTLOCK_WAIT);
 	rcu_read_lock();
@@ -246,12 +257,6 @@ void __sched rt_write_unlock(rwlock_t *rwlock)
 }
 EXPORT_SYMBOL(rt_write_unlock);
 
-int __sched rt_rwlock_is_contended(rwlock_t *rwlock)
-{
-	return rw_base_is_contended(&rwlock->rwbase);
-}
-EXPORT_SYMBOL(rt_rwlock_is_contended);
-
 #ifdef CONFIG_DEBUG_LOCK_ALLOC
 void __rt_rwlock_init(rwlock_t *rwlock, const char *name,
 		      struct lock_class_key *key)
diff --git a/kernel/panic.c b/kernel/panic.c
index cefd7d82366f..d509c0694af9 100644
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@ -178,12 +178,28 @@ static void panic_print_sys_info(void)
 void panic(const char *fmt, ...)
 {
 	static char buf[1024];
+	va_list args2;
 	va_list args;
 	long i, i_next = 0, len;
 	int state = 0;
 	int old_cpu, this_cpu;
 	bool _crash_kexec_post_notifiers = crash_kexec_post_notifiers;
 
+	console_verbose();
+	pr_emerg("Kernel panic - not syncing:\n");
+	va_start(args2, fmt);
+	va_copy(args, args2);
+	vprintk(fmt, args2);
+	va_end(args2);
+#ifdef CONFIG_DEBUG_BUGVERBOSE
+	/*
+	 * Avoid nested stack-dumping if a panic occurs during oops processing
+	 */
+	if (!test_taint(TAINT_DIE) && oops_in_progress <= 1)
+		dump_stack();
+#endif
+	pr_flush(1000, true);
+
 	/*
 	 * Disable local interrupts. This will prevent panic_smp_self_stop
 	 * from deadlocking the first cpu that invokes the panic, since
@@ -214,24 +230,13 @@ void panic(const char *fmt, ...)
 	if (old_cpu != PANIC_CPU_INVALID && old_cpu != this_cpu)
 		panic_smp_self_stop();
 
-	console_verbose();
 	bust_spinlocks(1);
-	va_start(args, fmt);
 	len = vscnprintf(buf, sizeof(buf), fmt, args);
 	va_end(args);
 
 	if (len && buf[len - 1] == '\n')
 		buf[len - 1] = '\0';
 
-	pr_emerg("Kernel panic - not syncing: %s\n", buf);
-#ifdef CONFIG_DEBUG_BUGVERBOSE
-	/*
-	 * Avoid nested stack-dumping if a panic occurs during oops processing
-	 */
-	if (!test_taint(TAINT_DIE) && oops_in_progress <= 1)
-		dump_stack();
-#endif
-
 	/*
 	 * If kgdb is enabled, give it a chance to run before we stop all
 	 * the other CPUs or else we won't be able to debug processes left
@@ -540,9 +545,11 @@ static u64 oops_id;
 
 static int init_oops_id(void)
 {
+#ifndef CONFIG_PREEMPT_RT
 	if (!oops_id)
 		get_random_bytes(&oops_id, sizeof(oops_id));
 	else
+#endif
 		oops_id++;
 
 	return 0;
@@ -553,6 +560,7 @@ static void print_oops_end_marker(void)
 {
 	init_oops_id();
 	pr_warn("---[ end trace %016llx ]---\n", (unsigned long long)oops_id);
+	pr_flush(1000, true);
 }
 
 /*
diff --git a/kernel/power/main.c b/kernel/power/main.c
index 44169f3081fd..eaa725ca079c 100644
--- a/kernel/power/main.c
+++ b/kernel/power/main.c
@@ -543,14 +543,13 @@ static int __init pm_debug_messages_setup(char *str)
 __setup("pm_debug_messages", pm_debug_messages_setup);
 
 /**
- * __pm_pr_dbg - Print a suspend debug message to the kernel log.
- * @defer: Whether or not to use printk_deferred() to print the message.
+ * pm_pr_dbg - Print a suspend debug message to the kernel log.
  * @fmt: Message format.
  *
  * The message will be emitted if enabled through the pm_debug_messages
  * sysfs attribute.
  */
-void __pm_pr_dbg(bool defer, const char *fmt, ...)
+void pm_pr_dbg(const char *fmt, ...)
 {
 	struct va_format vaf;
 	va_list args;
@@ -563,10 +562,7 @@ void __pm_pr_dbg(bool defer, const char *fmt, ...)
 	vaf.fmt = fmt;
 	vaf.va = &args;
 
-	if (defer)
-		printk_deferred(KERN_DEBUG "PM: %pV", &vaf);
-	else
-		printk(KERN_DEBUG "PM: %pV", &vaf);
+	printk(KERN_DEBUG "PM: %pV", &vaf);
 
 	va_end(args);
 }
diff --git a/kernel/printk/Makefile b/kernel/printk/Makefile
index d118739874c0..bc6b856a0ff4 100644
--- a/kernel/printk/Makefile
+++ b/kernel/printk/Makefile
@@ -1,6 +1,5 @@
 # SPDX-License-Identifier: GPL-2.0-only
 obj-y	= printk.o
-obj-$(CONFIG_PRINTK)	+= printk_safe.o
 obj-$(CONFIG_A11Y_BRAILLE_CONSOLE)	+= braille.o
 obj-$(CONFIG_PRINTK)	+= printk_ringbuffer.o
 obj-$(CONFIG_PRINTK_INDEX)	+= index.o
diff --git a/kernel/printk/internal.h b/kernel/printk/internal.h
index 9f3ed2fdb721..de8ab059dd96 100644
--- a/kernel/printk/internal.h
+++ b/kernel/printk/internal.h
@@ -2,7 +2,6 @@
 /*
  * internal.h - printk internal definitions
  */
-#include <linux/percpu.h>
 
 #ifdef CONFIG_PRINTK
 
@@ -12,41 +11,6 @@ enum printk_info_flags {
 	LOG_CONT	= 8,	/* text is a fragment of a continuation line */
 };
 
-__printf(4, 0)
-int vprintk_store(int facility, int level,
-		  const struct dev_printk_info *dev_info,
-		  const char *fmt, va_list args);
-
-__printf(1, 0) int vprintk_default(const char *fmt, va_list args);
-__printf(1, 0) int vprintk_deferred(const char *fmt, va_list args);
-
-bool printk_percpu_data_ready(void);
-
-#define printk_safe_enter_irqsave(flags)	\
-	do {					\
-		local_irq_save(flags);		\
-		__printk_safe_enter();		\
-	} while (0)
-
-#define printk_safe_exit_irqrestore(flags)	\
-	do {					\
-		__printk_safe_exit();		\
-		local_irq_restore(flags);	\
-	} while (0)
-
-void defer_console_output(void);
-
 u16 printk_parse_prefix(const char *text, int *level,
 			enum printk_info_flags *flags);
-#else
-
-/*
- * In !PRINTK builds we still export console_sem
- * semaphore and some of console functions (console_unlock()/etc.), so
- * printk-safe must preserve the existing local IRQ guarantees.
- */
-#define printk_safe_enter_irqsave(flags) local_irq_save(flags)
-#define printk_safe_exit_irqrestore(flags) local_irq_restore(flags)
-
-static inline bool printk_percpu_data_ready(void) { return false; }
 #endif /* CONFIG_PRINTK */
diff --git a/kernel/printk/printk.c b/kernel/printk/printk.c
index 99221b016c68..0cc8e8acf545 100644
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -44,6 +44,10 @@
 #include <linux/irq_work.h>
 #include <linux/ctype.h>
 #include <linux/uio.h>
+#include <linux/kdb.h>
+#include <linux/kgdb.h>
+#include <linux/kthread.h>
+#include <linux/clocksource.h>
 #include <linux/sched/clock.h>
 #include <linux/sched/debug.h>
 #include <linux/sched/task_stack.h>
@@ -225,19 +229,7 @@ static int nr_ext_console_drivers;
 
 static int __down_trylock_console_sem(unsigned long ip)
 {
-	int lock_failed;
-	unsigned long flags;
-
-	/*
-	 * Here and in __up_console_sem() we need to be in safe mode,
-	 * because spindump/WARN/etc from under console ->lock will
-	 * deadlock in printk()->down_trylock_console_sem() otherwise.
-	 */
-	printk_safe_enter_irqsave(flags);
-	lock_failed = down_trylock(&console_sem);
-	printk_safe_exit_irqrestore(flags);
-
-	if (lock_failed)
+	if (down_trylock(&console_sem))
 		return 1;
 	mutex_acquire(&console_lock_dep_map, 0, 1, ip);
 	return 0;
@@ -246,13 +238,9 @@ static int __down_trylock_console_sem(unsigned long ip)
 
 static void __up_console_sem(unsigned long ip)
 {
-	unsigned long flags;
-
 	mutex_release(&console_lock_dep_map, ip);
 
-	printk_safe_enter_irqsave(flags);
 	up(&console_sem);
-	printk_safe_exit_irqrestore(flags);
 }
 #define up_console_sem() __up_console_sem(_RET_IP_)
 
@@ -266,11 +254,6 @@ static void __up_console_sem(unsigned long ip)
  */
 static int console_locked, console_suspended;
 
-/*
- * If exclusive_console is non-NULL then only this console is to be printed to.
- */
-static struct console *exclusive_console;
-
 /*
  *	Array of consoles built from command line options (console=)
  */
@@ -350,10 +333,13 @@ static int console_msg_format = MSG_FORMAT_DEFAULT;
  * non-prinatable characters are escaped in the "\xff" notation.
  */
 
+#ifdef CONFIG_PRINTK
 /* syslog_lock protects syslog_* variables and write access to clear_seq. */
 static DEFINE_MUTEX(syslog_lock);
 
-#ifdef CONFIG_PRINTK
+/* Set to enable sync mode. Once set, it is never cleared. */
+static bool sync_mode;
+
 DECLARE_WAIT_QUEUE_HEAD(log_wait);
 /* All 3 protected by @syslog_lock. */
 /* the next printk record to read by syslog(READ) or /proc/kmsg */
@@ -361,17 +347,6 @@ static u64 syslog_seq;
 static size_t syslog_partial;
 static bool syslog_time;
 
-/* All 3 protected by @console_sem. */
-/* the next printk record to write to the console */
-static u64 console_seq;
-static u64 exclusive_console_stop_seq;
-static unsigned long console_dropped;
-
-struct latched_seq {
-	seqcount_latch_t	latch;
-	u64			val[2];
-};
-
 /*
  * The next printk record to read after the last 'clear' command. There are
  * two copies (updated with seqcount_latch) so that reads can locklessly
@@ -389,9 +364,6 @@ static struct latched_seq clear_seq = {
 #define PREFIX_MAX		32
 #endif
 
-/* the maximum size of a formatted record (i.e. with prefix added per line) */
-#define CONSOLE_LOG_MAX		1024
-
 /* the maximum size allowed to be reserved for a record */
 #define LOG_LINE_MAX		(CONSOLE_LOG_MAX - PREFIX_MAX)
 
@@ -430,12 +402,12 @@ static struct printk_ringbuffer *prb = &printk_rb_static;
  */
 static bool __printk_percpu_data_ready __read_mostly;
 
-bool printk_percpu_data_ready(void)
+static bool printk_percpu_data_ready(void)
 {
 	return __printk_percpu_data_ready;
 }
 
-/* Must be called under syslog_lock. */
+/* Must be called under associated write-protection lock. */
 static void latched_seq_write(struct latched_seq *ls, u64 val)
 {
 	raw_write_seqcount_latch(&ls->latch);
@@ -1747,188 +1719,152 @@ SYSCALL_DEFINE3(syslog, int, type, char __user *, buf, int, len)
 	return do_syslog(type, buf, len, SYSLOG_FROM_READER);
 }
 
-/*
- * Special console_lock variants that help to reduce the risk of soft-lockups.
- * They allow to pass console_lock to another printk() call using a busy wait.
- */
+int printk_delay_msec __read_mostly;
 
-#ifdef CONFIG_LOCKDEP
-static struct lockdep_map console_owner_dep_map = {
-	.name = "console_owner"
-};
-#endif
+static inline void printk_delay(int level)
+{
+	boot_delay_msec(level);
 
-static DEFINE_RAW_SPINLOCK(console_owner_lock);
-static struct task_struct *console_owner;
-static bool console_waiter;
+	if (unlikely(printk_delay_msec)) {
+		int m = printk_delay_msec;
 
-/**
- * console_lock_spinning_enable - mark beginning of code where another
- *	thread might safely busy wait
- *
- * This basically converts console_lock into a spinlock. This marks
- * the section where the console_lock owner can not sleep, because
- * there may be a waiter spinning (like a spinlock). Also it must be
- * ready to hand over the lock at the end of the section.
- */
-static void console_lock_spinning_enable(void)
+		while (m--) {
+			mdelay(1);
+			touch_nmi_watchdog();
+		}
+	}
+}
+
+static bool kernel_sync_mode(void)
 {
-	raw_spin_lock(&console_owner_lock);
-	console_owner = current;
-	raw_spin_unlock(&console_owner_lock);
+	return (oops_in_progress || sync_mode);
+}
 
-	/* The waiter may spin on us after setting console_owner */
-	spin_acquire(&console_owner_dep_map, 0, 0, _THIS_IP_);
+static bool console_may_sync(struct console *con)
+{
+	if (!(con->flags & CON_ENABLED))
+		return false;
+	if (con->write_atomic && kernel_sync_mode())
+		return true;
+	if (con->write_atomic && (con->flags & CON_HANDOVER) && !con->thread)
+		return true;
+	if (con->write && (con->flags & CON_BOOT) && !con->thread)
+		return true;
+	return false;
 }
 
-/**
- * console_lock_spinning_disable_and_check - mark end of code where another
- *	thread was able to busy wait and check if there is a waiter
- *
- * This is called at the end of the section where spinning is allowed.
- * It has two functions. First, it is a signal that it is no longer
- * safe to start busy waiting for the lock. Second, it checks if
- * there is a busy waiter and passes the lock rights to her.
- *
- * Important: Callers lose the lock if there was a busy waiter.
- *	They must not touch items synchronized by console_lock
- *	in this case.
- *
- * Return: 1 if the lock rights were passed, 0 otherwise.
- */
-static int console_lock_spinning_disable_and_check(void)
+static bool call_sync_console_driver(struct console *con, const char *text, size_t text_len)
 {
-	int waiter;
+	if (!(con->flags & CON_ENABLED))
+		return false;
 
-	raw_spin_lock(&console_owner_lock);
-	waiter = READ_ONCE(console_waiter);
-	console_owner = NULL;
-	raw_spin_unlock(&console_owner_lock);
+	if (con->write_atomic && kernel_sync_mode()) {
+		con->write_atomic(con, text, text_len);
+		return true;
+	}
 
-	if (!waiter) {
-		spin_release(&console_owner_dep_map, _THIS_IP_);
-		return 0;
+	if (con->write_atomic && (con->flags & CON_HANDOVER) && !con->thread) {
+		if (console_trylock()) {
+			con->write_atomic(con, text, text_len);
+			console_unlock();
+			return true;
+		}
+
+	} else if (con->write && (con->flags & CON_BOOT) && !con->thread) {
+		if (console_trylock()) {
+			con->write(con, text, text_len);
+			console_unlock();
+			return true;
+		}
 	}
 
-	/* The waiter is now free to continue */
-	WRITE_ONCE(console_waiter, false);
+	return false;
+}
 
-	spin_release(&console_owner_dep_map, _THIS_IP_);
+static bool have_atomic_console(void)
+{
+	struct console *con;
 
-	/*
-	 * Hand off console_lock to waiter. The waiter will perform
-	 * the up(). After this, the waiter is the console_lock owner.
-	 */
-	mutex_release(&console_lock_dep_map, _THIS_IP_);
-	return 1;
+	for_each_console(con) {
+		if (!(con->flags & CON_ENABLED))
+			continue;
+		if (con->write_atomic)
+			return true;
+	}
+	return false;
 }
 
-/**
- * console_trylock_spinning - try to get console_lock by busy waiting
- *
- * This allows to busy wait for the console_lock when the current
- * owner is running in specially marked sections. It means that
- * the current owner is running and cannot reschedule until it
- * is ready to lose the lock.
- *
- * Return: 1 if we got the lock, 0 othrewise
- */
-static int console_trylock_spinning(void)
+static bool print_sync(struct console *con, u64 *seq)
 {
-	struct task_struct *owner = NULL;
-	bool waiter;
-	bool spin = false;
-	unsigned long flags;
+	struct printk_info info;
+	struct printk_record r;
+	size_t text_len;
 
-	if (console_trylock())
-		return 1;
+	prb_rec_init_rd(&r, &info, &con->sync_buf[0], sizeof(con->sync_buf));
 
-	printk_safe_enter_irqsave(flags);
+	if (!prb_read_valid(prb, *seq, &r))
+		return false;
 
-	raw_spin_lock(&console_owner_lock);
-	owner = READ_ONCE(console_owner);
-	waiter = READ_ONCE(console_waiter);
-	if (!waiter && owner && owner != current) {
-		WRITE_ONCE(console_waiter, true);
-		spin = true;
-	}
-	raw_spin_unlock(&console_owner_lock);
+	text_len = record_print_text(&r, console_msg_format & MSG_FORMAT_SYSLOG, printk_time);
 
-	/*
-	 * If there is an active printk() writing to the
-	 * consoles, instead of having it write our data too,
-	 * see if we can offload that load from the active
-	 * printer, and do some printing ourselves.
-	 * Go into a spin only if there isn't already a waiter
-	 * spinning, and there is an active printer, and
-	 * that active printer isn't us (recursive printk?).
-	 */
-	if (!spin) {
-		printk_safe_exit_irqrestore(flags);
-		return 0;
-	}
+	if (!call_sync_console_driver(con, &con->sync_buf[0], text_len))
+		return false;
 
-	/* We spin waiting for the owner to release us */
-	spin_acquire(&console_owner_dep_map, 0, 0, _THIS_IP_);
-	/* Owner will clear console_waiter on hand off */
-	while (READ_ONCE(console_waiter))
-		cpu_relax();
-	spin_release(&console_owner_dep_map, _THIS_IP_);
+	*seq = r.info->seq;
 
-	printk_safe_exit_irqrestore(flags);
-	/*
-	 * The owner passed the console lock to us.
-	 * Since we did not spin on console lock, annotate
-	 * this as a trylock. Otherwise lockdep will
-	 * complain.
-	 */
-	mutex_acquire(&console_lock_dep_map, 0, 1, _THIS_IP_);
+	touch_softlockup_watchdog_sync();
+	clocksource_touch_watchdog();
+	rcu_cpu_stall_reset();
+	touch_nmi_watchdog();
 
-	return 1;
+	if (text_len)
+		printk_delay(r.info->level);
+
+	return true;
 }
 
-/*
- * Call the console drivers, asking them to write out
- * log_buf[start] to log_buf[end - 1].
- * The console_lock must be held.
- */
-static void call_console_drivers(const char *ext_text, size_t ext_len,
-				 const char *text, size_t len)
+static u64 read_console_seq(struct console *con)
 {
-	static char dropped_text[64];
-	size_t dropped_len = 0;
-	struct console *con;
+	u64 seq2;
+	u64 seq;
 
-	trace_console_rcuidle(text, len);
+	seq = latched_seq_read_nolock(&con->printk_seq);
+	seq2 = latched_seq_read_nolock(&con->printk_sync_seq);
+	if (seq2 > seq)
+		seq = seq2;
+#ifdef CONFIG_HAVE_NMI
+	seq2 = latched_seq_read_nolock(&con->printk_sync_nmi_seq);
+	if (seq2 > seq)
+		seq = seq2;
+#endif
+	return seq;
+}
 
-	if (!console_drivers)
-		return;
+static void print_sync_until(struct console *con, u64 seq, bool is_locked)
+{
+	u64 printk_seq;
 
-	if (console_dropped) {
-		dropped_len = snprintf(dropped_text, sizeof(dropped_text),
-				       "** %lu printk messages dropped **\n",
-				       console_dropped);
-		console_dropped = 0;
-	}
+	while (!__printk_cpu_trylock())
+		cpu_relax();
 
-	for_each_console(con) {
-		if (exclusive_console && con != exclusive_console)
-			continue;
-		if (!(con->flags & CON_ENABLED))
-			continue;
-		if (!con->write)
-			continue;
-		if (!cpu_online(smp_processor_id()) &&
-		    !(con->flags & CON_ANYTIME))
-			continue;
-		if (con->flags & CON_EXTENDED)
-			con->write(con, ext_text, ext_len);
-		else {
-			if (dropped_len)
-				con->write(con, dropped_text, dropped_len);
-			con->write(con, text, len);
-		}
+	for (;;) {
+		printk_seq = read_console_seq(con);
+		if (printk_seq >= seq)
+			break;
+		if (!print_sync(con, &printk_seq))
+			break;
+
+		if (is_locked)
+			latched_seq_write(&con->printk_seq, printk_seq + 1);
+#ifdef CONFIG_PRINTK_NMI
+		else if (in_nmi())
+			latched_seq_write(&con->printk_sync_nmi_seq, printk_seq + 1);
+#endif
+		else
+			latched_seq_write(&con->printk_sync_seq, printk_seq + 1);
 	}
+
+	__printk_cpu_unlock();
 }
 
 /*
@@ -2001,20 +1937,6 @@ static u8 *__printk_recursion_counter(void)
 		local_irq_restore(flags);		\
 	} while (0)
 
-int printk_delay_msec __read_mostly;
-
-static inline void printk_delay(void)
-{
-	if (unlikely(printk_delay_msec)) {
-		int m = printk_delay_msec;
-
-		while (m--) {
-			mdelay(1);
-			touch_nmi_watchdog();
-		}
-	}
-}
-
 static inline u32 printk_caller_id(void)
 {
 	return in_task() ? task_pid_nr(current) :
@@ -2095,13 +2017,14 @@ static u16 printk_sprint(char *text, u16 size, int facility,
 }
 
 __printf(4, 0)
-int vprintk_store(int facility, int level,
-		  const struct dev_printk_info *dev_info,
-		  const char *fmt, va_list args)
+static int vprintk_store(int facility, int level,
+			 const struct dev_printk_info *dev_info,
+			 const char *fmt, va_list args)
 {
 	const u32 caller_id = printk_caller_id();
 	struct prb_reserved_entry e;
 	enum printk_info_flags flags = 0;
+	bool final_commit = false;
 	struct printk_record r;
 	unsigned long irqflags;
 	u16 trunc_msg_len = 0;
@@ -2112,6 +2035,7 @@ int vprintk_store(int facility, int level,
 	u16 text_len;
 	int ret = 0;
 	u64 ts_nsec;
+	u64 seq;
 
 	/*
 	 * Since the duration of printk() can vary depending on the message
@@ -2150,6 +2074,7 @@ int vprintk_store(int facility, int level,
 	if (flags & LOG_CONT) {
 		prb_rec_init_wr(&r, reserve_size);
 		if (prb_reserve_in_last(&e, prb, &r, caller_id, LOG_LINE_MAX)) {
+			seq = r.info->seq;
 			text_len = printk_sprint(&r.text_buf[r.info->text_len], reserve_size,
 						 facility, &flags, fmt, args);
 			r.info->text_len += text_len;
@@ -2157,6 +2082,7 @@ int vprintk_store(int facility, int level,
 			if (flags & LOG_NEWLINE) {
 				r.info->flags |= LOG_NEWLINE;
 				prb_final_commit(&e);
+				final_commit = true;
 			} else {
 				prb_commit(&e);
 			}
@@ -2180,6 +2106,7 @@ int vprintk_store(int facility, int level,
 		if (!prb_reserve(&e, prb, &r))
 			goto out;
 	}
+	seq = r.info->seq;
 
 	/* fill message */
 	text_len = printk_sprint(&r.text_buf[0], reserve_size, facility, &flags, fmt, args);
@@ -2195,13 +2122,25 @@ int vprintk_store(int facility, int level,
 		memcpy(&r.info->dev_info, dev_info, sizeof(r.info->dev_info));
 
 	/* A message without a trailing newline can be continued. */
-	if (!(flags & LOG_NEWLINE))
+	if (!(flags & LOG_NEWLINE)) {
 		prb_commit(&e);
-	else
+	} else {
 		prb_final_commit(&e);
+		final_commit = true;
+	}
 
 	ret = text_len + trunc_msg_len;
 out:
+	/* only the kernel may perform synchronous printing */
+	if (facility == 0 && final_commit) {
+		struct console *con;
+
+		for_each_console(con) {
+			if (console_may_sync(con))
+				print_sync_until(con, seq + 1, false);
+		}
+	}
+
 	printk_exit_irqrestore(recursion_ptr, irqflags);
 	return ret;
 }
@@ -2211,50 +2150,43 @@ asmlinkage int vprintk_emit(int facility, int level,
 			    const char *fmt, va_list args)
 {
 	int printed_len;
-	bool in_sched = false;
 
 	/* Suppress unimportant messages after panic happens */
 	if (unlikely(suppress_printk))
 		return 0;
 
-	if (level == LOGLEVEL_SCHED) {
+	if (level == LOGLEVEL_SCHED)
 		level = LOGLEVEL_DEFAULT;
-		in_sched = true;
-	}
-
-	boot_delay_msec(level);
-	printk_delay();
 
 	printed_len = vprintk_store(facility, level, dev_info, fmt, args);
 
-	/* If called from the scheduler, we can not call up(). */
-	if (!in_sched) {
-		/*
-		 * Disable preemption to avoid being preempted while holding
-		 * console_sem which would prevent anyone from printing to
-		 * console
-		 */
-		preempt_disable();
-		/*
-		 * Try to acquire and then immediately release the console
-		 * semaphore.  The release will print out buffers and wake up
-		 * /dev/kmsg and syslog() users.
-		 */
-		if (console_trylock_spinning())
-			console_unlock();
-		preempt_enable();
-	}
-
 	wake_up_klogd();
 	return printed_len;
 }
 EXPORT_SYMBOL(vprintk_emit);
 
-int vprintk_default(const char *fmt, va_list args)
+__printf(1, 0)
+static int vprintk_default(const char *fmt, va_list args)
 {
 	return vprintk_emit(0, LOGLEVEL_DEFAULT, NULL, fmt, args);
 }
-EXPORT_SYMBOL_GPL(vprintk_default);
+
+__printf(1, 0)
+static int vprintk_func(const char *fmt, va_list args)
+{
+#ifdef CONFIG_KGDB_KDB
+	/* Allow to pass printk() to kdb but avoid a recursion. */
+	if (unlikely(kdb_trap_printk && kdb_printf_cpu < 0))
+		return vkdb_printf(KDB_MSGSRC_PRINTK, fmt, args);
+#endif
+	return vprintk_default(fmt, args);
+}
+
+asmlinkage int vprintk(const char *fmt, va_list args)
+{
+	return vprintk_func(fmt, args);
+}
+EXPORT_SYMBOL(vprintk);
 
 asmlinkage __visible int _printk(const char *fmt, ...)
 {
@@ -2269,37 +2201,162 @@ asmlinkage __visible int _printk(const char *fmt, ...)
 }
 EXPORT_SYMBOL(_printk);
 
-#else /* CONFIG_PRINTK */
+static int printk_kthread_func(void *data)
+{
+	struct console *con = data;
+	unsigned long dropped = 0;
+	char *dropped_text = NULL;
+	struct printk_info info;
+	struct printk_record r;
+	char *ext_text = NULL;
+	size_t dropped_len;
+	int ret = -ENOMEM;
+	char *text = NULL;
+	char *write_text;
+	size_t len;
+	int error;
+	u64 seq;
 
-#define CONSOLE_LOG_MAX		0
-#define printk_time		false
+	if (con->flags & CON_EXTENDED) {
+		ext_text = kmalloc(CONSOLE_EXT_LOG_MAX, GFP_KERNEL);
+		if (!ext_text)
+			goto out;
+	}
+	text = kmalloc(LOG_LINE_MAX + PREFIX_MAX, GFP_KERNEL);
+	dropped_text = kmalloc(64, GFP_KERNEL);
+	if (!text || !dropped_text)
+		goto out;
+	if (con->flags & CON_EXTENDED)
+		write_text = ext_text;
+	else
+		write_text = text;
 
-#define prb_read_valid(rb, seq, r)	false
-#define prb_first_valid_seq(rb)		0
+	seq = read_console_seq(con);
 
-static u64 syslog_seq;
-static u64 console_seq;
-static u64 exclusive_console_stop_seq;
-static unsigned long console_dropped;
+	prb_rec_init_rd(&r, &info, text, LOG_LINE_MAX + PREFIX_MAX);
+
+	for (;;) {
+		error = wait_event_interruptible(log_wait,
+						 prb_read_valid(prb, seq, &r) || kthread_should_stop());
+
+		if (kthread_should_stop())
+			break;
+
+		if (error)
+			continue;
+
+		if (seq != r.info->seq) {
+			dropped += r.info->seq - seq;
+			seq = r.info->seq;
+		}
+
+		seq++;
+
+		if (!(con->flags & CON_ENABLED))
+			continue;
+
+		if (suppress_message_printing(r.info->level))
+			continue;
+
+		if (con->flags & CON_EXTENDED) {
+			len = info_print_ext_header(ext_text,
+						    CONSOLE_EXT_LOG_MAX,
+						    r.info);
+			len += msg_print_ext_body(ext_text + len,
+						  CONSOLE_EXT_LOG_MAX - len,
+						  &r.text_buf[0], r.info->text_len,
+						  &r.info->dev_info);
+		} else {
+			len = record_print_text(&r,
+						console_msg_format & MSG_FORMAT_SYSLOG,
+						printk_time);
+		}
+
+		console_lock();
+
+		/*
+		 * Even though the printk kthread is always preemptible, it is
+		 * still not allowed to call cond_resched() from within
+		 * console drivers. The task may become non-preemptible in the
+		 * console driver call chain. For example, vt_console_print()
+		 * takes a spinlock and then can call into fbcon_redraw(),
+		 * which can conditionally invoke cond_resched().
+		 */
+		console_may_schedule = 0;
+
+		if (kernel_sync_mode() && con->write_atomic) {
+			console_unlock();
+			break;
+		}
+
+		if (!(con->flags & CON_EXTENDED) && dropped) {
+			dropped_len = snprintf(dropped_text, 64,
+					       "** %lu printk messages dropped **\n",
+					       dropped);
+			dropped = 0;
+
+			con->write(con, dropped_text, dropped_len);
+			printk_delay(r.info->level);
+		}
+
+		con->write(con, write_text, len);
+		if (len)
+			printk_delay(r.info->level);
+
+		latched_seq_write(&con->printk_seq, seq);
+
+		console_unlock();
+	}
+	ret = 0;
+out:
+	kfree(dropped_text);
+	kfree(text);
+	kfree(ext_text);
+	pr_info("%sconsole [%s%d]: printing thread stopped\n",
+		(con->flags & CON_BOOT) ? "boot" : "",
+		con->name, con->index);
+	return ret;
+}
 
-static size_t record_print_text(const struct printk_record *r,
-				bool syslog, bool time)
+/* Must be called within console_lock(). */
+static void start_printk_kthread(struct console *con)
 {
-	return 0;
+	con->thread = kthread_run(printk_kthread_func, con,
+				  "pr/%s%d", con->name, con->index);
+	if (IS_ERR(con->thread)) {
+		pr_err("%sconsole [%s%d]: unable to start printing thread\n",
+		       (con->flags & CON_BOOT) ? "boot" : "",
+		       con->name, con->index);
+		return;
+	}
+	pr_info("%sconsole [%s%d]: printing thread started\n",
+		(con->flags & CON_BOOT) ? "boot" : "",
+		con->name, con->index);
 }
-static ssize_t info_print_ext_header(char *buf, size_t size,
-				     struct printk_info *info)
+
+/* protected by console_lock */
+static bool kthreads_started;
+
+/* Must be called within console_lock(). */
+static void console_try_thread(struct console *con)
 {
-	return 0;
+	if (kthreads_started) {
+		start_printk_kthread(con);
+		return;
+	}
+
+	/*
+	 * The printing threads have not been started yet. If this console
+	 * can print synchronously, print all unprinted messages.
+	 */
+	if (console_may_sync(con)) {
+		unsigned long flags;
+
+		local_irq_save(flags);
+		print_sync_until(con, prb_next_seq(prb), true);
+		local_irq_restore(flags);
+	}
 }
-static ssize_t msg_print_ext_body(char *buf, size_t size,
-				  char *text, size_t text_len,
-				  struct dev_printk_info *dev_info) { return 0; }
-static void console_lock_spinning_enable(void) { }
-static int console_lock_spinning_disable_and_check(void) { return 0; }
-static void call_console_drivers(const char *ext_text, size_t ext_len,
-				 const char *text, size_t len) {}
-static bool suppress_message_printing(int level) { return false; }
 
 #endif /* CONFIG_PRINTK */
 
@@ -2556,34 +2613,6 @@ int is_console_locked(void)
 }
 EXPORT_SYMBOL(is_console_locked);
 
-/*
- * Check if we have any console that is capable of printing while cpu is
- * booting or shutting down. Requires console_sem.
- */
-static int have_callable_console(void)
-{
-	struct console *con;
-
-	for_each_console(con)
-		if ((con->flags & CON_ENABLED) &&
-				(con->flags & CON_ANYTIME))
-			return 1;
-
-	return 0;
-}
-
-/*
- * Can we actually use the console at this time on this cpu?
- *
- * Console drivers may assume that per-cpu resources have been allocated. So
- * unless they're explicitly marked as being able to cope (CON_ANYTIME) don't
- * call them until this CPU is officially up.
- */
-static inline int can_use_console(void)
-{
-	return cpu_online(raw_smp_processor_id()) || have_callable_console();
-}
-
 /**
  * console_unlock - unlock the console system
  *
@@ -2600,140 +2629,13 @@ static inline int can_use_console(void)
  */
 void console_unlock(void)
 {
-	static char ext_text[CONSOLE_EXT_LOG_MAX];
-	static char text[CONSOLE_LOG_MAX];
-	unsigned long flags;
-	bool do_cond_resched, retry;
-	struct printk_info info;
-	struct printk_record r;
-	u64 __maybe_unused next_seq;
-
 	if (console_suspended) {
 		up_console_sem();
 		return;
 	}
 
-	prb_rec_init_rd(&r, &info, text, sizeof(text));
-
-	/*
-	 * Console drivers are called with interrupts disabled, so
-	 * @console_may_schedule should be cleared before; however, we may
-	 * end up dumping a lot of lines, for example, if called from
-	 * console registration path, and should invoke cond_resched()
-	 * between lines if allowable.  Not doing so can cause a very long
-	 * scheduling stall on a slow console leading to RCU stall and
-	 * softlockup warnings which exacerbate the issue with more
-	 * messages practically incapacitating the system.
-	 *
-	 * console_trylock() is not able to detect the preemptive
-	 * context reliably. Therefore the value must be stored before
-	 * and cleared after the "again" goto label.
-	 */
-	do_cond_resched = console_may_schedule;
-again:
-	console_may_schedule = 0;
-
-	/*
-	 * We released the console_sem lock, so we need to recheck if
-	 * cpu is online and (if not) is there at least one CON_ANYTIME
-	 * console.
-	 */
-	if (!can_use_console()) {
-		console_locked = 0;
-		up_console_sem();
-		return;
-	}
-
-	for (;;) {
-		size_t ext_len = 0;
-		int handover;
-		size_t len;
-
-skip:
-		if (!prb_read_valid(prb, console_seq, &r))
-			break;
-
-		if (console_seq != r.info->seq) {
-			console_dropped += r.info->seq - console_seq;
-			console_seq = r.info->seq;
-		}
-
-		if (suppress_message_printing(r.info->level)) {
-			/*
-			 * Skip record we have buffered and already printed
-			 * directly to the console when we received it, and
-			 * record that has level above the console loglevel.
-			 */
-			console_seq++;
-			goto skip;
-		}
-
-		/* Output to all consoles once old messages replayed. */
-		if (unlikely(exclusive_console &&
-			     console_seq >= exclusive_console_stop_seq)) {
-			exclusive_console = NULL;
-		}
-
-		/*
-		 * Handle extended console text first because later
-		 * record_print_text() will modify the record buffer in-place.
-		 */
-		if (nr_ext_console_drivers) {
-			ext_len = info_print_ext_header(ext_text,
-						sizeof(ext_text),
-						r.info);
-			ext_len += msg_print_ext_body(ext_text + ext_len,
-						sizeof(ext_text) - ext_len,
-						&r.text_buf[0],
-						r.info->text_len,
-						&r.info->dev_info);
-		}
-		len = record_print_text(&r,
-				console_msg_format & MSG_FORMAT_SYSLOG,
-				printk_time);
-		console_seq++;
-
-		/*
-		 * While actively printing out messages, if another printk()
-		 * were to occur on another CPU, it may wait for this one to
-		 * finish. This task can not be preempted if there is a
-		 * waiter waiting to take over.
-		 *
-		 * Interrupts are disabled because the hand over to a waiter
-		 * must not be interrupted until the hand over is completed
-		 * (@console_waiter is cleared).
-		 */
-		printk_safe_enter_irqsave(flags);
-		console_lock_spinning_enable();
-
-		stop_critical_timings();	/* don't trace print latency */
-		call_console_drivers(ext_text, ext_len, text, len);
-		start_critical_timings();
-
-		handover = console_lock_spinning_disable_and_check();
-		printk_safe_exit_irqrestore(flags);
-		if (handover)
-			return;
-
-		if (do_cond_resched)
-			cond_resched();
-	}
-
-	/* Get consistent value of the next-to-be-used sequence number. */
-	next_seq = console_seq;
-
 	console_locked = 0;
 	up_console_sem();
-
-	/*
-	 * Someone could have filled up the buffer again, so re-check if there's
-	 * something to flush. In case we cannot trylock the console_sem again,
-	 * there's a new owner and the console_unlock() from them will do the
-	 * flush, no worries.
-	 */
-	retry = prb_read_valid(prb, next_seq, NULL);
-	if (retry && console_trylock())
-		goto again;
 }
 EXPORT_SYMBOL(console_unlock);
 
@@ -2783,18 +2685,20 @@ void console_unblank(void)
  */
 void console_flush_on_panic(enum con_flush_mode mode)
 {
-	/*
-	 * If someone else is holding the console lock, trylock will fail
-	 * and may_schedule may be set.  Ignore and proceed to unlock so
-	 * that messages are flushed out.  As this can be called from any
-	 * context and we don't want to get preempted while flushing,
-	 * ensure may_schedule is cleared.
-	 */
-	console_trylock();
-	console_may_schedule = 0;
+	if (!console_trylock())
+		return;
+
+#ifdef CONFIG_PRINTK
+	if (mode == CONSOLE_REPLAY_ALL) {
+		struct console *c;
+		u64 seq;
+
+		seq = prb_first_valid_seq(prb);
+		for_each_console(c)
+			latched_seq_write(&c->printk_seq, seq);
+	}
+#endif
 
-	if (mode == CONSOLE_REPLAY_ALL)
-		console_seq = prb_first_valid_seq(prb);
 	console_unlock();
 }
 
@@ -2930,6 +2834,7 @@ static int try_enable_new_console(struct console *newcon, bool user_specified)
 void register_console(struct console *newcon)
 {
 	struct console *bcon = NULL;
+	u64 __maybe_unused seq = 0;
 	int err;
 
 	for_each_console(bcon) {
@@ -2952,6 +2857,8 @@ void register_console(struct console *newcon)
 		}
 	}
 
+	newcon->thread = NULL;
+
 	if (console_drivers && console_drivers->flags & CON_BOOT)
 		bcon = console_drivers;
 
@@ -2993,8 +2900,10 @@ void register_console(struct console *newcon)
 	 * the real console are the same physical device, it's annoying to
 	 * see the beginning boot messages twice
 	 */
-	if (bcon && ((newcon->flags & (CON_CONSDEV | CON_BOOT)) == CON_CONSDEV))
+	if (bcon && ((newcon->flags & (CON_CONSDEV | CON_BOOT)) == CON_CONSDEV)) {
 		newcon->flags &= ~CON_PRINTBUFFER;
+		newcon->flags |= CON_HANDOVER;
+	}
 
 	/*
 	 *	Put this console in the list - keep the
@@ -3016,27 +2925,21 @@ void register_console(struct console *newcon)
 	if (newcon->flags & CON_EXTENDED)
 		nr_ext_console_drivers++;
 
-	if (newcon->flags & CON_PRINTBUFFER) {
-		/*
-		 * console_unlock(); will print out the buffered messages
-		 * for us.
-		 *
-		 * We're about to replay the log buffer.  Only do this to the
-		 * just-registered console to avoid excessive message spam to
-		 * the already-registered consoles.
-		 *
-		 * Set exclusive_console with disabled interrupts to reduce
-		 * race window with eventual console_flush_on_panic() that
-		 * ignores console_lock.
-		 */
-		exclusive_console = newcon;
-		exclusive_console_stop_seq = console_seq;
+#ifdef CONFIG_PRINTK
+	if (!(newcon->flags & CON_PRINTBUFFER))
+		seq = prb_next_seq(prb);
 
-		/* Get a consistent copy of @syslog_seq. */
-		mutex_lock(&syslog_lock);
-		console_seq = syslog_seq;
-		mutex_unlock(&syslog_lock);
-	}
+	seqcount_latch_init(&newcon->printk_seq.latch);
+	latched_seq_write(&newcon->printk_seq, seq);
+	seqcount_latch_init(&newcon->printk_sync_seq.latch);
+	latched_seq_write(&newcon->printk_sync_seq, seq);
+#ifdef CONFIG_HAVE_NMI
+	seqcount_latch_init(&newcon->printk_sync_nmi_seq.latch);
+	latched_seq_write(&newcon->printk_sync_nmi_seq, seq);
+#endif
+
+	console_try_thread(newcon);
+#endif /* CONFIG_PRINTK */
 	console_unlock();
 	console_sysfs_notify();
 
@@ -3110,6 +3013,9 @@ int unregister_console(struct console *console)
 	console_unlock();
 	console_sysfs_notify();
 
+	if (console->thread && !IS_ERR(console->thread))
+		kthread_stop(console->thread);
+
 	if (console->exit)
 		res = console->exit(console);
 
@@ -3192,6 +3098,15 @@ static int __init printk_late_init(void)
 			unregister_console(con);
 		}
 	}
+
+#ifdef CONFIG_PRINTK
+	console_lock();
+	for_each_console(con)
+		start_printk_kthread(con);
+	kthreads_started = true;
+	console_unlock();
+#endif
+
 	ret = cpuhp_setup_state_nocalls(CPUHP_PRINTK_DEAD, "printk:dead", NULL,
 					console_cpu_notify);
 	WARN_ON(ret < 0);
@@ -3207,7 +3122,6 @@ late_initcall(printk_late_init);
  * Delayed printk version, for scheduler-internal messages:
  */
 #define PRINTK_PENDING_WAKEUP	0x01
-#define PRINTK_PENDING_OUTPUT	0x02
 
 static DEFINE_PER_CPU(int, printk_pending);
 
@@ -3215,14 +3129,8 @@ static void wake_up_klogd_work_func(struct irq_work *irq_work)
 {
 	int pending = __this_cpu_xchg(printk_pending, 0);
 
-	if (pending & PRINTK_PENDING_OUTPUT) {
-		/* If trylock fails, someone else is doing the printing */
-		if (console_trylock())
-			console_unlock();
-	}
-
 	if (pending & PRINTK_PENDING_WAKEUP)
-		wake_up_interruptible(&log_wait);
+		wake_up_interruptible_all(&log_wait);
 }
 
 static DEFINE_PER_CPU(struct irq_work, wake_up_klogd_work) =
@@ -3241,42 +3149,9 @@ void wake_up_klogd(void)
 	preempt_enable();
 }
 
-void defer_console_output(void)
-{
-	if (!printk_percpu_data_ready())
-		return;
-
-	preempt_disable();
-	__this_cpu_or(printk_pending, PRINTK_PENDING_OUTPUT);
-	irq_work_queue(this_cpu_ptr(&wake_up_klogd_work));
-	preempt_enable();
-}
-
 void printk_trigger_flush(void)
 {
-	defer_console_output();
-}
-
-int vprintk_deferred(const char *fmt, va_list args)
-{
-	int r;
-
-	r = vprintk_emit(0, LOGLEVEL_SCHED, NULL, fmt, args);
-	defer_console_output();
-
-	return r;
-}
-
-int _printk_deferred(const char *fmt, ...)
-{
-	va_list args;
-	int r;
-
-	va_start(args, fmt);
-	r = vprintk_deferred(fmt, args);
-	va_end(args);
-
-	return r;
+	wake_up_klogd();
 }
 
 /*
@@ -3405,6 +3280,24 @@ void kmsg_dump(enum kmsg_dump_reason reason)
 {
 	struct kmsg_dumper *dumper;
 
+	if (!oops_in_progress) {
+		/*
+		 * If atomic consoles are available, activate kernel sync mode
+		 * to make sure any final messages are visible. The trailing
+		 * printk message is important to flush any pending messages.
+		 */
+		if (have_atomic_console()) {
+			sync_mode = true;
+			pr_info("enabled sync mode\n");
+		}
+
+		/*
+		 * Give the printing threads time to flush, allowing up to
+		 * 1s of no printing forward progress before giving up.
+		 */
+		pr_flush(1000, true);
+	}
+
 	rcu_read_lock();
 	list_for_each_entry_rcu(dumper, &dump_list, list) {
 		enum kmsg_dump_reason max_reason = dumper->max_reason;
@@ -3587,6 +3480,7 @@ EXPORT_SYMBOL_GPL(kmsg_dump_rewind);
 #ifdef CONFIG_SMP
 static atomic_t printk_cpulock_owner = ATOMIC_INIT(-1);
 static atomic_t printk_cpulock_nested = ATOMIC_INIT(0);
+static unsigned int kgdb_cpu = -1;
 
 /**
  * __printk_wait_on_cpu_lock() - Busy wait until the printk cpu-reentrant
@@ -3666,6 +3560,9 @@ EXPORT_SYMBOL(__printk_cpu_trylock);
  */
 void __printk_cpu_unlock(void)
 {
+	bool trigger_kgdb = false;
+	unsigned int cpu;
+
 	if (atomic_read(&printk_cpulock_nested)) {
 		atomic_dec(&printk_cpulock_nested);
 		return;
@@ -3676,6 +3573,12 @@ void __printk_cpu_unlock(void)
 	 * LMM(__printk_cpu_unlock:A)
 	 */
 
+	cpu = smp_processor_id();
+	if (kgdb_cpu == cpu) {
+		trigger_kgdb = true;
+		kgdb_cpu = -1;
+	}
+
 	/*
 	 * Guarantee loads and stores from this CPU when it was the
 	 * lock owner are visible to the next lock owner. This pairs
@@ -3696,6 +3599,98 @@ void __printk_cpu_unlock(void)
 	 */
 	atomic_set_release(&printk_cpulock_owner,
 			   -1); /* LMM(__printk_cpu_unlock:B) */
+
+	if (trigger_kgdb) {
+		pr_warn("re-triggering kgdb roundup for CPU#%d\n", cpu);
+		kgdb_roundup_cpu(cpu);
+	}
 }
 EXPORT_SYMBOL(__printk_cpu_unlock);
+
+bool kgdb_roundup_delay(unsigned int cpu)
+{
+	if (cpu != atomic_read(&printk_cpulock_owner))
+		return false;
+
+	kgdb_cpu = cpu;
+	return true;
+}
+EXPORT_SYMBOL(kgdb_roundup_delay);
 #endif /* CONFIG_SMP */
+
+#ifdef CONFIG_PRINTK
+static void pr_msleep(bool may_sleep, int ms)
+{
+	if (may_sleep) {
+		msleep(ms);
+	} else {
+		while (ms--)
+			udelay(1000);
+	}
+}
+
+/**
+ * pr_flush() - Wait for printing threads to catch up.
+ *
+ * @timeout_ms:        The maximum time (in ms) to wait.
+ * @reset_on_progress: Reset the timeout if forward progress is seen.
+ *
+ * A value of 0 for @timeout_ms means no waiting will occur. A value of -1
+ * represents infinite waiting.
+ *
+ * If @reset_on_progress is true, the timeout will be reset whenever any
+ * printer has been seen to make some forward progress.
+ *
+ * Context: Any context.
+ * Return: true if all enabled printers are caught up.
+ */
+bool pr_flush(int timeout_ms, bool reset_on_progress)
+{
+	int remaining = timeout_ms;
+	struct console *con;
+	u64 last_diff = 0;
+	bool may_sleep;
+	u64 printk_seq;
+	u64 diff;
+	u64 seq;
+
+	may_sleep = (preemptible() &&
+		     !in_softirq() &&
+		     system_state >= SYSTEM_RUNNING);
+
+	seq = prb_next_seq(prb);
+
+	for (;;) {
+		diff = 0;
+
+		for_each_console(con) {
+			if (!(con->flags & CON_ENABLED))
+				continue;
+			printk_seq = read_console_seq(con);
+			if (printk_seq < seq)
+				diff += seq - printk_seq;
+		}
+
+		if (diff != last_diff && reset_on_progress)
+			remaining = timeout_ms;
+
+		if (diff == 0 || remaining == 0)
+			break;
+
+		if (remaining < 0) {
+			pr_msleep(may_sleep, 100);
+		} else if (remaining < 100) {
+			pr_msleep(may_sleep, remaining);
+			remaining = 0;
+		} else {
+			pr_msleep(may_sleep, 100);
+			remaining -= 100;
+		}
+
+		last_diff = diff;
+	}
+
+	return (diff == 0);
+}
+EXPORT_SYMBOL(pr_flush);
+#endif /* CONFIG_PRINTK */
diff --git a/kernel/printk/printk_safe.c b/kernel/printk/printk_safe.c
deleted file mode 100644
index ef0f9a2044da..000000000000
--- a/kernel/printk/printk_safe.c
+++ /dev/null
@@ -1,52 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-or-later
-/*
- * printk_safe.c - Safe printk for printk-deadlock-prone contexts
- */
-
-#include <linux/preempt.h>
-#include <linux/kdb.h>
-#include <linux/smp.h>
-#include <linux/cpumask.h>
-#include <linux/printk.h>
-#include <linux/kprobes.h>
-
-#include "internal.h"
-
-static DEFINE_PER_CPU(int, printk_context);
-
-/* Can be preempted by NMI. */
-void __printk_safe_enter(void)
-{
-	this_cpu_inc(printk_context);
-}
-
-/* Can be preempted by NMI. */
-void __printk_safe_exit(void)
-{
-	this_cpu_dec(printk_context);
-}
-
-asmlinkage int vprintk(const char *fmt, va_list args)
-{
-#ifdef CONFIG_KGDB_KDB
-	/* Allow to pass printk() to kdb but avoid a recursion. */
-	if (unlikely(kdb_trap_printk && kdb_printf_cpu < 0))
-		return vkdb_printf(KDB_MSGSRC_PRINTK, fmt, args);
-#endif
-
-	/*
-	 * Use the main logbuf even in NMI. But avoid calling console
-	 * drivers that might have their own locks.
-	 */
-	if (this_cpu_read(printk_context) || in_nmi()) {
-		int len;
-
-		len = vprintk_store(0, LOGLEVEL_DEFAULT, NULL, fmt, args);
-		defer_console_output();
-		return len;
-	}
-
-	/* No obstacles. */
-	return vprintk_default(fmt, args);
-}
-EXPORT_SYMBOL(vprintk);
diff --git a/kernel/ptrace.c b/kernel/ptrace.c
index f8589bf8d7dc..df08e8e64a83 100644
--- a/kernel/ptrace.c
+++ b/kernel/ptrace.c
@@ -197,7 +197,18 @@ static bool ptrace_freeze_traced(struct task_struct *task)
 	spin_lock_irq(&task->sighand->siglock);
 	if (task_is_traced(task) && !looks_like_a_spurious_pid(task) &&
 	    !__fatal_signal_pending(task)) {
+#ifdef CONFIG_PREEMPT_RT
+		unsigned long flags;
+
+		raw_spin_lock_irqsave(&task->pi_lock, flags);
+		if (READ_ONCE(task->__state) & __TASK_TRACED)
+			WRITE_ONCE(task->__state, __TASK_TRACED);
+		else
+			task->saved_state = __TASK_TRACED;
+		raw_spin_unlock_irqrestore(&task->pi_lock, flags);
+#else
 		WRITE_ONCE(task->__state, __TASK_TRACED);
+#endif
 		ret = true;
 	}
 	spin_unlock_irq(&task->sighand->siglock);
@@ -207,7 +218,11 @@ static bool ptrace_freeze_traced(struct task_struct *task)
 
 static void ptrace_unfreeze_traced(struct task_struct *task)
 {
-	if (READ_ONCE(task->__state) != __TASK_TRACED)
+	unsigned long flags;
+	bool frozen = true;
+
+	if (!IS_ENABLED(CONFIG_PREEMPT_RT) &&
+	    READ_ONCE(task->__state) != __TASK_TRACED)
 		return;
 
 	WARN_ON(!task->ptrace || task->parent != current);
@@ -217,12 +232,21 @@ static void ptrace_unfreeze_traced(struct task_struct *task)
 	 * Recheck state under the lock to close this race.
 	 */
 	spin_lock_irq(&task->sighand->siglock);
-	if (READ_ONCE(task->__state) == __TASK_TRACED) {
-		if (__fatal_signal_pending(task))
-			wake_up_state(task, __TASK_TRACED);
-		else
-			WRITE_ONCE(task->__state, TASK_TRACED);
-	}
+	raw_spin_lock_irqsave(&task->pi_lock, flags);
+	if (READ_ONCE(task->__state) == __TASK_TRACED)
+		WRITE_ONCE(task->__state, TASK_TRACED);
+
+#ifdef CONFIG_PREEMPT_RT
+	else if (task->saved_state == __TASK_TRACED)
+		task->saved_state = TASK_TRACED;
+#endif
+	else
+		frozen = false;
+	raw_spin_unlock_irqrestore(&task->pi_lock, flags);
+
+	if (frozen && __fatal_signal_pending(task))
+		wake_up_state(task, __TASK_TRACED);
+
 	spin_unlock_irq(&task->sighand->siglock);
 }
 
diff --git a/kernel/rcu/tasks.h b/kernel/rcu/tasks.h
index 6591914af486..a404897d826f 100644
--- a/kernel/rcu/tasks.h
+++ b/kernel/rcu/tasks.h
@@ -1347,7 +1347,7 @@ static void test_rcu_tasks_callback(struct rcu_head *rhp)
 	rttd->notrun = true;
 }
 
-static void rcu_tasks_initiate_self_tests(void)
+void rcu_tasks_initiate_self_tests(void)
 {
 	pr_info("Running RCU-tasks wait API self tests\n");
 #ifdef CONFIG_TASKS_RCU
@@ -1384,9 +1384,7 @@ static int rcu_tasks_verify_self_tests(void)
 	return ret;
 }
 late_initcall(rcu_tasks_verify_self_tests);
-#else /* #ifdef CONFIG_PROVE_RCU */
-static void rcu_tasks_initiate_self_tests(void) { }
-#endif /* #else #ifdef CONFIG_PROVE_RCU */
+#endif /* #ifdef CONFIG_PROVE_RCU */
 
 void __init rcu_init_tasks_generic(void)
 {
@@ -1401,9 +1399,6 @@ void __init rcu_init_tasks_generic(void)
 #ifdef CONFIG_TASKS_TRACE_RCU
 	rcu_spawn_tasks_trace_kthread();
 #endif
-
-	// Run the self-tests.
-	rcu_tasks_initiate_self_tests();
 }
 
 #else /* #ifdef CONFIG_TASKS_RCU_GENERIC */
diff --git a/kernel/rcu/tree.c b/kernel/rcu/tree.c
index 4ca6d5b199e8..477ebf6ec712 100644
--- a/kernel/rcu/tree.c
+++ b/kernel/rcu/tree.c
@@ -2279,13 +2279,13 @@ rcu_report_qs_rdp(struct rcu_data *rdp)
 {
 	unsigned long flags;
 	unsigned long mask;
-	bool needwake = false;
-	const bool offloaded = rcu_rdp_is_offloaded(rdp);
+	bool offloaded, needwake = false;
 	struct rcu_node *rnp;
 
 	WARN_ON_ONCE(rdp->cpu != smp_processor_id());
 	rnp = rdp->mynode;
 	raw_spin_lock_irqsave_rcu_node(rnp, flags);
+	offloaded = rcu_rdp_is_offloaded(rdp);
 	if (rdp->cpu_no_qs.b.norm || rdp->gp_seq != rnp->gp_seq ||
 	    rdp->gpwrap) {
 
@@ -2447,7 +2447,7 @@ static void rcu_do_batch(struct rcu_data *rdp)
 	int div;
 	bool __maybe_unused empty;
 	unsigned long flags;
-	const bool offloaded = rcu_rdp_is_offloaded(rdp);
+	bool offloaded;
 	struct rcu_head *rhp;
 	struct rcu_cblist rcl = RCU_CBLIST_INITIALIZER(rcl);
 	long bl, count = 0;
@@ -2473,6 +2473,7 @@ static void rcu_do_batch(struct rcu_data *rdp)
 	rcu_nocb_lock(rdp);
 	WARN_ON_ONCE(cpu_is_offline(smp_processor_id()));
 	pending = rcu_segcblist_n_cbs(&rdp->cblist);
+	offloaded = rcu_rdp_is_offloaded(rdp);
 	div = READ_ONCE(rcu_divisor);
 	div = div < 0 ? 7 : div > sizeof(long) * 8 - 2 ? sizeof(long) * 8 - 2 : div;
 	bl = max(rdp->blimit, pending >> div);
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 0d12ec7be301..39adf3a8067b 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -74,7 +74,11 @@ __read_mostly int sysctl_resched_latency_warn_once = 1;
  * Number of tasks to iterate in a single balance run.
  * Limited because this is done with IRQs disabled.
  */
+#ifdef CONFIG_PREEMPT_RT
+const_debug unsigned int sysctl_sched_nr_migrate = 8;
+#else
 const_debug unsigned int sysctl_sched_nr_migrate = 32;
+#endif
 
 /*
  * period over which we measure -rt task CPU usage in us.
@@ -982,6 +986,46 @@ void resched_curr(struct rq *rq)
 		trace_sched_wake_idle_without_ipi(cpu);
 }
 
+#ifdef CONFIG_PREEMPT_LAZY
+
+static int tsk_is_polling(struct task_struct *p)
+{
+#ifdef TIF_POLLING_NRFLAG
+	return test_tsk_thread_flag(p, TIF_POLLING_NRFLAG);
+#else
+	return 0;
+#endif
+}
+
+void resched_curr_lazy(struct rq *rq)
+{
+	struct task_struct *curr = rq->curr;
+	int cpu;
+
+	if (!sched_feat(PREEMPT_LAZY)) {
+		resched_curr(rq);
+		return;
+	}
+
+	if (test_tsk_need_resched(curr))
+		return;
+
+	if (test_tsk_need_resched_lazy(curr))
+		return;
+
+	set_tsk_need_resched_lazy(curr);
+
+	cpu = cpu_of(rq);
+	if (cpu == smp_processor_id())
+		return;
+
+	/* NEED_RESCHED_LAZY must be visible before we test polling */
+	smp_mb();
+	if (!tsk_is_polling(curr))
+		smp_send_reschedule(cpu);
+}
+#endif
+
 void resched_cpu(int cpu)
 {
 	struct rq *rq = cpu_rq(cpu);
@@ -2137,6 +2181,7 @@ void migrate_disable(void)
 	preempt_disable();
 	this_rq()->nr_pinned++;
 	p->migration_disabled = 1;
+	preempt_lazy_disable();
 	preempt_enable();
 }
 EXPORT_SYMBOL_GPL(migrate_disable);
@@ -2148,6 +2193,8 @@ void migrate_enable(void)
 	if (p->migration_disabled > 1) {
 		p->migration_disabled--;
 		return;
+	} else if (WARN_ON_ONCE(p->migration_disabled == 0)) {
+		return;
 	}
 
 	/*
@@ -2165,6 +2212,7 @@ void migrate_enable(void)
 	barrier();
 	p->migration_disabled = 0;
 	this_rq()->nr_pinned--;
+	preempt_lazy_enable();
 	preempt_enable();
 }
 EXPORT_SYMBOL_GPL(migrate_enable);
@@ -2944,9 +2992,8 @@ void force_compatible_cpus_allowed_ptr(struct task_struct *p)
 
 out_set_mask:
 	if (printk_ratelimit()) {
-		printk_deferred("Overriding affinity for process %d (%s) to CPUs %*pbl\n",
-				task_pid_nr(p), p->comm,
-				cpumask_pr_args(override_mask));
+		printk("Overriding affinity for process %d (%s) to CPUs %*pbl\n",
+		       task_pid_nr(p), p->comm, cpumask_pr_args(override_mask));
 	}
 
 	WARN_ON(set_cpus_allowed_ptr(p, override_mask));
@@ -3202,7 +3249,7 @@ unsigned long wait_task_inactive(struct task_struct *p, unsigned int match_state
 		 * is actually now running somewhere else!
 		 */
 		while (task_running(rq, p)) {
-			if (match_state && unlikely(READ_ONCE(p->__state) != match_state))
+			if (match_state && !task_match_state_lock(p, match_state))
 				return 0;
 			cpu_relax();
 		}
@@ -3217,7 +3264,7 @@ unsigned long wait_task_inactive(struct task_struct *p, unsigned int match_state
 		running = task_running(rq, p);
 		queued = task_on_rq_queued(p);
 		ncsw = 0;
-		if (!match_state || READ_ONCE(p->__state) == match_state)
+		if (!match_state || task_match_state_or_saved(p, match_state))
 			ncsw = p->nvcsw | LONG_MIN; /* sets MSB */
 		task_rq_unlock(rq, p, &rf);
 
@@ -3251,7 +3298,7 @@ unsigned long wait_task_inactive(struct task_struct *p, unsigned int match_state
 			ktime_t to = NSEC_PER_SEC / HZ;
 
 			set_current_state(TASK_UNINTERRUPTIBLE);
-			schedule_hrtimeout(&to, HRTIMER_MODE_REL);
+			schedule_hrtimeout(&to, HRTIMER_MODE_REL_HARD);
 			continue;
 		}
 
@@ -3376,8 +3423,8 @@ static int select_fallback_rq(int cpu, struct task_struct *p)
 		 * leave kernel.
 		 */
 		if (p->mm && printk_ratelimit()) {
-			printk_deferred("process %d (%s) no longer affine to cpu%d\n",
-					task_pid_nr(p), p->comm, cpu);
+			printk("process %d (%s) no longer affine to cpu%d\n",
+			       task_pid_nr(p), p->comm, cpu);
 		}
 	}
 
@@ -4384,6 +4431,9 @@ int sched_fork(unsigned long clone_flags, struct task_struct *p)
 	p->on_cpu = 0;
 #endif
 	init_task_preempt_count(p);
+#ifdef CONFIG_HAVE_PREEMPT_LAZY
+	task_thread_info(p)->preempt_lazy_count = 0;
+#endif
 #ifdef CONFIG_SMP
 	plist_node_init(&p->pushable_tasks, MAX_PRIO);
 	RB_CLEAR_NODE(&p->pushable_dl_tasks);
@@ -4840,20 +4890,18 @@ static struct rq *finish_task_switch(struct task_struct *prev)
 	 */
 	if (mm) {
 		membarrier_mm_sync_core_before_usermode(mm);
-		mmdrop(mm);
+		mmdrop_sched(mm);
 	}
 	if (unlikely(prev_state == TASK_DEAD)) {
 		if (prev->sched_class->task_dead)
 			prev->sched_class->task_dead(prev);
 
 		/*
-		 * Remove function-return probe instances associated with this
-		 * task and put them back on the free list.
+		 * Release VMAP'ed task stack immediate for reuse. On RT
+		 * enabled kernels this is delayed for latency reasons.
 		 */
-		kprobe_flush_task(prev);
-
-		/* Task is done with its stack. */
-		put_task_stack(prev);
+		if (!IS_ENABLED(CONFIG_PREEMPT_RT))
+			put_task_stack(prev);
 
 		put_task_struct_rcu_user(prev);
 	}
@@ -6254,6 +6302,7 @@ static void __sched notrace __schedule(unsigned int sched_mode)
 
 	next = pick_next_task(rq, prev, &rf);
 	clear_tsk_need_resched(prev);
+	clear_tsk_need_resched_lazy(prev);
 	clear_preempt_need_resched();
 #ifdef CONFIG_SCHED_DEBUG
 	rq->last_seen_need_resched_ns = 0;
@@ -6471,6 +6520,30 @@ static void __sched notrace preempt_schedule_common(void)
 	} while (need_resched());
 }
 
+#ifdef CONFIG_PREEMPT_LAZY
+/*
+ * If TIF_NEED_RESCHED is then we allow to be scheduled away since this is
+ * set by a RT task. Oterwise we try to avoid beeing scheduled out as long as
+ * preempt_lazy_count counter >0.
+ */
+static __always_inline int preemptible_lazy(void)
+{
+	if (test_thread_flag(TIF_NEED_RESCHED))
+		return 1;
+	if (current_thread_info()->preempt_lazy_count)
+		return 0;
+	return 1;
+}
+
+#else
+
+static inline int preemptible_lazy(void)
+{
+	return 1;
+}
+
+#endif
+
 #ifdef CONFIG_PREEMPTION
 /*
  * This is the entry point to schedule() from in-kernel preemption
@@ -6484,7 +6557,8 @@ asmlinkage __visible void __sched notrace preempt_schedule(void)
 	 */
 	if (likely(!preemptible()))
 		return;
-
+	if (!preemptible_lazy())
+		return;
 	preempt_schedule_common();
 }
 NOKPROBE_SYMBOL(preempt_schedule);
@@ -6517,6 +6591,9 @@ asmlinkage __visible void __sched notrace preempt_schedule_notrace(void)
 	if (likely(!preemptible()))
 		return;
 
+	if (!preemptible_lazy())
+		return;
+
 	do {
 		/*
 		 * Because the function tracer can trace preempt_count_sub()
@@ -8675,7 +8752,9 @@ void __init init_idle(struct task_struct *idle, int cpu)
 
 	/* Set the preempt count _outside_ the spinlocks! */
 	init_idle_preempt_count(idle, cpu);
-
+#ifdef CONFIG_HAVE_PREEMPT_LAZY
+	task_thread_info(idle)->preempt_lazy_count = 0;
+#endif
 	/*
 	 * The idle tasks have their own, simple scheduling class:
 	 */
@@ -9469,14 +9548,8 @@ void __init sched_init(void)
 }
 
 #ifdef CONFIG_DEBUG_ATOMIC_SLEEP
-static inline int preempt_count_equals(int preempt_offset)
-{
-	int nested = preempt_count() + rcu_preempt_depth();
-
-	return (nested == preempt_offset);
-}
 
-void __might_sleep(const char *file, int line, int preempt_offset)
+void __might_sleep(const char *file, int line)
 {
 	unsigned int state = get_current_state();
 	/*
@@ -9490,11 +9563,32 @@ void __might_sleep(const char *file, int line, int preempt_offset)
 			(void *)current->task_state_change,
 			(void *)current->task_state_change);
 
-	___might_sleep(file, line, preempt_offset);
+	__might_resched(file, line, 0);
 }
 EXPORT_SYMBOL(__might_sleep);
 
-void ___might_sleep(const char *file, int line, int preempt_offset)
+static void print_preempt_disable_ip(int preempt_offset, unsigned long ip)
+{
+	if (!IS_ENABLED(CONFIG_DEBUG_PREEMPT))
+		return;
+
+	if (preempt_count() == preempt_offset)
+		return;
+
+	pr_err("Preemption disabled at:");
+	print_ip_sym(KERN_ERR, ip);
+}
+
+static inline bool resched_offsets_ok(unsigned int offsets)
+{
+	unsigned int nested = preempt_count();
+
+	nested += rcu_preempt_depth() << MIGHT_RESCHED_RCU_SHIFT;
+
+	return nested == offsets;
+}
+
+void __might_resched(const char *file, int line, unsigned int offsets)
 {
 	/* Ratelimiting timestamp: */
 	static unsigned long prev_jiffy;
@@ -9504,7 +9598,7 @@ void ___might_sleep(const char *file, int line, int preempt_offset)
 	/* WARN_ON_ONCE() by default, no rate limit required: */
 	rcu_sleep_check();
 
-	if ((preempt_count_equals(preempt_offset) && !irqs_disabled() &&
+	if ((resched_offsets_ok(offsets) && !irqs_disabled() &&
 	     !is_idle_task(current) && !current->non_block_count) ||
 	    system_state == SYSTEM_BOOTING || system_state > SYSTEM_RUNNING ||
 	    oops_in_progress)
@@ -9517,29 +9611,33 @@ void ___might_sleep(const char *file, int line, int preempt_offset)
 	/* Save this before calling printk(), since that will clobber it: */
 	preempt_disable_ip = get_preempt_disable_ip(current);
 
-	printk(KERN_ERR
-		"BUG: sleeping function called from invalid context at %s:%d\n",
-			file, line);
-	printk(KERN_ERR
-		"in_atomic(): %d, irqs_disabled(): %d, non_block: %d, pid: %d, name: %s\n",
-			in_atomic(), irqs_disabled(), current->non_block_count,
-			current->pid, current->comm);
+	pr_err("BUG: sleeping function called from invalid context at %s:%d\n",
+	       file, line);
+	pr_err("in_atomic(): %d, irqs_disabled(): %d, non_block: %d, pid: %d, name: %s\n",
+	       in_atomic(), irqs_disabled(), current->non_block_count,
+	       current->pid, current->comm);
+	pr_err("preempt_count: %x, expected: %x\n", preempt_count(),
+	       offsets & MIGHT_RESCHED_PREEMPT_MASK);
+
+	if (IS_ENABLED(CONFIG_PREEMPT_RCU)) {
+		pr_err("RCU nest depth: %d, expected: %u\n",
+		       rcu_preempt_depth(), offsets >> MIGHT_RESCHED_RCU_SHIFT);
+	}
 
 	if (task_stack_end_corrupted(current))
-		printk(KERN_EMERG "Thread overran stack, or stack corrupted\n");
+		pr_emerg("Thread overran stack, or stack corrupted\n");
 
 	debug_show_held_locks(current);
 	if (irqs_disabled())
 		print_irqtrace_events(current);
-	if (IS_ENABLED(CONFIG_DEBUG_PREEMPT)
-	    && !preempt_count_equals(preempt_offset)) {
-		pr_err("Preemption disabled at:");
-		print_ip_sym(KERN_ERR, preempt_disable_ip);
-	}
+
+	print_preempt_disable_ip(offsets & MIGHT_RESCHED_PREEMPT_MASK,
+				 preempt_disable_ip);
+
 	dump_stack();
 	add_taint(TAINT_WARN, LOCKDEP_STILL_OK);
 }
-EXPORT_SYMBOL(___might_sleep);
+EXPORT_SYMBOL(__might_resched);
 
 void __cant_sleep(const char *file, int line, int preempt_offset)
 {
diff --git a/kernel/sched/deadline.c b/kernel/sched/deadline.c
index e94314633b39..fd7c4f972aaf 100644
--- a/kernel/sched/deadline.c
+++ b/kernel/sched/deadline.c
@@ -800,7 +800,7 @@ static void replenish_dl_entity(struct sched_dl_entity *dl_se)
 	 * entity.
 	 */
 	if (dl_time_before(dl_se->deadline, rq_clock(rq))) {
-		printk_deferred_once("sched: DL replenish lagged too much\n");
+		printk_once("sched: DL replenish lagged too much\n");
 		dl_se->deadline = rq_clock(rq) + pi_of(dl_se)->dl_deadline;
 		dl_se->runtime = pi_of(dl_se)->dl_runtime;
 	}
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 6420580f2730..238104c6431f 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -4247,10 +4247,7 @@ static inline void check_schedstat_required(void)
 			trace_sched_stat_iowait_enabled()  ||
 			trace_sched_stat_blocked_enabled() ||
 			trace_sched_stat_runtime_enabled())  {
-		printk_deferred_once("Scheduler tracepoints stat_sleep, stat_iowait, "
-			     "stat_blocked and stat_runtime require the "
-			     "kernel parameter schedstats=enable or "
-			     "kernel.sched_schedstats=1\n");
+		printk_once("Scheduler tracepoints stat_sleep, stat_iowait, stat_blocked and stat_runtime require the kernel parameter schedstats=enable or kernel.sched_schedstats=1\n");
 	}
 #endif
 }
@@ -4458,7 +4455,7 @@ check_preempt_tick(struct cfs_rq *cfs_rq, struct sched_entity *curr)
 	ideal_runtime = sched_slice(cfs_rq, curr);
 	delta_exec = curr->sum_exec_runtime - curr->prev_sum_exec_runtime;
 	if (delta_exec > ideal_runtime) {
-		resched_curr(rq_of(cfs_rq));
+		resched_curr_lazy(rq_of(cfs_rq));
 		/*
 		 * The current task ran long enough, ensure it doesn't get
 		 * re-elected due to buddy favours.
@@ -4482,7 +4479,7 @@ check_preempt_tick(struct cfs_rq *cfs_rq, struct sched_entity *curr)
 		return;
 
 	if (delta > ideal_runtime)
-		resched_curr(rq_of(cfs_rq));
+		resched_curr_lazy(rq_of(cfs_rq));
 }
 
 static void
@@ -4625,7 +4622,7 @@ entity_tick(struct cfs_rq *cfs_rq, struct sched_entity *curr, int queued)
 	 * validating it and just reschedule.
 	 */
 	if (queued) {
-		resched_curr(rq_of(cfs_rq));
+		resched_curr_lazy(rq_of(cfs_rq));
 		return;
 	}
 	/*
@@ -4765,7 +4762,7 @@ static void __account_cfs_rq_runtime(struct cfs_rq *cfs_rq, u64 delta_exec)
 	 * hierarchy can be throttled
 	 */
 	if (!assign_cfs_rq_runtime(cfs_rq) && likely(cfs_rq->curr))
-		resched_curr(rq_of(cfs_rq));
+		resched_curr_lazy(rq_of(cfs_rq));
 }
 
 static __always_inline
@@ -5528,7 +5525,7 @@ static void hrtick_start_fair(struct rq *rq, struct task_struct *p)
 
 		if (delta < 0) {
 			if (task_current(rq, p))
-				resched_curr(rq);
+				resched_curr_lazy(rq);
 			return;
 		}
 		hrtick_start(rq, delta);
@@ -7220,7 +7217,7 @@ static void check_preempt_wakeup(struct rq *rq, struct task_struct *p, int wake_
 	return;
 
 preempt:
-	resched_curr(rq);
+	resched_curr_lazy(rq);
 	/*
 	 * Only set the backward buddy when the current task is still
 	 * on the rq. This can happen when a wakeup gets interleaved
@@ -11121,7 +11118,7 @@ static void task_fork_fair(struct task_struct *p)
 		 * 'current' within the tree based on its new key value.
 		 */
 		swap(curr->vruntime, se->vruntime);
-		resched_curr(rq);
+		resched_curr_lazy(rq);
 	}
 
 	se->vruntime -= cfs_rq->min_vruntime;
@@ -11148,7 +11145,7 @@ prio_changed_fair(struct rq *rq, struct task_struct *p, int oldprio)
 	 */
 	if (task_current(rq, p)) {
 		if (p->prio > oldprio)
-			resched_curr(rq);
+			resched_curr_lazy(rq);
 	} else
 		check_preempt_curr(rq, p, 0);
 }
diff --git a/kernel/sched/features.h b/kernel/sched/features.h
index 7f8dace0964c..d5cee51819bf 100644
--- a/kernel/sched/features.h
+++ b/kernel/sched/features.h
@@ -46,11 +46,19 @@ SCHED_FEAT(DOUBLE_TICK, false)
  */
 SCHED_FEAT(NONTASK_CAPACITY, true)
 
+#ifdef CONFIG_PREEMPT_RT
+SCHED_FEAT(TTWU_QUEUE, false)
+# ifdef CONFIG_PREEMPT_LAZY
+SCHED_FEAT(PREEMPT_LAZY, true)
+# endif
+#else
+
 /*
  * Queue remote wakeups on the target CPU and process them
  * using the scheduler IPI. Reduces rq->lock contention/bounces.
  */
 SCHED_FEAT(TTWU_QUEUE, true)
+#endif
 
 /*
  * When doing wakeups, attempt to limit superfluous scans of the LLC domain.
diff --git a/kernel/sched/psi.c b/kernel/sched/psi.c
index 422f3b0445cf..2332f04b8181 100644
--- a/kernel/sched/psi.c
+++ b/kernel/sched/psi.c
@@ -717,11 +717,10 @@ static void psi_group_change(struct psi_group *group, int cpu,
 		if (groupc->tasks[t]) {
 			groupc->tasks[t]--;
 		} else if (!psi_bug) {
-			printk_deferred(KERN_ERR "psi: task underflow! cpu=%d t=%d tasks=[%u %u %u %u %u] clear=%x set=%x\n",
-					cpu, t, groupc->tasks[0],
-					groupc->tasks[1], groupc->tasks[2],
-					groupc->tasks[3], groupc->tasks[4],
-					clear, set);
+			pr_err("psi: task underflow! cpu=%d t=%d tasks=[%u %u %u %u] clear=%x set=%x\n",
+			       cpu, t, groupc->tasks[0],
+			       groupc->tasks[1], groupc->tasks[2],
+			       groupc->tasks[3], clear, set);
 			psi_bug = 1;
 		}
 	}
@@ -787,9 +786,9 @@ static void psi_flags_change(struct task_struct *task, int clear, int set)
 	if (((task->psi_flags & set) ||
 	     (task->psi_flags & clear) != clear) &&
 	    !psi_bug) {
-		printk_deferred(KERN_ERR "psi: inconsistent task state! task=%d:%s cpu=%d psi_flags=%x clear=%x set=%x\n",
-				task->pid, task->comm, task_cpu(task),
-				task->psi_flags, clear, set);
+		pr_err("psi: inconsistent task state! task=%d:%s cpu=%d psi_flags=%x clear=%x set=%x\n",
+		       task->pid, task->comm, task_cpu(task),
+		       task->psi_flags, clear, set);
 		psi_bug = 1;
 	}
 
diff --git a/kernel/sched/rt.c b/kernel/sched/rt.c
index 54f9bb3f1560..709799a5a85d 100644
--- a/kernel/sched/rt.c
+++ b/kernel/sched/rt.c
@@ -982,7 +982,7 @@ static int sched_rt_runtime_exceeded(struct rt_rq *rt_rq)
 		 */
 		if (likely(rt_b->rt_runtime)) {
 			rt_rq->rt_throttled = 1;
-			printk_deferred_once("sched: RT throttling activated\n");
+			printk_once("sched: RT throttling activated\n");
 		} else {
 			/*
 			 * In case we did anyway, make it go away,
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index 4f432826933d..8df6227922aa 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -2318,6 +2318,15 @@ extern void reweight_task(struct task_struct *p, int prio);
 extern void resched_curr(struct rq *rq);
 extern void resched_cpu(int cpu);
 
+#ifdef CONFIG_PREEMPT_LAZY
+extern void resched_curr_lazy(struct rq *rq);
+#else
+static inline void resched_curr_lazy(struct rq *rq)
+{
+	resched_curr(rq);
+}
+#endif
+
 extern struct rt_bandwidth def_rt_bandwidth;
 extern void init_rt_bandwidth(struct rt_bandwidth *rt_b, u64 period, u64 runtime);
 
diff --git a/kernel/sched/swait.c b/kernel/sched/swait.c
index e1c655f928c7..f230b1ac7f91 100644
--- a/kernel/sched/swait.c
+++ b/kernel/sched/swait.c
@@ -64,6 +64,7 @@ void swake_up_all(struct swait_queue_head *q)
 	struct swait_queue *curr;
 	LIST_HEAD(tmp);
 
+	WARN_ON(irqs_disabled());
 	raw_spin_lock_irq(&q->lock);
 	list_splice_init(&q->task_list, &tmp);
 	while (!list_empty(&tmp)) {
diff --git a/kernel/sched/topology.c b/kernel/sched/topology.c
index 4e8698e62f07..3d0157bd4e14 100644
--- a/kernel/sched/topology.c
+++ b/kernel/sched/topology.c
@@ -526,7 +526,7 @@ static int init_rootdomain(struct root_domain *rd)
 #ifdef HAVE_RT_PUSH_IPI
 	rd->rto_cpu = -1;
 	raw_spin_lock_init(&rd->rto_lock);
-	init_irq_work(&rd->rto_push_work, rto_push_irq_work_func);
+	rd->rto_push_work = IRQ_WORK_INIT_HARD(rto_push_irq_work_func);
 #endif
 
 	rd->visit_gen = 0;
diff --git a/kernel/signal.c b/kernel/signal.c
index 5892c91696f8..d3a69e89b9ee 100644
--- a/kernel/signal.c
+++ b/kernel/signal.c
@@ -1324,6 +1324,34 @@ force_sig_info_to_task(struct kernel_siginfo *info, struct task_struct *t,
 	struct k_sigaction *action;
 	int sig = info->si_signo;
 
+	/*
+	 * On some archs, PREEMPT_RT has to delay sending a signal from a trap
+	 * since it can not enable preemption, and the signal code's spin_locks
+	 * turn into mutexes. Instead, it must set TIF_NOTIFY_RESUME which will
+	 * send the signal on exit of the trap.
+	 */
+#ifdef ARCH_RT_DELAYS_SIGNAL_SEND
+	if (in_atomic()) {
+		struct task_struct *t = current;
+
+		if (WARN_ON_ONCE(t->forced_info.si_signo))
+			return 0;
+
+		if (is_si_special(info)) {
+			WARN_ON_ONCE(info != SEND_SIG_PRIV);
+			t->forced_info.si_signo = info->si_signo;
+			t->forced_info.si_errno = 0;
+			t->forced_info.si_code = SI_KERNEL;
+			t->forced_info.si_pid = 0;
+			t->forced_info.si_uid = 0;
+		} else {
+			t->forced_info = *info;
+		}
+
+		set_tsk_thread_flag(t, TIF_NOTIFY_RESUME);
+		return 0;
+	}
+#endif
 	spin_lock_irqsave(&t->sighand->siglock, flags);
 	action = &t->sighand->action[sig-1];
 	ignored = action->sa.sa_handler == SIG_IGN;
@@ -2296,16 +2324,8 @@ static void ptrace_stop(int exit_code, int why, int clear_code, kernel_siginfo_t
 		if (gstop_done && ptrace_reparented(current))
 			do_notify_parent_cldstop(current, false, why);
 
-		/*
-		 * Don't want to allow preemption here, because
-		 * sys_ptrace() needs this task to be inactive.
-		 *
-		 * XXX: implement read_unlock_no_resched().
-		 */
-		preempt_disable();
 		read_unlock(&tasklist_lock);
 		cgroup_enter_frozen();
-		preempt_enable_no_resched();
 		freezable_schedule();
 		cgroup_leave_frozen(true);
 	} else {
diff --git a/kernel/smp.c b/kernel/smp.c
index f43ede0ab183..f0f26e1a0031 100644
--- a/kernel/smp.c
+++ b/kernel/smp.c
@@ -690,10 +690,20 @@ void flush_smp_call_function_from_idle(void)
 
 	cfd_seq_store(this_cpu_ptr(&cfd_seq_local)->idle, CFD_SEQ_NOCPU,
 		      smp_processor_id(), CFD_SEQ_IDLE);
+
 	local_irq_save(flags);
 	flush_smp_call_function_queue(true);
-	if (local_softirq_pending())
-		do_softirq();
+
+	if (local_softirq_pending()) {
+		if (!IS_ENABLED(CONFIG_PREEMPT_RT)) {
+			do_softirq();
+		} else {
+			struct task_struct *ksoftirqd = this_cpu_ksoftirqd();
+
+			if (ksoftirqd && !task_is_running(ksoftirqd))
+				wake_up_process(ksoftirqd);
+		}
+	}
 
 	local_irq_restore(flags);
 }
diff --git a/kernel/softirq.c b/kernel/softirq.c
index 322b65d45676..efac1f62fa99 100644
--- a/kernel/softirq.c
+++ b/kernel/softirq.c
@@ -85,7 +85,9 @@ static void wakeup_softirqd(void)
  * right now. Let ksoftirqd handle this at its own rate, to get fairness,
  * unless we're doing some of the synchronous softirqs.
  */
-#define SOFTIRQ_NOW_MASK ((1 << HI_SOFTIRQ) | (1 << TASKLET_SOFTIRQ))
+#define SOFTIRQ_NOW_MASK                                                       \
+	((1 << HI_SOFTIRQ) | (1 << TASKLET_SOFTIRQ) | (1 << NET_RX_SOFTIRQ) |  \
+	 (1 << NET_TX_SOFTIRQ))
 static bool ksoftirqd_running(unsigned long pending)
 {
 	struct task_struct *tsk = __this_cpu_read(ksoftirqd);
diff --git a/kernel/time/clockevents.c b/kernel/time/clockevents.c
index 003ccf338d20..00fc43605c6b 100644
--- a/kernel/time/clockevents.c
+++ b/kernel/time/clockevents.c
@@ -203,8 +203,7 @@ static int clockevents_increase_min_delta(struct clock_event_device *dev)
 {
 	/* Nothing to do if we already reached the limit */
 	if (dev->min_delta_ns >= MIN_DELTA_LIMIT) {
-		printk_deferred(KERN_WARNING
-				"CE: Reprogramming failure. Giving up\n");
+		pr_warn("CE: Reprogramming failure. Giving up\n");
 		dev->next_event = KTIME_MAX;
 		return -ETIME;
 	}
@@ -217,10 +216,8 @@ static int clockevents_increase_min_delta(struct clock_event_device *dev)
 	if (dev->min_delta_ns > MIN_DELTA_LIMIT)
 		dev->min_delta_ns = MIN_DELTA_LIMIT;
 
-	printk_deferred(KERN_WARNING
-			"CE: %s increased min_delta_ns to %llu nsec\n",
-			dev->name ? dev->name : "?",
-			(unsigned long long) dev->min_delta_ns);
+	pr_warn("CE: %s increased min_delta_ns to %llu nsec\n",
+		dev->name ? dev->name : "?", (unsigned long long) dev->min_delta_ns);
 	return 0;
 }
 
diff --git a/kernel/time/ntp.c b/kernel/time/ntp.c
index 406dccb79c2b..829d7797811f 100644
--- a/kernel/time/ntp.c
+++ b/kernel/time/ntp.c
@@ -939,9 +939,7 @@ static long hardpps_update_freq(struct pps_normtime freq_norm)
 		time_status |= STA_PPSERROR;
 		pps_errcnt++;
 		pps_dec_freq_interval();
-		printk_deferred(KERN_ERR
-			"hardpps: PPSERROR: interval too long - %lld s\n",
-			freq_norm.sec);
+		pr_err("hardpps: PPSERROR: interval too long - %lld s\n", freq_norm.sec);
 		return 0;
 	}
 
@@ -954,8 +952,7 @@ static long hardpps_update_freq(struct pps_normtime freq_norm)
 	delta = shift_right(ftemp - pps_freq, NTP_SCALE_SHIFT);
 	pps_freq = ftemp;
 	if (delta > PPS_MAXWANDER || delta < -PPS_MAXWANDER) {
-		printk_deferred(KERN_WARNING
-				"hardpps: PPSWANDER: change=%ld\n", delta);
+		pr_warn("hardpps: PPSWANDER: change=%ld\n", delta);
 		time_status |= STA_PPSWANDER;
 		pps_stbcnt++;
 		pps_dec_freq_interval();
@@ -999,9 +996,8 @@ static void hardpps_update_phase(long error)
 	 * the time offset is updated.
 	 */
 	if (jitter > (pps_jitter << PPS_POPCORN)) {
-		printk_deferred(KERN_WARNING
-				"hardpps: PPSJITTER: jitter=%ld, limit=%ld\n",
-				jitter, (pps_jitter << PPS_POPCORN));
+		pr_warn("hardpps: PPSJITTER: jitter=%ld, limit=%ld\n",
+			jitter, (pps_jitter << PPS_POPCORN));
 		time_status |= STA_PPSJITTER;
 		pps_jitcnt++;
 	} else if (time_status & STA_PPSTIME) {
@@ -1058,7 +1054,7 @@ void __hardpps(const struct timespec64 *phase_ts, const struct timespec64 *raw_t
 		time_status |= STA_PPSJITTER;
 		/* restart the frequency calibration interval */
 		pps_fbase = *raw_ts;
-		printk_deferred(KERN_ERR "hardpps: PPSJITTER: bad pulse\n");
+		pr_err("hardpps: PPSJITTER: bad pulse\n");
 		return;
 	}
 
diff --git a/kernel/time/timekeeping.c b/kernel/time/timekeeping.c
index dcdcb85121e4..5714e8b281ee 100644
--- a/kernel/time/timekeeping.c
+++ b/kernel/time/timekeeping.c
@@ -203,22 +203,23 @@ static void timekeeping_check_update(struct timekeeper *tk, u64 offset)
 	const char *name = tk->tkr_mono.clock->name;
 
 	if (offset > max_cycles) {
-		printk_deferred("WARNING: timekeeping: Cycle offset (%lld) is larger than allowed by the '%s' clock's max_cycles value (%lld): time overflow danger\n",
-				offset, name, max_cycles);
-		printk_deferred("         timekeeping: Your kernel is sick, but tries to cope by capping time updates\n");
+		printk("WARNING: timekeeping: Cycle offset (%lld) is larger than allowed by the '%s' clock's max_cycles value (%lld): time overflow danger\n",
+		       offset, name, max_cycles);
+		printk("         timekeeping: Your kernel is sick, but tries to cope by capping time updates\n");
 	} else {
 		if (offset > (max_cycles >> 1)) {
-			printk_deferred("INFO: timekeeping: Cycle offset (%lld) is larger than the '%s' clock's 50%% safety margin (%lld)\n",
-					offset, name, max_cycles >> 1);
-			printk_deferred("      timekeeping: Your kernel is still fine, but is feeling a bit nervous\n");
+			printk("INFO: timekeeping: Cycle offset (%lld) is larger than the '%s' clock's 50%% safety margin (%lld)\n",
+			       offset, name, max_cycles >> 1);
+			printk("      timekeeping: Your kernel is still fine, but is feeling a bit nervous\n");
 		}
 	}
 
 	if (tk->underflow_seen) {
 		if (jiffies - tk->last_warning > WARNING_FREQ) {
-			printk_deferred("WARNING: Underflow in clocksource '%s' observed, time update ignored.\n", name);
-			printk_deferred("         Please report this, consider using a different clocksource, if possible.\n");
-			printk_deferred("         Your kernel is probably still fine.\n");
+			printk("WARNING: Underflow in clocksource '%s' observed, time update ignored.\n",
+			       name);
+			printk("         Please report this, consider using a different clocksource, if possible.\n");
+			printk("         Your kernel is probably still fine.\n");
 			tk->last_warning = jiffies;
 		}
 		tk->underflow_seen = 0;
@@ -226,9 +227,10 @@ static void timekeeping_check_update(struct timekeeper *tk, u64 offset)
 
 	if (tk->overflow_seen) {
 		if (jiffies - tk->last_warning > WARNING_FREQ) {
-			printk_deferred("WARNING: Overflow in clocksource '%s' observed, time update capped.\n", name);
-			printk_deferred("         Please report this, consider using a different clocksource, if possible.\n");
-			printk_deferred("         Your kernel is probably still fine.\n");
+			printk("WARNING: Overflow in clocksource '%s' observed, time update capped.\n",
+			       name);
+			printk("         Please report this, consider using a different clocksource, if possible.\n");
+			printk("         Your kernel is probably still fine.\n");
 			tk->last_warning = jiffies;
 		}
 		tk->overflow_seen = 0;
@@ -1668,9 +1670,7 @@ static void __timekeeping_inject_sleeptime(struct timekeeper *tk,
 					   const struct timespec64 *delta)
 {
 	if (!timespec64_valid_strict(delta)) {
-		printk_deferred(KERN_WARNING
-				"__timekeeping_inject_sleeptime: Invalid "
-				"sleep delta value!\n");
+		pr_warn("%s: Invalid sleep delta value!\n", __func__);
 		return;
 	}
 	tk_xtime_add(tk, delta);
diff --git a/kernel/time/timekeeping_debug.c b/kernel/time/timekeeping_debug.c
index b73e8850e58d..149cc4b08d8e 100644
--- a/kernel/time/timekeeping_debug.c
+++ b/kernel/time/timekeeping_debug.c
@@ -49,7 +49,7 @@ void tk_debug_account_sleep_time(const struct timespec64 *t)
 	int bin = min(fls(t->tv_sec), NUM_BINS-1);
 
 	sleep_time_bin[bin]++;
-	pm_deferred_pr_dbg("Timekeeping suspended for %lld.%03lu seconds\n",
+	pm_pr_dbg("Timekeeping suspended for %lld.%03lu seconds\n",
 			   (s64)t->tv_sec, t->tv_nsec / NSEC_PER_MSEC);
 }
 
diff --git a/kernel/trace/trace.c b/kernel/trace/trace.c
index 51a87a67e2ab..b2d1c10ed4c6 100644
--- a/kernel/trace/trace.c
+++ b/kernel/trace/trace.c
@@ -2630,7 +2630,13 @@ unsigned int tracing_gen_ctx_irq_test(unsigned int irqs_status)
 		trace_flags |= TRACE_FLAG_NEED_RESCHED;
 	if (test_preempt_need_resched())
 		trace_flags |= TRACE_FLAG_PREEMPT_RESCHED;
-	return (trace_flags << 16) | (min_t(unsigned int, pc & 0xff, 0xf)) |
+#ifdef CONFIG_PREEMPT_LAZY
+	if (need_resched_lazy())
+		trace_flags |= TRACE_FLAG_NEED_RESCHED_LAZY;
+#endif
+
+	return (trace_flags << 24) | (min_t(unsigned int, pc & 0xff, 0xf)) |
+		(preempt_lazy_count() & 0xff) << 16 |
 		(min_t(unsigned int, migration_disable_value(), 0xf)) << 4;
 }
 
@@ -4206,15 +4212,17 @@ unsigned long trace_total_entries(struct trace_array *tr)
 
 static void print_lat_help_header(struct seq_file *m)
 {
-	seq_puts(m, "#                    _------=> CPU#            \n"
-		    "#                   / _-----=> irqs-off        \n"
-		    "#                  | / _----=> need-resched    \n"
-		    "#                  || / _---=> hardirq/softirq \n"
-		    "#                  ||| / _--=> preempt-depth   \n"
-		    "#                  |||| / _-=> migrate-disable \n"
-		    "#                  ||||| /     delay           \n"
-		    "#  cmd     pid     |||||| time  |   caller     \n"
-		    "#     \\   /        ||||||  \\    |    /       \n");
+	seq_puts(m, "#                    _--------=> CPU#            \n"
+		    "#                   / _-------=> irqs-off        \n"
+		    "#                  | / _------=> need-resched    \n"
+		    "#                  || / _-----=> need-resched-lazy\n"
+		    "#                  ||| / _----=> hardirq/softirq \n"
+		    "#                  |||| / _---=> preempt-depth   \n"
+		    "#                  ||||| / _--=> preempt-lazy-depth\n"
+		    "#                  |||||| / _-=> migrate-disable \n"
+		    "#                  ||||||| /     delay           \n"
+		    "#  cmd     pid     |||||||| time  |   caller     \n"
+		    "#     \\   /        ||||||||  \\    |    /       \n");
 }
 
 static void print_event_info(struct array_buffer *buf, struct seq_file *m)
@@ -4248,14 +4256,16 @@ static void print_func_help_header_irq(struct array_buffer *buf, struct seq_file
 
 	print_event_info(buf, m);
 
-	seq_printf(m, "#                            %.*s  _-----=> irqs-off\n", prec, space);
-	seq_printf(m, "#                            %.*s / _----=> need-resched\n", prec, space);
-	seq_printf(m, "#                            %.*s| / _---=> hardirq/softirq\n", prec, space);
-	seq_printf(m, "#                            %.*s|| / _--=> preempt-depth\n", prec, space);
-	seq_printf(m, "#                            %.*s||| / _-=> migrate-disable\n", prec, space);
-	seq_printf(m, "#                            %.*s|||| /     delay\n", prec, space);
-	seq_printf(m, "#           TASK-PID  %.*s CPU#  |||||  TIMESTAMP  FUNCTION\n", prec, "     TGID   ");
-	seq_printf(m, "#              | |    %.*s   |   |||||     |         |\n", prec, "       |    ");
+	seq_printf(m, "#                            %.*s  _-------=> irqs-off\n", prec, space);
+	seq_printf(m, "#                            %.*s / _------=> need-resched\n", prec, space);
+	seq_printf(m, "#                            %.*s| / _-----=> need-resched-lazy\n", prec, space);
+	seq_printf(m, "#                            %.*s|| / _----=> hardirq/softirq\n", prec, space);
+	seq_printf(m, "#                            %.*s||| / _---=> preempt-depth\n", prec, space);
+	seq_printf(m, "#                            %.*s|||| / _--=> preempt-lazy-depth\n", prec, space);
+	seq_printf(m, "#                            %.*s||||| / _-=> migrate-disable\n", prec, space);
+	seq_printf(m, "#                            %.*s|||||| /     delay\n", prec, space);
+	seq_printf(m, "#           TASK-PID  %.*s CPU#  |||||||  TIMESTAMP  FUNCTION\n", prec, "     TGID   ");
+	seq_printf(m, "#              | |    %.*s   |   |||||||      |         |\n", prec, "       |    ");
 }
 
 void
diff --git a/kernel/trace/trace_events.c b/kernel/trace/trace_events.c
index 44d031ffe511..01165b0ed6aa 100644
--- a/kernel/trace/trace_events.c
+++ b/kernel/trace/trace_events.c
@@ -184,6 +184,7 @@ static int trace_define_common_fields(void)
 	/* Holds both preempt_count and migrate_disable */
 	__common_field(unsigned char, preempt_count);
 	__common_field(int, pid);
+	__common_field(unsigned char, preempt_lazy_count);
 
 	return ret;
 }
diff --git a/kernel/trace/trace_output.c b/kernel/trace/trace_output.c
index c2ca40e8595b..be070d258c3b 100644
--- a/kernel/trace/trace_output.c
+++ b/kernel/trace/trace_output.c
@@ -451,6 +451,7 @@ int trace_print_lat_fmt(struct trace_seq *s, struct trace_entry *entry)
 {
 	char hardsoft_irq;
 	char need_resched;
+	char need_resched_lazy;
 	char irqs_off;
 	int hardirq;
 	int softirq;
@@ -481,6 +482,9 @@ int trace_print_lat_fmt(struct trace_seq *s, struct trace_entry *entry)
 		break;
 	}
 
+	need_resched_lazy =
+		(entry->flags & TRACE_FLAG_NEED_RESCHED_LAZY) ? 'L' : '.';
+
 	hardsoft_irq =
 		(nmi && hardirq)     ? 'Z' :
 		nmi                  ? 'z' :
@@ -489,14 +493,20 @@ int trace_print_lat_fmt(struct trace_seq *s, struct trace_entry *entry)
 		softirq              ? 's' :
 		                       '.' ;
 
-	trace_seq_printf(s, "%c%c%c",
-			 irqs_off, need_resched, hardsoft_irq);
+	trace_seq_printf(s, "%c%c%c%c",
+			 irqs_off, need_resched, need_resched_lazy,
+			 hardsoft_irq);
 
 	if (entry->preempt_count & 0xf)
 		trace_seq_printf(s, "%x", entry->preempt_count & 0xf);
 	else
 		trace_seq_putc(s, '.');
 
+	if (entry->preempt_lazy_count)
+		trace_seq_printf(s, "%x", entry->preempt_lazy_count);
+	else
+		trace_seq_putc(s, '.');
+
 	if (entry->preempt_count & 0xf0)
 		trace_seq_printf(s, "%x", entry->preempt_count >> 4);
 	else
diff --git a/kernel/workqueue.c b/kernel/workqueue.c
index 3f4d27668576..fa66b2ac3198 100644
--- a/kernel/workqueue.c
+++ b/kernel/workqueue.c
@@ -4845,9 +4845,7 @@ void show_workqueue_state(void)
 				 * drivers that queue work while holding locks
 				 * also taken in their write paths.
 				 */
-				printk_deferred_enter();
 				show_pwq(pwq);
-				printk_deferred_exit();
 			}
 			raw_spin_unlock_irqrestore(&pwq->pool->lock, flags);
 			/*
@@ -4871,7 +4869,6 @@ void show_workqueue_state(void)
 		 * queue work while holding locks also taken in their write
 		 * paths.
 		 */
-		printk_deferred_enter();
 		pr_info("pool %d:", pool->id);
 		pr_cont_pool_info(pool);
 		pr_cont(" hung=%us workers=%d",
@@ -4886,7 +4883,6 @@ void show_workqueue_state(void)
 			first = false;
 		}
 		pr_cont("\n");
-		printk_deferred_exit();
 	next_pool:
 		raw_spin_unlock_irqrestore(&pool->lock, flags);
 		/*
diff --git a/labgrid-wago b/labgrid-wago
new file mode 160000
index 000000000000..02c63882de91
--- /dev/null
+++ b/labgrid-wago
@@ -0,0 +1 @@
+Subproject commit 02c63882de910fb4085635199415ae044da44f43
diff --git a/lib/bug.c b/lib/bug.c
index 45a0584f6541..03a87df69ed2 100644
--- a/lib/bug.c
+++ b/lib/bug.c
@@ -206,6 +206,7 @@ enum bug_trap_type report_bug(unsigned long bugaddr, struct pt_regs *regs)
 	else
 		pr_crit("Kernel BUG at %pB [verbose debug info unavailable]\n",
 			(void *)bugaddr);
+	pr_flush(1000, true);
 
 	return BUG_TRAP_TYPE_BUG;
 }
diff --git a/lib/dump_stack.c b/lib/dump_stack.c
index 6b7f1bf6715d..6e8ae42c7e27 100644
--- a/lib/dump_stack.c
+++ b/lib/dump_stack.c
@@ -102,9 +102,9 @@ asmlinkage __visible void dump_stack_lvl(const char *log_lvl)
 	 * Permit this cpu to perform nested stack dumps while serialising
 	 * against other CPUs
 	 */
-	printk_cpu_lock_irqsave(flags);
+	raw_printk_cpu_lock_irqsave(flags);
 	__dump_stack(log_lvl);
-	printk_cpu_unlock_irqrestore(flags);
+	raw_printk_cpu_unlock_irqrestore(flags);
 }
 EXPORT_SYMBOL(dump_stack_lvl);
 
diff --git a/lib/iov_iter.c b/lib/iov_iter.c
index 60b5e6edfbaa..c5b2f0f4b8a8 100644
--- a/lib/iov_iter.c
+++ b/lib/iov_iter.c
@@ -416,6 +416,7 @@ static size_t copy_page_to_iter_pipe(struct page *page, size_t offset, size_t by
 		return 0;
 
 	buf->ops = &page_cache_pipe_buf_ops;
+	buf->flags = 0;
 	get_page(page);
 	buf->page = page;
 	buf->offset = offset;
@@ -532,6 +533,7 @@ static size_t push_pipe(struct iov_iter *i, size_t size,
 			break;
 
 		buf->ops = &default_pipe_buf_ops;
+		buf->flags = 0;
 		buf->page = page;
 		buf->offset = 0;
 		buf->len = min_t(ssize_t, left, PAGE_SIZE);
diff --git a/lib/irq_poll.c b/lib/irq_poll.c
index 2f17b488d58e..2b9f797642f6 100644
--- a/lib/irq_poll.c
+++ b/lib/irq_poll.c
@@ -191,11 +191,13 @@ static int irq_poll_cpu_dead(unsigned int cpu)
 	 * If a CPU goes away, splice its entries to the current CPU
 	 * and trigger a run of the softirq
 	 */
+	local_bh_disable();
 	local_irq_disable();
 	list_splice_init(&per_cpu(blk_cpu_iopoll, cpu),
 			 this_cpu_ptr(&blk_cpu_iopoll));
 	__raise_softirq_irqoff(IRQ_POLL_SOFTIRQ);
 	local_irq_enable();
+	local_bh_enable();
 
 	return 0;
 }
diff --git a/lib/locking-selftest.c b/lib/locking-selftest.c
index 161108e5d2fe..1266ea3726d7 100644
--- a/lib/locking-selftest.c
+++ b/lib/locking-selftest.c
@@ -26,6 +26,12 @@
 #include <linux/rtmutex.h>
 #include <linux/local_lock.h>
 
+#ifdef CONFIG_PREEMPT_RT
+# define NON_RT(...)
+#else
+# define NON_RT(...)	__VA_ARGS__
+#endif
+
 /*
  * Change this to 1 if you want to see the failure printouts:
  */
@@ -139,7 +145,7 @@ static DEFINE_RT_MUTEX(rtmutex_Z2);
 
 #endif
 
-static local_lock_t local_A = INIT_LOCAL_LOCK(local_A);
+static DEFINE_PER_CPU(local_lock_t, local_A);
 
 /*
  * non-inlined runtime initializers, to let separate locks share
@@ -712,12 +718,18 @@ GENERATE_TESTCASE(ABCDBCDA_rtmutex);
 
 #undef E
 
+#ifdef CONFIG_PREEMPT_RT
+# define RT_PREPARE_DBL_UNLOCK()	{ migrate_disable(); rcu_read_lock(); }
+#else
+# define RT_PREPARE_DBL_UNLOCK()
+#endif
 /*
  * Double unlock:
  */
 #define E()					\
 						\
 	LOCK(A);				\
+	RT_PREPARE_DBL_UNLOCK();		\
 	UNLOCK(A);				\
 	UNLOCK(A); /* fail */
 
@@ -802,6 +814,7 @@ GENERATE_PERMUTATIONS_2_EVENTS(irqsafe1_hard_rlock)
 #include "locking-selftest-wlock-hardirq.h"
 GENERATE_PERMUTATIONS_2_EVENTS(irqsafe1_hard_wlock)
 
+#ifndef CONFIG_PREEMPT_RT
 #include "locking-selftest-spin-softirq.h"
 GENERATE_PERMUTATIONS_2_EVENTS(irqsafe1_soft_spin)
 
@@ -810,10 +823,12 @@ GENERATE_PERMUTATIONS_2_EVENTS(irqsafe1_soft_rlock)
 
 #include "locking-selftest-wlock-softirq.h"
 GENERATE_PERMUTATIONS_2_EVENTS(irqsafe1_soft_wlock)
+#endif
 
 #undef E1
 #undef E2
 
+#ifndef CONFIG_PREEMPT_RT
 /*
  * Enabling hardirqs with a softirq-safe lock held:
  */
@@ -846,6 +861,8 @@ GENERATE_PERMUTATIONS_2_EVENTS(irqsafe2A_rlock)
 #undef E1
 #undef E2
 
+#endif
+
 /*
  * Enabling irqs with an irq-safe lock held:
  */
@@ -875,6 +892,7 @@ GENERATE_PERMUTATIONS_2_EVENTS(irqsafe2B_hard_rlock)
 #include "locking-selftest-wlock-hardirq.h"
 GENERATE_PERMUTATIONS_2_EVENTS(irqsafe2B_hard_wlock)
 
+#ifndef CONFIG_PREEMPT_RT
 #include "locking-selftest-spin-softirq.h"
 GENERATE_PERMUTATIONS_2_EVENTS(irqsafe2B_soft_spin)
 
@@ -883,6 +901,7 @@ GENERATE_PERMUTATIONS_2_EVENTS(irqsafe2B_soft_rlock)
 
 #include "locking-selftest-wlock-softirq.h"
 GENERATE_PERMUTATIONS_2_EVENTS(irqsafe2B_soft_wlock)
+#endif
 
 #undef E1
 #undef E2
@@ -921,6 +940,7 @@ GENERATE_PERMUTATIONS_3_EVENTS(irqsafe3_hard_rlock)
 #include "locking-selftest-wlock-hardirq.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irqsafe3_hard_wlock)
 
+#ifndef CONFIG_PREEMPT_RT
 #include "locking-selftest-spin-softirq.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irqsafe3_soft_spin)
 
@@ -929,6 +949,7 @@ GENERATE_PERMUTATIONS_3_EVENTS(irqsafe3_soft_rlock)
 
 #include "locking-selftest-wlock-softirq.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irqsafe3_soft_wlock)
+#endif
 
 #undef E1
 #undef E2
@@ -969,6 +990,7 @@ GENERATE_PERMUTATIONS_3_EVENTS(irqsafe4_hard_rlock)
 #include "locking-selftest-wlock-hardirq.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irqsafe4_hard_wlock)
 
+#ifndef CONFIG_PREEMPT_RT
 #include "locking-selftest-spin-softirq.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irqsafe4_soft_spin)
 
@@ -977,6 +999,7 @@ GENERATE_PERMUTATIONS_3_EVENTS(irqsafe4_soft_rlock)
 
 #include "locking-selftest-wlock-softirq.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irqsafe4_soft_wlock)
+#endif
 
 #undef E1
 #undef E2
@@ -1031,6 +1054,7 @@ GENERATE_PERMUTATIONS_3_EVENTS(irq_inversion_hard_rlock)
 #include "locking-selftest-wlock-hardirq.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irq_inversion_hard_wlock)
 
+#ifndef CONFIG_PREEMPT_RT
 #include "locking-selftest-spin-softirq.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irq_inversion_soft_spin)
 
@@ -1039,6 +1063,7 @@ GENERATE_PERMUTATIONS_3_EVENTS(irq_inversion_soft_rlock)
 
 #include "locking-selftest-wlock-softirq.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irq_inversion_soft_wlock)
+#endif
 
 #undef E1
 #undef E2
@@ -1206,12 +1231,14 @@ GENERATE_PERMUTATIONS_3_EVENTS(irq_read_recursion_hard_rlock)
 #include "locking-selftest-wlock.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irq_read_recursion_hard_wlock)
 
+#ifndef CONFIG_PREEMPT_RT
 #include "locking-selftest-softirq.h"
 #include "locking-selftest-rlock.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irq_read_recursion_soft_rlock)
 
 #include "locking-selftest-wlock.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irq_read_recursion_soft_wlock)
+#endif
 
 #undef E1
 #undef E2
@@ -1252,12 +1279,14 @@ GENERATE_PERMUTATIONS_3_EVENTS(irq_read_recursion2_hard_rlock)
 #include "locking-selftest-wlock.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irq_read_recursion2_hard_wlock)
 
+#ifndef CONFIG_PREEMPT_RT
 #include "locking-selftest-softirq.h"
 #include "locking-selftest-rlock.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irq_read_recursion2_soft_rlock)
 
 #include "locking-selftest-wlock.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irq_read_recursion2_soft_wlock)
+#endif
 
 #undef E1
 #undef E2
@@ -1306,12 +1335,14 @@ GENERATE_PERMUTATIONS_3_EVENTS(irq_read_recursion3_hard_rlock)
 #include "locking-selftest-wlock.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irq_read_recursion3_hard_wlock)
 
+#ifndef CONFIG_PREEMPT_RT
 #include "locking-selftest-softirq.h"
 #include "locking-selftest-rlock.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irq_read_recursion3_soft_rlock)
 
 #include "locking-selftest-wlock.h"
 GENERATE_PERMUTATIONS_3_EVENTS(irq_read_recursion3_soft_wlock)
+#endif
 
 #ifdef CONFIG_DEBUG_LOCK_ALLOC
 # define I_SPINLOCK(x)	lockdep_reset_lock(&lock_##x.dep_map)
@@ -1320,7 +1351,7 @@ GENERATE_PERMUTATIONS_3_EVENTS(irq_read_recursion3_soft_wlock)
 # define I_MUTEX(x)	lockdep_reset_lock(&mutex_##x.dep_map)
 # define I_RWSEM(x)	lockdep_reset_lock(&rwsem_##x.dep_map)
 # define I_WW(x)	lockdep_reset_lock(&x.dep_map)
-# define I_LOCAL_LOCK(x) lockdep_reset_lock(&local_##x.dep_map)
+# define I_LOCAL_LOCK(x) lockdep_reset_lock(this_cpu_ptr(&local_##x.dep_map))
 #ifdef CONFIG_RT_MUTEXES
 # define I_RTMUTEX(x)	lockdep_reset_lock(&rtmutex_##x.dep_map)
 #endif
@@ -1380,7 +1411,7 @@ static void reset_locks(void)
 	init_shared_classes();
 	raw_spin_lock_init(&raw_lock_A);
 	raw_spin_lock_init(&raw_lock_B);
-	local_lock_init(&local_A);
+	local_lock_init(this_cpu_ptr(&local_A));
 
 	ww_mutex_init(&o, &ww_lockdep); ww_mutex_init(&o2, &ww_lockdep); ww_mutex_init(&o3, &ww_lockdep);
 	memset(&t, 0, sizeof(t)); memset(&t2, 0, sizeof(t2));
@@ -1398,7 +1429,13 @@ static int unexpected_testcase_failures;
 
 static void dotest(void (*testcase_fn)(void), int expected, int lockclass_mask)
 {
-	unsigned long saved_preempt_count = preempt_count();
+	int saved_preempt_count = preempt_count();
+#ifdef CONFIG_PREEMPT_RT
+#ifdef CONFIG_SMP
+	int saved_mgd_count = current->migration_disabled;
+#endif
+	int saved_rcu_count = current->rcu_read_lock_nesting;
+#endif
 
 	WARN_ON(irqs_disabled());
 
@@ -1432,6 +1469,18 @@ static void dotest(void (*testcase_fn)(void), int expected, int lockclass_mask)
 	 * count, so restore it:
 	 */
 	preempt_count_set(saved_preempt_count);
+
+#ifdef CONFIG_PREEMPT_RT
+#ifdef CONFIG_SMP
+	while (current->migration_disabled > saved_mgd_count)
+		migrate_enable();
+#endif
+
+	while (current->rcu_read_lock_nesting > saved_rcu_count)
+		rcu_read_unlock();
+	WARN_ON_ONCE(current->rcu_read_lock_nesting < saved_rcu_count);
+#endif
+
 #ifdef CONFIG_TRACE_IRQFLAGS
 	if (softirq_count())
 		current->softirqs_enabled = 0;
@@ -1499,7 +1548,7 @@ static inline void print_testname(const char *testname)
 
 #define DO_TESTCASE_2x2RW(desc, name, nr)			\
 	DO_TESTCASE_2RW("hard-"desc, name##_hard, nr)		\
-	DO_TESTCASE_2RW("soft-"desc, name##_soft, nr)		\
+	NON_RT(DO_TESTCASE_2RW("soft-"desc, name##_soft, nr))	\
 
 #define DO_TESTCASE_6x2x2RW(desc, name)				\
 	DO_TESTCASE_2x2RW(desc, name, 123);			\
@@ -1547,19 +1596,19 @@ static inline void print_testname(const char *testname)
 
 #define DO_TESTCASE_2I(desc, name, nr)				\
 	DO_TESTCASE_1("hard-"desc, name##_hard, nr);		\
-	DO_TESTCASE_1("soft-"desc, name##_soft, nr);
+	NON_RT(DO_TESTCASE_1("soft-"desc, name##_soft, nr));
 
 #define DO_TESTCASE_2IB(desc, name, nr)				\
 	DO_TESTCASE_1B("hard-"desc, name##_hard, nr);		\
-	DO_TESTCASE_1B("soft-"desc, name##_soft, nr);
+	NON_RT(DO_TESTCASE_1B("soft-"desc, name##_soft, nr));
 
 #define DO_TESTCASE_6I(desc, name, nr)				\
 	DO_TESTCASE_3("hard-"desc, name##_hard, nr);		\
-	DO_TESTCASE_3("soft-"desc, name##_soft, nr);
+	NON_RT(DO_TESTCASE_3("soft-"desc, name##_soft, nr));
 
 #define DO_TESTCASE_6IRW(desc, name, nr)			\
 	DO_TESTCASE_3RW("hard-"desc, name##_hard, nr);		\
-	DO_TESTCASE_3RW("soft-"desc, name##_soft, nr);
+	NON_RT(DO_TESTCASE_3RW("soft-"desc, name##_soft, nr));
 
 #define DO_TESTCASE_2x3(desc, name)				\
 	DO_TESTCASE_3(desc, name, 12);				\
@@ -1651,6 +1700,20 @@ static void ww_test_fail_acquire(void)
 #endif
 }
 
+#ifdef CONFIG_PREEMPT_RT
+#define ww_mutex_base_lock(b)			rt_mutex_lock(b)
+#define ww_mutex_base_lock_nest_lock(b, b2)	rt_mutex_lock_nest_lock(b, b2)
+#define ww_mutex_base_lock_interruptible(b)	rt_mutex_lock_interruptible(b)
+#define ww_mutex_base_lock_killable(b)		rt_mutex_lock_killable(b)
+#define ww_mutex_base_unlock(b)			rt_mutex_unlock(b)
+#else
+#define ww_mutex_base_lock(b)			mutex_lock(b)
+#define ww_mutex_base_lock_nest_lock(b, b2)	mutex_lock_nest_lock(b, b2)
+#define ww_mutex_base_lock_interruptible(b)	mutex_lock_interruptible(b)
+#define ww_mutex_base_lock_killable(b)		mutex_lock_killable(b)
+#define ww_mutex_base_unlock(b)			mutex_unlock(b)
+#endif
+
 static void ww_test_normal(void)
 {
 	int ret;
@@ -1665,50 +1728,50 @@ static void ww_test_normal(void)
 
 	/* mutex_lock (and indirectly, mutex_lock_nested) */
 	o.ctx = (void *)~0UL;
-	mutex_lock(&o.base);
-	mutex_unlock(&o.base);
+	ww_mutex_base_lock(&o.base);
+	ww_mutex_base_unlock(&o.base);
 	WARN_ON(o.ctx != (void *)~0UL);
 
 	/* mutex_lock_interruptible (and *_nested) */
 	o.ctx = (void *)~0UL;
-	ret = mutex_lock_interruptible(&o.base);
+	ret = ww_mutex_base_lock_interruptible(&o.base);
 	if (!ret)
-		mutex_unlock(&o.base);
+		ww_mutex_base_unlock(&o.base);
 	else
 		WARN_ON(1);
 	WARN_ON(o.ctx != (void *)~0UL);
 
 	/* mutex_lock_killable (and *_nested) */
 	o.ctx = (void *)~0UL;
-	ret = mutex_lock_killable(&o.base);
+	ret = ww_mutex_base_lock_killable(&o.base);
 	if (!ret)
-		mutex_unlock(&o.base);
+		ww_mutex_base_unlock(&o.base);
 	else
 		WARN_ON(1);
 	WARN_ON(o.ctx != (void *)~0UL);
 
 	/* trylock, succeeding */
 	o.ctx = (void *)~0UL;
-	ret = mutex_trylock(&o.base);
+	ret = ww_mutex_base_trylock(&o.base);
 	WARN_ON(!ret);
 	if (ret)
-		mutex_unlock(&o.base);
+		ww_mutex_base_unlock(&o.base);
 	else
 		WARN_ON(1);
 	WARN_ON(o.ctx != (void *)~0UL);
 
 	/* trylock, failing */
 	o.ctx = (void *)~0UL;
-	mutex_lock(&o.base);
-	ret = mutex_trylock(&o.base);
+	ww_mutex_base_lock(&o.base);
+	ret = ww_mutex_base_trylock(&o.base);
 	WARN_ON(ret);
-	mutex_unlock(&o.base);
+	ww_mutex_base_unlock(&o.base);
 	WARN_ON(o.ctx != (void *)~0UL);
 
 	/* nest_lock */
 	o.ctx = (void *)~0UL;
-	mutex_lock_nest_lock(&o.base, &t);
-	mutex_unlock(&o.base);
+	ww_mutex_base_lock_nest_lock(&o.base, &t);
+	ww_mutex_base_unlock(&o.base);
 	WARN_ON(o.ctx != (void *)~0UL);
 }
 
@@ -1721,7 +1784,7 @@ static void ww_test_two_contexts(void)
 static void ww_test_diff_class(void)
 {
 	WWAI(&t);
-#ifdef CONFIG_DEBUG_MUTEXES
+#ifdef DEBUG_WW_MUTEXES
 	t.ww_class = NULL;
 #endif
 	WWL(&o, &t);
@@ -1785,7 +1848,7 @@ static void ww_test_edeadlk_normal(void)
 {
 	int ret;
 
-	mutex_lock(&o2.base);
+	ww_mutex_base_lock(&o2.base);
 	o2.ctx = &t2;
 	mutex_release(&o2.base.dep_map, _THIS_IP_);
 
@@ -1801,7 +1864,7 @@ static void ww_test_edeadlk_normal(void)
 
 	o2.ctx = NULL;
 	mutex_acquire(&o2.base.dep_map, 0, 1, _THIS_IP_);
-	mutex_unlock(&o2.base);
+	ww_mutex_base_unlock(&o2.base);
 	WWU(&o);
 
 	WWL(&o2, &t);
@@ -1811,7 +1874,7 @@ static void ww_test_edeadlk_normal_slow(void)
 {
 	int ret;
 
-	mutex_lock(&o2.base);
+	ww_mutex_base_lock(&o2.base);
 	mutex_release(&o2.base.dep_map, _THIS_IP_);
 	o2.ctx = &t2;
 
@@ -1827,7 +1890,7 @@ static void ww_test_edeadlk_normal_slow(void)
 
 	o2.ctx = NULL;
 	mutex_acquire(&o2.base.dep_map, 0, 1, _THIS_IP_);
-	mutex_unlock(&o2.base);
+	ww_mutex_base_unlock(&o2.base);
 	WWU(&o);
 
 	ww_mutex_lock_slow(&o2, &t);
@@ -1837,7 +1900,7 @@ static void ww_test_edeadlk_no_unlock(void)
 {
 	int ret;
 
-	mutex_lock(&o2.base);
+	ww_mutex_base_lock(&o2.base);
 	o2.ctx = &t2;
 	mutex_release(&o2.base.dep_map, _THIS_IP_);
 
@@ -1853,7 +1916,7 @@ static void ww_test_edeadlk_no_unlock(void)
 
 	o2.ctx = NULL;
 	mutex_acquire(&o2.base.dep_map, 0, 1, _THIS_IP_);
-	mutex_unlock(&o2.base);
+	ww_mutex_base_unlock(&o2.base);
 
 	WWL(&o2, &t);
 }
@@ -1862,7 +1925,7 @@ static void ww_test_edeadlk_no_unlock_slow(void)
 {
 	int ret;
 
-	mutex_lock(&o2.base);
+	ww_mutex_base_lock(&o2.base);
 	mutex_release(&o2.base.dep_map, _THIS_IP_);
 	o2.ctx = &t2;
 
@@ -1878,7 +1941,7 @@ static void ww_test_edeadlk_no_unlock_slow(void)
 
 	o2.ctx = NULL;
 	mutex_acquire(&o2.base.dep_map, 0, 1, _THIS_IP_);
-	mutex_unlock(&o2.base);
+	ww_mutex_base_unlock(&o2.base);
 
 	ww_mutex_lock_slow(&o2, &t);
 }
@@ -1887,7 +1950,7 @@ static void ww_test_edeadlk_acquire_more(void)
 {
 	int ret;
 
-	mutex_lock(&o2.base);
+	ww_mutex_base_lock(&o2.base);
 	mutex_release(&o2.base.dep_map, _THIS_IP_);
 	o2.ctx = &t2;
 
@@ -1908,7 +1971,7 @@ static void ww_test_edeadlk_acquire_more_slow(void)
 {
 	int ret;
 
-	mutex_lock(&o2.base);
+	ww_mutex_base_lock(&o2.base);
 	mutex_release(&o2.base.dep_map, _THIS_IP_);
 	o2.ctx = &t2;
 
@@ -1929,11 +1992,11 @@ static void ww_test_edeadlk_acquire_more_edeadlk(void)
 {
 	int ret;
 
-	mutex_lock(&o2.base);
+	ww_mutex_base_lock(&o2.base);
 	mutex_release(&o2.base.dep_map, _THIS_IP_);
 	o2.ctx = &t2;
 
-	mutex_lock(&o3.base);
+	ww_mutex_base_lock(&o3.base);
 	mutex_release(&o3.base.dep_map, _THIS_IP_);
 	o3.ctx = &t2;
 
@@ -1955,11 +2018,11 @@ static void ww_test_edeadlk_acquire_more_edeadlk_slow(void)
 {
 	int ret;
 
-	mutex_lock(&o2.base);
+	ww_mutex_base_lock(&o2.base);
 	mutex_release(&o2.base.dep_map, _THIS_IP_);
 	o2.ctx = &t2;
 
-	mutex_lock(&o3.base);
+	ww_mutex_base_lock(&o3.base);
 	mutex_release(&o3.base.dep_map, _THIS_IP_);
 	o3.ctx = &t2;
 
@@ -1980,7 +2043,7 @@ static void ww_test_edeadlk_acquire_wrong(void)
 {
 	int ret;
 
-	mutex_lock(&o2.base);
+	ww_mutex_base_lock(&o2.base);
 	mutex_release(&o2.base.dep_map, _THIS_IP_);
 	o2.ctx = &t2;
 
@@ -2005,7 +2068,7 @@ static void ww_test_edeadlk_acquire_wrong_slow(void)
 {
 	int ret;
 
-	mutex_lock(&o2.base);
+	ww_mutex_base_lock(&o2.base);
 	mutex_release(&o2.base.dep_map, _THIS_IP_);
 	o2.ctx = &t2;
 
@@ -2646,8 +2709,8 @@ static void wait_context_tests(void)
 
 static void local_lock_2(void)
 {
-	local_lock_acquire(&local_A);	/* IRQ-ON */
-	local_lock_release(&local_A);
+	local_lock(&local_A);	/* IRQ-ON */
+	local_unlock(&local_A);
 
 	HARDIRQ_ENTER();
 	spin_lock(&lock_A);		/* IN-IRQ */
@@ -2656,18 +2719,18 @@ static void local_lock_2(void)
 
 	HARDIRQ_DISABLE();
 	spin_lock(&lock_A);
-	local_lock_acquire(&local_A);	/* IN-IRQ <-> IRQ-ON cycle, false */
-	local_lock_release(&local_A);
+	local_lock(&local_A);	/* IN-IRQ <-> IRQ-ON cycle, false */
+	local_unlock(&local_A);
 	spin_unlock(&lock_A);
 	HARDIRQ_ENABLE();
 }
 
 static void local_lock_3A(void)
 {
-	local_lock_acquire(&local_A);	/* IRQ-ON */
+	local_lock(&local_A);	/* IRQ-ON */
 	spin_lock(&lock_B);		/* IRQ-ON */
 	spin_unlock(&lock_B);
-	local_lock_release(&local_A);
+	local_unlock(&local_A);
 
 	HARDIRQ_ENTER();
 	spin_lock(&lock_A);		/* IN-IRQ */
@@ -2676,18 +2739,18 @@ static void local_lock_3A(void)
 
 	HARDIRQ_DISABLE();
 	spin_lock(&lock_A);
-	local_lock_acquire(&local_A);	/* IN-IRQ <-> IRQ-ON cycle only if we count local_lock(), false */
-	local_lock_release(&local_A);
+	local_lock(&local_A);	/* IN-IRQ <-> IRQ-ON cycle only if we count local_lock(), false */
+	local_unlock(&local_A);
 	spin_unlock(&lock_A);
 	HARDIRQ_ENABLE();
 }
 
 static void local_lock_3B(void)
 {
-	local_lock_acquire(&local_A);	/* IRQ-ON */
+	local_lock(&local_A);	/* IRQ-ON */
 	spin_lock(&lock_B);		/* IRQ-ON */
 	spin_unlock(&lock_B);
-	local_lock_release(&local_A);
+	local_unlock(&local_A);
 
 	HARDIRQ_ENTER();
 	spin_lock(&lock_A);		/* IN-IRQ */
@@ -2696,8 +2759,8 @@ static void local_lock_3B(void)
 
 	HARDIRQ_DISABLE();
 	spin_lock(&lock_A);
-	local_lock_acquire(&local_A);	/* IN-IRQ <-> IRQ-ON cycle only if we count local_lock(), false */
-	local_lock_release(&local_A);
+	local_lock(&local_A);	/* IN-IRQ <-> IRQ-ON cycle only if we count local_lock(), false */
+	local_unlock(&local_A);
 	spin_unlock(&lock_A);
 	HARDIRQ_ENABLE();
 
@@ -2812,7 +2875,7 @@ void locking_selftest(void)
 	printk("------------------------\n");
 	printk("| Locking API testsuite:\n");
 	printk("----------------------------------------------------------------------------\n");
-	printk("                                 | spin |wlock |rlock |mutex | wsem | rsem |\n");
+	printk("                                 | spin |wlock |rlock |mutex | wsem | rsem |rtmutex\n");
 	printk("  --------------------------------------------------------------------------\n");
 
 	init_shared_classes();
@@ -2885,12 +2948,11 @@ void locking_selftest(void)
 	DO_TESTCASE_6x1RR("rlock W1R2/R2R3/W3W1", W1R2_R2R3_W3W1);
 
 	printk("  --------------------------------------------------------------------------\n");
-
 	/*
 	 * irq-context testcases:
 	 */
 	DO_TESTCASE_2x6("irqs-on + irq-safe-A", irqsafe1);
-	DO_TESTCASE_2x3("sirq-safe-A => hirqs-on", irqsafe2A);
+	NON_RT(DO_TESTCASE_2x3("sirq-safe-A => hirqs-on", irqsafe2A));
 	DO_TESTCASE_2x6("safe-A + irqs-on", irqsafe2B);
 	DO_TESTCASE_6x6("safe-A + unsafe-B #1", irqsafe3);
 	DO_TESTCASE_6x6("safe-A + unsafe-B #2", irqsafe4);
diff --git a/lib/nmi_backtrace.c b/lib/nmi_backtrace.c
index 199ab201d501..06410209197a 100644
--- a/lib/nmi_backtrace.c
+++ b/lib/nmi_backtrace.c
@@ -99,7 +99,7 @@ bool nmi_cpu_backtrace(struct pt_regs *regs)
 		 * Allow nested NMI backtraces while serializing
 		 * against other CPUs.
 		 */
-		printk_cpu_lock_irqsave(flags);
+		raw_printk_cpu_lock_irqsave(flags);
 		if (!READ_ONCE(backtrace_idle) && regs && cpu_in_idle(instruction_pointer(regs))) {
 			pr_warn("NMI backtrace for cpu %d skipped: idling at %pS\n",
 				cpu, (void *)instruction_pointer(regs));
@@ -110,7 +110,7 @@ bool nmi_cpu_backtrace(struct pt_regs *regs)
 			else
 				dump_stack();
 		}
-		printk_cpu_unlock_irqrestore(flags);
+		raw_printk_cpu_unlock_irqrestore(flags);
 		cpumask_clear_cpu(cpu, to_cpumask(backtrace_mask));
 		return true;
 	}
diff --git a/lib/ratelimit.c b/lib/ratelimit.c
index e01a93f46f83..524cf65dce53 100644
--- a/lib/ratelimit.c
+++ b/lib/ratelimit.c
@@ -47,9 +47,7 @@ int ___ratelimit(struct ratelimit_state *rs, const char *func)
 	if (time_is_before_jiffies(rs->begin + rs->interval)) {
 		if (rs->missed) {
 			if (!(rs->flags & RATELIMIT_MSG_ON_RELEASE)) {
-				printk_deferred(KERN_WARNING
-						"%s: %d callbacks suppressed\n",
-						func, rs->missed);
+				pr_warn("%s: %d callbacks suppressed\n", func, rs->missed);
 				rs->missed = 0;
 			}
 		}
diff --git a/lib/scatterlist.c b/lib/scatterlist.c
index abb3432ed744..d5e82e4a57ad 100644
--- a/lib/scatterlist.c
+++ b/lib/scatterlist.c
@@ -828,8 +828,7 @@ static bool sg_miter_get_next_page(struct sg_mapping_iter *miter)
  *   stops @miter.
  *
  * Context:
- *   Don't care if @miter is stopped, or not proceeded yet.
- *   Otherwise, preemption disabled if the SG_MITER_ATOMIC is set.
+ *   Don't care.
  *
  * Returns:
  *   true if @miter contains the valid mapping.  false if end of sg
@@ -865,8 +864,7 @@ EXPORT_SYMBOL(sg_miter_skip);
  *   @miter->addr and @miter->length point to the current mapping.
  *
  * Context:
- *   Preemption disabled if SG_MITER_ATOMIC.  Preemption must stay disabled
- *   till @miter is stopped.  May sleep if !SG_MITER_ATOMIC.
+ *   May sleep if !SG_MITER_ATOMIC.
  *
  * Returns:
  *   true if @miter contains the next mapping.  false if end of sg
@@ -906,8 +904,7 @@ EXPORT_SYMBOL(sg_miter_next);
  *   need to be released during iteration.
  *
  * Context:
- *   Preemption disabled if the SG_MITER_ATOMIC is set.  Don't care
- *   otherwise.
+ *   Don't care otherwise.
  */
 void sg_miter_stop(struct sg_mapping_iter *miter)
 {
@@ -922,7 +919,7 @@ void sg_miter_stop(struct sg_mapping_iter *miter)
 			flush_dcache_page(miter->page);
 
 		if (miter->__flags & SG_MITER_ATOMIC) {
-			WARN_ON_ONCE(preemptible());
+			WARN_ON_ONCE(!pagefault_disabled());
 			kunmap_atomic(miter->addr);
 		} else
 			kunmap(miter->page);
diff --git a/localversion-rt b/localversion-rt
new file mode 100644
index 000000000000..90290c642ed5
--- /dev/null
+++ b/localversion-rt
@@ -0,0 +1 @@
+-rt29
diff --git a/localversion-wago b/localversion-wago
new file mode 100644
index 000000000000..1b8d0af124c1
--- /dev/null
+++ b/localversion-wago
@@ -0,0 +1 @@
+w04.00.01
diff --git a/mm/Kconfig b/mm/Kconfig
index c048dea7e342..88778414465b 100644
--- a/mm/Kconfig
+++ b/mm/Kconfig
@@ -371,7 +371,7 @@ config NOMMU_INITIAL_TRIM_EXCESS
 
 config TRANSPARENT_HUGEPAGE
 	bool "Transparent Hugepage Support"
-	depends on HAVE_ARCH_TRANSPARENT_HUGEPAGE
+	depends on HAVE_ARCH_TRANSPARENT_HUGEPAGE && !PREEMPT_RT
 	select COMPACTION
 	select XARRAY_MULTI
 	help
diff --git a/mm/memcontrol.c b/mm/memcontrol.c
index 96cd7eae800b..ac2c20c99775 100644
--- a/mm/memcontrol.c
+++ b/mm/memcontrol.c
@@ -261,8 +261,10 @@ bool mem_cgroup_kmem_disabled(void)
 	return cgroup_memory_nokmem;
 }
 
+struct memcg_stock_pcp;
 static void obj_cgroup_uncharge_pages(struct obj_cgroup *objcg,
-				      unsigned int nr_pages);
+				      unsigned int nr_pages,
+				      bool stock_lock_acquried);
 
 static void obj_cgroup_release(struct percpu_ref *ref)
 {
@@ -296,7 +298,7 @@ static void obj_cgroup_release(struct percpu_ref *ref)
 	nr_pages = nr_bytes >> PAGE_SHIFT;
 
 	if (nr_pages)
-		obj_cgroup_uncharge_pages(objcg, nr_pages);
+		obj_cgroup_uncharge_pages(objcg, nr_pages, false);
 
 	spin_lock_irqsave(&css_set_lock, flags);
 	list_del(&objcg->list);
@@ -699,8 +701,14 @@ void __mod_memcg_state(struct mem_cgroup *memcg, int idx, int val)
 	if (mem_cgroup_disabled())
 		return;
 
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_disable();
+
 	__this_cpu_add(memcg->vmstats_percpu->state[idx], val);
 	memcg_rstat_updated(memcg, val);
+
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_enable();
 }
 
 /* idx can be of type enum memcg_stat_item or node_stat_item. */
@@ -727,6 +735,9 @@ void __mod_memcg_lruvec_state(struct lruvec *lruvec, enum node_stat_item idx,
 	pn = container_of(lruvec, struct mem_cgroup_per_node, lruvec);
 	memcg = pn->memcg;
 
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_disable();
+
 	/* Update memcg */
 	__this_cpu_add(memcg->vmstats_percpu->state[idx], val);
 
@@ -734,6 +745,9 @@ void __mod_memcg_lruvec_state(struct lruvec *lruvec, enum node_stat_item idx,
 	__this_cpu_add(pn->lruvec_stats_percpu->state[idx], val);
 
 	memcg_rstat_updated(memcg, val);
+
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_enable();
 }
 
 /**
@@ -804,24 +818,6 @@ void __mod_lruvec_kmem_state(void *p, enum node_stat_item idx, int val)
 	rcu_read_unlock();
 }
 
-/*
- * mod_objcg_mlstate() may be called with irq enabled, so
- * mod_memcg_lruvec_state() should be used.
- */
-static inline void mod_objcg_mlstate(struct obj_cgroup *objcg,
-				     struct pglist_data *pgdat,
-				     enum node_stat_item idx, int nr)
-{
-	struct mem_cgroup *memcg;
-	struct lruvec *lruvec;
-
-	rcu_read_lock();
-	memcg = obj_cgroup_memcg(objcg);
-	lruvec = mem_cgroup_lruvec(memcg, pgdat);
-	mod_memcg_lruvec_state(lruvec, idx, nr);
-	rcu_read_unlock();
-}
-
 /**
  * __count_memcg_events - account VM events in a cgroup
  * @memcg: the memory cgroup
@@ -834,8 +830,13 @@ void __count_memcg_events(struct mem_cgroup *memcg, enum vm_event_item idx,
 	if (mem_cgroup_disabled())
 		return;
 
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_disable();
+
 	__this_cpu_add(memcg->vmstats_percpu->events[idx], count);
 	memcg_rstat_updated(memcg, count);
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_enable();
 }
 
 static unsigned long memcg_events(struct mem_cgroup *memcg, int event)
@@ -857,6 +858,9 @@ static void mem_cgroup_charge_statistics(struct mem_cgroup *memcg,
 					 struct page *page,
 					 int nr_pages)
 {
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_disable();
+
 	/* pagein of a big page is an event. So, ignore page size */
 	if (nr_pages > 0)
 		__count_memcg_events(memcg, PGPGIN, 1);
@@ -866,12 +870,19 @@ static void mem_cgroup_charge_statistics(struct mem_cgroup *memcg,
 	}
 
 	__this_cpu_add(memcg->vmstats_percpu->nr_page_events, nr_pages);
+
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_enable();
 }
 
 static bool mem_cgroup_event_ratelimit(struct mem_cgroup *memcg,
 				       enum mem_cgroup_events_target target)
 {
 	unsigned long val, next;
+	bool ret = false;
+
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_disable();
 
 	val = __this_cpu_read(memcg->vmstats_percpu->nr_page_events);
 	next = __this_cpu_read(memcg->vmstats_percpu->targets[target]);
@@ -888,9 +899,11 @@ static bool mem_cgroup_event_ratelimit(struct mem_cgroup *memcg,
 			break;
 		}
 		__this_cpu_write(memcg->vmstats_percpu->targets[target], next);
-		return true;
+		ret = true;
 	}
-	return false;
+	if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		preempt_enable();
+	return ret;
 }
 
 /*
@@ -2105,26 +2118,40 @@ struct obj_stock {
 };
 
 struct memcg_stock_pcp {
+	/* Protects memcg_stock_pcp */
+	local_lock_t stock_lock;
 	struct mem_cgroup *cached; /* this never be root cgroup */
 	unsigned int nr_pages;
+#ifndef CONFIG_PREEMPTION
+	/* Protects only task_obj */
+	local_lock_t task_obj_lock;
 	struct obj_stock task_obj;
+#endif
 	struct obj_stock irq_obj;
 
 	struct work_struct work;
 	unsigned long flags;
 #define FLUSHING_CACHED_CHARGE	0
 };
-static DEFINE_PER_CPU(struct memcg_stock_pcp, memcg_stock);
+static DEFINE_PER_CPU(struct memcg_stock_pcp, memcg_stock) = {
+	.stock_lock = INIT_LOCAL_LOCK(stock_lock),
+#ifndef CONFIG_PREEMPTION
+	.task_obj_lock = INIT_LOCAL_LOCK(task_obj_lock),
+#endif
+};
 static DEFINE_MUTEX(percpu_charge_mutex);
 
 #ifdef CONFIG_MEMCG_KMEM
-static void drain_obj_stock(struct obj_stock *stock);
+static struct obj_cgroup *drain_obj_stock(struct obj_stock *stock,
+					  bool stock_lock_acquried);
 static bool obj_stock_flush_required(struct memcg_stock_pcp *stock,
 				     struct mem_cgroup *root_memcg);
 
 #else
-static inline void drain_obj_stock(struct obj_stock *stock)
+static inline struct obj_cgroup *drain_obj_stock(struct obj_stock *stock,
+						 bool stock_lock_acquried)
 {
+	return NULL;
 }
 static bool obj_stock_flush_required(struct memcg_stock_pcp *stock,
 				     struct mem_cgroup *root_memcg)
@@ -2133,41 +2160,6 @@ static bool obj_stock_flush_required(struct memcg_stock_pcp *stock,
 }
 #endif
 
-/*
- * Most kmem_cache_alloc() calls are from user context. The irq disable/enable
- * sequence used in this case to access content from object stock is slow.
- * To optimize for user context access, there are now two object stocks for
- * task context and interrupt context access respectively.
- *
- * The task context object stock can be accessed by disabling preemption only
- * which is cheap in non-preempt kernel. The interrupt context object stock
- * can only be accessed after disabling interrupt. User context code can
- * access interrupt object stock, but not vice versa.
- */
-static inline struct obj_stock *get_obj_stock(unsigned long *pflags)
-{
-	struct memcg_stock_pcp *stock;
-
-	if (likely(in_task())) {
-		*pflags = 0UL;
-		preempt_disable();
-		stock = this_cpu_ptr(&memcg_stock);
-		return &stock->task_obj;
-	}
-
-	local_irq_save(*pflags);
-	stock = this_cpu_ptr(&memcg_stock);
-	return &stock->irq_obj;
-}
-
-static inline void put_obj_stock(unsigned long flags)
-{
-	if (likely(in_task()))
-		preempt_enable();
-	else
-		local_irq_restore(flags);
-}
-
 /**
  * consume_stock: Try to consume stocked charge on this cpu.
  * @memcg: memcg to consume from.
@@ -2188,7 +2180,7 @@ static bool consume_stock(struct mem_cgroup *memcg, unsigned int nr_pages)
 	if (nr_pages > MEMCG_CHARGE_BATCH)
 		return ret;
 
-	local_irq_save(flags);
+	local_lock_irqsave(&memcg_stock.stock_lock, flags);
 
 	stock = this_cpu_ptr(&memcg_stock);
 	if (memcg == stock->cached && stock->nr_pages >= nr_pages) {
@@ -2196,7 +2188,7 @@ static bool consume_stock(struct mem_cgroup *memcg, unsigned int nr_pages)
 		ret = true;
 	}
 
-	local_irq_restore(flags);
+	local_unlock_irqrestore(&memcg_stock.stock_lock, flags);
 
 	return ret;
 }
@@ -2224,38 +2216,43 @@ static void drain_stock(struct memcg_stock_pcp *stock)
 
 static void drain_local_stock(struct work_struct *dummy)
 {
-	struct memcg_stock_pcp *stock;
-	unsigned long flags;
+	struct memcg_stock_pcp *stock_pcp;
+	struct obj_cgroup *old;
 
 	/*
 	 * The only protection from cpu hotplug (memcg_hotplug_cpu_dead) vs.
 	 * drain_stock races is that we always operate on local CPU stock
 	 * here with IRQ disabled
 	 */
-	local_irq_save(flags);
+#ifndef CONFIG_PREEMPTION
+	local_lock(&memcg_stock.task_obj_lock);
+	old = drain_obj_stock(&this_cpu_ptr(&memcg_stock)->task_obj, NULL);
+	local_unlock(&memcg_stock.task_obj_lock);
+	if (old)
+		obj_cgroup_put(old);
+#endif
 
-	stock = this_cpu_ptr(&memcg_stock);
-	drain_obj_stock(&stock->irq_obj);
-	if (in_task())
-		drain_obj_stock(&stock->task_obj);
-	drain_stock(stock);
-	clear_bit(FLUSHING_CACHED_CHARGE, &stock->flags);
+	local_lock_irq(&memcg_stock.stock_lock);
+	stock_pcp = this_cpu_ptr(&memcg_stock);
+	old = drain_obj_stock(&stock_pcp->irq_obj, stock_pcp);
 
-	local_irq_restore(flags);
+	drain_stock(stock_pcp);
+	clear_bit(FLUSHING_CACHED_CHARGE, &stock_pcp->flags);
+
+	local_unlock_irq(&memcg_stock.stock_lock);
+	if (old)
+		obj_cgroup_put(old);
 }
 
 /*
  * Cache charges(val) to local per_cpu area.
  * This will be consumed by consume_stock() function, later.
  */
-static void refill_stock(struct mem_cgroup *memcg, unsigned int nr_pages)
+static void __refill_stock(struct mem_cgroup *memcg, unsigned int nr_pages)
 {
-	struct memcg_stock_pcp *stock;
-	unsigned long flags;
+	struct memcg_stock_pcp *stock = this_cpu_ptr(&memcg_stock);
 
-	local_irq_save(flags);
-
-	stock = this_cpu_ptr(&memcg_stock);
+	lockdep_assert_held(&stock->stock_lock);
 	if (stock->cached != memcg) { /* reset if necessary */
 		drain_stock(stock);
 		css_get(&memcg->css);
@@ -2265,8 +2262,20 @@ static void refill_stock(struct mem_cgroup *memcg, unsigned int nr_pages)
 
 	if (stock->nr_pages > MEMCG_CHARGE_BATCH)
 		drain_stock(stock);
+}
 
-	local_irq_restore(flags);
+static void refill_stock(struct mem_cgroup *memcg, unsigned int nr_pages,
+			 bool stock_lock_acquried)
+{
+	unsigned long flags;
+
+	if (stock_lock_acquried) {
+		__refill_stock(memcg, nr_pages);
+		return;
+	}
+	local_lock_irqsave(&memcg_stock.stock_lock, flags);
+	__refill_stock(memcg, nr_pages);
+	local_unlock_irqrestore(&memcg_stock.stock_lock, flags);
 }
 
 /*
@@ -2275,7 +2284,7 @@ static void refill_stock(struct mem_cgroup *memcg, unsigned int nr_pages)
  */
 static void drain_all_stock(struct mem_cgroup *root_memcg)
 {
-	int cpu, curcpu;
+	int cpu;
 
 	/* If someone's already draining, avoid adding running more workers. */
 	if (!mutex_trylock(&percpu_charge_mutex))
@@ -2286,7 +2295,7 @@ static void drain_all_stock(struct mem_cgroup *root_memcg)
 	 * as well as workers from this path always operate on the local
 	 * per-cpu data. CPU up doesn't touch memcg_stock at all.
 	 */
-	curcpu = get_cpu();
+	cpus_read_lock();
 	for_each_online_cpu(cpu) {
 		struct memcg_stock_pcp *stock = &per_cpu(memcg_stock, cpu);
 		struct mem_cgroup *memcg;
@@ -2302,14 +2311,10 @@ static void drain_all_stock(struct mem_cgroup *root_memcg)
 		rcu_read_unlock();
 
 		if (flush &&
-		    !test_and_set_bit(FLUSHING_CACHED_CHARGE, &stock->flags)) {
-			if (cpu == curcpu)
-				drain_local_stock(&stock->work);
-			else
-				schedule_work_on(cpu, &stock->work);
-		}
+		    !test_and_set_bit(FLUSHING_CACHED_CHARGE, &stock->flags))
+			schedule_work_on(cpu, &stock->work);
 	}
-	put_cpu();
+	cpus_read_unlock();
 	mutex_unlock(&percpu_charge_mutex);
 }
 
@@ -2710,7 +2715,7 @@ static int try_charge_memcg(struct mem_cgroup *memcg, gfp_t gfp_mask,
 
 done_restock:
 	if (batch > nr_pages)
-		refill_stock(memcg, batch - nr_pages);
+		refill_stock(memcg, batch - nr_pages, false);
 
 	/*
 	 * If the hierarchy is above the normal consumption range, schedule
@@ -2814,6 +2819,67 @@ static struct mem_cgroup *get_mem_cgroup_from_objcg(struct obj_cgroup *objcg)
  */
 #define OBJCGS_CLEAR_MASK	(__GFP_DMA | __GFP_RECLAIMABLE | __GFP_ACCOUNT)
 
+/*
+ * Most kmem_cache_alloc() calls are from user context. The irq disable/enable
+ * sequence used in this case to access content from object stock is slow.
+ * To optimize for user context access, there are now two object stocks for
+ * task context and interrupt context access respectively.
+ *
+ * The task context object stock can be accessed by disabling preemption only
+ * which is cheap in non-preempt kernel. The interrupt context object stock
+ * can only be accessed after disabling interrupt. User context code can
+ * access interrupt object stock, but not vice versa.
+ */
+static inline struct obj_stock *get_obj_stock(unsigned long *pflags,
+					      bool *stock_lock_acquried)
+{
+	struct memcg_stock_pcp *stock;
+
+#ifndef CONFIG_PREEMPTION
+	if (likely(in_task())) {
+		*pflags = 0UL;
+		*stock_lock_acquried = false;
+		local_lock(&memcg_stock.task_obj_lock);
+		stock = this_cpu_ptr(&memcg_stock);
+		return &stock->task_obj;
+	}
+#endif
+	*stock_lock_acquried = true;
+	local_lock_irqsave(&memcg_stock.stock_lock, *pflags);
+	stock = this_cpu_ptr(&memcg_stock);
+	return &stock->irq_obj;
+}
+
+static inline void put_obj_stock(unsigned long flags,
+				 bool stock_lock_acquried)
+{
+#ifndef CONFIG_PREEMPTION
+	if (likely(!stock_lock_acquried)) {
+		local_unlock(&memcg_stock.task_obj_lock);
+		return;
+	}
+#endif
+	local_unlock_irqrestore(&memcg_stock.stock_lock, flags);
+}
+
+/*
+ * mod_objcg_mlstate() may be called with irq enabled, so
+ * mod_memcg_lruvec_state() should be used.
+ */
+static inline void mod_objcg_mlstate(struct obj_cgroup *objcg,
+				     struct pglist_data *pgdat,
+				     enum node_stat_item idx, int nr)
+{
+	struct mem_cgroup *memcg;
+	struct lruvec *lruvec;
+
+	rcu_read_lock();
+	memcg = obj_cgroup_memcg(objcg);
+	lruvec = mem_cgroup_lruvec(memcg, pgdat);
+	mod_memcg_lruvec_state(lruvec, idx, nr);
+	rcu_read_unlock();
+}
+
 int memcg_alloc_page_obj_cgroups(struct page *page, struct kmem_cache *s,
 				 gfp_t gfp, bool new_page)
 {
@@ -2971,7 +3037,8 @@ static void memcg_free_cache_id(int id)
  * @nr_pages: number of pages to uncharge
  */
 static void obj_cgroup_uncharge_pages(struct obj_cgroup *objcg,
-				      unsigned int nr_pages)
+				      unsigned int nr_pages,
+				      bool stock_lock_acquried)
 {
 	struct mem_cgroup *memcg;
 
@@ -2979,7 +3046,7 @@ static void obj_cgroup_uncharge_pages(struct obj_cgroup *objcg,
 
 	if (!cgroup_subsys_on_dfl(memory_cgrp_subsys))
 		page_counter_uncharge(&memcg->kmem, nr_pages);
-	refill_stock(memcg, nr_pages);
+	refill_stock(memcg, nr_pages, stock_lock_acquried);
 
 	css_put(&memcg->css);
 }
@@ -3066,7 +3133,7 @@ void __memcg_kmem_uncharge_page(struct page *page, int order)
 		return;
 
 	objcg = __page_objcg(page);
-	obj_cgroup_uncharge_pages(objcg, nr_pages);
+	obj_cgroup_uncharge_pages(objcg, nr_pages, false);
 	page->memcg_data = 0;
 	obj_cgroup_put(objcg);
 }
@@ -3074,17 +3141,21 @@ void __memcg_kmem_uncharge_page(struct page *page, int order)
 void mod_objcg_state(struct obj_cgroup *objcg, struct pglist_data *pgdat,
 		     enum node_stat_item idx, int nr)
 {
+	bool stock_lock_acquried;
 	unsigned long flags;
-	struct obj_stock *stock = get_obj_stock(&flags);
+	struct obj_cgroup *old = NULL;
+	struct obj_stock *stock;
 	int *bytes;
 
+	stock = get_obj_stock(&flags, &stock_lock_acquried);
 	/*
 	 * Save vmstat data in stock and skip vmstat array update unless
 	 * accumulating over a page of vmstat data or when pgdat or idx
 	 * changes.
 	 */
 	if (stock->cached_objcg != objcg) {
-		drain_obj_stock(stock);
+		old = drain_obj_stock(stock, stock_lock_acquried);
+
 		obj_cgroup_get(objcg);
 		stock->nr_bytes = atomic_read(&objcg->nr_charged_bytes)
 				? atomic_xchg(&objcg->nr_charged_bytes, 0) : 0;
@@ -3128,38 +3199,43 @@ void mod_objcg_state(struct obj_cgroup *objcg, struct pglist_data *pgdat,
 	if (nr)
 		mod_objcg_mlstate(objcg, pgdat, idx, nr);
 
-	put_obj_stock(flags);
+	put_obj_stock(flags, stock_lock_acquried);
+	if (old)
+		obj_cgroup_put(old);
 }
 
 static bool consume_obj_stock(struct obj_cgroup *objcg, unsigned int nr_bytes)
 {
+	bool stock_lock_acquried;
 	unsigned long flags;
-	struct obj_stock *stock = get_obj_stock(&flags);
+	struct obj_stock *stock;
 	bool ret = false;
 
+	stock = get_obj_stock(&flags, &stock_lock_acquried);
 	if (objcg == stock->cached_objcg && stock->nr_bytes >= nr_bytes) {
 		stock->nr_bytes -= nr_bytes;
 		ret = true;
 	}
 
-	put_obj_stock(flags);
+	put_obj_stock(flags, stock_lock_acquried);
 
 	return ret;
 }
 
-static void drain_obj_stock(struct obj_stock *stock)
+static struct obj_cgroup *drain_obj_stock(struct obj_stock *stock,
+					  bool stock_lock_acquried)
 {
 	struct obj_cgroup *old = stock->cached_objcg;
 
 	if (!old)
-		return;
+		return NULL;
 
 	if (stock->nr_bytes) {
 		unsigned int nr_pages = stock->nr_bytes >> PAGE_SHIFT;
 		unsigned int nr_bytes = stock->nr_bytes & (PAGE_SIZE - 1);
 
 		if (nr_pages)
-			obj_cgroup_uncharge_pages(old, nr_pages);
+			obj_cgroup_uncharge_pages(old, nr_pages, stock_lock_acquried);
 
 		/*
 		 * The leftover is flushed to the centralized per-memcg value.
@@ -3194,8 +3270,8 @@ static void drain_obj_stock(struct obj_stock *stock)
 		stock->cached_pgdat = NULL;
 	}
 
-	obj_cgroup_put(old);
 	stock->cached_objcg = NULL;
+	return old;
 }
 
 static bool obj_stock_flush_required(struct memcg_stock_pcp *stock,
@@ -3203,11 +3279,13 @@ static bool obj_stock_flush_required(struct memcg_stock_pcp *stock,
 {
 	struct mem_cgroup *memcg;
 
+#ifndef CONFIG_PREEMPTION
 	if (in_task() && stock->task_obj.cached_objcg) {
 		memcg = obj_cgroup_memcg(stock->task_obj.cached_objcg);
 		if (memcg && mem_cgroup_is_descendant(memcg, root_memcg))
 			return true;
 	}
+#endif
 	if (stock->irq_obj.cached_objcg) {
 		memcg = obj_cgroup_memcg(stock->irq_obj.cached_objcg);
 		if (memcg && mem_cgroup_is_descendant(memcg, root_memcg))
@@ -3220,12 +3298,15 @@ static bool obj_stock_flush_required(struct memcg_stock_pcp *stock,
 static void refill_obj_stock(struct obj_cgroup *objcg, unsigned int nr_bytes,
 			     bool allow_uncharge)
 {
+	bool stock_lock_acquried;
 	unsigned long flags;
-	struct obj_stock *stock = get_obj_stock(&flags);
+	struct obj_stock *stock;
 	unsigned int nr_pages = 0;
+	struct obj_cgroup *old = NULL;
 
+	stock = get_obj_stock(&flags, &stock_lock_acquried);
 	if (stock->cached_objcg != objcg) { /* reset if necessary */
-		drain_obj_stock(stock);
+		old = drain_obj_stock(stock, stock_lock_acquried);
 		obj_cgroup_get(objcg);
 		stock->cached_objcg = objcg;
 		stock->nr_bytes = atomic_read(&objcg->nr_charged_bytes)
@@ -3239,10 +3320,12 @@ static void refill_obj_stock(struct obj_cgroup *objcg, unsigned int nr_bytes,
 		stock->nr_bytes &= (PAGE_SIZE - 1);
 	}
 
-	put_obj_stock(flags);
+	put_obj_stock(flags, stock_lock_acquried);
+	if (old)
+		obj_cgroup_put(old);
 
 	if (nr_pages)
-		obj_cgroup_uncharge_pages(objcg, nr_pages);
+		obj_cgroup_uncharge_pages(objcg, nr_pages, false);
 }
 
 int obj_cgroup_charge(struct obj_cgroup *objcg, gfp_t gfp, size_t size)
@@ -5696,12 +5779,14 @@ static int mem_cgroup_move_account(struct page *page,
 
 	ret = 0;
 
-	local_irq_disable();
+	if (!IS_ENABLED(CONFIG_PREEMPT_RT))
+		local_irq_disable();
 	mem_cgroup_charge_statistics(to, page, nr_pages);
 	memcg_check_events(to, page);
 	mem_cgroup_charge_statistics(from, page, -nr_pages);
 	memcg_check_events(from, page);
-	local_irq_enable();
+	if (!IS_ENABLED(CONFIG_PREEMPT_RT))
+		local_irq_enable();
 out_unlock:
 	unlock_page(page);
 out:
@@ -6720,10 +6805,12 @@ static int charge_memcg(struct page *page, struct mem_cgroup *memcg, gfp_t gfp)
 	css_get(&memcg->css);
 	commit_charge(page, memcg);
 
-	local_irq_disable();
+	if (!IS_ENABLED(CONFIG_PREEMPT_RT))
+		local_irq_disable();
 	mem_cgroup_charge_statistics(memcg, page, nr_pages);
 	memcg_check_events(memcg, page);
-	local_irq_enable();
+	if (!IS_ENABLED(CONFIG_PREEMPT_RT))
+		local_irq_enable();
 out:
 	return ret;
 }
@@ -6849,11 +6936,20 @@ static void uncharge_batch(const struct uncharge_gather *ug)
 		memcg_oom_recover(ug->memcg);
 	}
 
-	local_irq_save(flags);
-	__count_memcg_events(ug->memcg, PGPGOUT, ug->pgpgout);
-	__this_cpu_add(ug->memcg->vmstats_percpu->nr_page_events, ug->nr_memory);
-	memcg_check_events(ug->memcg, ug->dummy_page);
-	local_irq_restore(flags);
+	if (!IS_ENABLED(CONFIG_PREEMPT_RT)) {
+		local_irq_save(flags);
+		__count_memcg_events(ug->memcg, PGPGOUT, ug->pgpgout);
+		__this_cpu_add(ug->memcg->vmstats_percpu->nr_page_events, ug->nr_memory);
+		memcg_check_events(ug->memcg, ug->dummy_page);
+		local_irq_restore(flags);
+	} else {
+		preempt_disable();
+		__count_memcg_events(ug->memcg, PGPGOUT, ug->pgpgout);
+		__this_cpu_add(ug->memcg->vmstats_percpu->nr_page_events, ug->nr_memory);
+		preempt_enable();
+
+		memcg_check_events(ug->memcg, ug->dummy_page);
+	}
 
 	/* drop reference from uncharge_page */
 	css_put(&ug->memcg->css);
@@ -7003,10 +7099,12 @@ void mem_cgroup_migrate(struct page *oldpage, struct page *newpage)
 	css_get(&memcg->css);
 	commit_charge(newpage, memcg);
 
-	local_irq_save(flags);
+	if (!IS_ENABLED(CONFIG_PREEMPT_RT))
+		local_irq_save(flags);
 	mem_cgroup_charge_statistics(memcg, newpage, nr_pages);
 	memcg_check_events(memcg, newpage);
-	local_irq_restore(flags);
+	if (!IS_ENABLED(CONFIG_PREEMPT_RT))
+		local_irq_restore(flags);
 }
 
 DEFINE_STATIC_KEY_FALSE(memcg_sockets_enabled_key);
@@ -7090,7 +7188,7 @@ void mem_cgroup_uncharge_skmem(struct mem_cgroup *memcg, unsigned int nr_pages)
 
 	mod_memcg_state(memcg, MEMCG_SOCK, -nr_pages);
 
-	refill_stock(memcg, nr_pages);
+	refill_stock(memcg, nr_pages, false);
 }
 
 static int __init cgroup_memory(char *s)
@@ -7230,8 +7328,10 @@ void mem_cgroup_swapout(struct page *page, swp_entry_t entry)
 	 * i_pages lock which is taken with interrupts-off. It is
 	 * important here to have the interrupts disabled because it is the
 	 * only synchronisation we have for updating the per-CPU variables.
+	 * On PREEMPT_RT interrupts are never disabled and the updates to per-CPU
+	 * variables are synchronised by keeping preemption disabled.
 	 */
-	VM_BUG_ON(!irqs_disabled());
+	VM_BUG_ON(!IS_ENABLED(CONFIG_PREEMPT_RT) && !irqs_disabled());
 	mem_cgroup_charge_statistics(memcg, page, -nr_entries);
 	memcg_check_events(memcg, page);
 
diff --git a/mm/memory.c b/mm/memory.c
index c52be6d6b605..e2c623027e32 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -5265,7 +5265,7 @@ void __might_fault(const char *file, int line)
 		return;
 	if (pagefault_disabled())
 		return;
-	__might_sleep(file, line, 0);
+	__might_sleep(file, line);
 #if defined(CONFIG_DEBUG_ATOMIC_SLEEP)
 	if (current->mm)
 		might_lock_read(&current->mm->mmap_lock);
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 7773bae3b6ed..33ecf2df08d1 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -3149,9 +3149,9 @@ static void drain_local_pages_wq(struct work_struct *work)
 	 * cpu which is alright but we also have to make sure to not move to
 	 * a different one.
 	 */
-	preempt_disable();
+	migrate_disable();
 	drain_local_pages(drain->zone);
-	preempt_enable();
+	migrate_enable();
 }
 
 /*
diff --git a/mm/vmalloc.c b/mm/vmalloc.c
index e8a807c78110..3c5be440ab30 100644
--- a/mm/vmalloc.c
+++ b/mm/vmalloc.c
@@ -1918,11 +1918,12 @@ static void *new_vmap_block(unsigned int order, gfp_t gfp_mask)
 		return ERR_PTR(err);
 	}
 
-	vbq = &get_cpu_var(vmap_block_queue);
+	get_cpu_light();
+	vbq = this_cpu_ptr(&vmap_block_queue);
 	spin_lock(&vbq->lock);
 	list_add_tail_rcu(&vb->free_list, &vbq->free);
 	spin_unlock(&vbq->lock);
-	put_cpu_var(vmap_block_queue);
+	put_cpu_light();
 
 	return vaddr;
 }
@@ -2001,7 +2002,8 @@ static void *vb_alloc(unsigned long size, gfp_t gfp_mask)
 	order = get_order(size);
 
 	rcu_read_lock();
-	vbq = &get_cpu_var(vmap_block_queue);
+	get_cpu_light();
+	vbq = this_cpu_ptr(&vmap_block_queue);
 	list_for_each_entry_rcu(vb, &vbq->free, free_list) {
 		unsigned long pages_off;
 
@@ -2024,7 +2026,7 @@ static void *vb_alloc(unsigned long size, gfp_t gfp_mask)
 		break;
 	}
 
-	put_cpu_var(vmap_block_queue);
+	put_cpu_light();
 	rcu_read_unlock();
 
 	/* Allocate new block if nothing was found */
diff --git a/mm/workingset.c b/mm/workingset.c
index d5b81e4f4cbe..d7ceee62e3c6 100644
--- a/mm/workingset.c
+++ b/mm/workingset.c
@@ -433,6 +433,8 @@ static struct list_lru shadow_nodes;
 
 void workingset_update_node(struct xa_node *node)
 {
+	struct address_space *mapping;
+
 	/*
 	 * Track non-empty nodes that contain only shadow entries;
 	 * unlink those that contain pages or are being freed.
@@ -441,7 +443,8 @@ void workingset_update_node(struct xa_node *node)
 	 * already where they should be. The list_empty() test is safe
 	 * as node->private_list is protected by the i_pages lock.
 	 */
-	VM_WARN_ON_ONCE(!irqs_disabled());  /* For __inc_lruvec_page_state */
+	mapping = container_of(node->array, struct address_space, i_pages);
+	lockdep_assert_held(&mapping->i_pages.xa_lock);
 
 	if (node->count && node->count == node->nr_values) {
 		if (list_empty(&node->private_list)) {
diff --git a/mm/zsmalloc.c b/mm/zsmalloc.c
index b897ce3b399a..6a58c1df0cc7 100644
--- a/mm/zsmalloc.c
+++ b/mm/zsmalloc.c
@@ -57,6 +57,7 @@
 #include <linux/wait.h>
 #include <linux/pagemap.h>
 #include <linux/fs.h>
+#include <linux/local_lock.h>
 
 #define ZSPAGE_MAGIC	0x58
 
@@ -77,6 +78,20 @@
 
 #define ZS_HANDLE_SIZE (sizeof(unsigned long))
 
+#ifdef CONFIG_PREEMPT_RT
+
+struct zsmalloc_handle {
+	unsigned long addr;
+	spinlock_t lock;
+};
+
+#define ZS_HANDLE_ALLOC_SIZE (sizeof(struct zsmalloc_handle))
+
+#else
+
+#define ZS_HANDLE_ALLOC_SIZE (sizeof(unsigned long))
+#endif
+
 /*
  * Object location (<PFN>, <obj_idx>) is encoded as
  * a single (unsigned long) handle value.
@@ -293,6 +308,7 @@ struct zspage {
 };
 
 struct mapping_area {
+	local_lock_t lock;
 	char *vm_buf; /* copy buffer for objects that span pages */
 	char *vm_addr; /* address of kmap_atomic()'ed pages */
 	enum zs_mapmode vm_mm; /* mapping mode */
@@ -322,7 +338,7 @@ static void SetZsPageMovable(struct zs_pool *pool, struct zspage *zspage) {}
 
 static int create_cache(struct zs_pool *pool)
 {
-	pool->handle_cachep = kmem_cache_create("zs_handle", ZS_HANDLE_SIZE,
+	pool->handle_cachep = kmem_cache_create("zs_handle", ZS_HANDLE_ALLOC_SIZE,
 					0, 0, NULL);
 	if (!pool->handle_cachep)
 		return 1;
@@ -346,10 +362,27 @@ static void destroy_cache(struct zs_pool *pool)
 
 static unsigned long cache_alloc_handle(struct zs_pool *pool, gfp_t gfp)
 {
-	return (unsigned long)kmem_cache_alloc(pool->handle_cachep,
-			gfp & ~(__GFP_HIGHMEM|__GFP_MOVABLE));
+	void *p;
+
+	p = kmem_cache_alloc(pool->handle_cachep,
+			     gfp & ~(__GFP_HIGHMEM|__GFP_MOVABLE));
+#ifdef CONFIG_PREEMPT_RT
+	if (p) {
+		struct zsmalloc_handle *zh = p;
+
+		spin_lock_init(&zh->lock);
+	}
+#endif
+	return (unsigned long)p;
 }
 
+#ifdef CONFIG_PREEMPT_RT
+static struct zsmalloc_handle *zs_get_pure_handle(unsigned long handle)
+{
+	return (void *)(handle & ~((1 << OBJ_TAG_BITS) - 1));
+}
+#endif
+
 static void cache_free_handle(struct zs_pool *pool, unsigned long handle)
 {
 	kmem_cache_free(pool->handle_cachep, (void *)handle);
@@ -368,12 +401,18 @@ static void cache_free_zspage(struct zs_pool *pool, struct zspage *zspage)
 
 static void record_obj(unsigned long handle, unsigned long obj)
 {
+#ifdef CONFIG_PREEMPT_RT
+	struct zsmalloc_handle *zh = zs_get_pure_handle(handle);
+
+	WRITE_ONCE(zh->addr, obj);
+#else
 	/*
 	 * lsb of @obj represents handle lock while other bits
 	 * represent object value the handle is pointing so
 	 * updating shouldn't do store tearing.
 	 */
 	WRITE_ONCE(*(unsigned long *)handle, obj);
+#endif
 }
 
 /* zpool driver */
@@ -455,7 +494,9 @@ MODULE_ALIAS("zpool-zsmalloc");
 #endif /* CONFIG_ZPOOL */
 
 /* per-cpu VM mapping areas for zspage accesses that cross page boundaries */
-static DEFINE_PER_CPU(struct mapping_area, zs_map_area);
+static DEFINE_PER_CPU(struct mapping_area, zs_map_area) = {
+	.lock	= INIT_LOCAL_LOCK(lock),
+};
 
 static bool is_zspage_isolated(struct zspage *zspage)
 {
@@ -862,7 +903,13 @@ static unsigned long location_to_obj(struct page *page, unsigned int obj_idx)
 
 static unsigned long handle_to_obj(unsigned long handle)
 {
+#ifdef CONFIG_PREEMPT_RT
+	struct zsmalloc_handle *zh = zs_get_pure_handle(handle);
+
+	return zh->addr;
+#else
 	return *(unsigned long *)handle;
+#endif
 }
 
 static unsigned long obj_to_head(struct page *page, void *obj)
@@ -876,22 +923,46 @@ static unsigned long obj_to_head(struct page *page, void *obj)
 
 static inline int testpin_tag(unsigned long handle)
 {
+#ifdef CONFIG_PREEMPT_RT
+	struct zsmalloc_handle *zh = zs_get_pure_handle(handle);
+
+	return spin_is_locked(&zh->lock);
+#else
 	return bit_spin_is_locked(HANDLE_PIN_BIT, (unsigned long *)handle);
+#endif
 }
 
 static inline int trypin_tag(unsigned long handle)
 {
+#ifdef CONFIG_PREEMPT_RT
+	struct zsmalloc_handle *zh = zs_get_pure_handle(handle);
+
+	return spin_trylock(&zh->lock);
+#else
 	return bit_spin_trylock(HANDLE_PIN_BIT, (unsigned long *)handle);
+#endif
 }
 
 static void pin_tag(unsigned long handle) __acquires(bitlock)
 {
+#ifdef CONFIG_PREEMPT_RT
+	struct zsmalloc_handle *zh = zs_get_pure_handle(handle);
+
+	return spin_lock(&zh->lock);
+#else
 	bit_spin_lock(HANDLE_PIN_BIT, (unsigned long *)handle);
+#endif
 }
 
 static void unpin_tag(unsigned long handle) __releases(bitlock)
 {
+#ifdef CONFIG_PREEMPT_RT
+	struct zsmalloc_handle *zh = zs_get_pure_handle(handle);
+
+	return spin_unlock(&zh->lock);
+#else
 	bit_spin_unlock(HANDLE_PIN_BIT, (unsigned long *)handle);
+#endif
 }
 
 static void reset_page(struct page *page)
@@ -1274,7 +1345,8 @@ void *zs_map_object(struct zs_pool *pool, unsigned long handle,
 	class = pool->size_class[class_idx];
 	off = (class->size * obj_idx) & ~PAGE_MASK;
 
-	area = &get_cpu_var(zs_map_area);
+	local_lock(&zs_map_area.lock);
+	area = this_cpu_ptr(&zs_map_area);
 	area->vm_mm = mm;
 	if (off + class->size <= PAGE_SIZE) {
 		/* this object is contained entirely within a page */
@@ -1328,7 +1400,7 @@ void zs_unmap_object(struct zs_pool *pool, unsigned long handle)
 
 		__zs_unmap_object(area, pages, off, class->size);
 	}
-	put_cpu_var(zs_map_area);
+	local_unlock(&zs_map_area.lock);
 
 	migrate_read_unlock(zspage);
 	unpin_tag(handle);
diff --git a/net/Kconfig b/net/Kconfig
index fb13460c6dab..074472dfa94a 100644
--- a/net/Kconfig
+++ b/net/Kconfig
@@ -294,7 +294,7 @@ config CGROUP_NET_CLASSID
 
 config NET_RX_BUSY_POLL
 	bool
-	default y
+	default y if !PREEMPT_RT
 
 config BQL
 	bool
diff --git a/net/core/dev.c b/net/core/dev.c
index 33dc2a3ff7d7..58f672ff6324 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -158,6 +158,31 @@
 /* This should be increased if a protocol with a bigger head is added. */
 #define GRO_MAX_HEAD (MAX_HEADER + 128)
 
+static char *__macaddr = NULL;
+core_param(macaddr, __macaddr, charp, 0);
+
+static int pxc_parse_mac(char *mac, unsigned char *macarray)
+{
+	int i, j;
+	short byte1, byte0;
+
+	if (mac == NULL || macarray == NULL)
+		return -1;
+	j = 0;
+	for (i = 0; i < 6; i++) {
+		if ((byte1 = hex_to_bin(mac[j++])) < 0)
+			return -1;
+		if ((byte0 = hex_to_bin(mac[j++])) < 0)
+			return -1;
+		macarray[i] = (unsigned char)(byte1 * 16 + byte0);
+		if (i < 5) {
+			if (mac[j++] != ':')
+				return -1;
+		}
+	}
+	return 0;
+}
+
 static DEFINE_SPINLOCK(ptype_lock);
 static DEFINE_SPINLOCK(offload_lock);
 struct list_head ptype_base[PTYPE_HASH_SIZE] __read_mostly;
@@ -225,14 +250,14 @@ static inline struct hlist_head *dev_index_hash(struct net *net, int ifindex)
 static inline void rps_lock(struct softnet_data *sd)
 {
 #ifdef CONFIG_RPS
-	spin_lock(&sd->input_pkt_queue.lock);
+	raw_spin_lock(&sd->input_pkt_queue.raw_lock);
 #endif
 }
 
 static inline void rps_unlock(struct softnet_data *sd)
 {
 #ifdef CONFIG_RPS
-	spin_unlock(&sd->input_pkt_queue.lock);
+	raw_spin_unlock(&sd->input_pkt_queue.raw_lock);
 #endif
 }
 
@@ -3042,6 +3067,7 @@ static void __netif_reschedule(struct Qdisc *q)
 	sd->output_queue_tailp = &q->next_sched;
 	raise_softirq_irqoff(NET_TX_SOFTIRQ);
 	local_irq_restore(flags);
+	preempt_check_resched_rt();
 }
 
 void __netif_schedule(struct Qdisc *q)
@@ -3104,6 +3130,7 @@ void __dev_kfree_skb_irq(struct sk_buff *skb, enum skb_free_reason reason)
 	__this_cpu_write(softnet_data.completion_queue, skb);
 	raise_softirq_irqoff(NET_TX_SOFTIRQ);
 	local_irq_restore(flags);
+	preempt_check_resched_rt();
 }
 EXPORT_SYMBOL(__dev_kfree_skb_irq);
 
@@ -3831,7 +3858,11 @@ static inline int __dev_xmit_skb(struct sk_buff *skb, struct Qdisc *q,
 	 * This permits qdisc->running owner to get the lock more
 	 * often and dequeue packets faster.
 	 */
+#ifdef CONFIG_PREEMPT_RT
+	contended = true;
+#else
 	contended = qdisc_is_running(q);
+#endif
 	if (unlikely(contended))
 		spin_lock(&q->busylock);
 
@@ -4656,6 +4687,7 @@ static int enqueue_to_backlog(struct sk_buff *skb, int cpu,
 	rps_unlock(sd);
 
 	local_irq_restore(flags);
+	preempt_check_resched_rt();
 
 	atomic_long_inc(&skb->dev->rx_dropped);
 	kfree_skb(skb);
@@ -4896,7 +4928,7 @@ static int netif_rx_internal(struct sk_buff *skb)
 		struct rps_dev_flow voidflow, *rflow = &voidflow;
 		int cpu;
 
-		preempt_disable();
+		migrate_disable();
 		rcu_read_lock();
 
 		cpu = get_rps_cpu(skb->dev, skb, &rflow);
@@ -4906,14 +4938,14 @@ static int netif_rx_internal(struct sk_buff *skb)
 		ret = enqueue_to_backlog(skb, cpu, &rflow->last_qtail);
 
 		rcu_read_unlock();
-		preempt_enable();
+		migrate_enable();
 	} else
 #endif
 	{
 		unsigned int qtail;
 
-		ret = enqueue_to_backlog(skb, get_cpu(), &qtail);
-		put_cpu();
+		ret = enqueue_to_backlog(skb, get_cpu_light(), &qtail);
+		put_cpu_light();
 	}
 	return ret;
 }
@@ -4952,11 +4984,9 @@ int netif_rx_ni(struct sk_buff *skb)
 
 	trace_netif_rx_ni_entry(skb);
 
-	preempt_disable();
+	local_bh_disable();
 	err = netif_rx_internal(skb);
-	if (local_softirq_pending())
-		do_softirq();
-	preempt_enable();
+	local_bh_enable();
 	trace_netif_rx_ni_exit(err);
 
 	return err;
@@ -6399,12 +6429,14 @@ static void net_rps_action_and_irq_enable(struct softnet_data *sd)
 		sd->rps_ipi_list = NULL;
 
 		local_irq_enable();
+		preempt_check_resched_rt();
 
 		/* Send pending IPI's to kick RPS processing on remote cpus. */
 		net_rps_send_ipi(remsd);
 	} else
 #endif
 		local_irq_enable();
+	preempt_check_resched_rt();
 }
 
 static bool sd_has_rps_ipi_waiting(struct softnet_data *sd)
@@ -6482,6 +6514,7 @@ void __napi_schedule(struct napi_struct *n)
 	local_irq_save(flags);
 	____napi_schedule(this_cpu_ptr(&softnet_data), n);
 	local_irq_restore(flags);
+	preempt_check_resched_rt();
 }
 EXPORT_SYMBOL(__napi_schedule);
 
@@ -8671,7 +8704,7 @@ void __dev_set_rx_mode(struct net_device *dev)
 	const struct net_device_ops *ops = dev->netdev_ops;
 
 	/* dev_open will call this function so the list will stay sane. */
-	if (!(dev->flags&IFF_UP))
+	if (!(dev->flags & IFF_UP))
 		return;
 
 	if (!netif_device_present(dev))
@@ -10214,6 +10247,7 @@ int register_netdevice(struct net_device *dev)
 {
 	int ret;
 	struct net *net = dev_net(dev);
+	struct sockaddr *sockaddr;
 
 	BUILD_BUG_ON(sizeof(netdev_features_t) * BITS_PER_BYTE <
 		     NETDEV_FEATURE_COUNT);
@@ -10344,6 +10378,21 @@ int register_netdevice(struct net_device *dev)
 	if (dev->addr_assign_type == NET_ADDR_PERM)
 		memcpy(dev->perm_addr, dev->dev_addr, dev->addr_len);
 
+	/* if we get an mac-addr from the bootloader (in our case barebox),
+	 * we will set this mac-addr overwrite other mac-addr source like
+	 * device-tree.
+	 */
+	if(__macaddr) {
+		sockaddr = kzalloc(sizeof(*sockaddr), GFP_KERNEL);
+		pxc_parse_mac(__macaddr, sockaddr->sa_data);
+
+		ret = eth_mac_addr(dev, sockaddr);
+		if(ret)
+			pr_warn("error: cant set given mac: %s, using random-mac\n", __macaddr);
+
+		kfree(sockaddr);
+	}
+
 	/* Notify protocols, that a new device appeared. */
 	ret = call_netdevice_notifiers(NETDEV_REGISTER, dev);
 	ret = notifier_to_errno(ret);
@@ -11310,6 +11359,7 @@ static int dev_cpu_dead(unsigned int oldcpu)
 
 	raise_softirq_irqoff(NET_TX_SOFTIRQ);
 	local_irq_enable();
+	preempt_check_resched_rt();
 
 #ifdef CONFIG_RPS
 	remsd = oldsd->rps_ipi_list;
@@ -11323,7 +11373,7 @@ static int dev_cpu_dead(unsigned int oldcpu)
 		netif_rx_ni(skb);
 		input_queue_head_incr(oldsd);
 	}
-	while ((skb = skb_dequeue(&oldsd->input_pkt_queue))) {
+	while ((skb = __skb_dequeue(&oldsd->input_pkt_queue))) {
 		netif_rx_ni(skb);
 		input_queue_head_incr(oldsd);
 	}
@@ -11639,7 +11689,7 @@ static int __init net_dev_init(void)
 
 		INIT_WORK(flush, flush_backlog);
 
-		skb_queue_head_init(&sd->input_pkt_queue);
+		skb_queue_head_init_raw(&sd->input_pkt_queue);
 		skb_queue_head_init(&sd->process_queue);
 #ifdef CONFIG_XFRM_OFFLOAD
 		skb_queue_head_init(&sd->xfrm_backlog);
diff --git a/net/core/gen_estimator.c b/net/core/gen_estimator.c
index 8e582e29a41e..4fcbdd71c59f 100644
--- a/net/core/gen_estimator.c
+++ b/net/core/gen_estimator.c
@@ -40,10 +40,10 @@
  */
 
 struct net_rate_estimator {
-	struct gnet_stats_basic_packed	*bstats;
+	struct gnet_stats_basic_sync	*bstats;
 	spinlock_t		*stats_lock;
-	seqcount_t		*running;
-	struct gnet_stats_basic_cpu __percpu *cpu_bstats;
+	bool			running;
+	struct gnet_stats_basic_sync __percpu *cpu_bstats;
 	u8			ewma_log;
 	u8			intvl_log; /* period : (250ms << intvl_log) */
 
@@ -60,13 +60,13 @@ struct net_rate_estimator {
 };
 
 static void est_fetch_counters(struct net_rate_estimator *e,
-			       struct gnet_stats_basic_packed *b)
+			       struct gnet_stats_basic_sync *b)
 {
-	memset(b, 0, sizeof(*b));
+	gnet_stats_basic_sync_init(b);
 	if (e->stats_lock)
 		spin_lock(e->stats_lock);
 
-	__gnet_stats_copy_basic(e->running, b, e->cpu_bstats, e->bstats);
+	gnet_stats_add_basic(b, e->cpu_bstats, e->bstats, e->running);
 
 	if (e->stats_lock)
 		spin_unlock(e->stats_lock);
@@ -76,14 +76,18 @@ static void est_fetch_counters(struct net_rate_estimator *e,
 static void est_timer(struct timer_list *t)
 {
 	struct net_rate_estimator *est = from_timer(est, t, timer);
-	struct gnet_stats_basic_packed b;
+	struct gnet_stats_basic_sync b;
+	u64 b_bytes, b_packets;
 	u64 rate, brate;
 
 	est_fetch_counters(est, &b);
-	brate = (b.bytes - est->last_bytes) << (10 - est->intvl_log);
+	b_bytes = u64_stats_read(&b.bytes);
+	b_packets = u64_stats_read(&b.packets);
+
+	brate = (b_bytes - est->last_bytes) << (10 - est->intvl_log);
 	brate = (brate >> est->ewma_log) - (est->avbps >> est->ewma_log);
 
-	rate = (b.packets - est->last_packets) << (10 - est->intvl_log);
+	rate = (b_packets - est->last_packets) << (10 - est->intvl_log);
 	rate = (rate >> est->ewma_log) - (est->avpps >> est->ewma_log);
 
 	write_seqcount_begin(&est->seq);
@@ -91,8 +95,8 @@ static void est_timer(struct timer_list *t)
 	est->avpps += rate;
 	write_seqcount_end(&est->seq);
 
-	est->last_bytes = b.bytes;
-	est->last_packets = b.packets;
+	est->last_bytes = b_bytes;
+	est->last_packets = b_packets;
 
 	est->next_jiffies += ((HZ/4) << est->intvl_log);
 
@@ -109,7 +113,9 @@ static void est_timer(struct timer_list *t)
  * @cpu_bstats: bstats per cpu
  * @rate_est: rate estimator statistics
  * @lock: lock for statistics and control path
- * @running: qdisc running seqcount
+ * @running: true if @bstats represents a running qdisc, thus @bstats'
+ *           internal values might change during basic reads. Only used
+ *           if @bstats_cpu is NULL
  * @opt: rate estimator configuration TLV
  *
  * Creates a new rate estimator with &bstats as source and &rate_est
@@ -121,16 +127,16 @@ static void est_timer(struct timer_list *t)
  * Returns 0 on success or a negative error code.
  *
  */
-int gen_new_estimator(struct gnet_stats_basic_packed *bstats,
-		      struct gnet_stats_basic_cpu __percpu *cpu_bstats,
+int gen_new_estimator(struct gnet_stats_basic_sync *bstats,
+		      struct gnet_stats_basic_sync __percpu *cpu_bstats,
 		      struct net_rate_estimator __rcu **rate_est,
 		      spinlock_t *lock,
-		      seqcount_t *running,
+		      bool running,
 		      struct nlattr *opt)
 {
 	struct gnet_estimator *parm = nla_data(opt);
 	struct net_rate_estimator *old, *est;
-	struct gnet_stats_basic_packed b;
+	struct gnet_stats_basic_sync b;
 	int intvl_log;
 
 	if (nla_len(opt) < sizeof(*parm))
@@ -164,8 +170,8 @@ int gen_new_estimator(struct gnet_stats_basic_packed *bstats,
 	est_fetch_counters(est, &b);
 	if (lock)
 		local_bh_enable();
-	est->last_bytes = b.bytes;
-	est->last_packets = b.packets;
+	est->last_bytes = u64_stats_read(&b.bytes);
+	est->last_packets = u64_stats_read(&b.packets);
 
 	if (lock)
 		spin_lock_bh(lock);
@@ -214,7 +220,9 @@ EXPORT_SYMBOL(gen_kill_estimator);
  * @cpu_bstats: bstats per cpu
  * @rate_est: rate estimator statistics
  * @lock: lock for statistics and control path
- * @running: qdisc running seqcount (might be NULL)
+ * @running: true if @bstats represents a running qdisc, thus @bstats'
+ *           internal values might change during basic reads. Only used
+ *           if @cpu_bstats is NULL
  * @opt: rate estimator configuration TLV
  *
  * Replaces the configuration of a rate estimator by calling
@@ -222,11 +230,11 @@ EXPORT_SYMBOL(gen_kill_estimator);
  *
  * Returns 0 on success or a negative error code.
  */
-int gen_replace_estimator(struct gnet_stats_basic_packed *bstats,
-			  struct gnet_stats_basic_cpu __percpu *cpu_bstats,
+int gen_replace_estimator(struct gnet_stats_basic_sync *bstats,
+			  struct gnet_stats_basic_sync __percpu *cpu_bstats,
 			  struct net_rate_estimator __rcu **rate_est,
 			  spinlock_t *lock,
-			  seqcount_t *running, struct nlattr *opt)
+			  bool running, struct nlattr *opt)
 {
 	return gen_new_estimator(bstats, cpu_bstats, rate_est,
 				 lock, running, opt);
diff --git a/net/core/gen_stats.c b/net/core/gen_stats.c
index e491b083b348..a10335b4ba2d 100644
--- a/net/core/gen_stats.c
+++ b/net/core/gen_stats.c
@@ -18,7 +18,7 @@
 #include <linux/gen_stats.h>
 #include <net/netlink.h>
 #include <net/gen_stats.h>
-
+#include <net/sch_generic.h>
 
 static inline int
 gnet_stats_copy(struct gnet_dump *d, int type, void *buf, int size, int padattr)
@@ -114,63 +114,112 @@ gnet_stats_start_copy(struct sk_buff *skb, int type, spinlock_t *lock,
 }
 EXPORT_SYMBOL(gnet_stats_start_copy);
 
-static void
-__gnet_stats_copy_basic_cpu(struct gnet_stats_basic_packed *bstats,
-			    struct gnet_stats_basic_cpu __percpu *cpu)
+/* Must not be inlined, due to u64_stats seqcount_t lockdep key */
+void gnet_stats_basic_sync_init(struct gnet_stats_basic_sync *b)
 {
+	u64_stats_set(&b->bytes, 0);
+	u64_stats_set(&b->packets, 0);
+	u64_stats_init(&b->syncp);
+}
+EXPORT_SYMBOL(gnet_stats_basic_sync_init);
+
+static void gnet_stats_add_basic_cpu(struct gnet_stats_basic_sync *bstats,
+				     struct gnet_stats_basic_sync __percpu *cpu)
+{
+	u64 t_bytes = 0, t_packets = 0;
 	int i;
 
 	for_each_possible_cpu(i) {
-		struct gnet_stats_basic_cpu *bcpu = per_cpu_ptr(cpu, i);
+		struct gnet_stats_basic_sync *bcpu = per_cpu_ptr(cpu, i);
 		unsigned int start;
 		u64 bytes, packets;
 
 		do {
 			start = u64_stats_fetch_begin_irq(&bcpu->syncp);
-			bytes = bcpu->bstats.bytes;
-			packets = bcpu->bstats.packets;
+			bytes = u64_stats_read(&bcpu->bytes);
+			packets = u64_stats_read(&bcpu->packets);
 		} while (u64_stats_fetch_retry_irq(&bcpu->syncp, start));
 
-		bstats->bytes += bytes;
-		bstats->packets += packets;
+		t_bytes += bytes;
+		t_packets += packets;
+	}
+	_bstats_update(bstats, t_bytes, t_packets);
+}
+
+void gnet_stats_add_basic(struct gnet_stats_basic_sync *bstats,
+			  struct gnet_stats_basic_sync __percpu *cpu,
+			  struct gnet_stats_basic_sync *b, bool running)
+{
+	unsigned int start;
+	u64 bytes = 0;
+	u64 packets = 0;
+
+	WARN_ON_ONCE((cpu || running) && in_hardirq());
+
+	if (cpu) {
+		gnet_stats_add_basic_cpu(bstats, cpu);
+		return;
 	}
+	do {
+		if (running)
+			start = u64_stats_fetch_begin_irq(&b->syncp);
+		bytes = u64_stats_read(&b->bytes);
+		packets = u64_stats_read(&b->packets);
+	} while (running && u64_stats_fetch_retry_irq(&b->syncp, start));
+
+	_bstats_update(bstats, bytes, packets);
 }
+EXPORT_SYMBOL(gnet_stats_add_basic);
 
-void
-__gnet_stats_copy_basic(const seqcount_t *running,
-			struct gnet_stats_basic_packed *bstats,
-			struct gnet_stats_basic_cpu __percpu *cpu,
-			struct gnet_stats_basic_packed *b)
+static void gnet_stats_read_basic(u64 *ret_bytes, u64 *ret_packets,
+				  struct gnet_stats_basic_sync __percpu *cpu,
+				  struct gnet_stats_basic_sync *b, bool running)
 {
-	unsigned int seq;
+	unsigned int start;
 
 	if (cpu) {
-		__gnet_stats_copy_basic_cpu(bstats, cpu);
+		u64 t_bytes = 0, t_packets = 0;
+		int i;
+
+		for_each_possible_cpu(i) {
+			struct gnet_stats_basic_sync *bcpu = per_cpu_ptr(cpu, i);
+			unsigned int start;
+			u64 bytes, packets;
+
+			do {
+				start = u64_stats_fetch_begin_irq(&bcpu->syncp);
+				bytes = u64_stats_read(&bcpu->bytes);
+				packets = u64_stats_read(&bcpu->packets);
+			} while (u64_stats_fetch_retry_irq(&bcpu->syncp, start));
+
+			t_bytes += bytes;
+			t_packets += packets;
+		}
+		*ret_bytes = t_bytes;
+		*ret_packets = t_packets;
 		return;
 	}
 	do {
 		if (running)
-			seq = read_seqcount_begin(running);
-		bstats->bytes = b->bytes;
-		bstats->packets = b->packets;
-	} while (running && read_seqcount_retry(running, seq));
+			start = u64_stats_fetch_begin_irq(&b->syncp);
+		*ret_bytes = u64_stats_read(&b->bytes);
+		*ret_packets = u64_stats_read(&b->packets);
+	} while (running && u64_stats_fetch_retry_irq(&b->syncp, start));
 }
-EXPORT_SYMBOL(__gnet_stats_copy_basic);
 
 static int
-___gnet_stats_copy_basic(const seqcount_t *running,
-			 struct gnet_dump *d,
-			 struct gnet_stats_basic_cpu __percpu *cpu,
-			 struct gnet_stats_basic_packed *b,
-			 int type)
+___gnet_stats_copy_basic(struct gnet_dump *d,
+			 struct gnet_stats_basic_sync __percpu *cpu,
+			 struct gnet_stats_basic_sync *b,
+			 int type, bool running)
 {
-	struct gnet_stats_basic_packed bstats = {0};
+	u64 bstats_bytes, bstats_packets;
 
-	__gnet_stats_copy_basic(running, &bstats, cpu, b);
+	gnet_stats_read_basic(&bstats_bytes, &bstats_packets, cpu, b, running);
 
 	if (d->compat_tc_stats && type == TCA_STATS_BASIC) {
-		d->tc_stats.bytes = bstats.bytes;
-		d->tc_stats.packets = bstats.packets;
+		d->tc_stats.bytes = bstats_bytes;
+		d->tc_stats.packets = bstats_packets;
 	}
 
 	if (d->tail) {
@@ -178,24 +227,28 @@ ___gnet_stats_copy_basic(const seqcount_t *running,
 		int res;
 
 		memset(&sb, 0, sizeof(sb));
-		sb.bytes = bstats.bytes;
-		sb.packets = bstats.packets;
+		sb.bytes = bstats_bytes;
+		sb.packets = bstats_packets;
 		res = gnet_stats_copy(d, type, &sb, sizeof(sb), TCA_STATS_PAD);
-		if (res < 0 || sb.packets == bstats.packets)
+		if (res < 0 || sb.packets == bstats_packets)
 			return res;
 		/* emit 64bit stats only if needed */
-		return gnet_stats_copy(d, TCA_STATS_PKT64, &bstats.packets,
-				       sizeof(bstats.packets), TCA_STATS_PAD);
+		return gnet_stats_copy(d, TCA_STATS_PKT64, &bstats_packets,
+				       sizeof(bstats_packets), TCA_STATS_PAD);
 	}
 	return 0;
 }
 
 /**
  * gnet_stats_copy_basic - copy basic statistics into statistic TLV
- * @running: seqcount_t pointer
  * @d: dumping handle
  * @cpu: copy statistic per cpu
  * @b: basic statistics
+ * @running: true if @b represents a running qdisc, thus @b's
+ *           internal values might change during basic reads.
+ *           Only used if @cpu is NULL
+ *
+ * Context: task; must not be run from IRQ or BH contexts
  *
  * Appends the basic statistics to the top level TLV created by
  * gnet_stats_start_copy().
@@ -204,22 +257,25 @@ ___gnet_stats_copy_basic(const seqcount_t *running,
  * if the room in the socket buffer was not sufficient.
  */
 int
-gnet_stats_copy_basic(const seqcount_t *running,
-		      struct gnet_dump *d,
-		      struct gnet_stats_basic_cpu __percpu *cpu,
-		      struct gnet_stats_basic_packed *b)
+gnet_stats_copy_basic(struct gnet_dump *d,
+		      struct gnet_stats_basic_sync __percpu *cpu,
+		      struct gnet_stats_basic_sync *b,
+		      bool running)
 {
-	return ___gnet_stats_copy_basic(running, d, cpu, b,
-					TCA_STATS_BASIC);
+	return ___gnet_stats_copy_basic(d, cpu, b, TCA_STATS_BASIC, running);
 }
 EXPORT_SYMBOL(gnet_stats_copy_basic);
 
 /**
  * gnet_stats_copy_basic_hw - copy basic hw statistics into statistic TLV
- * @running: seqcount_t pointer
  * @d: dumping handle
  * @cpu: copy statistic per cpu
  * @b: basic statistics
+ * @running: true if @b represents a running qdisc, thus @b's
+ *           internal values might change during basic reads.
+ *           Only used if @cpu is NULL
+ *
+ * Context: task; must not be run from IRQ or BH contexts
  *
  * Appends the basic statistics to the top level TLV created by
  * gnet_stats_start_copy().
@@ -228,13 +284,12 @@ EXPORT_SYMBOL(gnet_stats_copy_basic);
  * if the room in the socket buffer was not sufficient.
  */
 int
-gnet_stats_copy_basic_hw(const seqcount_t *running,
-			 struct gnet_dump *d,
-			 struct gnet_stats_basic_cpu __percpu *cpu,
-			 struct gnet_stats_basic_packed *b)
+gnet_stats_copy_basic_hw(struct gnet_dump *d,
+			 struct gnet_stats_basic_sync __percpu *cpu,
+			 struct gnet_stats_basic_sync *b,
+			 bool running)
 {
-	return ___gnet_stats_copy_basic(running, d, cpu, b,
-					TCA_STATS_BASIC_HW);
+	return ___gnet_stats_copy_basic(d, cpu, b, TCA_STATS_BASIC_HW, running);
 }
 EXPORT_SYMBOL(gnet_stats_copy_basic_hw);
 
@@ -282,16 +337,15 @@ gnet_stats_copy_rate_est(struct gnet_dump *d,
 }
 EXPORT_SYMBOL(gnet_stats_copy_rate_est);
 
-static void
-__gnet_stats_copy_queue_cpu(struct gnet_stats_queue *qstats,
-			    const struct gnet_stats_queue __percpu *q)
+static void gnet_stats_add_queue_cpu(struct gnet_stats_queue *qstats,
+				     const struct gnet_stats_queue __percpu *q)
 {
 	int i;
 
 	for_each_possible_cpu(i) {
 		const struct gnet_stats_queue *qcpu = per_cpu_ptr(q, i);
 
-		qstats->qlen = 0;
+		qstats->qlen += qcpu->backlog;
 		qstats->backlog += qcpu->backlog;
 		qstats->drops += qcpu->drops;
 		qstats->requeues += qcpu->requeues;
@@ -299,24 +353,21 @@ __gnet_stats_copy_queue_cpu(struct gnet_stats_queue *qstats,
 	}
 }
 
-void __gnet_stats_copy_queue(struct gnet_stats_queue *qstats,
-			     const struct gnet_stats_queue __percpu *cpu,
-			     const struct gnet_stats_queue *q,
-			     __u32 qlen)
+void gnet_stats_add_queue(struct gnet_stats_queue *qstats,
+			  const struct gnet_stats_queue __percpu *cpu,
+			  const struct gnet_stats_queue *q)
 {
 	if (cpu) {
-		__gnet_stats_copy_queue_cpu(qstats, cpu);
+		gnet_stats_add_queue_cpu(qstats, cpu);
 	} else {
-		qstats->qlen = q->qlen;
-		qstats->backlog = q->backlog;
-		qstats->drops = q->drops;
-		qstats->requeues = q->requeues;
-		qstats->overlimits = q->overlimits;
+		qstats->qlen += q->qlen;
+		qstats->backlog += q->backlog;
+		qstats->drops += q->drops;
+		qstats->requeues += q->requeues;
+		qstats->overlimits += q->overlimits;
 	}
-
-	qstats->qlen = qlen;
 }
-EXPORT_SYMBOL(__gnet_stats_copy_queue);
+EXPORT_SYMBOL(gnet_stats_add_queue);
 
 /**
  * gnet_stats_copy_queue - copy queue statistics into statistics TLV
@@ -339,7 +390,8 @@ gnet_stats_copy_queue(struct gnet_dump *d,
 {
 	struct gnet_stats_queue qstats = {0};
 
-	__gnet_stats_copy_queue(&qstats, cpu_q, q, qlen);
+	gnet_stats_add_queue(&qstats, cpu_q, q);
+	qstats.qlen = qlen;
 
 	if (d->compat_tc_stats) {
 		d->tc_stats.drops = qstats.drops;
diff --git a/net/dsa/Kconfig b/net/dsa/Kconfig
index d8ee15f1c7a9..19e607749be5 100644
--- a/net/dsa/Kconfig
+++ b/net/dsa/Kconfig
@@ -153,4 +153,10 @@ config NET_DSA_TAG_XRS700X
 	  Say Y or M if you want to enable support for tagging frames for
 	  Arrow SpeedChips XRS700x switches that use a single byte tag trailer.
 
+config NET_DSA_TAG_TAIL
+	tristate "Tag driver for switches using a tail tag"
+	help
+	  Say Y or M if you want to enable support for tagging frames at
+	  with a trailed. e.g. Micrel KSZ8863.
+
 endif
diff --git a/net/dsa/Makefile b/net/dsa/Makefile
index 67ea009f242c..9be32bcea28b 100644
--- a/net/dsa/Makefile
+++ b/net/dsa/Makefile
@@ -19,3 +19,4 @@ obj-$(CONFIG_NET_DSA_TAG_QCA) += tag_qca.o
 obj-$(CONFIG_NET_DSA_TAG_SJA1105) += tag_sja1105.o
 obj-$(CONFIG_NET_DSA_TAG_TRAILER) += tag_trailer.o
 obj-$(CONFIG_NET_DSA_TAG_XRS700X) += tag_xrs700x.o
+obj-$(CONFIG_NET_DSA_TAG_TAIL) += tag_tail.o
diff --git a/net/dsa/slave.c b/net/dsa/slave.c
index a2bf2d8ac65b..97537e674c31 100644
--- a/net/dsa/slave.c
+++ b/net/dsa/slave.c
@@ -1800,6 +1800,7 @@ static int dsa_slave_phy_connect(struct net_device *slave_dev, int addr,
 {
 	struct dsa_port *dp = dsa_slave_to_port(slave_dev);
 	struct dsa_switch *ds = dp->ds;
+	int res;
 
 	slave_dev->phydev = mdiobus_get_phy(ds->slave_mii_bus, addr);
 	if (!slave_dev->phydev) {
@@ -1809,7 +1810,10 @@ static int dsa_slave_phy_connect(struct net_device *slave_dev, int addr,
 
 	slave_dev->phydev->dev_flags |= flags;
 
-	return phylink_connect_phy(dp->pl, slave_dev->phydev);
+	res = phylink_connect_phy(dp->pl, slave_dev->phydev);
+	phy_suspend(slave_dev->phydev);
+
+	return res;
 }
 
 static int dsa_slave_phy_setup(struct net_device *slave_dev)
diff --git a/net/dsa/tag_tail.c b/net/dsa/tag_tail.c
new file mode 100644
index 000000000000..58b22578a6ff
--- /dev/null
+++ b/net/dsa/tag_tail.c
@@ -0,0 +1,106 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/* net/dsa/tag_tail.c - tail tag format handling
+ * from net/dsa/tag_tail.c
+ *
+ * Copyright (c) 2008 Marvell Semiconductor
+ * Copyright (c) 2010 SAGEMCOM
+ *
+ * Karl Beldan <karl.beldan@sagemcom.com>
+ *
+ * Dixit Micrel:
+ *  Tail tag priority settings override DSCP and 8021P settings
+ *  unless tag is null ?
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/etherdevice.h>
+#include <linux/list.h>
+#include <linux/netdevice.h>
+#include <linux/slab.h>
+
+#include "dsa_priv.h"
+
+#define TAIL_TAG_LEN 1
+
+#define PORT_TX_PRIO 3
+#define DSA_PHY_OFFSET 1
+
+static struct sk_buff *tail_xmit(struct sk_buff *skb, struct net_device *dev)
+{
+	struct dsa_port *dp = dsa_slave_to_port(dev);
+	int padlen;
+	u8 *tail;
+
+	/* expand skb to min length
+	 * ensure that the dsa tail tag is always at the end, even when
+	 * padding is needed
+	 */
+	padlen = (skb->len < ETH_ZLEN) ? ETH_ZLEN - skb->len : 0;
+
+	if (unlikely(skb_pad(skb, padlen + TAIL_TAG_LEN)))
+		return NULL;
+
+	skb_put(skb, padlen);
+
+	/* tail tag */
+	tail = skb_put(skb, 1);
+
+	tail[0] = (1 << (dp->index - DSA_PHY_OFFSET))
+		  | ((PORT_TX_PRIO & 3) << 2);
+
+	skb->protocol = htons(ETH_P_TAIL);
+
+	return skb;
+}
+
+static struct sk_buff *tail_rcv(struct sk_buff *skb, struct net_device *dev)
+{
+	u8 *tail;
+	int source_port;
+
+	skb = skb_unshare(skb, GFP_ATOMIC);
+	if (!skb)
+		goto out;
+
+	if (skb_linearize(skb))
+		goto out;
+
+	tail = skb_tail_pointer(skb) - TAIL_TAG_LEN;
+
+	source_port = (tail[0] & 3) + DSA_PHY_OFFSET;
+	if (source_port >= DSA_MAX_PORTS)
+		goto out;
+
+	skb->dev = dsa_master_find_slave(dev, 0, source_port);
+	if (!skb->dev)
+		return NULL;
+
+	pskb_trim_rcsum(skb, skb->len - TAIL_TAG_LEN);
+
+	skb_push(skb, ETH_HLEN);
+	skb->pkt_type = PACKET_HOST;
+	skb->offload_fwd_mark = 1;
+	skb->protocol = eth_type_trans(skb, skb->dev);
+
+	return skb;
+
+out:
+	return NULL;
+}
+
+const struct dsa_device_ops tail_netdev_ops = {
+	.name = "tail",
+	.proto = DSA_TAG_PROTO_KSZ8863,
+	.xmit = tail_xmit,
+	.rcv = tail_rcv,
+	.needed_tailroom = TAIL_TAG_LEN,
+};
+
+MODULE_LICENSE("GPL");
+MODULE_ALIAS_DSA_TAG_DRIVER(DSA_TAG_PROTO_KSZ8863);
+
+module_dsa_tag_driver(tail_netdev_ops);
\ No newline at end of file
diff --git a/net/ipv4/inet_hashtables.c b/net/ipv4/inet_hashtables.c
index 75737267746f..e460c84b1f8e 100644
--- a/net/ipv4/inet_hashtables.c
+++ b/net/ipv4/inet_hashtables.c
@@ -637,7 +637,9 @@ int __inet_hash(struct sock *sk, struct sock *osk)
 	int err = 0;
 
 	if (sk->sk_state != TCP_LISTEN) {
+		local_bh_disable();
 		inet_ehash_nolisten(sk, osk, NULL);
+		local_bh_enable();
 		return 0;
 	}
 	WARN_ON(!sk_unhashed(sk));
@@ -669,11 +671,8 @@ int inet_hash(struct sock *sk)
 {
 	int err = 0;
 
-	if (sk->sk_state != TCP_CLOSE) {
-		local_bh_disable();
+	if (sk->sk_state != TCP_CLOSE)
 		err = __inet_hash(sk, NULL);
-		local_bh_enable();
-	}
 
 	return err;
 }
@@ -684,17 +683,20 @@ void inet_unhash(struct sock *sk)
 	struct inet_hashinfo *hashinfo = sk->sk_prot->h.hashinfo;
 	struct inet_listen_hashbucket *ilb = NULL;
 	spinlock_t *lock;
+	bool state_listen;
 
 	if (sk_unhashed(sk))
 		return;
 
 	if (sk->sk_state == TCP_LISTEN) {
+		state_listen = true;
 		ilb = &hashinfo->listening_hash[inet_sk_listen_hashfn(sk)];
-		lock = &ilb->lock;
+		spin_lock(&ilb->lock);
 	} else {
+		state_listen = false;
 		lock = inet_ehash_lockp(hashinfo, sk->sk_hash);
+		spin_lock_bh(lock);
 	}
-	spin_lock_bh(lock);
 	if (sk_unhashed(sk))
 		goto unlock;
 
@@ -707,7 +709,10 @@ void inet_unhash(struct sock *sk)
 	__sk_nulls_del_node_init_rcu(sk);
 	sock_prot_inuse_add(sock_net(sk), sk->sk_prot, -1);
 unlock:
-	spin_unlock_bh(lock);
+	if (state_listen)
+		spin_unlock(&ilb->lock);
+	else
+		spin_unlock_bh(lock);
 }
 EXPORT_SYMBOL_GPL(inet_unhash);
 
diff --git a/net/ipv6/inet6_hashtables.c b/net/ipv6/inet6_hashtables.c
index 67c9114835c8..0a2e7f228391 100644
--- a/net/ipv6/inet6_hashtables.c
+++ b/net/ipv6/inet6_hashtables.c
@@ -333,11 +333,8 @@ int inet6_hash(struct sock *sk)
 {
 	int err = 0;
 
-	if (sk->sk_state != TCP_CLOSE) {
-		local_bh_disable();
+	if (sk->sk_state != TCP_CLOSE)
 		err = __inet_hash(sk, NULL);
-		local_bh_enable();
-	}
 
 	return err;
 }
diff --git a/net/netfilter/xt_RATEEST.c b/net/netfilter/xt_RATEEST.c
index 0d5c422f8745..8aec1b529364 100644
--- a/net/netfilter/xt_RATEEST.c
+++ b/net/netfilter/xt_RATEEST.c
@@ -94,11 +94,11 @@ static unsigned int
 xt_rateest_tg(struct sk_buff *skb, const struct xt_action_param *par)
 {
 	const struct xt_rateest_target_info *info = par->targinfo;
-	struct gnet_stats_basic_packed *stats = &info->est->bstats;
+	struct gnet_stats_basic_sync *stats = &info->est->bstats;
 
 	spin_lock_bh(&info->est->lock);
-	stats->bytes += skb->len;
-	stats->packets++;
+	u64_stats_add(&stats->bytes, skb->len);
+	u64_stats_inc(&stats->packets);
 	spin_unlock_bh(&info->est->lock);
 
 	return XT_CONTINUE;
@@ -143,6 +143,7 @@ static int xt_rateest_tg_checkentry(const struct xt_tgchk_param *par)
 	if (!est)
 		goto err1;
 
+	gnet_stats_basic_sync_init(&est->bstats);
 	strlcpy(est->name, info->name, sizeof(est->name));
 	spin_lock_init(&est->lock);
 	est->refcnt		= 1;
diff --git a/net/sched/act_api.c b/net/sched/act_api.c
index 7dd3a2dc5fa4..3258da3d5bed 100644
--- a/net/sched/act_api.c
+++ b/net/sched/act_api.c
@@ -480,16 +480,18 @@ int tcf_idr_create(struct tc_action_net *tn, u32 index, struct nlattr *est,
 		atomic_set(&p->tcfa_bindcnt, 1);
 
 	if (cpustats) {
-		p->cpu_bstats = netdev_alloc_pcpu_stats(struct gnet_stats_basic_cpu);
+		p->cpu_bstats = netdev_alloc_pcpu_stats(struct gnet_stats_basic_sync);
 		if (!p->cpu_bstats)
 			goto err1;
-		p->cpu_bstats_hw = netdev_alloc_pcpu_stats(struct gnet_stats_basic_cpu);
+		p->cpu_bstats_hw = netdev_alloc_pcpu_stats(struct gnet_stats_basic_sync);
 		if (!p->cpu_bstats_hw)
 			goto err2;
 		p->cpu_qstats = alloc_percpu(struct gnet_stats_queue);
 		if (!p->cpu_qstats)
 			goto err3;
 	}
+	gnet_stats_basic_sync_init(&p->tcfa_bstats);
+	gnet_stats_basic_sync_init(&p->tcfa_bstats_hw);
 	spin_lock_init(&p->tcfa_lock);
 	p->tcfa_index = index;
 	p->tcfa_tm.install = jiffies;
@@ -499,7 +501,7 @@ int tcf_idr_create(struct tc_action_net *tn, u32 index, struct nlattr *est,
 	if (est) {
 		err = gen_new_estimator(&p->tcfa_bstats, p->cpu_bstats,
 					&p->tcfa_rate_est,
-					&p->tcfa_lock, NULL, est);
+					&p->tcfa_lock, false, est);
 		if (err)
 			goto err4;
 	}
@@ -1126,13 +1128,13 @@ void tcf_action_update_stats(struct tc_action *a, u64 bytes, u64 packets,
 			     u64 drops, bool hw)
 {
 	if (a->cpu_bstats) {
-		_bstats_cpu_update(this_cpu_ptr(a->cpu_bstats), bytes, packets);
+		_bstats_update(this_cpu_ptr(a->cpu_bstats), bytes, packets);
 
 		this_cpu_ptr(a->cpu_qstats)->drops += drops;
 
 		if (hw)
-			_bstats_cpu_update(this_cpu_ptr(a->cpu_bstats_hw),
-					   bytes, packets);
+			_bstats_update(this_cpu_ptr(a->cpu_bstats_hw),
+				       bytes, packets);
 		return;
 	}
 
@@ -1171,9 +1173,10 @@ int tcf_action_copy_stats(struct sk_buff *skb, struct tc_action *p,
 	if (err < 0)
 		goto errout;
 
-	if (gnet_stats_copy_basic(NULL, &d, p->cpu_bstats, &p->tcfa_bstats) < 0 ||
-	    gnet_stats_copy_basic_hw(NULL, &d, p->cpu_bstats_hw,
-				     &p->tcfa_bstats_hw) < 0 ||
+	if (gnet_stats_copy_basic(&d, p->cpu_bstats,
+				  &p->tcfa_bstats, false) < 0 ||
+	    gnet_stats_copy_basic_hw(&d, p->cpu_bstats_hw,
+				     &p->tcfa_bstats_hw, false) < 0 ||
 	    gnet_stats_copy_rate_est(&d, &p->tcfa_rate_est) < 0 ||
 	    gnet_stats_copy_queue(&d, p->cpu_qstats,
 				  &p->tcfa_qstats,
diff --git a/net/sched/act_bpf.c b/net/sched/act_bpf.c
index 5c36013339e1..f2bf896331a5 100644
--- a/net/sched/act_bpf.c
+++ b/net/sched/act_bpf.c
@@ -41,7 +41,7 @@ static int tcf_bpf_act(struct sk_buff *skb, const struct tc_action *act,
 	int action, filter_res;
 
 	tcf_lastuse_update(&prog->tcf_tm);
-	bstats_cpu_update(this_cpu_ptr(prog->common.cpu_bstats), skb);
+	bstats_update(this_cpu_ptr(prog->common.cpu_bstats), skb);
 
 	filter = rcu_dereference(prog->filter);
 	if (at_ingress) {
diff --git a/net/sched/act_ife.c b/net/sched/act_ife.c
index 7064a365a1a9..b757f90a2d58 100644
--- a/net/sched/act_ife.c
+++ b/net/sched/act_ife.c
@@ -718,7 +718,7 @@ static int tcf_ife_decode(struct sk_buff *skb, const struct tc_action *a,
 	u8 *tlv_data;
 	u16 metalen;
 
-	bstats_cpu_update(this_cpu_ptr(ife->common.cpu_bstats), skb);
+	bstats_update(this_cpu_ptr(ife->common.cpu_bstats), skb);
 	tcf_lastuse_update(&ife->tcf_tm);
 
 	if (skb_at_tc_ingress(skb))
@@ -806,7 +806,7 @@ static int tcf_ife_encode(struct sk_buff *skb, const struct tc_action *a,
 			exceed_mtu = true;
 	}
 
-	bstats_cpu_update(this_cpu_ptr(ife->common.cpu_bstats), skb);
+	bstats_update(this_cpu_ptr(ife->common.cpu_bstats), skb);
 	tcf_lastuse_update(&ife->tcf_tm);
 
 	if (!metalen) {		/* no metadata to send */
diff --git a/net/sched/act_mpls.c b/net/sched/act_mpls.c
index e4529b428cf4..8faa4c58305e 100644
--- a/net/sched/act_mpls.c
+++ b/net/sched/act_mpls.c
@@ -59,7 +59,7 @@ static int tcf_mpls_act(struct sk_buff *skb, const struct tc_action *a,
 	int ret, mac_len;
 
 	tcf_lastuse_update(&m->tcf_tm);
-	bstats_cpu_update(this_cpu_ptr(m->common.cpu_bstats), skb);
+	bstats_update(this_cpu_ptr(m->common.cpu_bstats), skb);
 
 	/* Ensure 'data' points at mac_header prior calling mpls manipulating
 	 * functions.
diff --git a/net/sched/act_police.c b/net/sched/act_police.c
index 832157a840fc..9e77ba8401e5 100644
--- a/net/sched/act_police.c
+++ b/net/sched/act_police.c
@@ -125,7 +125,7 @@ static int tcf_police_init(struct net *net, struct nlattr *nla,
 					    police->common.cpu_bstats,
 					    &police->tcf_rate_est,
 					    &police->tcf_lock,
-					    NULL, est);
+					    false, est);
 		if (err)
 			goto failure;
 	} else if (tb[TCA_POLICE_AVRATE] &&
@@ -248,7 +248,7 @@ static int tcf_police_act(struct sk_buff *skb, const struct tc_action *a,
 	int ret;
 
 	tcf_lastuse_update(&police->tcf_tm);
-	bstats_cpu_update(this_cpu_ptr(police->common.cpu_bstats), skb);
+	bstats_update(this_cpu_ptr(police->common.cpu_bstats), skb);
 
 	ret = READ_ONCE(police->tcf_action);
 	p = rcu_dereference_bh(police->params);
diff --git a/net/sched/act_sample.c b/net/sched/act_sample.c
index 230501eb9e06..ce859b0e0deb 100644
--- a/net/sched/act_sample.c
+++ b/net/sched/act_sample.c
@@ -163,7 +163,7 @@ static int tcf_sample_act(struct sk_buff *skb, const struct tc_action *a,
 	int retval;
 
 	tcf_lastuse_update(&s->tcf_tm);
-	bstats_cpu_update(this_cpu_ptr(s->common.cpu_bstats), skb);
+	bstats_update(this_cpu_ptr(s->common.cpu_bstats), skb);
 	retval = READ_ONCE(s->tcf_action);
 
 	psample_group = rcu_dereference_bh(s->psample_group);
diff --git a/net/sched/act_simple.c b/net/sched/act_simple.c
index cbbe1861d3a2..e617ab4505ca 100644
--- a/net/sched/act_simple.c
+++ b/net/sched/act_simple.c
@@ -36,7 +36,8 @@ static int tcf_simp_act(struct sk_buff *skb, const struct tc_action *a,
 	 * then it would look like "hello_3" (without quotes)
 	 */
 	pr_info("simple: %s_%llu\n",
-	       (char *)d->tcfd_defdata, d->tcf_bstats.packets);
+		(char *)d->tcfd_defdata,
+		u64_stats_read(&d->tcf_bstats.packets));
 	spin_unlock(&d->tcf_lock);
 	return d->tcf_action;
 }
diff --git a/net/sched/act_skbedit.c b/net/sched/act_skbedit.c
index 605418538347..d30ecbfc8f84 100644
--- a/net/sched/act_skbedit.c
+++ b/net/sched/act_skbedit.c
@@ -31,7 +31,7 @@ static int tcf_skbedit_act(struct sk_buff *skb, const struct tc_action *a,
 	int action;
 
 	tcf_lastuse_update(&d->tcf_tm);
-	bstats_cpu_update(this_cpu_ptr(d->common.cpu_bstats), skb);
+	bstats_update(this_cpu_ptr(d->common.cpu_bstats), skb);
 
 	params = rcu_dereference_bh(d->params);
 	action = READ_ONCE(d->tcf_action);
diff --git a/net/sched/act_skbmod.c b/net/sched/act_skbmod.c
index ecb9ee666095..9b6b52c5e24e 100644
--- a/net/sched/act_skbmod.c
+++ b/net/sched/act_skbmod.c
@@ -31,7 +31,7 @@ static int tcf_skbmod_act(struct sk_buff *skb, const struct tc_action *a,
 	u64 flags;
 
 	tcf_lastuse_update(&d->tcf_tm);
-	bstats_cpu_update(this_cpu_ptr(d->common.cpu_bstats), skb);
+	bstats_update(this_cpu_ptr(d->common.cpu_bstats), skb);
 
 	action = READ_ONCE(d->tcf_action);
 	if (unlikely(action == TC_ACT_SHOT))
diff --git a/net/sched/sch_api.c b/net/sched/sch_api.c
index 4bbfd2622327..e6a837c01933 100644
--- a/net/sched/sch_api.c
+++ b/net/sched/sch_api.c
@@ -884,7 +884,7 @@ static void qdisc_offload_graft_root(struct net_device *dev,
 static int tc_fill_qdisc(struct sk_buff *skb, struct Qdisc *q, u32 clid,
 			 u32 portid, u32 seq, u16 flags, int event)
 {
-	struct gnet_stats_basic_cpu __percpu *cpu_bstats = NULL;
+	struct gnet_stats_basic_sync __percpu *cpu_bstats = NULL;
 	struct gnet_stats_queue __percpu *cpu_qstats = NULL;
 	struct tcmsg *tcm;
 	struct nlmsghdr  *nlh;
@@ -942,8 +942,7 @@ static int tc_fill_qdisc(struct sk_buff *skb, struct Qdisc *q, u32 clid,
 		cpu_qstats = q->cpu_qstats;
 	}
 
-	if (gnet_stats_copy_basic(qdisc_root_sleeping_running(q),
-				  &d, cpu_bstats, &q->bstats) < 0 ||
+	if (gnet_stats_copy_basic(&d, cpu_bstats, &q->bstats, true) < 0 ||
 	    gnet_stats_copy_rate_est(&d, &q->rate_est) < 0 ||
 	    gnet_stats_copy_queue(&d, cpu_qstats, &q->qstats, qlen) < 0)
 		goto nla_put_failure;
@@ -1264,26 +1263,17 @@ static struct Qdisc *qdisc_create(struct net_device *dev,
 		rcu_assign_pointer(sch->stab, stab);
 	}
 	if (tca[TCA_RATE]) {
-		seqcount_t *running;
-
 		err = -EOPNOTSUPP;
 		if (sch->flags & TCQ_F_MQROOT) {
 			NL_SET_ERR_MSG(extack, "Cannot attach rate estimator to a multi-queue root qdisc");
 			goto err_out4;
 		}
 
-		if (sch->parent != TC_H_ROOT &&
-		    !(sch->flags & TCQ_F_INGRESS) &&
-		    (!p || !(p->flags & TCQ_F_MQROOT)))
-			running = qdisc_root_sleeping_running(sch);
-		else
-			running = &sch->running;
-
 		err = gen_new_estimator(&sch->bstats,
 					sch->cpu_bstats,
 					&sch->rate_est,
 					NULL,
-					running,
+					true,
 					tca[TCA_RATE]);
 		if (err) {
 			NL_SET_ERR_MSG(extack, "Failed to generate new estimator");
@@ -1359,7 +1349,7 @@ static int qdisc_change(struct Qdisc *sch, struct nlattr **tca,
 				      sch->cpu_bstats,
 				      &sch->rate_est,
 				      NULL,
-				      qdisc_root_sleeping_running(sch),
+				      true,
 				      tca[TCA_RATE]);
 	}
 out:
diff --git a/net/sched/sch_atm.c b/net/sched/sch_atm.c
index 7d8518176b45..4c8e994cf0a5 100644
--- a/net/sched/sch_atm.c
+++ b/net/sched/sch_atm.c
@@ -52,7 +52,7 @@ struct atm_flow_data {
 	struct atm_qdisc_data	*parent;	/* parent qdisc */
 	struct socket		*sock;		/* for closing */
 	int			ref;		/* reference count */
-	struct gnet_stats_basic_packed	bstats;
+	struct gnet_stats_basic_sync	bstats;
 	struct gnet_stats_queue	qstats;
 	struct list_head	list;
 	struct atm_flow_data	*excess;	/* flow for excess traffic;
@@ -548,6 +548,7 @@ static int atm_tc_init(struct Qdisc *sch, struct nlattr *opt,
 	pr_debug("atm_tc_init(sch %p,[qdisc %p],opt %p)\n", sch, p, opt);
 	INIT_LIST_HEAD(&p->flows);
 	INIT_LIST_HEAD(&p->link.list);
+	gnet_stats_basic_sync_init(&p->link.bstats);
 	list_add(&p->link.list, &p->flows);
 	p->link.q = qdisc_create_dflt(sch->dev_queue,
 				      &pfifo_qdisc_ops, sch->handle, extack);
@@ -652,8 +653,7 @@ atm_tc_dump_class_stats(struct Qdisc *sch, unsigned long arg,
 {
 	struct atm_flow_data *flow = (struct atm_flow_data *)arg;
 
-	if (gnet_stats_copy_basic(qdisc_root_sleeping_running(sch),
-				  d, NULL, &flow->bstats) < 0 ||
+	if (gnet_stats_copy_basic(d, NULL, &flow->bstats, true) < 0 ||
 	    gnet_stats_copy_queue(d, NULL, &flow->qstats, flow->q->q.qlen) < 0)
 		return -1;
 
diff --git a/net/sched/sch_cbq.c b/net/sched/sch_cbq.c
index e0da15530f0e..02d9f0dfe356 100644
--- a/net/sched/sch_cbq.c
+++ b/net/sched/sch_cbq.c
@@ -116,7 +116,7 @@ struct cbq_class {
 	long			avgidle;
 	long			deficit;	/* Saved deficit for WRR */
 	psched_time_t		penalized;
-	struct gnet_stats_basic_packed bstats;
+	struct gnet_stats_basic_sync bstats;
 	struct gnet_stats_queue qstats;
 	struct net_rate_estimator __rcu *rate_est;
 	struct tc_cbq_xstats	xstats;
@@ -565,8 +565,7 @@ cbq_update(struct cbq_sched_data *q)
 		long avgidle = cl->avgidle;
 		long idle;
 
-		cl->bstats.packets++;
-		cl->bstats.bytes += len;
+		_bstats_update(&cl->bstats, len, 1);
 
 		/*
 		 * (now - last) is total time between packet right edges.
@@ -1384,8 +1383,7 @@ cbq_dump_class_stats(struct Qdisc *sch, unsigned long arg,
 	if (cl->undertime != PSCHED_PASTPERFECT)
 		cl->xstats.undertime = cl->undertime - q->now;
 
-	if (gnet_stats_copy_basic(qdisc_root_sleeping_running(sch),
-				  d, NULL, &cl->bstats) < 0 ||
+	if (gnet_stats_copy_basic(d, NULL, &cl->bstats, true) < 0 ||
 	    gnet_stats_copy_rate_est(d, &cl->rate_est) < 0 ||
 	    gnet_stats_copy_queue(d, NULL, &cl->qstats, qlen) < 0)
 		return -1;
@@ -1519,7 +1517,7 @@ cbq_change_class(struct Qdisc *sch, u32 classid, u32 parentid, struct nlattr **t
 			err = gen_replace_estimator(&cl->bstats, NULL,
 						    &cl->rate_est,
 						    NULL,
-						    qdisc_root_sleeping_running(sch),
+						    true,
 						    tca[TCA_RATE]);
 			if (err) {
 				NL_SET_ERR_MSG(extack, "Failed to replace specified rate estimator");
@@ -1611,6 +1609,7 @@ cbq_change_class(struct Qdisc *sch, u32 classid, u32 parentid, struct nlattr **t
 	if (cl == NULL)
 		goto failure;
 
+	gnet_stats_basic_sync_init(&cl->bstats);
 	err = tcf_block_get(&cl->block, &cl->filter_list, sch, extack);
 	if (err) {
 		kfree(cl);
@@ -1619,9 +1618,7 @@ cbq_change_class(struct Qdisc *sch, u32 classid, u32 parentid, struct nlattr **t
 
 	if (tca[TCA_RATE]) {
 		err = gen_new_estimator(&cl->bstats, NULL, &cl->rate_est,
-					NULL,
-					qdisc_root_sleeping_running(sch),
-					tca[TCA_RATE]);
+					NULL, true, tca[TCA_RATE]);
 		if (err) {
 			NL_SET_ERR_MSG(extack, "Couldn't create new estimator");
 			tcf_block_put(cl->block);
diff --git a/net/sched/sch_drr.c b/net/sched/sch_drr.c
index 642cd179b7a7..18e4f7a0b291 100644
--- a/net/sched/sch_drr.c
+++ b/net/sched/sch_drr.c
@@ -19,7 +19,7 @@ struct drr_class {
 	struct Qdisc_class_common	common;
 	unsigned int			filter_cnt;
 
-	struct gnet_stats_basic_packed		bstats;
+	struct gnet_stats_basic_sync		bstats;
 	struct gnet_stats_queue		qstats;
 	struct net_rate_estimator __rcu *rate_est;
 	struct list_head		alist;
@@ -85,8 +85,7 @@ static int drr_change_class(struct Qdisc *sch, u32 classid, u32 parentid,
 		if (tca[TCA_RATE]) {
 			err = gen_replace_estimator(&cl->bstats, NULL,
 						    &cl->rate_est,
-						    NULL,
-						    qdisc_root_sleeping_running(sch),
+						    NULL, true,
 						    tca[TCA_RATE]);
 			if (err) {
 				NL_SET_ERR_MSG(extack, "Failed to replace estimator");
@@ -106,6 +105,7 @@ static int drr_change_class(struct Qdisc *sch, u32 classid, u32 parentid,
 	if (cl == NULL)
 		return -ENOBUFS;
 
+	gnet_stats_basic_sync_init(&cl->bstats);
 	cl->common.classid = classid;
 	cl->quantum	   = quantum;
 	cl->qdisc	   = qdisc_create_dflt(sch->dev_queue,
@@ -118,9 +118,7 @@ static int drr_change_class(struct Qdisc *sch, u32 classid, u32 parentid,
 
 	if (tca[TCA_RATE]) {
 		err = gen_replace_estimator(&cl->bstats, NULL, &cl->rate_est,
-					    NULL,
-					    qdisc_root_sleeping_running(sch),
-					    tca[TCA_RATE]);
+					    NULL, true, tca[TCA_RATE]);
 		if (err) {
 			NL_SET_ERR_MSG(extack, "Failed to replace estimator");
 			qdisc_put(cl->qdisc);
@@ -267,8 +265,7 @@ static int drr_dump_class_stats(struct Qdisc *sch, unsigned long arg,
 	if (qlen)
 		xstats.deficit = cl->deficit;
 
-	if (gnet_stats_copy_basic(qdisc_root_sleeping_running(sch),
-				  d, NULL, &cl->bstats) < 0 ||
+	if (gnet_stats_copy_basic(d, NULL, &cl->bstats, true) < 0 ||
 	    gnet_stats_copy_rate_est(d, &cl->rate_est) < 0 ||
 	    gnet_stats_copy_queue(d, cl_q->cpu_qstats, &cl_q->qstats, qlen) < 0)
 		return -1;
diff --git a/net/sched/sch_ets.c b/net/sched/sch_ets.c
index 44fa2532a87c..d73393493553 100644
--- a/net/sched/sch_ets.c
+++ b/net/sched/sch_ets.c
@@ -41,7 +41,7 @@ struct ets_class {
 	struct Qdisc *qdisc;
 	u32 quantum;
 	u32 deficit;
-	struct gnet_stats_basic_packed bstats;
+	struct gnet_stats_basic_sync bstats;
 	struct gnet_stats_queue qstats;
 };
 
@@ -325,8 +325,7 @@ static int ets_class_dump_stats(struct Qdisc *sch, unsigned long arg,
 	struct ets_class *cl = ets_class_from_arg(sch, arg);
 	struct Qdisc *cl_q = cl->qdisc;
 
-	if (gnet_stats_copy_basic(qdisc_root_sleeping_running(sch),
-				  d, NULL, &cl_q->bstats) < 0 ||
+	if (gnet_stats_copy_basic(d, NULL, &cl_q->bstats, true) < 0 ||
 	    qdisc_qstats_copy(d, cl_q) < 0)
 		return -1;
 
@@ -661,7 +660,6 @@ static int ets_qdisc_change(struct Qdisc *sch, struct nlattr *opt,
 
 	q->nbands = nbands;
 	for (i = nstrict; i < q->nstrict; i++) {
-		INIT_LIST_HEAD(&q->classes[i].alist);
 		if (q->classes[i].qdisc->q.qlen) {
 			list_add_tail(&q->classes[i].alist, &q->active);
 			q->classes[i].deficit = quanta[i];
@@ -689,7 +687,11 @@ static int ets_qdisc_change(struct Qdisc *sch, struct nlattr *opt,
 	ets_offload_change(sch);
 	for (i = q->nbands; i < oldbands; i++) {
 		qdisc_put(q->classes[i].qdisc);
-		memset(&q->classes[i], 0, sizeof(q->classes[i]));
+		q->classes[i].qdisc = NULL;
+		q->classes[i].quantum = 0;
+		q->classes[i].deficit = 0;
+		gnet_stats_basic_sync_init(&q->classes[i].bstats);
+		memset(&q->classes[i].qstats, 0, sizeof(q->classes[i].qstats));
 	}
 	return 0;
 }
@@ -698,7 +700,7 @@ static int ets_qdisc_init(struct Qdisc *sch, struct nlattr *opt,
 			  struct netlink_ext_ack *extack)
 {
 	struct ets_sched *q = qdisc_priv(sch);
-	int err;
+	int err, i;
 
 	if (!opt)
 		return -EINVAL;
@@ -708,6 +710,9 @@ static int ets_qdisc_init(struct Qdisc *sch, struct nlattr *opt,
 		return err;
 
 	INIT_LIST_HEAD(&q->active);
+	for (i = 0; i < TCQ_ETS_MAX_BANDS; i++)
+		INIT_LIST_HEAD(&q->classes[i].alist);
+
 	return ets_qdisc_change(sch, opt, extack);
 }
 
diff --git a/net/sched/sch_generic.c b/net/sched/sch_generic.c
index 47ca76ba7ffa..c5a54c8097a3 100644
--- a/net/sched/sch_generic.c
+++ b/net/sched/sch_generic.c
@@ -304,8 +304,8 @@ static struct sk_buff *dequeue_skb(struct Qdisc *q, bool *validate,
 
 /*
  * Transmit possibly several skbs, and handle the return status as
- * required. Owning running seqcount bit guarantees that
- * only one CPU can execute this function.
+ * required. Owning qdisc running bit guarantees that only one CPU
+ * can execute this function.
  *
  * Returns to the caller:
  *				false  - hardware queue frozen backoff
@@ -606,7 +606,6 @@ struct Qdisc noop_qdisc = {
 	.ops		=	&noop_qdisc_ops,
 	.q.lock		=	__SPIN_LOCK_UNLOCKED(noop_qdisc.q.lock),
 	.dev_queue	=	&noop_netdev_queue,
-	.running	=	SEQCNT_ZERO(noop_qdisc.running),
 	.busylock	=	__SPIN_LOCK_UNLOCKED(noop_qdisc.busylock),
 	.gso_skb = {
 		.next = (struct sk_buff *)&noop_qdisc.gso_skb,
@@ -867,7 +866,6 @@ struct Qdisc_ops pfifo_fast_ops __read_mostly = {
 EXPORT_SYMBOL(pfifo_fast_ops);
 
 static struct lock_class_key qdisc_tx_busylock;
-static struct lock_class_key qdisc_running_key;
 
 struct Qdisc *qdisc_alloc(struct netdev_queue *dev_queue,
 			  const struct Qdisc_ops *ops,
@@ -892,11 +890,12 @@ struct Qdisc *qdisc_alloc(struct netdev_queue *dev_queue,
 	__skb_queue_head_init(&sch->gso_skb);
 	__skb_queue_head_init(&sch->skb_bad_txq);
 	qdisc_skb_head_init(&sch->q);
+	gnet_stats_basic_sync_init(&sch->bstats);
 	spin_lock_init(&sch->q.lock);
 
 	if (ops->static_flags & TCQ_F_CPUSTATS) {
 		sch->cpu_bstats =
-			netdev_alloc_pcpu_stats(struct gnet_stats_basic_cpu);
+			netdev_alloc_pcpu_stats(struct gnet_stats_basic_sync);
 		if (!sch->cpu_bstats)
 			goto errout1;
 
@@ -916,10 +915,6 @@ struct Qdisc *qdisc_alloc(struct netdev_queue *dev_queue,
 	lockdep_set_class(&sch->seqlock,
 			  dev->qdisc_tx_busylock ?: &qdisc_tx_busylock);
 
-	seqcount_init(&sch->running);
-	lockdep_set_class(&sch->running,
-			  dev->qdisc_running_key ?: &qdisc_running_key);
-
 	sch->ops = ops;
 	sch->flags = ops->static_flags;
 	sch->enqueue = ops->enqueue;
diff --git a/net/sched/sch_gred.c b/net/sched/sch_gred.c
index 621dc6afde8f..1073c76d05c4 100644
--- a/net/sched/sch_gred.c
+++ b/net/sched/sch_gred.c
@@ -56,6 +56,7 @@ struct gred_sched {
 	u32 		DPs;
 	u32 		def;
 	struct red_vars wred_set;
+	struct tc_gred_qopt_offload *opt;
 };
 
 static inline int gred_wred_mode(struct gred_sched *table)
@@ -311,48 +312,50 @@ static void gred_offload(struct Qdisc *sch, enum tc_gred_command command)
 {
 	struct gred_sched *table = qdisc_priv(sch);
 	struct net_device *dev = qdisc_dev(sch);
-	struct tc_gred_qopt_offload opt = {
-		.command	= command,
-		.handle		= sch->handle,
-		.parent		= sch->parent,
-	};
+	struct tc_gred_qopt_offload *opt = table->opt;
 
 	if (!tc_can_offload(dev) || !dev->netdev_ops->ndo_setup_tc)
 		return;
 
+	memset(opt, 0, sizeof(*opt));
+	opt->command = command;
+	opt->handle = sch->handle;
+	opt->parent = sch->parent;
+
 	if (command == TC_GRED_REPLACE) {
 		unsigned int i;
 
-		opt.set.grio_on = gred_rio_mode(table);
-		opt.set.wred_on = gred_wred_mode(table);
-		opt.set.dp_cnt = table->DPs;
-		opt.set.dp_def = table->def;
+		opt->set.grio_on = gred_rio_mode(table);
+		opt->set.wred_on = gred_wred_mode(table);
+		opt->set.dp_cnt = table->DPs;
+		opt->set.dp_def = table->def;
 
 		for (i = 0; i < table->DPs; i++) {
 			struct gred_sched_data *q = table->tab[i];
 
 			if (!q)
 				continue;
-			opt.set.tab[i].present = true;
-			opt.set.tab[i].limit = q->limit;
-			opt.set.tab[i].prio = q->prio;
-			opt.set.tab[i].min = q->parms.qth_min >> q->parms.Wlog;
-			opt.set.tab[i].max = q->parms.qth_max >> q->parms.Wlog;
-			opt.set.tab[i].is_ecn = gred_use_ecn(q);
-			opt.set.tab[i].is_harddrop = gred_use_harddrop(q);
-			opt.set.tab[i].probability = q->parms.max_P;
-			opt.set.tab[i].backlog = &q->backlog;
+			opt->set.tab[i].present = true;
+			opt->set.tab[i].limit = q->limit;
+			opt->set.tab[i].prio = q->prio;
+			opt->set.tab[i].min = q->parms.qth_min >> q->parms.Wlog;
+			opt->set.tab[i].max = q->parms.qth_max >> q->parms.Wlog;
+			opt->set.tab[i].is_ecn = gred_use_ecn(q);
+			opt->set.tab[i].is_harddrop = gred_use_harddrop(q);
+			opt->set.tab[i].probability = q->parms.max_P;
+			opt->set.tab[i].backlog = &q->backlog;
 		}
-		opt.set.qstats = &sch->qstats;
+		opt->set.qstats = &sch->qstats;
 	}
 
-	dev->netdev_ops->ndo_setup_tc(dev, TC_SETUP_QDISC_GRED, &opt);
+	dev->netdev_ops->ndo_setup_tc(dev, TC_SETUP_QDISC_GRED, opt);
 }
 
 static int gred_offload_dump_stats(struct Qdisc *sch)
 {
 	struct gred_sched *table = qdisc_priv(sch);
 	struct tc_gred_qopt_offload *hw_stats;
+	u64 bytes = 0, packets = 0;
 	unsigned int i;
 	int ret;
 
@@ -364,9 +367,11 @@ static int gred_offload_dump_stats(struct Qdisc *sch)
 	hw_stats->handle = sch->handle;
 	hw_stats->parent = sch->parent;
 
-	for (i = 0; i < MAX_DPs; i++)
+	for (i = 0; i < MAX_DPs; i++) {
+		gnet_stats_basic_sync_init(&hw_stats->stats.bstats[i]);
 		if (table->tab[i])
 			hw_stats->stats.xstats[i] = &table->tab[i]->stats;
+	}
 
 	ret = qdisc_offload_dump_helper(sch, TC_SETUP_QDISC_GRED, hw_stats);
 	/* Even if driver returns failure adjust the stats - in case offload
@@ -375,19 +380,19 @@ static int gred_offload_dump_stats(struct Qdisc *sch)
 	for (i = 0; i < MAX_DPs; i++) {
 		if (!table->tab[i])
 			continue;
-		table->tab[i]->packetsin += hw_stats->stats.bstats[i].packets;
-		table->tab[i]->bytesin += hw_stats->stats.bstats[i].bytes;
+		table->tab[i]->packetsin += u64_stats_read(&hw_stats->stats.bstats[i].packets);
+		table->tab[i]->bytesin += u64_stats_read(&hw_stats->stats.bstats[i].bytes);
 		table->tab[i]->backlog += hw_stats->stats.qstats[i].backlog;
 
-		_bstats_update(&sch->bstats,
-			       hw_stats->stats.bstats[i].bytes,
-			       hw_stats->stats.bstats[i].packets);
+		bytes += u64_stats_read(&hw_stats->stats.bstats[i].bytes);
+		packets += u64_stats_read(&hw_stats->stats.bstats[i].packets);
 		sch->qstats.qlen += hw_stats->stats.qstats[i].qlen;
 		sch->qstats.backlog += hw_stats->stats.qstats[i].backlog;
 		sch->qstats.drops += hw_stats->stats.qstats[i].drops;
 		sch->qstats.requeues += hw_stats->stats.qstats[i].requeues;
 		sch->qstats.overlimits += hw_stats->stats.qstats[i].overlimits;
 	}
+	_bstats_update(&sch->bstats, bytes, packets);
 
 	kfree(hw_stats);
 	return ret;
@@ -728,6 +733,7 @@ static int gred_change(struct Qdisc *sch, struct nlattr *opt,
 static int gred_init(struct Qdisc *sch, struct nlattr *opt,
 		     struct netlink_ext_ack *extack)
 {
+	struct gred_sched *table = qdisc_priv(sch);
 	struct nlattr *tb[TCA_GRED_MAX + 1];
 	int err;
 
@@ -751,6 +757,12 @@ static int gred_init(struct Qdisc *sch, struct nlattr *opt,
 		sch->limit = qdisc_dev(sch)->tx_queue_len
 		             * psched_mtu(qdisc_dev(sch));
 
+	if (qdisc_dev(sch)->netdev_ops->ndo_setup_tc) {
+		table->opt = kzalloc(sizeof(*table->opt), GFP_KERNEL);
+		if (!table->opt)
+			return -ENOMEM;
+	}
+
 	return gred_change_table_def(sch, tb[TCA_GRED_DPS], extack);
 }
 
@@ -907,6 +919,7 @@ static void gred_destroy(struct Qdisc *sch)
 			gred_destroy_vq(table->tab[i]);
 	}
 	gred_offload(sch, TC_GRED_DESTROY);
+	kfree(table->opt);
 }
 
 static struct Qdisc_ops gred_qdisc_ops __read_mostly = {
diff --git a/net/sched/sch_hfsc.c b/net/sched/sch_hfsc.c
index b7ac30cca035..d3979a6000e7 100644
--- a/net/sched/sch_hfsc.c
+++ b/net/sched/sch_hfsc.c
@@ -111,7 +111,7 @@ enum hfsc_class_flags {
 struct hfsc_class {
 	struct Qdisc_class_common cl_common;
 
-	struct gnet_stats_basic_packed bstats;
+	struct gnet_stats_basic_sync bstats;
 	struct gnet_stats_queue qstats;
 	struct net_rate_estimator __rcu *rate_est;
 	struct tcf_proto __rcu *filter_list; /* filter list */
@@ -965,7 +965,7 @@ hfsc_change_class(struct Qdisc *sch, u32 classid, u32 parentid,
 			err = gen_replace_estimator(&cl->bstats, NULL,
 						    &cl->rate_est,
 						    NULL,
-						    qdisc_root_sleeping_running(sch),
+						    true,
 						    tca[TCA_RATE]);
 			if (err)
 				return err;
@@ -1033,9 +1033,7 @@ hfsc_change_class(struct Qdisc *sch, u32 classid, u32 parentid,
 
 	if (tca[TCA_RATE]) {
 		err = gen_new_estimator(&cl->bstats, NULL, &cl->rate_est,
-					NULL,
-					qdisc_root_sleeping_running(sch),
-					tca[TCA_RATE]);
+					NULL, true, tca[TCA_RATE]);
 		if (err) {
 			tcf_block_put(cl->block);
 			kfree(cl);
@@ -1328,7 +1326,7 @@ hfsc_dump_class_stats(struct Qdisc *sch, unsigned long arg,
 	xstats.work    = cl->cl_total;
 	xstats.rtwork  = cl->cl_cumul;
 
-	if (gnet_stats_copy_basic(qdisc_root_sleeping_running(sch), d, NULL, &cl->bstats) < 0 ||
+	if (gnet_stats_copy_basic(d, NULL, &cl->bstats, true) < 0 ||
 	    gnet_stats_copy_rate_est(d, &cl->rate_est) < 0 ||
 	    gnet_stats_copy_queue(d, NULL, &cl->qstats, qlen) < 0)
 		return -1;
@@ -1406,6 +1404,7 @@ hfsc_init_qdisc(struct Qdisc *sch, struct nlattr *opt,
 	if (err)
 		return err;
 
+	gnet_stats_basic_sync_init(&q->root.bstats);
 	q->root.cl_common.classid = sch->handle;
 	q->root.sched   = q;
 	q->root.qdisc = qdisc_create_dflt(sch->dev_queue, &pfifo_qdisc_ops,
diff --git a/net/sched/sch_htb.c b/net/sched/sch_htb.c
index 5cbc32fee867..8fd419337d3f 100644
--- a/net/sched/sch_htb.c
+++ b/net/sched/sch_htb.c
@@ -113,8 +113,8 @@ struct htb_class {
 	/*
 	 * Written often fields
 	 */
-	struct gnet_stats_basic_packed bstats;
-	struct gnet_stats_basic_packed bstats_bias;
+	struct gnet_stats_basic_sync bstats;
+	struct gnet_stats_basic_sync bstats_bias;
 	struct tc_htb_xstats	xstats;	/* our special stats */
 
 	/* token bucket parameters */
@@ -1308,10 +1308,11 @@ static int htb_dump_class(struct Qdisc *sch, unsigned long arg,
 static void htb_offload_aggregate_stats(struct htb_sched *q,
 					struct htb_class *cl)
 {
+	u64 bytes = 0, packets = 0;
 	struct htb_class *c;
 	unsigned int i;
 
-	memset(&cl->bstats, 0, sizeof(cl->bstats));
+	gnet_stats_basic_sync_init(&cl->bstats);
 
 	for (i = 0; i < q->clhash.hashsize; i++) {
 		hlist_for_each_entry(c, &q->clhash.hash[i], common.hnode) {
@@ -1323,14 +1324,15 @@ static void htb_offload_aggregate_stats(struct htb_sched *q,
 			if (p != cl)
 				continue;
 
-			cl->bstats.bytes += c->bstats_bias.bytes;
-			cl->bstats.packets += c->bstats_bias.packets;
+			bytes += u64_stats_read(&c->bstats_bias.bytes);
+			packets += u64_stats_read(&c->bstats_bias.packets);
 			if (c->level == 0) {
-				cl->bstats.bytes += c->leaf.q->bstats.bytes;
-				cl->bstats.packets += c->leaf.q->bstats.packets;
+				bytes += u64_stats_read(&c->leaf.q->bstats.bytes);
+				packets += u64_stats_read(&c->leaf.q->bstats.packets);
 			}
 		}
 	}
+	_bstats_update(&cl->bstats, bytes, packets);
 }
 
 static int
@@ -1357,16 +1359,16 @@ htb_dump_class_stats(struct Qdisc *sch, unsigned long arg, struct gnet_dump *d)
 			if (cl->leaf.q)
 				cl->bstats = cl->leaf.q->bstats;
 			else
-				memset(&cl->bstats, 0, sizeof(cl->bstats));
-			cl->bstats.bytes += cl->bstats_bias.bytes;
-			cl->bstats.packets += cl->bstats_bias.packets;
+				gnet_stats_basic_sync_init(&cl->bstats);
+			_bstats_update(&cl->bstats,
+				       u64_stats_read(&cl->bstats_bias.bytes),
+				       u64_stats_read(&cl->bstats_bias.packets));
 		} else {
 			htb_offload_aggregate_stats(q, cl);
 		}
 	}
 
-	if (gnet_stats_copy_basic(qdisc_root_sleeping_running(sch),
-				  d, NULL, &cl->bstats) < 0 ||
+	if (gnet_stats_copy_basic(d, NULL, &cl->bstats, true) < 0 ||
 	    gnet_stats_copy_rate_est(d, &cl->rate_est) < 0 ||
 	    gnet_stats_copy_queue(d, NULL, &qs, qlen) < 0)
 		return -1;
@@ -1578,8 +1580,9 @@ static int htb_destroy_class_offload(struct Qdisc *sch, struct htb_class *cl,
 		WARN_ON(old != q);
 
 	if (cl->parent) {
-		cl->parent->bstats_bias.bytes += q->bstats.bytes;
-		cl->parent->bstats_bias.packets += q->bstats.packets;
+		_bstats_update(&cl->parent->bstats_bias,
+			       u64_stats_read(&q->bstats.bytes),
+			       u64_stats_read(&q->bstats.packets));
 	}
 
 	offload_opt = (struct tc_htb_qopt_offload) {
@@ -1869,6 +1872,9 @@ static int htb_change_class(struct Qdisc *sch, u32 classid,
 		if (!cl)
 			goto failure;
 
+		gnet_stats_basic_sync_init(&cl->bstats);
+		gnet_stats_basic_sync_init(&cl->bstats_bias);
+
 		err = tcf_block_get(&cl->block, &cl->filter_list, sch, extack);
 		if (err) {
 			kfree(cl);
@@ -1878,7 +1884,7 @@ static int htb_change_class(struct Qdisc *sch, u32 classid,
 			err = gen_new_estimator(&cl->bstats, NULL,
 						&cl->rate_est,
 						NULL,
-						qdisc_root_sleeping_running(sch),
+						true,
 						tca[TCA_RATE] ? : &est.nla);
 			if (err)
 				goto err_block_put;
@@ -1942,8 +1948,9 @@ static int htb_change_class(struct Qdisc *sch, u32 classid,
 				htb_graft_helper(dev_queue, old_q);
 				goto err_kill_estimator;
 			}
-			parent->bstats_bias.bytes += old_q->bstats.bytes;
-			parent->bstats_bias.packets += old_q->bstats.packets;
+			_bstats_update(&parent->bstats_bias,
+				       u64_stats_read(&old_q->bstats.bytes),
+				       u64_stats_read(&old_q->bstats.packets));
 			qdisc_put(old_q);
 		}
 		new_q = qdisc_create_dflt(dev_queue, &pfifo_qdisc_ops,
@@ -2003,7 +2010,7 @@ static int htb_change_class(struct Qdisc *sch, u32 classid,
 			err = gen_replace_estimator(&cl->bstats, NULL,
 						    &cl->rate_est,
 						    NULL,
-						    qdisc_root_sleeping_running(sch),
+						    true,
 						    tca[TCA_RATE]);
 			if (err)
 				return err;
diff --git a/net/sched/sch_mq.c b/net/sched/sch_mq.c
index db18d8a860f9..24c5d97d88dd 100644
--- a/net/sched/sch_mq.c
+++ b/net/sched/sch_mq.c
@@ -153,10 +153,9 @@ static int mq_dump(struct Qdisc *sch, struct sk_buff *skb)
 	struct net_device *dev = qdisc_dev(sch);
 	struct Qdisc *qdisc;
 	unsigned int ntx;
-	__u32 qlen = 0;
 
 	sch->q.qlen = 0;
-	memset(&sch->bstats, 0, sizeof(sch->bstats));
+	gnet_stats_basic_sync_init(&sch->bstats);
 	memset(&sch->qstats, 0, sizeof(sch->qstats));
 
 	/* MQ supports lockless qdiscs. However, statistics accounting needs
@@ -168,25 +167,11 @@ static int mq_dump(struct Qdisc *sch, struct sk_buff *skb)
 		qdisc = netdev_get_tx_queue(dev, ntx)->qdisc_sleeping;
 		spin_lock_bh(qdisc_lock(qdisc));
 
-		if (qdisc_is_percpu_stats(qdisc)) {
-			qlen = qdisc_qlen_sum(qdisc);
-			__gnet_stats_copy_basic(NULL, &sch->bstats,
-						qdisc->cpu_bstats,
-						&qdisc->bstats);
-			__gnet_stats_copy_queue(&sch->qstats,
-						qdisc->cpu_qstats,
-						&qdisc->qstats, qlen);
-			sch->q.qlen		+= qlen;
-		} else {
-			sch->q.qlen		+= qdisc->q.qlen;
-			sch->bstats.bytes	+= qdisc->bstats.bytes;
-			sch->bstats.packets	+= qdisc->bstats.packets;
-			sch->qstats.qlen	+= qdisc->qstats.qlen;
-			sch->qstats.backlog	+= qdisc->qstats.backlog;
-			sch->qstats.drops	+= qdisc->qstats.drops;
-			sch->qstats.requeues	+= qdisc->qstats.requeues;
-			sch->qstats.overlimits	+= qdisc->qstats.overlimits;
-		}
+		gnet_stats_add_basic(&sch->bstats, qdisc->cpu_bstats,
+				     &qdisc->bstats, false);
+		gnet_stats_add_queue(&sch->qstats, qdisc->cpu_qstats,
+				     &qdisc->qstats);
+		sch->q.qlen += qdisc_qlen(qdisc);
 
 		spin_unlock_bh(qdisc_lock(qdisc));
 	}
@@ -269,8 +254,7 @@ static int mq_dump_class_stats(struct Qdisc *sch, unsigned long cl,
 	struct netdev_queue *dev_queue = mq_queue_get(sch, cl);
 
 	sch = dev_queue->qdisc_sleeping;
-	if (gnet_stats_copy_basic(&sch->running, d, sch->cpu_bstats,
-				  &sch->bstats) < 0 ||
+	if (gnet_stats_copy_basic(d, sch->cpu_bstats, &sch->bstats, true) < 0 ||
 	    qdisc_qstats_copy(d, sch) < 0)
 		return -1;
 	return 0;
diff --git a/net/sched/sch_mqprio.c b/net/sched/sch_mqprio.c
index 50e15add6068..42d4101e4f3d 100644
--- a/net/sched/sch_mqprio.c
+++ b/net/sched/sch_mqprio.c
@@ -412,7 +412,7 @@ static int mqprio_dump(struct Qdisc *sch, struct sk_buff *skb)
 	unsigned int ntx, tc;
 
 	sch->q.qlen = 0;
-	memset(&sch->bstats, 0, sizeof(sch->bstats));
+	gnet_stats_basic_sync_init(&sch->bstats);
 	memset(&sch->qstats, 0, sizeof(sch->qstats));
 
 	/* MQ supports lockless qdiscs. However, statistics accounting needs
@@ -424,25 +424,11 @@ static int mqprio_dump(struct Qdisc *sch, struct sk_buff *skb)
 		qdisc = netdev_get_tx_queue(dev, ntx)->qdisc_sleeping;
 		spin_lock_bh(qdisc_lock(qdisc));
 
-		if (qdisc_is_percpu_stats(qdisc)) {
-			__u32 qlen = qdisc_qlen_sum(qdisc);
-
-			__gnet_stats_copy_basic(NULL, &sch->bstats,
-						qdisc->cpu_bstats,
-						&qdisc->bstats);
-			__gnet_stats_copy_queue(&sch->qstats,
-						qdisc->cpu_qstats,
-						&qdisc->qstats, qlen);
-			sch->q.qlen		+= qlen;
-		} else {
-			sch->q.qlen		+= qdisc->q.qlen;
-			sch->bstats.bytes	+= qdisc->bstats.bytes;
-			sch->bstats.packets	+= qdisc->bstats.packets;
-			sch->qstats.backlog	+= qdisc->qstats.backlog;
-			sch->qstats.drops	+= qdisc->qstats.drops;
-			sch->qstats.requeues	+= qdisc->qstats.requeues;
-			sch->qstats.overlimits	+= qdisc->qstats.overlimits;
-		}
+		gnet_stats_add_basic(&sch->bstats, qdisc->cpu_bstats,
+				     &qdisc->bstats, false);
+		gnet_stats_add_queue(&sch->qstats, qdisc->cpu_qstats,
+				     &qdisc->qstats);
+		sch->q.qlen += qdisc_qlen(qdisc);
 
 		spin_unlock_bh(qdisc_lock(qdisc));
 	}
@@ -534,12 +520,13 @@ static int mqprio_dump_class_stats(struct Qdisc *sch, unsigned long cl,
 {
 	if (cl >= TC_H_MIN_PRIORITY) {
 		int i;
-		__u32 qlen = 0;
+		__u32 qlen;
 		struct gnet_stats_queue qstats = {0};
-		struct gnet_stats_basic_packed bstats = {0};
+		struct gnet_stats_basic_sync bstats;
 		struct net_device *dev = qdisc_dev(sch);
 		struct netdev_tc_txq tc = dev->tc_to_txq[cl & TC_BITMASK];
 
+		gnet_stats_basic_sync_init(&bstats);
 		/* Drop lock here it will be reclaimed before touching
 		 * statistics this is required because the d->lock we
 		 * hold here is the look on dev_queue->qdisc_sleeping
@@ -554,40 +541,28 @@ static int mqprio_dump_class_stats(struct Qdisc *sch, unsigned long cl,
 
 			spin_lock_bh(qdisc_lock(qdisc));
 
-			if (qdisc_is_percpu_stats(qdisc)) {
-				qlen = qdisc_qlen_sum(qdisc);
-
-				__gnet_stats_copy_basic(NULL, &bstats,
-							qdisc->cpu_bstats,
-							&qdisc->bstats);
-				__gnet_stats_copy_queue(&qstats,
-							qdisc->cpu_qstats,
-							&qdisc->qstats,
-							qlen);
-			} else {
-				qlen		+= qdisc->q.qlen;
-				bstats.bytes	+= qdisc->bstats.bytes;
-				bstats.packets	+= qdisc->bstats.packets;
-				qstats.backlog	+= qdisc->qstats.backlog;
-				qstats.drops	+= qdisc->qstats.drops;
-				qstats.requeues	+= qdisc->qstats.requeues;
-				qstats.overlimits += qdisc->qstats.overlimits;
-			}
+			gnet_stats_add_basic(&bstats, qdisc->cpu_bstats,
+					     &qdisc->bstats, false);
+			gnet_stats_add_queue(&qstats, qdisc->cpu_qstats,
+					     &qdisc->qstats);
+			sch->q.qlen += qdisc_qlen(qdisc);
+
 			spin_unlock_bh(qdisc_lock(qdisc));
 		}
+		qlen = qdisc_qlen(sch) + qstats.qlen;
 
 		/* Reclaim root sleeping lock before completing stats */
 		if (d->lock)
 			spin_lock_bh(d->lock);
-		if (gnet_stats_copy_basic(NULL, d, NULL, &bstats) < 0 ||
+		if (gnet_stats_copy_basic(d, NULL, &bstats, false) < 0 ||
 		    gnet_stats_copy_queue(d, NULL, &qstats, qlen) < 0)
 			return -1;
 	} else {
 		struct netdev_queue *dev_queue = mqprio_queue_get(sch, cl);
 
 		sch = dev_queue->qdisc_sleeping;
-		if (gnet_stats_copy_basic(qdisc_root_sleeping_running(sch), d,
-					  sch->cpu_bstats, &sch->bstats) < 0 ||
+		if (gnet_stats_copy_basic(d, sch->cpu_bstats,
+					  &sch->bstats, true) < 0 ||
 		    qdisc_qstats_copy(d, sch) < 0)
 			return -1;
 	}
diff --git a/net/sched/sch_multiq.c b/net/sched/sch_multiq.c
index e282e7382117..cd8ab90c4765 100644
--- a/net/sched/sch_multiq.c
+++ b/net/sched/sch_multiq.c
@@ -338,8 +338,7 @@ static int multiq_dump_class_stats(struct Qdisc *sch, unsigned long cl,
 	struct Qdisc *cl_q;
 
 	cl_q = q->queues[cl - 1];
-	if (gnet_stats_copy_basic(qdisc_root_sleeping_running(sch),
-				  d, cl_q->cpu_bstats, &cl_q->bstats) < 0 ||
+	if (gnet_stats_copy_basic(d, cl_q->cpu_bstats, &cl_q->bstats, true) < 0 ||
 	    qdisc_qstats_copy(d, cl_q) < 0)
 		return -1;
 
diff --git a/net/sched/sch_prio.c b/net/sched/sch_prio.c
index 03fdf31ccb6a..3b8d7197c06b 100644
--- a/net/sched/sch_prio.c
+++ b/net/sched/sch_prio.c
@@ -361,8 +361,8 @@ static int prio_dump_class_stats(struct Qdisc *sch, unsigned long cl,
 	struct Qdisc *cl_q;
 
 	cl_q = q->queues[cl - 1];
-	if (gnet_stats_copy_basic(qdisc_root_sleeping_running(sch),
-				  d, cl_q->cpu_bstats, &cl_q->bstats) < 0 ||
+	if (gnet_stats_copy_basic(d, cl_q->cpu_bstats,
+				  &cl_q->bstats, true) < 0 ||
 	    qdisc_qstats_copy(d, cl_q) < 0)
 		return -1;
 
diff --git a/net/sched/sch_qfq.c b/net/sched/sch_qfq.c
index aea435b0aeb3..d4ce58c90f9f 100644
--- a/net/sched/sch_qfq.c
+++ b/net/sched/sch_qfq.c
@@ -131,7 +131,7 @@ struct qfq_class {
 
 	unsigned int filter_cnt;
 
-	struct gnet_stats_basic_packed bstats;
+	struct gnet_stats_basic_sync bstats;
 	struct gnet_stats_queue qstats;
 	struct net_rate_estimator __rcu *rate_est;
 	struct Qdisc *qdisc;
@@ -451,7 +451,7 @@ static int qfq_change_class(struct Qdisc *sch, u32 classid, u32 parentid,
 			err = gen_replace_estimator(&cl->bstats, NULL,
 						    &cl->rate_est,
 						    NULL,
-						    qdisc_root_sleeping_running(sch),
+						    true,
 						    tca[TCA_RATE]);
 			if (err)
 				return err;
@@ -465,6 +465,7 @@ static int qfq_change_class(struct Qdisc *sch, u32 classid, u32 parentid,
 	if (cl == NULL)
 		return -ENOBUFS;
 
+	gnet_stats_basic_sync_init(&cl->bstats);
 	cl->common.classid = classid;
 	cl->deficit = lmax;
 
@@ -477,7 +478,7 @@ static int qfq_change_class(struct Qdisc *sch, u32 classid, u32 parentid,
 		err = gen_new_estimator(&cl->bstats, NULL,
 					&cl->rate_est,
 					NULL,
-					qdisc_root_sleeping_running(sch),
+					true,
 					tca[TCA_RATE]);
 		if (err)
 			goto destroy_class;
@@ -639,8 +640,7 @@ static int qfq_dump_class_stats(struct Qdisc *sch, unsigned long arg,
 	xstats.weight = cl->agg->class_weight;
 	xstats.lmax = cl->agg->lmax;
 
-	if (gnet_stats_copy_basic(qdisc_root_sleeping_running(sch),
-				  d, NULL, &cl->bstats) < 0 ||
+	if (gnet_stats_copy_basic(d, NULL, &cl->bstats, true) < 0 ||
 	    gnet_stats_copy_rate_est(d, &cl->rate_est) < 0 ||
 	    qdisc_qstats_copy(d, cl->qdisc) < 0)
 		return -1;
@@ -1234,8 +1234,7 @@ static int qfq_enqueue(struct sk_buff *skb, struct Qdisc *sch,
 		return err;
 	}
 
-	cl->bstats.bytes += len;
-	cl->bstats.packets += gso_segs;
+	_bstats_update(&cl->bstats, len, gso_segs);
 	sch->qstats.backlog += len;
 	++sch->q.qlen;
 
diff --git a/net/sched/sch_taprio.c b/net/sched/sch_taprio.c
index a66398fb2d6d..377f896bdedc 100644
--- a/net/sched/sch_taprio.c
+++ b/net/sched/sch_taprio.c
@@ -1984,7 +1984,7 @@ static int taprio_dump_class_stats(struct Qdisc *sch, unsigned long cl,
 	struct netdev_queue *dev_queue = taprio_queue_get(sch, cl);
 
 	sch = dev_queue->qdisc_sleeping;
-	if (gnet_stats_copy_basic(&sch->running, d, NULL, &sch->bstats) < 0 ||
+	if (gnet_stats_copy_basic(d, NULL, &sch->bstats, true) < 0 ||
 	    qdisc_qstats_copy(d, sch) < 0)
 		return -1;
 	return 0;
diff --git a/net/sunrpc/svc_xprt.c b/net/sunrpc/svc_xprt.c
index 6316bd2b8f37..dfc9d12caef8 100644
--- a/net/sunrpc/svc_xprt.c
+++ b/net/sunrpc/svc_xprt.c
@@ -441,7 +441,7 @@ void svc_xprt_do_enqueue(struct svc_xprt *xprt)
 	if (test_and_set_bit(XPT_BUSY, &xprt->xpt_flags))
 		return;
 
-	cpu = get_cpu();
+	cpu = get_cpu_light();
 	pool = svc_pool_for_cpu(xprt->xpt_server, cpu);
 
 	atomic_long_inc(&pool->sp_stats.packets);
@@ -465,7 +465,7 @@ void svc_xprt_do_enqueue(struct svc_xprt *xprt)
 	rqstp = NULL;
 out_unlock:
 	rcu_read_unlock();
-	put_cpu();
+	put_cpu_light();
 	trace_svc_xprt_do_enqueue(xprt, rqstp);
 }
 EXPORT_SYMBOL_GPL(svc_xprt_do_enqueue);
diff --git a/samples/kfifo/bytestream-example.c b/samples/kfifo/bytestream-example.c
index 5a90aa527877..642d0748c169 100644
--- a/samples/kfifo/bytestream-example.c
+++ b/samples/kfifo/bytestream-example.c
@@ -22,10 +22,10 @@
 #define	PROC_FIFO	"bytestream-fifo"
 
 /* lock for procfs read access */
-static DEFINE_MUTEX(read_lock);
+static DEFINE_MUTEX(read_access);
 
 /* lock for procfs write access */
-static DEFINE_MUTEX(write_lock);
+static DEFINE_MUTEX(write_access);
 
 /*
  * define DYNAMIC in this example for a dynamically allocated fifo.
@@ -116,12 +116,12 @@ static ssize_t fifo_write(struct file *file, const char __user *buf,
 	int ret;
 	unsigned int copied;
 
-	if (mutex_lock_interruptible(&write_lock))
+	if (mutex_lock_interruptible(&write_access))
 		return -ERESTARTSYS;
 
 	ret = kfifo_from_user(&test, buf, count, &copied);
 
-	mutex_unlock(&write_lock);
+	mutex_unlock(&write_access);
 	if (ret)
 		return ret;
 
@@ -134,12 +134,12 @@ static ssize_t fifo_read(struct file *file, char __user *buf,
 	int ret;
 	unsigned int copied;
 
-	if (mutex_lock_interruptible(&read_lock))
+	if (mutex_lock_interruptible(&read_access))
 		return -ERESTARTSYS;
 
 	ret = kfifo_to_user(&test, buf, count, &copied);
 
-	mutex_unlock(&read_lock);
+	mutex_unlock(&read_access);
 	if (ret)
 		return ret;
 
diff --git a/samples/kfifo/inttype-example.c b/samples/kfifo/inttype-example.c
index e5403d8c971a..c61482ba94f4 100644
--- a/samples/kfifo/inttype-example.c
+++ b/samples/kfifo/inttype-example.c
@@ -22,10 +22,10 @@
 #define	PROC_FIFO	"int-fifo"
 
 /* lock for procfs read access */
-static DEFINE_MUTEX(read_lock);
+static DEFINE_MUTEX(read_access);
 
 /* lock for procfs write access */
-static DEFINE_MUTEX(write_lock);
+static DEFINE_MUTEX(write_access);
 
 /*
  * define DYNAMIC in this example for a dynamically allocated fifo.
@@ -109,12 +109,12 @@ static ssize_t fifo_write(struct file *file, const char __user *buf,
 	int ret;
 	unsigned int copied;
 
-	if (mutex_lock_interruptible(&write_lock))
+	if (mutex_lock_interruptible(&write_access))
 		return -ERESTARTSYS;
 
 	ret = kfifo_from_user(&test, buf, count, &copied);
 
-	mutex_unlock(&write_lock);
+	mutex_unlock(&write_access);
 	if (ret)
 		return ret;
 
@@ -127,12 +127,12 @@ static ssize_t fifo_read(struct file *file, char __user *buf,
 	int ret;
 	unsigned int copied;
 
-	if (mutex_lock_interruptible(&read_lock))
+	if (mutex_lock_interruptible(&read_access))
 		return -ERESTARTSYS;
 
 	ret = kfifo_to_user(&test, buf, count, &copied);
 
-	mutex_unlock(&read_lock);
+	mutex_unlock(&read_access);
 	if (ret)
 		return ret;
 
diff --git a/samples/kfifo/record-example.c b/samples/kfifo/record-example.c
index f64f3d62d6c2..e4087b2d3fc4 100644
--- a/samples/kfifo/record-example.c
+++ b/samples/kfifo/record-example.c
@@ -22,10 +22,10 @@
 #define	PROC_FIFO	"record-fifo"
 
 /* lock for procfs read access */
-static DEFINE_MUTEX(read_lock);
+static DEFINE_MUTEX(read_access);
 
 /* lock for procfs write access */
-static DEFINE_MUTEX(write_lock);
+static DEFINE_MUTEX(write_access);
 
 /*
  * define DYNAMIC in this example for a dynamically allocated fifo.
@@ -123,12 +123,12 @@ static ssize_t fifo_write(struct file *file, const char __user *buf,
 	int ret;
 	unsigned int copied;
 
-	if (mutex_lock_interruptible(&write_lock))
+	if (mutex_lock_interruptible(&write_access))
 		return -ERESTARTSYS;
 
 	ret = kfifo_from_user(&test, buf, count, &copied);
 
-	mutex_unlock(&write_lock);
+	mutex_unlock(&write_access);
 	if (ret)
 		return ret;
 
@@ -141,12 +141,12 @@ static ssize_t fifo_read(struct file *file, char __user *buf,
 	int ret;
 	unsigned int copied;
 
-	if (mutex_lock_interruptible(&read_lock))
+	if (mutex_lock_interruptible(&read_access))
 		return -ERESTARTSYS;
 
 	ret = kfifo_to_user(&test, buf, count, &copied);
 
-	mutex_unlock(&read_lock);
+	mutex_unlock(&read_access);
 	if (ret)
 		return ret;
 
diff --git a/security/smack/smack_lsm.c b/security/smack/smack_lsm.c
index 21a0e7c3b8de..e7dd316da551 100644
--- a/security/smack/smack_lsm.c
+++ b/security/smack/smack_lsm.c
@@ -51,8 +51,10 @@
 #define SMK_RECEIVING	1
 #define SMK_SENDING	2
 
+#ifdef SMACK_IPV6_PORT_LABELING
 static DEFINE_MUTEX(smack_ipv6_lock);
 static LIST_HEAD(smk_ipv6_port_list);
+#endif
 struct kmem_cache *smack_rule_cache;
 int smack_enabled __initdata;
 
@@ -2603,7 +2605,6 @@ static void smk_ipv6_port_label(struct socket *sock, struct sockaddr *address)
 	mutex_unlock(&smack_ipv6_lock);
 	return;
 }
-#endif
 
 /**
  * smk_ipv6_port_check - check Smack port access
@@ -2666,6 +2667,7 @@ static int smk_ipv6_port_check(struct sock *sk, struct sockaddr_in6 *address,
 
 	return smk_ipv6_check(skp, object, address, act);
 }
+#endif
 
 /**
  * smack_inode_setsecurity - set smack xattrs
@@ -2852,8 +2854,9 @@ static int smack_socket_connect(struct socket *sock, struct sockaddr *sap,
 			rc = smk_ipv6_check(ssp->smk_out, rsp, sip,
 					    SMK_CONNECTING);
 		}
-		if (__is_defined(SMACK_IPV6_PORT_LABELING))
-			rc = smk_ipv6_port_check(sock->sk, sip, SMK_CONNECTING);
+#ifdef SMACK_IPV6_PORT_LABELING
+		rc = smk_ipv6_port_check(sock->sk, sip, SMK_CONNECTING);
+#endif
 
 		return rc;
 	}
diff --git a/sound/soc/mediatek/common/mtk-afe-fe-dai.c b/sound/soc/mediatek/common/mtk-afe-fe-dai.c
index e95c7c018e7d..4f2c2379531b 100644
--- a/sound/soc/mediatek/common/mtk-afe-fe-dai.c
+++ b/sound/soc/mediatek/common/mtk-afe-fe-dai.c
@@ -288,7 +288,6 @@ const struct snd_soc_dai_ops mtk_afe_fe_ops = {
 };
 EXPORT_SYMBOL_GPL(mtk_afe_fe_ops);
 
-static DEFINE_MUTEX(irqs_lock);
 int mtk_dynamic_irq_acquire(struct mtk_base_afe *afe)
 {
 	int i;
