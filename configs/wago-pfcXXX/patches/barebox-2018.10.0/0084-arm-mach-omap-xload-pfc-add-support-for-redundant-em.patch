From f55cfae06ecbf0a3f15dfb4da7ab900c4a8c3cc0 Mon Sep 17 00:00:00 2001
From: Oleg Karfich <oleg.karfich@wago.com>
Date: Thu, 30 Aug 2018 15:59:02 +0200
Subject: [PATCH] arm: mach-omap: xload-pfc: add support for redundant emmc and
 nand partitions

Signed-off-by: Oleg Karfich <oleg.karfich@wago.com>
---
 arch/arm/mach-omap/Kconfig     |  13 +++
 arch/arm/mach-omap/Makefile    |   6 +-
 arch/arm/mach-omap/xload-pfc.c | 193 ++++++++++++++++++++++++++++++++++++++---
 3 files changed, 201 insertions(+), 11 deletions(-)

diff --git a/arch/arm/mach-omap/Kconfig b/arch/arm/mach-omap/Kconfig
index 312f56f..f7cd0bc 100644
--- a/arch/arm/mach-omap/Kconfig
+++ b/arch/arm/mach-omap/Kconfig
@@ -187,11 +187,23 @@ config MACH_VSCOM_BALTOS
 config MACH_WAGO_PFC_AM335X
 	bool "Wago AM335X PFCs"
 	select ARCH_AM33XX
+	select WAGO_PFC_XLOAD
 	help
 	  Say Y here if you are using a am335x based Wago PFC
 
 endif
 
+if MACH_WAGO_PFC_AM335X || MACH_WAGO_PFC_AM35XX
+
+config WAGO_PFC_XLOAD
+	bool
+	prompt "Activate Wago PFC specific xload startup"
+	help
+	  Say Y to enable pfc specific xload startup code. This simultaneously
+	  disables the upstream xload startup code.
+
+endif
+
 source arch/arm/boards/phytec-som-am335x/Kconfig
 
 choice
@@ -216,6 +228,7 @@ config MACH_WAGO_PFC_AM35XX
         select HAVE_DEFAULT_ENVIRONMENT_NEW
         select HAVE_PBL_MULTI_IMAGES
         select HAVE_CONFIGURABLE_MEMORY_LAYOUT
+	select WAGO_PFC_XLOAD
         help
           Say Y here if you are using a the AM3505 based PFC200 controller
 
diff --git a/arch/arm/mach-omap/Makefile b/arch/arm/mach-omap/Makefile
index 490115d..d06fb43 100644
--- a/arch/arm/mach-omap/Makefile
+++ b/arch/arm/mach-omap/Makefile
@@ -28,7 +28,11 @@ obj-$(CONFIG_ARCH_AM33XX) += am33xx_scrm.o
 obj-$(CONFIG_ARCH_OMAP3) += omap3_clock.o
 pbl-$(CONFIG_ARCH_OMAP3) += omap3_clock.o
 obj-$(CONFIG_OMAP_GPMC) += gpmc.o devices-gpmc-nand.o
-obj-$(CONFIG_SHELL_NONE) += xload.o xload-pfc.o
+ifdef CONFIG_WAGO_PFC_XLOAD
+obj-$(CONFIG_SHELL_NONE) += xload-pfc.o
+else
+obj-$(CONFIG_SHELL_NONE) += xload.o
+endif
 obj-$(CONFIG_MFD_TWL6030) += omap4_twl6030_mmc.o
 obj-$(CONFIG_OMAP4_USBBOOT) += omap4_rom_usb.o
 obj-$(CONFIG_OMAP3_USBBOOT) += omap3_xload_usb.o
diff --git a/arch/arm/mach-omap/xload-pfc.c b/arch/arm/mach-omap/xload-pfc.c
index 9821f8b..3f415de 100644
--- a/arch/arm/mach-omap/xload-pfc.c
+++ b/arch/arm/mach-omap/xload-pfc.c
@@ -2,8 +2,11 @@
  * Copyright (C) 2018 WAGO Kontakttechnik GmbH & Co. KG <http://global.wago.com>
  * Author: Peter Galka <peter.galka@wago.com>
  *
+ * Copyright (C) 2018 WAGO Kontakttechnik GmbH & Co. KG <http://global.wago.com>
+ * Author: Oleg Karfich <oleg.karfich@wago.com>
+ *
  * Xload handler tries to boot from mmc first, if card inserted and barebox
- * image available. Otherwise it boots from internal memory.
+ * image available. Otherwise it boots from internal memory (nand or emmc).
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License as
@@ -22,8 +25,13 @@
 #include <mci.h>
 #include <bootsource.h>
 #include <mach/generic.h>
+#include <mach/am3xxx-pfc-generic.h>
+#include <filetype.h>
+#include <fcntl.h>
+#include <sys/mount.h>
+#include <libfile.h>
 
-extern struct omap_barebox_part *barebox_part;
+struct omap_barebox_boot_parts *barebox_boot_parts;
 static const char *board_variant = "pfc200";
 
 static int pfc_mmc_inserted(void)
@@ -40,6 +48,141 @@ static int pfc_mmc_inserted(void)
 	return 0;
 }
 
+static unsigned int pfc_xload_get_image_size(void *head)
+{
+	unsigned int ret = 0;
+	unsigned int *psize = head + ARM_HEAD_SIZE_OFFSET;
+
+	if (is_barebox_arm_head(head))
+		ret = *psize;
+	debug("Detected barebox image size %u\n", ret);
+
+	return ret;
+}
+
+static void *pfc_xload_read_image_head(const char *name)
+{
+	void *header = xmalloc(ARM_HEAD_SIZE);
+	struct cdev *cdev;
+	int ret;
+
+	cdev = cdev_open(name, O_RDONLY);
+	if (!cdev) {
+		printf("failed to open %s\n", name);
+		return NULL;
+	}
+
+	ret = cdev_read(cdev, header, ARM_HEAD_SIZE, 0, 0);
+	cdev_close(cdev);
+
+	if (ret != ARM_HEAD_SIZE) {
+		printf("failed to read from %s\n", name);
+		return NULL;
+	}
+
+	return header;
+}
+
+static void *pfc_xload_read_cdev_barebox(const char *partition)
+{
+	int ret;
+	int size;
+	void *to, *header;
+	struct cdev *cdev;
+
+	header = pfc_xload_read_image_head(partition);
+	if (header == NULL)
+		return NULL;
+
+	size = pfc_xload_get_image_size(header);
+	if (!size) {
+		printf("failed to get image size\n");
+		return NULL;
+	}
+
+	to = xmalloc(size);
+
+	cdev = cdev_open(partition, O_RDONLY);
+	if (!cdev) {
+		printf("failed to open partition\n");
+		return NULL;
+	}
+
+	ret = cdev_read(cdev, to, size, 0, 0);
+	if (ret != size) {
+		printf("failed to read from partition\n");
+		return NULL;
+	}
+
+	return to;
+}
+
+static void *pfc_xload_boot_parts(char **parts, int num_parts)
+{
+	int i = 0;
+	void *to;
+
+	for (i=0; i < num_parts; i++) {
+		to = pfc_xload_read_cdev_barebox(parts[i]);
+		if (to) {
+			pr_info("found image on raw partition %s\n",
+							parts[i]);
+			break;
+		}
+	}
+
+	return to;
+}
+
+static void *pfc_xload_boot_mmc(char *bootfile)
+{
+	int ret;
+	void *buf;
+	int len;
+	const char *diskdev;
+	char *partname;
+	char *bootfile_path;
+
+	if (!bootfile)
+		bootfile = "barebox.bin";
+
+	diskdev = omap_get_bootmmc_devname();
+	if (!diskdev)
+		diskdev = "disk0";
+
+	device_detect_by_name(diskdev);
+
+	partname = basprintf("%s.0", diskdev);
+
+	ret = mount(partname, NULL, "/", NULL);
+
+	if (ret) {
+		printf("Unable to mount %s (%d)\n", partname, ret);
+		free(partname);
+		return NULL;
+	}
+
+	free(partname);
+
+	bootfile_path = basprintf("/%s", bootfile);
+	buf = read_file(bootfile_path, &len);
+	if (!buf) {
+		free(bootfile_path);
+		bootfile_path = basprintf("/boot/%s", bootfile);
+		buf = read_file(bootfile_path, &len);
+	}
+
+	if (!buf) {
+		free(bootfile_path);
+		printf("could not read %s from sd card\n", bootfile);
+		return NULL;
+	}
+
+	pr_info("%s found on %s\n", bootfile_path, diskdev);
+
+	return buf;
+}
+
 static __noreturn int pfc_xload(void)
 {
 	enum bootsource bootsource;
@@ -64,24 +207,46 @@ static __noreturn int pfc_xload(void)
 		bootsource = BOOTSOURCE_MMC;
 		bootinstance = 0;
 		omap_set_bootmmc_devname("mmc0");
-		barebox = omap_xload_boot_mmc(bootfile);
+		pr_info("%s: try to boot from %s\n", __func__,
+						omap_get_bootmmc_devname());
+		barebox = pfc_xload_boot_mmc(bootfile);
+
 		if (!barebox)
-			pr_warning("booting from mmc failed, try the origin source\n");
+			pr_info("%s: file %s not found on %s\n", __func__,
+					bootfile, omap_get_bootmmc_devname());
 	}
 
 	if (!barebox) {
 		if (bootsource_get() == BOOTSOURCE_MMC) {
+			if (!barebox_boot_parts)
+				goto out;
+
 			bootsource = BOOTSOURCE_MMC;
 			bootinstance = 1;
 			omap_set_bootmmc_devname("mmc1");
-			barebox = omap_xload_boot_mmc(bootfile);
+
+			pr_info("%s: try to boot raw from %s\n", __func__,
+						omap_get_bootmmc_devname());
+
+			barebox = pfc_xload_boot_parts(
+					barebox_boot_parts->boot_emmcslots,
+					barebox_boot_parts->num_boot_emmcslots);
+
+			if (!barebox) {
+				pr_info("%s: try to boot vfat from %s\n",
+					__func__, omap_get_bootmmc_devname());
+				barebox = pfc_xload_boot_mmc(bootfile);
+			}
+
 		} else if (bootsource_get() == BOOTSOURCE_NAND) {
-			if (!barebox_part)
+			if (!barebox_boot_parts)
 				goto out;
 
-			pr_info("booting from nand\n");
+			pr_info("%s: try to boot from nand\n", __func__);
 			bootsource = BOOTSOURCE_NAND;
-			barebox = omap_xload_boot_nand(barebox_part);
+			barebox = pfc_xload_boot_parts(
+					barebox_boot_parts->boot_nandslots,
+					barebox_boot_parts->num_boot_nandslots);
 		}
 	}
 
@@ -96,15 +261,23 @@ static __noreturn int pfc_xload(void)
 	omap_start_barebox(barebox);
 
 out:
+	pr_err("%s: could not boot %s from any boot device\n", __func__,
+								bootfile);
 	free(bootfile);
-	pr_err("booting failed\n");
 	while (1);
 }
 
+int omap_set_barebox_boot_parts(struct omap_barebox_boot_parts *parts)
+{
+	barebox_boot_parts = parts;
+
+	return 0;
+}
+
 static int pfc_set_xload(void)
 {
 	barebox_main = pfc_xload;
 
 	return 0;
 }
-environment_initcall(pfc_set_xload);
+late_initcall(pfc_set_xload);
-- 
2.7.4

