From b32bba7641a7e011d51304ddb1f33212410fa498 Mon Sep 17 00:00:00 2001
From: Oleg Karfich <oleg.karfich@wago.com>
Date: Thu, 28 Jun 2018 14:35:54 +0200
Subject: [PATCH] defaultenv: defaultenv-pfc-base: add pfc startup scripting

Signed-off-by: Oleg Karfich <oleg.karfich@wago.com>
---
 .../defaultenv-pfc-am335x/boot/emmc                |   5 -
 .../wago-pfc-am335x/defaultenv-pfc-am335x/boot/mmc |   5 -
 .../defaultenv-pfc-am335x/boot/nand                |   8 --
 .../defaultenv-pfc-am335x/init/automount-nand      |  12 --
 .../defaultenv-pfc-am335x/init/bootsource          |  21 ---
 .../init/d-pfc-setup-board-env                     |   3 +
 defaultenv/defaultenv-2-base/bin/init              |  10 +-
 .../bin/pfc-check-for-debug-uart                   |  13 ++
 .../defaultenv-pfc-base/bin/pfc-config-broken-boot |  12 ++
 .../bin/pfc-config-default-boot                    |  43 ++++++
 .../bin/pfc-config-production-boot                 |   6 +
 .../bin/pfc-config-setupfw-boot                    |   6 +
 .../bin/pfc-config-setupfw-generic-boot            |  18 +++
 .../defaultenv-pfc-base/bin/pfc-debug-uart-mode    |  33 +++++
 .../defaultenv-pfc-base/bin/pfc-detect-boot-mode   |  37 ++++++
 .../bin/pfc-erase-flash-ubidata                    |  32 +++++
 .../defaultenv-pfc-base/bin/pfc-exec-custom-boot   |  13 ++
 .../bin/pfc-exec-downgrade-boot                    |  25 ++++
 .../defaultenv-pfc-base/bin/pfc-set-linux-console  |  24 ++++
 .../defaultenv-pfc-base/bin/pfc-validate-ethaddr   |  12 ++
 defaultenv/defaultenv-pfc-base/boot/net-setupfw    |  83 ++++++++++++
 defaultenv/defaultenv-pfc-base/boot/sd-legacy      |   8 ++
 defaultenv/defaultenv-pfc-base/boot/sd-setupfw     |   4 +
 defaultenv/defaultenv-pfc-base/config              | 146 +++++++++++++++++++++
 .../defaultenv-pfc-base/data/print-msg-formats     |   9 ++
 defaultenv/defaultenv-pfc-base/init/automount      |   8 ++
 .../defaultenv-pfc-base/init/z-pfc-config-startup  |  39 ++++++
 27 files changed, 580 insertions(+), 55 deletions(-)
 delete mode 100644 arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/emmc
 delete mode 100644 arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/mmc
 delete mode 100644 arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/nand
 delete mode 100644 arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/automount-nand
 delete mode 100644 arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/bootsource
 create mode 100644 arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/d-pfc-setup-board-env
 create mode 100644 defaultenv/defaultenv-pfc-base/bin/pfc-check-for-debug-uart
 create mode 100644 defaultenv/defaultenv-pfc-base/bin/pfc-config-broken-boot
 create mode 100644 defaultenv/defaultenv-pfc-base/bin/pfc-config-default-boot
 create mode 100644 defaultenv/defaultenv-pfc-base/bin/pfc-config-production-boot
 create mode 100644 defaultenv/defaultenv-pfc-base/bin/pfc-config-setupfw-boot
 create mode 100644 defaultenv/defaultenv-pfc-base/bin/pfc-config-setupfw-generic-boot
 create mode 100644 defaultenv/defaultenv-pfc-base/bin/pfc-debug-uart-mode
 create mode 100644 defaultenv/defaultenv-pfc-base/bin/pfc-detect-boot-mode
 create mode 100644 defaultenv/defaultenv-pfc-base/bin/pfc-erase-flash-ubidata
 create mode 100644 defaultenv/defaultenv-pfc-base/bin/pfc-exec-custom-boot
 create mode 100644 defaultenv/defaultenv-pfc-base/bin/pfc-exec-downgrade-boot
 create mode 100644 defaultenv/defaultenv-pfc-base/bin/pfc-set-linux-console
 create mode 100644 defaultenv/defaultenv-pfc-base/bin/pfc-validate-ethaddr
 create mode 100644 defaultenv/defaultenv-pfc-base/boot/net-setupfw
 create mode 100644 defaultenv/defaultenv-pfc-base/boot/sd-legacy
 create mode 100644 defaultenv/defaultenv-pfc-base/boot/sd-setupfw
 create mode 100644 defaultenv/defaultenv-pfc-base/config
 create mode 100644 defaultenv/defaultenv-pfc-base/data/print-msg-formats
 create mode 100644 defaultenv/defaultenv-pfc-base/init/automount
 create mode 100644 defaultenv/defaultenv-pfc-base/init/z-pfc-config-startup

diff --git a/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/emmc b/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/emmc
deleted file mode 100644
index 4b68b4a..0000000
--- a/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/emmc
+++ /dev/null
@@ -1,5 +0,0 @@
-#!/bin/sh
-
-global.bootm.image=/mnt/mmc1.0/linuximage
-global.bootm.oftree=/mnt/mmc1.0/oftree
-global.linux.bootargs.dyn.root="root=/dev/mmcblk1p2 rw rootwait"
diff --git a/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/mmc b/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/mmc
deleted file mode 100644
index 6a8f129..0000000
--- a/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/mmc
+++ /dev/null
@@ -1,5 +0,0 @@
-#!/bin/sh
-
-global.bootm.image=/mnt/mmc0.0/linuximage
-global.bootm.oftree=/mnt/mmc0.0/oftree
-global.linux.bootargs.dyn.root="root=/dev/mmcblk0p2 rw rootwait"
diff --git a/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/nand b/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/nand
deleted file mode 100644
index 4558424..0000000
--- a/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/nand
+++ /dev/null
@@ -1,8 +0,0 @@
-#!/bin/sh
-
-ubidata_boot="/mnt/ubidata_boot"
-
-global.bootm.image="${ubidata_boot}/linuximage"
-global.bootm.oftree="${ubidata_boot}/oftree"
-
-global.linux.bootargs.dyn.root="root=ubi0:rootfs0 rw ubi.mtd=ubidata rootfstype=ubifs"
diff --git a/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/automount-nand b/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/automount-nand
deleted file mode 100644
index e394c60..0000000
--- a/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/automount-nand
+++ /dev/null
@@ -1,12 +0,0 @@
-#!/bin/sh
-
-# automount nand boot vfat partition
-
-ubi_dev=/dev/nand0.ubidata
-ubi_boot_volume=/dev/nand0.ubidata.ubi.boot
-mountpoint=/mnt/ubidata_boot
-
-if [ -e ${ubi_dev} ]; then
-        automount -d ${mountpoint} "[ ! -e ${ubi_dev}.ubi ] && ubiattach
-		${ubi_dev}; mount -t ubifs ${ubi_boot_volume} ${mountpoint}"
-fi
diff --git a/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/bootsource b/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/bootsource
deleted file mode 100644
index 254033b..0000000
--- a/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/bootsource
+++ /dev/null
@@ -1,21 +0,0 @@
-#!/bin/sh
-
-if [ -n "$nv.boot.default" ]; then
-	exit
-fi
-
-if [ -e /dev/mmc1.0 ]; then
-	nvmem="emmc"
-else
-	nvmem="nand"
-fi
-
-if [ $bootsource = mmc -a $bootsource_instance = 1 ]; then
-	global.boot.default="emmc mmc net"
-elif [ $bootsource = mmc -a $bootsource_instance = 0 ]; then
-	global.boot.default="mmc $nvmem net"
-elif [ $bootsource = nand ]; then
-	global.boot.default="nand mmc net"
-elif [ $bootsource = net ]; then
-	global.boot.default="net $nvmem mmc"
-fi
diff --git a/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/d-pfc-setup-board-env b/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/d-pfc-setup-board-env
new file mode 100644
index 0000000..f3b71e8
--- /dev/null
+++ b/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/d-pfc-setup-board-env
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+# put here board specific variables or overwrite global variables
diff --git a/defaultenv/defaultenv-2-base/bin/init b/defaultenv/defaultenv-2-base/bin/init
index 8d02e3d..0bdb325 100644
--- a/defaultenv/defaultenv-2-base/bin/init
+++ b/defaultenv/defaultenv-2-base/bin/init
@@ -6,6 +6,7 @@ global hostname
 global user
 global autoboot_timeout
 global autoboot_abort_key
+global autoboot
 global boot.default
 global linux.bootargs.base
 global linux.bootargs.console
@@ -23,6 +24,7 @@ magicvar -a global.autoboot_timeout "timeout in seconds before automatic booting
 magicvar -a global.autoboot_abort_key "key to abort automatic booting (valid options: any, ctrl-c)"
 [ -z "${global.boot.default}" ] && global.boot.default=net
 [ -z "${global.editcmd}" ] && global.editcmd=sedit
+[ -z "${global.autoboot}" ] && global.autoboot=0
 
 [ -e /env/config-board ] && /env/config-board
 /env/config
@@ -30,7 +32,7 @@ magicvar -a global.autoboot_abort_key "key to abort automatic booting (valid opt
 # allow to stop the boot before execute the /env/init/*
 # but without waiting
 timeout -s -a -v key 0
-autoboot="$?"
+global.autoboot="$?"
 
 echo -e -n "\e[?25h"
 if [ "${key}" = "q" ]; then
@@ -55,16 +57,16 @@ else
 	echo -e -n "\nHit $abort_string to stop autoboot: "
 fi
 
-if [ "$autoboot" = 0 ]; then
+if [ "$global.autoboot" = 0 ]; then
 	timeout $abort_args $global.autoboot_timeout -v key
-	autoboot="$?"
+	global.autoboot="$?"
 fi
 
 if [ "${key}" = "q" ]; then
 	exit
 fi
 
-if [ "$autoboot" = 0 ]; then
+if [ "$global.autoboot" = 0 ]; then
 	boot
 fi
 
diff --git a/defaultenv/defaultenv-pfc-base/bin/pfc-check-for-debug-uart b/defaultenv/defaultenv-pfc-base/bin/pfc-check-for-debug-uart
new file mode 100644
index 0000000..791ea2a
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/bin/pfc-check-for-debug-uart
@@ -0,0 +1,13 @@
+#!/bin/sh
+
+source env/data/print-msg-formats
+
+let debug_mode_mask="(1<<0)"
+let debug_mode_enable="${global.pfc.boot_mode_id} & ${debug_mode_mask}"
+
+if [ "${debug_mode_enable}" = "${debug_mode_mask}" ]; then
+	echo -e ${warning} "uart debug mode active"
+	global.autoboot_timeout=3
+	global.pfc.debug_mode_active=true
+        uart_console -e ${global.pfc.barebox_uart}
+fi
diff --git a/defaultenv/defaultenv-pfc-base/bin/pfc-config-broken-boot b/defaultenv/defaultenv-pfc-base/bin/pfc-config-broken-boot
new file mode 100644
index 0000000..fcc81f0
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/bin/pfc-config-broken-boot
@@ -0,0 +1,12 @@
+#!/bin/sh
+
+source env/data/print-msg-formats
+
+global.pfc.boot_mode="broken"
+
+# set autoboot variable to 1, to stop auto booting in
+# /env/bin/init and stay in shell.
+global.autoboot=1
+uart_console -e ${global.pfc.barebox_uart}
+
+echo -e ${error} "$0: setting boot_mode to: ${global.pfc.boot_mode}"
diff --git a/defaultenv/defaultenv-pfc-base/bin/pfc-config-default-boot b/defaultenv/defaultenv-pfc-base/bin/pfc-config-default-boot
new file mode 100644
index 0000000..412dca5
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/bin/pfc-config-default-boot
@@ -0,0 +1,43 @@
+#!/bin/sh
+
+source env/data/print-msg-formats
+
+global.autoboot_timeout=0
+global.linux.bootargs.base="bootversion=${global.version} macaddr=${eth0.ethaddr} reset_state=${global.system.reset}"
+
+sd_blspec="${global.pfc.sd_rootfs}/boot/sd/loader/entries/${global.model}-${global.pfc.devconf}.conf"
+sd_legacy_uImage="${global.pfc.sd_boot}/uImage"
+
+emmc_blspec_rootfs0="${global.pfc.emmc_rootfs0}/boot/emmc0/loader/entries/${global.model}-${global.pfc.devconf}.conf"
+emmc_blspec_rootfs1="${global.pfc.emmc_rootfs1}/boot/emmc1/loader/entries/${global.model}-${global.pfc.devconf}.conf"
+
+nand_blspec_rootfs0="${global.pfc.nand_rootfs0}/boot/nand0/loader/entries/${global.model}-${global.pfc.devconf}.conf"
+nand_blspec_rootfs1="${global.pfc.nand_rootfs1}/boot/nand1/loader/entries/${global.model}-${global.pfc.devconf}.conf"
+
+if [ -e "${global.pfc.emmc}" ]; then
+	global.bootchooser.system0.boot="file://${emmc_blspec_rootfs0}"
+	global.bootchooser.system1.boot="file://${emmc_blspec_rootfs1}"
+
+elif [ -e "${global.pfc.nand}" ]; then
+	global.bootchooser.system0.boot="file://${nand_blspec_rootfs0}"
+	global.bootchooser.system1.boot="file://${nand_blspec_rootfs1}"
+else
+	echo -e ${error} "$0: no valid boot device found for bootchooser"
+	exit 1
+fi
+
+if [ -e "${global.pfc.sd}" ] && [ -e "${sd_blspec}" ]; then
+	global.boot.default="file://${sd_blspec} bootchooser"
+
+elif [ -e "${global.pfc.sd}" ] && [ -e "${sd_legacy_uImage}" ]; then
+	global.bootm.boot_atag=true
+	global.boot.default="sd-legacy bootchooser"
+
+else
+	global.boot.default="bootchooser"
+fi
+
+pfc-check-for-debug-uart
+pfc-set-linux-console
+
+echo -e ${info} "default boot order is: $global.boot.default"
diff --git a/defaultenv/defaultenv-pfc-base/bin/pfc-config-production-boot b/defaultenv/defaultenv-pfc-base/bin/pfc-config-production-boot
new file mode 100644
index 0000000..cfacefc
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/bin/pfc-config-production-boot
@@ -0,0 +1,6 @@
+#!/bin/sh
+
+global.linux.bootargs.productionmode="production_mode=1"
+global.linux.bootargs.console="console=ttyO${global.pfc.barebox_uart},115200n8"
+
+pfc-config-setupfw-generic-boot
diff --git a/defaultenv/defaultenv-pfc-base/bin/pfc-config-setupfw-boot b/defaultenv/defaultenv-pfc-base/bin/pfc-config-setupfw-boot
new file mode 100644
index 0000000..37ab673
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/bin/pfc-config-setupfw-boot
@@ -0,0 +1,6 @@
+#!/bin/sh
+
+global.linux.bootargs.productionmode="production_mode=2"
+global.linux.bootargs.console="console="
+
+pfc-config-setupfw-generic-boot
diff --git a/defaultenv/defaultenv-pfc-base/bin/pfc-config-setupfw-generic-boot b/defaultenv/defaultenv-pfc-base/bin/pfc-config-setupfw-generic-boot
new file mode 100644
index 0000000..2be71c6
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/bin/pfc-config-setupfw-generic-boot
@@ -0,0 +1,18 @@
+#!/bin/sh
+
+source env/data/print-msg-formats
+
+uart_console -e ${global.pfc.barebox_uart}
+global.autoboot_timeout=3
+global.linux.bootargs.base="root=/dev/ram0 rdinit=/init.sh quiet macaddr=${eth0.ethaddr}"
+
+if [ -e "${global.pfc.sd}" ] &&
+   [ -e "${global.pfc.sd_boot}/setupfw" ] &&
+   [ -e "${global.pfc.sd_boot}/oftree-${global.board.variant}-setupfw.dtb" ] ; then
+	global.boot.default="sd-setupfw net-setupfw"
+
+else
+	global.boot.default="net-setupfw"
+fi
+
+echo -e ${info} "default boot order is: $global.boot.default"
diff --git a/defaultenv/defaultenv-pfc-base/bin/pfc-debug-uart-mode b/defaultenv/defaultenv-pfc-base/bin/pfc-debug-uart-mode
new file mode 100644
index 0000000..c4a78c3
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/bin/pfc-debug-uart-mode
@@ -0,0 +1,33 @@
+#!/bin/sh
+
+mode="unknown"
+let debug_mask="(1<<0)"
+
+while getopt "edh" opt; do
+	if [ ${opt} = e ]; then
+                mode="enable"
+	elif [ ${opt} = d ]; then
+                mode="disable"
+	elif [ ${opt} = h ]; then
+		mode="unknown"
+	fi
+done
+
+if [ "${mode}" = "unknown" ]; then
+	echo "usage: $0 [-ed]"
+	echo ""
+	echo "control debug uart mode. Mode is set persistent through eeprom bit "develop-mode-enable" in eeprom"
+	echo ""
+	echo "-e enable debug uart mode\n"
+	echo "-d disable debug uart mode\n"
+	echo ""
+	exit 1
+fi
+
+if [ "${mode}" = "enable" ]; then
+	let debug_enable="${global.pfc.boot_mode_id} | ${debug_mask}"
+else
+	let debug_enable="${global.pfc.boot_mode_id} & ~${debug_mask}"
+fi
+
+xsection.boot_mode_id=${debug_enable}
diff --git a/defaultenv/defaultenv-pfc-base/bin/pfc-detect-boot-mode b/defaultenv/defaultenv-pfc-base/bin/pfc-detect-boot-mode
new file mode 100644
index 0000000..1791def
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/bin/pfc-detect-boot-mode
@@ -0,0 +1,37 @@
+#!/bin/sh
+
+source env/data/print-msg-formats
+
+let setup_fw_mask="(1 << 5)"
+let setup_fw_enable="${global.pfc.boot_mode_id} & ${setup_fw_mask}"
+let setup_fw_disable="${global.pfc.boot_mode_id} & ~${setup_fw_mask}"
+
+pfc-validate-ethaddr
+
+if [ "${global.pfc.ethaddr_is_valid}" = false ]; then
+        global.pfc.boot_mode="production"
+
+elif [ -e "${global.pfc.sd}" ]; then
+
+	# if a downgrade.bin.<platform-suffix> file is found on the first
+	# sd/mmc boot partition, we execute it.
+	# if downgrading will be executed successfully,
+	# we never come back here.
+	if [ -e "${global.pfc.downgrade_img}" ]; then
+        	global.pfc.boot_mode="downgrade"
+
+	# if a custom setup script is in located in the
+	# first sd/mmc card partition (fat), execute it.
+	elif [ -e "${global.pfc.custom_sh}" ]; then
+        	global.pfc.boot_mode="custom"
+	fi
+
+elif [ "${setup_fw_enable}" = "${setup_fw_mask}" ]; then
+        global.pfc.boot_mode="setupfw"
+	xsection.boot_mode_id="${setup_fw_disable}"
+
+else
+        global.pfc.boot_mode="default"
+fi
+
+echo -e ${info} "detected boot_mode: ${global.pfc.boot_mode}"
diff --git a/defaultenv/defaultenv-pfc-base/bin/pfc-erase-flash-ubidata b/defaultenv/defaultenv-pfc-base/bin/pfc-erase-flash-ubidata
new file mode 100644
index 0000000..fcb2c80
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/bin/pfc-erase-flash-ubidata
@@ -0,0 +1,32 @@
+#!/bin/sh
+
+source /env/data/print-msg-formats
+
+# on am35xx based targets we need to set the ecc-mode
+nand_bch8="/env/data/nand-ecc-bch8"
+
+ubi_image="$1"
+
+if [ -z ${ubi_image} ] || [ ! -e "${ubi_image}" ]; then
+	echo -e ${error} "$0: no ubi-image to flash given"
+	exit 1
+fi
+
+# detach ubi device if attached
+[ -e "${global.pfc.nand_ubidata}.ubi" ] && ubidetach ${global.pfc.nand_ubidata}
+
+erase ${global.pfc.nand_ubidata}
+
+# here we also need to set the ecc-mode on
+# am335x based targets.
+if [ -e "${nand_bch8}" ]; then
+	${nand_bch8}
+fi
+
+ubiformat -q ${global.pfc.nand_ubidata} -y -e 0 -f ${ubi_image}
+if [ $? -ne 0 ]; then
+        echo -e ${error} "$0: error due flashing ${ubi_image} on ${global.pfc.nand_ubidata}"
+        exit 1
+fi
+
+exit 0
diff --git a/defaultenv/defaultenv-pfc-base/bin/pfc-exec-custom-boot b/defaultenv/defaultenv-pfc-base/bin/pfc-exec-custom-boot
new file mode 100644
index 0000000..785ecee
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/bin/pfc-exec-custom-boot
@@ -0,0 +1,13 @@
+#!/bin/sh
+
+source env/data/print-msg-formats
+
+# set autoboot variable to 1, to stop auto booting in
+# /env/bin/init and stay in shell.
+global.autoboot=1
+uart_console -e ${global.pfc.barebox_uart}
+
+echo -e ${info} "execute custom script: ${global.pfc.custom_sh}"
+
+${global.pfc.custom_sh}
+exit $?
diff --git a/defaultenv/defaultenv-pfc-base/bin/pfc-exec-downgrade-boot b/defaultenv/defaultenv-pfc-base/bin/pfc-exec-downgrade-boot
new file mode 100644
index 0000000..9e50bd3
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/bin/pfc-exec-downgrade-boot
@@ -0,0 +1,25 @@
+#!/bin/sh
+
+source env/data/print-msg-formats
+
+# set autoboot variable to 1, to stop auto booting in
+# /env/bin/init and stay in shell.
+global.autoboot=1
+uart_console -e ${global.pfc.barebox_uart}
+
+downgrade_lzo="downgrade.bin.${global.board.variant}"
+downgrade_script="downgrade"
+
+echo -e ${info} "execute fw downgrade-script"
+
+cp ${global.pfc.downgrade_img} /${downgrade_lzo}
+
+uncompress /${downgrade_lzo} /${downgrade_script}
+if [ $? -ne 0 ]; then
+	echo -e ${error} "$0: failed to extract downgrade script"
+	exit 1
+fi
+
+/${downgrade_script}
+
+exit $?
diff --git a/defaultenv/defaultenv-pfc-base/bin/pfc-set-linux-console b/defaultenv/defaultenv-pfc-base/bin/pfc-set-linux-console
new file mode 100644
index 0000000..6b407aa
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/bin/pfc-set-linux-console
@@ -0,0 +1,24 @@
+#!/bin/sh
+
+source env/data/print-msg-formats
+
+let uart_mask="(1<<1)"
+let uart_enable="${global.pfc.boot_mode_id} & ${uart_mask}"
+
+if [ "${uart_enable}" = "${uart_mask}" ]; then
+        global.linux.bootargs.console="console=ttyO${global.pfc.linux_uart},115200n8"
+
+elif [ "${global.bootm.boot_atag}" = true ]; then
+	# in case of an legacy boot (e.g. kernel 3.6.11, FW < 5) we are not
+	# allowed to set console=null because this will break the init-process
+	# and the boot hangs.
+        global.linux.bootargs.console=""
+
+elif [ "${global.pfc.debug_mode_active}" = true ]; then
+        global.linux.bootargs.console="console=ttyO${global.pfc.barebox_uart},115200n8"
+
+else
+        global.linux.bootargs.console="console=null"
+fi
+
+echo -e ${info} "setting linux console to: $global.linux.bootargs.console"
diff --git a/defaultenv/defaultenv-pfc-base/bin/pfc-validate-ethaddr b/defaultenv/defaultenv-pfc-base/bin/pfc-validate-ethaddr
new file mode 100644
index 0000000..8ac4865
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/bin/pfc-validate-ethaddr
@@ -0,0 +1,12 @@
+#!/bin/sh
+
+source env/data/print-msg-formats
+
+ethaddr_match -i eth0 -p "00:30:de"
+if [ "$?" = 0 ]; then
+        global.pfc.ethaddr_is_valid="true"
+else
+        global.pfc.ethaddr_is_valid="false"
+fi
+
+echo -e ${info} "ethaddr is valid: $global.pfc.ethaddr_is_valid"
diff --git a/defaultenv/defaultenv-pfc-base/boot/net-setupfw b/defaultenv/defaultenv-pfc-base/boot/net-setupfw
new file mode 100644
index 0000000..ad73f07
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/boot/net-setupfw
@@ -0,0 +1,83 @@
+#!/bin/sh
+
+source env/data/print-msg-formats
+
+global.dhcp.retries=1000
+global.dhcp.vendor_id="750-8206"
+global.dhcp.option224="barebox running"
+
+ifup ${global.pfc.eth}
+
+if [ ${eth0.ipaddr} != "0.0.0.0" ] && [ ${eth0.serverip} != "0.0.0.0" ] &&
+  				      [ ! -z "${global.dhcp.bootfile}"  ]; then
+
+	echo -e ${info} "get ${global.dhcp.bootfile} from tftp server ${eth0.serverip}."
+
+	tftp ${global.dhcp.bootfile}
+	if [ "$?" = 0 ]; then
+		global.linux.bootargs.dyn.ip="ip=$eth0.ipaddr:$eth0.serverip:$eth0.gateway:$eth0.netmask::eth0:"
+
+		# Flash PFC200v3 G2 EMMC
+		if [ -e "${global.pfc.emmc}" ]; then
+			echo -e ${info} "flash ${global.pfc.bootfile} to ${global.pfc.emmc}"
+			umount /boot
+			umount ${global.pfc.emmc}.0
+
+			cp ${global.dhcp.bootfile} ${global.pfc.emmc}
+			if [ $? -ne 0 ]; then
+				echo -e ${error} "$0: error while flashing ${global.dhcp.bootfile} on ${global.pfc.emmc}"
+				#all_lights -s 1 -c red
+				exit 1
+			fi
+
+			# set setupfw image and dtb file to newly flashed emmc image files
+			if [ ! -e "${global.pfc.emmc_boot}/setupfw" ] ||
+			   [ ! -e "${global.pfc.emmc_boot}/oftree-${global.board.variant}-setupfw.dtb" ]; then
+				echo -e ${error} "$0: no setupfw on newly flashed emmc found"
+				#all_lights -s 1 -c red
+				exit 1
+			fi
+
+			global.bootm.image="${global.pfc.emmc_boot}/setupfw"
+			global.bootm.oftree="${global.pfc.emmc_boot}/oftree-${global.board.variant}-setupfw.dtb"
+
+		# Flash NAND flash devices, like SRC
+		elif [ -e "${global.pfc.nand}" ]; then
+
+			echo -e ${info} "flash ${global.dhcp.bootfile} to ${global.pfc.nand_ubidata}"
+
+			pfc-erase-flash-ubidata ${global.dhcp.bootfile}
+			if [ $? -ne 0 ]; then
+				echo -e ${error} "$0: error while flashing ${global.dhcp.bootfile} on ${global.pfc.nand_ubidata}"
+				#all_lights -s 1 -c red
+				exit 1
+			fi
+
+			automount -d ${global.pfc.nand_boot} "ubiattach ${global.pfc.nand_ubidata}; mount -t ubifs ${global.pfc.nand_ubidata_boot} ${global.pfc.nand_boot}"
+
+			# set setupfw image and dtb file to newly flashed nand image files
+			if [ ! -e "${global.pfc.nand_boot}/setupfw" ] ||
+			   [ ! -e "${global.pfc.nand_boot}/oftree-${global.board.variant}-setupfw.dtb" ]; then
+				echo -e ${error} "$0: no setupfw on newly flashed nand found"
+				#all_lights -s 1 -c red
+				exit 1
+			fi
+
+			global.bootm.image="${global.pfc.nand_boot}/setupfw"
+			global.bootm.oftree="${global.pfc.nand_boot}/oftree-${global.board.variant}-setupfw.dtb"
+
+		else
+			echo -e ${error} "$0: No EMMC nor FLASH found. Nothing useful to do here, bailing out ..."
+			#all_lights -s 1 -c red
+			exit 1
+		fi
+	else
+		echo -e ${error} "$0: tftp download failed."
+		#all_lights -s 1 -c red
+		exit 1
+	fi
+else
+	echo -e ${error} "$0: dhcp configuration not set correctly."
+	#all_lights -s 1 -c red
+	exit 1
+fi
diff --git a/defaultenv/defaultenv-pfc-base/boot/sd-legacy b/defaultenv/defaultenv-pfc-base/boot/sd-legacy
new file mode 100644
index 0000000..aec2f73
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/boot/sd-legacy
@@ -0,0 +1,8 @@
+#!/bin/sh
+
+# We need to define an imaginary mtd-partition
+# to protect our flash if an FW < 5 is booted via sd-card. The customer could
+# break his device when the create-boot-image is executed via e.g. wbm.
+
+global.bootm.image="${global.pfc.sd_boot}/uImage"
+global.linux.bootargs.dyn.root="rw root=/dev/mmcblk0p2 rootfstype=ext3 rootwait mtdparts=omap2-nand.0:-(nand_not_valid)ro pxc_boot_id=0x82 bootversion=${global.version} devconf=0x${global.pfc.devconf} macaddr=${eth0.ethaddr}"
diff --git a/defaultenv/defaultenv-pfc-base/boot/sd-setupfw b/defaultenv/defaultenv-pfc-base/boot/sd-setupfw
new file mode 100644
index 0000000..249247a
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/boot/sd-setupfw
@@ -0,0 +1,4 @@
+#!/bin/sh
+
+global.bootm.image="${global.pfc.sd_boot}/setupfw"
+global.bootm.oftree="${global.pfc.sd_boot}/oftree-${global.board.variant}-setupfw.dtb"
diff --git a/defaultenv/defaultenv-pfc-base/config b/defaultenv/defaultenv-pfc-base/config
new file mode 100644
index 0000000..df78435
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/config
@@ -0,0 +1,146 @@
+#!/bin/sh
+
+# Here we setup the pfc environment for the start up scripts. Use global
+# variables because they make the sub-scripts more readable and can be
+# evaluated via commandline (e.g. magicvar command) if only booted to shell.
+
+############################
+# global variable definition
+############################
+global pfc.boot_mode
+global pfc.devconf
+global pfc.boot_mode_id
+global pfc.ethaddr_is_valid
+global pfc.downgrade_img
+global pfc.custom_sh
+global pfc.sd
+global pfc.sd_boot
+global pfc.sd_rootfs
+global pfc.sd_dev_boot
+global pfc.sd_dev_rootfs
+global pfc.emmc
+global pfc.emmc_dev_rootfs0
+global pfc.emmc_dev_rootfs1
+global pfc.emmc_boot
+global pfc.emmc_rootfs0
+global pfc.emmc_rootfs1
+global pfc.nand
+global pfc.nand_ubidata
+global pfc.nand_ubidata_rootfs0
+global pfc.nand_ubidata_rootfs1
+global pfc.nand_ubidata_boot
+global pfc.nand_rootfs0
+global pfc.nand_rootfs1
+global pfc.nand_boot
+global pfc.barebox_uart
+global pfc.linux_uart
+global pfc.eth
+global pfc.debug_mode_active
+
+global bootchooser.system0.boot
+global bootchooser.system1.boot
+global linux.bootargs.productionmode
+
+################################
+# global variable description
+################################
+magicvar -a global.pfc.boot_mode	"indicates boot state of this pfc device
+                                         possible values are:
+					 <default, production, setupfw, broken>"
+
+magicvar -a global.pfc.devconf		"copy value from eeprom xsection"
+magicvar -a global.pfc.boot_mode_id	"copy value from eeprom xsection"
+
+magicvar -a global.pfc.ethaddr_is_valid	"indicates if the configured ethaddr of
+					 eth0 is valid. Is valid when it matches
+					 the pattern 00:30:de possible values
+					 are: <valid, not_valid>"
+
+magicvar -a global.pfc.downgrade_img	"path to the downgrade image file on the
+					 sd card vfat boot partition"
+
+magicvar -a global.pfc.custom_sh	"path to the custom-setup script file on
+					 the sd card vfat boot partition"
+
+magicvar -a global.pfc.sd		"path to the sd card device"
+magicvar -a global.pfc.sd_boot		"path to the sd cards boot partition"
+magicvar -a global.pfc.sd_rootfs	"path to the sd cards rootfs partition"
+magicvar -a global.pfc.sd_dev_boot	"path to the sd cards boot partition
+					 device"
+
+magicvar -a global.pfc.sd_dev_rootfs	"path to the sd cards rootfs partition
+					 device"
+
+magicvar -a global.pfc.emmc		"path to the emmc device"
+magicvar -a global.pfc.emmc_dev_rootfs0	"path to the emmc rootfs0 device"
+magicvar -a global.pfc.emmc_dev_rootfs1	"path to the emmc rootfs1 device"
+magicvar -a global.pfc.emmc_boot	"path to emmcs boot partition"
+magicvar -a global.pfc.emmc_rootfs0	"path to emmcs rootfs0 partition"
+magicvar -a global.pfc.emmc_rootfs1	"path to emmcs rootfs1 partition"
+magicvar -a global.pfc.nand		"path to the nand device"
+magicvar -a global.pfc.nand_ubidata	"path to the nand ubidata device"
+magicvar -a global.pfc.nand_ubidata_rootfs0 "path to the nand ubidata rootfs0
+					     device"
+
+magicvar -a global.pfc.nand_ubidata_rootfs1 "path to the nand ubidata rootfs1
+					     device"
+
+magicvar -a global.pfc.nand_ubidata_boot "path to the nand ubidata boot device"
+
+magicvar -a global.pfc.nand_rootfs0	"path to the nand rootfs0 partition"
+magicvar -a global.pfc.nand_rootfs1	"path to the nand rootfs1 partition"
+magicvar -a global.pfc.nand_boot	"path to the nand boot partition"
+magicvar -a global.pfc.barebox_uart	"uart device that is used in barebox for
+					 console messages"
+
+magicvar -a global.pfc.linux_uart	"uart device that that the kernel uses
+					 for console messages"
+
+magicvar -a global.pfc.eth		"ethernet device that is used in all pfc
+					 devices"
+
+magicvar -a global.pfc.debug_mode_active "true if debug mode bit in boot_mode_id
+					  is set; false otherwise"
+
+magicvar -a global.linux.bootargs.productionmode "parameter for starting setupfw
+						  in production or wsc mode"
+
+################################
+# global variable initialisation
+################################
+[ -z "${global.pfc.boot_mode}" ] && global.pfc.boot_mode="${bootmatrix.mode}"
+[ -z "${global.pfc.devconf}" ] && global.pfc.devconf="${xsection.devconf}"
+[ -z "${global.pfc.boot_mode_id}" ] && global.pfc.boot_mode_id="${xsection.boot_mode_id}"
+[ -z "${global.pfc.ethaddr_is_valid}" ] && global.pfc.ethaddr_is_valid=false
+[ -z "${global.pfc.sd}" ] && global.pfc.sd="/dev/mmc0"
+[ -z "${global.pfc.sd_boot}" ] && global.pfc.sd_boot="/mnt/sd_boot"
+[ -z "${global.pfc.sd_rootfs}" ] && global.pfc.sd_rootfs="/mnt/sd_rootfs"
+[ -z "${global.pfc.sd_dev_boot}" ] && global.pfc.sd_dev_boot="${global.pfc.sd}.0"
+[ -z "${global.pfc.sd_dev_rootfs}" ] && global.pfc.sd_dev_rootfs="${global.pfc.sd}.1"
+[ -z "${global.pfc.emmc}" ] && global.pfc.emmc="/dev/mmc1"
+[ -z "${global.pfc.emmc_dev_rootfs0}" ] && global.pfc.emmc_dev_rootfs0="${global.pfc.emmc}.4"
+[ -z "${global.pfc.emmc_dev_rootfs1}" ] && global.pfc.emmc_dev_rootfs1="${global.pfc.emmc}.7"
+[ -z "${global.pfc.emmc_boot}" ] && global.pfc.emmc_boot="/mnt/mmc1.0"
+[ -z "${global.pfc.emmc_rootfs0}" ] && global.pfc.emmc_rootfs0="/mnt/emmc_rootfs0"
+[ -z "${global.pfc.emmc_rootfs1}" ] && global.pfc.emmc_rootfs1="/mnt/emmc_rootfs1"
+[ -z "${global.pfc.nand}" ] && global.pfc.nand="/dev/nand0"
+[ -z "${global.pfc.nand_ubidata}" ] && global.pfc.nand_ubidata="${global.pfc.nand}.ubidata"
+[ -z "${global.pfc.nand_ubidata_rootfs0}" ] && global.pfc.nand_ubidata_rootfs0="${global.pfc.nand}.ubidata.ubi.rootfs0"
+[ -z "${global.pfc.nand_ubidata_rootfs1}" ] && global.pfc.nand_ubidata_rootfs1="${global.pfc.nand}.ubidata.ubi.rootfs1"
+[ -z "${global.pfc.nand_ubidata_boot}" ] && global.pfc.nand_ubidata_boot="${global.pfc.nand}.ubidata.ubi.boot"
+[ -z "${global.pfc.nand_rootfs0}" ] && global.pfc.nand_rootfs0="/mnt/ubi_rootfs0"
+[ -z "${global.pfc.nand_rootfs1}" ] && global.pfc.nand_rootfs1="/mnt/ubi_rootfs1"
+[ -z "${global.pfc.nand_boot}" ] && global.pfc.nand_boot="/mnt/ubi_boot"
+[ -z "${global.pfc.downgrade_img}" ] && global.pfc.downgrade_img="${global.pfc.sd_boot}/downgrade.bin.$global.board.variant"
+[ -z "${global.pfc.custom_sh}" ] && global.pfc.custom_sh="${global.pfc.sd_boot}/custom_setup.sh"
+[ -z "${global.pfc.barebox_uart}" ] && global.pfc.barebox_uart="0"
+[ -z "${global.pfc.linux_uart}" ] && global.pfc.linux_uart="1"
+[ -z "${global.pfc.eth}" ] && global.pfc.eth="eth0"
+[ -z "${global.pfc.debug_mode_active}" ] && global.pfc.debug_mode_active=false
+
+[ -z "${global.bootchooser.targets}" ] && global.bootchooser.targets="system0 system1"
+[ -z "${global.bootchooser.state_prefix}" ] && global.bootchooser.state_prefix="bootstate"
+[ -z "${global.bootchooser.reset_attempts}" ] && global.bootchooser.reset_attempts="all-zero power-on"
+[ -z "${global.bootchooser.reset_priorities}" ] && global.bootchooser.reset_priorities="all-zero"
+[ -z "${global.bootchooser.disable_on_zero_attempts}" ] && global.bootchooser.disable_on_zero_attempts=0
+[ -z "${global.bootchooser.retry}" ] && global.bootchooser.retry=1
diff --git a/defaultenv/defaultenv-pfc-base/data/print-msg-formats b/defaultenv/defaultenv-pfc-base/data/print-msg-formats
new file mode 100644
index 0000000..3442e99
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/data/print-msg-formats
@@ -0,0 +1,9 @@
+#!/bin/sh
+
+# here we are defining some print messages formats,
+# that are sourced and used in scripts.
+
+info="\e[00;32mINFO: PFC\e[00m: "
+error="\e[00;31mERROR: PFC\e[00m: "
+warning="\e[00;33mWARN: PFC\e[00m: "
+
diff --git a/defaultenv/defaultenv-pfc-base/init/automount b/defaultenv/defaultenv-pfc-base/init/automount
new file mode 100644
index 0000000..527b363d
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/init/automount
@@ -0,0 +1,8 @@
+#!/bin/sh
+
+[ -e "${global.pfc.nand_ubidata}" ] && automount -d ${global.pfc.nand_rootfs0} "[ ! -e ${global.pfc.nand_ubidata_rootfs0} ] && ubiattach ${global.pfc.nand_ubidata}; mount -t ubifs ${global.pfc.nand_ubidata_rootfs0} ${global.pfc.nand_rootfs0}"
+[ -e "${global.pfc.nand_ubidata}" ] && automount -d ${global.pfc.nand_rootfs1} "[ ! -e ${global.pfc.nand_ubidata_rootfs1} ] && ubiattach ${global.pfc.nand_ubidata}; mount -t ubifs ${global.pfc.nand_ubidata_rootfs1} ${global.pfc.nand_rootfs1}"
+[ -e "${global.pfc.emmc_dev_rootfs0}" ] && automount -d ${global.pfc.emmc_rootfs0} "mount ${global.pfc.emmc_dev_rootfs0} ${global.pfc.emmc_rootfs0}"
+[ -e "${global.pfc.emmc_dev_rootfs1}" ] && automount -d ${global.pfc.emmc_rootfs1} "mount ${global.pfc.emmc_dev_rootfs1} ${global.pfc.emmc_rootfs1}"
+[ -e "${global.pfc.sd_dev_rootfs}" ] && automount -d ${global.pfc.sd_rootfs} "mount ${global.pfc.sd_dev_rootfs} ${global.pfc.sd_rootfs}"
+[ -e "${global.pfc.sd_dev_boot}" ] && automount -d ${global.pfc.sd_boot} "mount ${global.pfc.sd_dev_boot} ${global.pfc.sd_boot}"
diff --git a/defaultenv/defaultenv-pfc-base/init/z-pfc-config-startup b/defaultenv/defaultenv-pfc-base/init/z-pfc-config-startup
new file mode 100644
index 0000000..21212ba
--- /dev/null
+++ b/defaultenv/defaultenv-pfc-base/init/z-pfc-config-startup
@@ -0,0 +1,39 @@
+#!/bin/sh
+
+source env/data/print-msg-formats
+
+pfc-detect-boot-mode
+
+if [ "${global.pfc.boot_mode}" = "default" ]; then
+	pfc-config-default-boot
+	if [ "$?" = 1 ]; then
+		echo -e ${error} "$0: could not configure default boot"
+		pfc-config-broken-boot
+		exit 1
+	fi
+
+elif [ "${global.pfc.boot_mode}" = "production" ]; then
+	pfc-config-production-boot
+
+elif [ "${global.pfc.boot_mode}" = "setupfw" ]; then
+	pfc-config-setupfw-boot
+
+elif [ "${global.pfc.boot_mode}" = "downgrade" ]; then
+	pfc-exec-downgrade-boot
+	if [ "$?" = 1 ]; then
+		echo -e ${error} "$0: failed to execute downgrade boot"
+		exit 1
+	fi
+
+elif [ "${global.pfc.boot_mode}" = "custom" ]; then
+	pfc-exec-custom-boot
+	if [ "$?" = 1 ]; then
+		echo -e ${error} "$0: failed to execute custom scriptipt"
+		exit 1
+	fi
+
+else
+	pfc-config-broken-boot
+	exit 1
+fi
+
-- 
2.7.4

