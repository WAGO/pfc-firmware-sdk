From f677ba0d974db7d38f542928f2ce0c997a93ed5f Mon Sep 17 00:00:00 2001
From: Oleg Karfich <oleg.karfich@wago.com>
Date: Wed, 8 Aug 2018 11:20:53 +0200
Subject: [PATCH] commands: add led_mode command

Signed-off-by: Oleg Karfich <oleg.karfich@wago.com>
---
 commands/Kconfig    |   7 +++
 commands/Makefile   |   1 +
 commands/led_mode.c | 173 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 include/led_mode.h  |  10 +++
 4 files changed, 191 insertions(+)
 create mode 100644 commands/led_mode.c
 create mode 100644 include/led_mode.h

diff --git a/commands/Kconfig b/commands/Kconfig
index 2461947..1705b55 100644
--- a/commands/Kconfig
+++ b/commands/Kconfig
@@ -1802,6 +1802,13 @@ config CMD_LED
 
 	  Without arguments the available LEDs are listed.
 
+config CMD_LED_MODE
+	bool
+	depends on LED
+	prompt "led-mode command"
+	help
+	  Set LED's to mode "static" or "moving"
+
 config CMD_NAND
 	tristate
 	default y
diff --git a/commands/Makefile b/commands/Makefile
index 8f6ca7d..8e9fcb3 100644
--- a/commands/Makefile
+++ b/commands/Makefile
@@ -125,3 +125,4 @@ obj-$(CONFIG_CMD_SEED)		+= seed.o
 obj-$(CONFIG_CMD_IP_ROUTE_GET)  += ip-route-get.o
 obj-$(CONFIG_CMD_UART_CONSOLE)	+= uart_console.o
 obj-$(CONFIG_CMD_ETHADDR_MATCH) += ethaddr_match.o
+obj-$(CONFIG_CMD_LED_MODE) 	+= led_mode.o
diff --git a/commands/led_mode.c b/commands/led_mode.c
new file mode 100644
index 0000000..c72152f
--- /dev/null
+++ b/commands/led_mode.c
@@ -0,0 +1,173 @@
+/*
+ * led_mode.c - command to set all registered leds to a specific mode
+ *
+ * Copyright (C) 2018 WAGO Kontakttechnik GmbH & Co. KG <http://global.wago.com>
+ * Author: Oleg Karfich <oleg.karfich@wago.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <common.h>
+#include <led.h>
+#include <led_mode.h>
+#include <command.h>
+#include <getopt.h>
+#include <errno.h>
+
+#define OVERWRITE_LED "overwrite"
+
+enum led_mode {
+	STATIC = 0,
+	MOVING,
+	INVALID_MODE,
+};
+
+int led_mode_static(char *color, bool state)
+{
+	struct led *led;
+	int i;
+
+	if (strcmp(color, "green") && strcmp(color, "red") &&
+							strcmp(color, "yellow"))
+		return -EINVAL;
+
+	led = led_by_number(0);
+	if (!led)
+		return -ENODEV;
+
+	i = 0;
+	while ((led = led_by_number(i))) {
+		if (strcmp(led->name, OVERWRITE_LED)) {
+			if (strstr(led->name, color))
+				state ? led_set(led, led->max_value) :
+								led_set(led, 0);
+			else if (!strcmp(color, "yellow"))
+				state ? led_set(led, led->max_value) :
+								led_set(led, 0);
+		}
+		i++;
+	}
+
+	return 0;
+}
+
+int led_mode_moving(char *color, unsigned int duration_ms)
+{
+	struct led *led, *last_led;
+	int i;
+
+	if (strcmp(color, "green") && strcmp(color, "red"))
+		return -EINVAL;
+
+	led = led_by_number(0);
+	if (!led)
+		return -ENODEV;
+
+	/* switch all leds off */
+	led_mode_static("yellow", false);
+
+	i = 0;
+	last_led = NULL;
+	while ((led = led_by_number(i++))) {
+		if (strcmp(led->name, OVERWRITE_LED)) {
+			if (strstr(led->name, color)) {
+				if (last_led)
+					led_set(last_led, 0);
+
+				led_set(led, led->max_value);
+				last_led = led;
+				mdelay(duration_ms);
+			}
+		}
+	}
+
+	return 0;
+}
+
+static int do_led_mode(int argc, char *argv[])
+{
+	char *color = "none";
+	enum led_mode mode = INVALID_MODE;
+	bool state = false;
+	unsigned int duration_ms = 30;
+	int opt, ret = 0;
+
+	while ((opt = getopt(argc, argv, "smc:v::d::")) > 0) {
+		switch (opt) {
+		case 's':
+			mode = STATIC;
+			break;
+		case 'm':
+			mode = MOVING;
+			break;
+		case 'c':
+			color = optarg;
+			break;
+		case 'v':
+			if (!strcmp(optarg, "on"))
+				state = true;
+			else
+				state = false;
+			break;
+		case 'd':
+			duration_ms = simple_strtoul(optarg, NULL, 0);
+			break;
+		default:
+			ret = COMMAND_ERROR_USAGE;
+			goto out;
+		}
+	}
+
+	if (argc == 1) {
+		ret = COMMAND_ERROR_USAGE;
+		goto out;
+	}
+
+	switch (mode) {
+	case STATIC:
+		ret = led_mode_static(color, state);
+		break;
+	case MOVING:
+		ret = led_mode_moving(color, duration_ms);
+		break;
+	default:
+		ret = COMMAND_ERROR_USAGE;
+	}
+
+out:
+	return ret;
+}
+
+BAREBOX_CMD_HELP_START(led_mode)
+BAREBOX_CMD_HELP_TEXT("Set all registered leds to a specific mode. Supported ")
+BAREBOX_CMD_HELP_TEXT("modes are: static and moving. In static mode all leds ")
+BAREBOX_CMD_HELP_TEXT("are turned on/off at once.")
+BAREBOX_CMD_HELP_TEXT("")
+BAREBOX_CMD_HELP_TEXT("In moving mode all leds are flashing with a defined ")
+BAREBOX_CMD_HELP_TEXT("duration.")
+BAREBOX_CMD_HELP_TEXT("")
+BAREBOX_CMD_HELP_TEXT("LEDs are set by the order they where registered. ")
+BAREBOX_CMD_HELP_TEXT("To see the currently configured order call ")
+BAREBOX_CMD_HELP_TEXT("cmd: <led> without args.")
+BAREBOX_CMD_HELP_TEXT("")
+BAREBOX_CMD_HELP_TEXT("Options:")
+BAREBOX_CMD_HELP_OPT ("-s -c <green|red|yellow> -v <on|off>", "set all leds to static state")
+BAREBOX_CMD_HELP_OPT ("-m -c <green|red> [ -d <duration_ms> ]", "move the leds with optional duration time. Default 30ms")
+BAREBOX_CMD_HELP_END
+
+BAREBOX_CMD_START(led_mode)
+	.cmd		= do_led_mode,
+	BAREBOX_CMD_DESC("set leds to specific mode")
+	BAREBOX_CMD_OPTS("MODE COLOR STATE|DURATION")
+	BAREBOX_CMD_GROUP(CMD_GRP_HWMANIP)
+	BAREBOX_CMD_HELP(cmd_led_mode_help)
+BAREBOX_CMD_END
diff --git a/include/led_mode.h b/include/led_mode.h
new file mode 100644
index 0000000..93b39a1
--- /dev/null
+++ b/include/led_mode.h
@@ -0,0 +1,10 @@
+#ifndef __LED_MODE_H
+#define __LED_MODE_H
+
+/* valid color strings are: red, green, yellow */
+int led_mode_static(char *color, bool state);
+
+/* valid color strings are: red, green */
+int led_mode_moving(char *color, unsigned int duration_ms);
+
+#endif /* __LED_MODE_H */
-- 
2.7.4

