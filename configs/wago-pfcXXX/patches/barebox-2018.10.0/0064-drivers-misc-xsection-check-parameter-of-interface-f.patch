From 52dad95fff6fca7e7d068206be8a263438953d9f Mon Sep 17 00:00:00 2001
From: Oleg Karfich <oleg.karfich@wago.com>
Date: Tue, 21 Aug 2018 14:39:40 +0200
Subject: [PATCH] drivers: misc: xsection: check parameter of interface
 functions

Signed-off-by: Oleg Karfich <oleg.karfich@wago.com>
---
 drivers/misc/xsection.c | 27 ++++++++++++++++++---------
 1 file changed, 18 insertions(+), 9 deletions(-)

diff --git a/drivers/misc/xsection.c b/drivers/misc/xsection.c
index 27b87fb..26db6e0 100644
--- a/drivers/misc/xsection.c
+++ b/drivers/misc/xsection.c
@@ -62,43 +62,50 @@ static int xsection_access_item(struct xsection_item *xitem, void *buf,
 
 int xsection_get_boot_mode_id(u8 *buf)
 {
-	return xsection_access_item(&xsection->boot_mode_id, buf, O_RDONLY);
+	return xsection ? xsection_access_item(&xsection->boot_mode_id, buf,
+							O_RDONLY) : -ENODEV;
 }
 
 int xsection_set_boot_mode_id(u8 *value)
 {
-	return xsection_access_item(&xsection->boot_mode_id, value,
-								O_WRONLY);
+	return xsection ? xsection_access_item(&xsection->boot_mode_id, value,
+							O_WRONLY) : -ENODEV;
 }
 
 int xsection_get_devconf(u16 *buf)
 {
-	return xsection_access_item(&xsection->devconf, buf, O_RDONLY);
+	return xsection ? xsection_access_item(&xsection->devconf, buf,
+							O_RDONLY) : -ENODEV;
 }
 
 int xsection_set_devconf(u16 *value)
 {
-	return xsection_access_item(&xsection->devconf, value, O_WRONLY);
+	return xsection ? xsection_access_item(&xsection->devconf, value,
+							O_WRONLY) : -ENODEV;
 }
 
 int xsection_get_ethaddr1(u8 ethaddr[6])
 {
-	return xsection_access_item(&xsection->ethaddr1, ethaddr, O_RDONLY);
+	return xsection ? xsection_access_item(&xsection->ethaddr1, ethaddr,
+							O_RDONLY) : -ENODEV;
 }
 
 int xsection_set_ethaddr1(u8 ethaddr[6])
 {
-	return xsection_access_item(&xsection->ethaddr1, ethaddr, O_WRONLY);
+	return xsection ? xsection_access_item(&xsection->ethaddr1, ethaddr,
+							O_WRONLY) : -ENODEV;
 }
 
 int xsection_get_ethaddr2(u8 ethaddr[6])
 {
-	return xsection_access_item(&xsection->ethaddr2, ethaddr, O_RDONLY);
+	return xsection ? xsection_access_item(&xsection->ethaddr2, ethaddr,
+							O_RDONLY) : -ENODEV;
 }
 
 int xsection_set_ethaddr2(u8 ethaddr[6])
 {
-	return xsection_access_item(&xsection->ethaddr2, ethaddr, O_WRONLY);
+	return xsection ? xsection_access_item(&xsection->ethaddr2, ethaddr,
+							O_WRONLY) : -ENODEV;
 }
 
 static int xsection_param_get_ethaddr(struct xsection_item *xitem)
@@ -349,6 +356,7 @@ out_unreg:
 	unregister_device(&xsection->dev);
 out:
 	free(xsection);
+	xsection = NULL;
 	dev_err(dev, "failed to probe %d\n", ret);
 
 	return ret;
@@ -361,6 +369,7 @@ static void xsection_remove(struct device_d *dev)
 	dev_remove_parameters(&xsection->dev);
 	unregister_device(&xsection->dev);
 	free(xsection);
+	xsection = NULL;
 }
 
 static __maybe_unused struct of_device_id xsection_ids[] = {
-- 
2.7.4

