From beb970b4eae1f38f0aa707e0558ec34dd896764e Mon Sep 17 00:00:00 2001
From: Andreas Schmidt <andreas.schmidt@wago.com>
Date: Fri, 12 Oct 2018 11:55:51 +0200
Subject: [PATCH] commands: miitool: add directly mdio bus access

For some devices, like switches, it could be neseccary to read
or wirte registers. This patch adds directly access to MDIO
bus registers. For using this in scripts, miitool exports read
value to a environment variable or read the value from a
environment variable and wirtes it to MDIO bus.

Signed-off-by: Andreas Schmidt <andreas.schmidt@wago.com>
---
 commands/miitool.c | 172 +++++++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 147 insertions(+), 25 deletions(-)

diff --git a/commands/miitool.c b/commands/miitool.c
index 8872469..d9fbc0c 100644
--- a/commands/miitool.c
+++ b/commands/miitool.c
@@ -34,6 +34,7 @@
 #include <fs.h>
 #include <fcntl.h>
 #include <getopt.h>
+#include <environment.h>
 #include <linux/stat.h>
 #include <xfuncs.h>
 #include <net.h>
@@ -265,13 +266,123 @@ enum miitool_operations {
 	MIITOOL_NOOP,
 	MIITOOL_SHOW,
 	MIITOOL_REGISTER,
+	MIITOOL_MDIO_READ,
+	MIITOOL_MDIO_WRITE,
 };
 
+static int miitool_parse(const char *str, int *bus, struct mii_bus **mii,
+			 int *addr, int *reg)
+{
+	char *endp;
+
+	if (!str || !*str)
+		return COMMAND_ERROR_USAGE;
+
+	if (!bus || !mii)
+		return COMMAND_ERROR;
+
+	*bus = simple_strtoul(str, &endp, 0);
+
+	*mii = mdiobus_get_bus(*bus);
+	if (!*mii) {
+		printf("Can't find MDIO bus #%d\n", *bus);
+		return COMMAND_ERROR;
+	}
+
+	if (!addr)
+		return COMMAND_SUCCESS;
+
+	if (*endp != ':') {
+		printf("No colon between bus and address\n");
+		return COMMAND_ERROR_USAGE;
+	}
+
+	endp++;
+	*addr = simple_strtoul(endp, &endp, 0);
+
+	if (*addr >= PHY_MAX_ADDR) {
+		printf("Address out of range (max %d)\n", PHY_MAX_ADDR - 1);
+		return COMMAND_ERROR_USAGE;
+	}
+
+	if (!reg)
+		return COMMAND_SUCCESS;
+
+	if (*endp != ':') {
+		printf("No colon address and register\n");
+		return COMMAND_ERROR_USAGE;
+	}
+
+	endp++;
+	*reg = simple_strtoul(endp, &endp, 0);
+
+	if (*reg > U8_MAX) {
+		printf("Register number out of range (max %d)\n", U8_MAX);
+		return COMMAND_ERROR_USAGE;
+	}
+
+	return 0;
+}
+
+static int miitool_mdio_write(const char *str, const char *variable)
+{
+	int ret;
+	struct mii_bus *mii;
+	int bus, addr, reg;
+	unsigned long val;
+
+	if (!variable || !*variable)
+		return COMMAND_ERROR_USAGE;
+
+	ret = miitool_parse(str, &bus, &mii, &addr, &reg);
+	if (ret)
+		return ret;
+
+	ret = getenv_ul(variable, &val);
+	if (ret)
+		return COMMAND_ERROR_USAGE;
+
+	if (val > U16_MAX) {
+		printf("Value out auf range (max %d 0x%04X)\n", U16_MAX,
+		       U16_MAX);
+		return COMMAND_ERROR;
+	}
+
+	ret = mdiobus_write(mii, addr, reg, val);
+
+	return (!ret) ? ret : COMMAND_ERROR_USAGE;
+}
+
+static int miitool_mdio_read(const char *str, const char *variable)
+{
+	int ret;
+	struct mii_bus *mii;
+	int bus, addr, reg;
+	char buf[20] = {0};
+
+	if (!variable || !*variable)
+		return COMMAND_ERROR_USAGE;
+
+	ret = miitool_parse(str, &bus, &mii, &addr, &reg);
+	if (ret)
+		return ret;
+
+	ret = mdiobus_read(mii, addr, reg);
+	if (ret < 0)
+		return ret;
+
+	snprintf(buf, sizeof(buf), "%d", (u16)ret);
+
+	ret = setenv(variable, strim(buf));
+
+	return (!ret) ? ret : COMMAND_ERROR_USAGE;
+}
+
 static int do_miitool(int argc, char *argv[])
 {
 	char *phydevname = NULL;
 	char *regstr = NULL;
-	char *endp;
+	char *variable = NULL;
 	struct mii_bus *mii;
 	int opt, ret;
 	int verbose = 0;
@@ -279,7 +390,7 @@ static int do_miitool(int argc, char *argv[])
 	enum miitool_operations action = MIITOOL_NOOP;
 	int addr, bus;
 
-	while ((opt = getopt(argc, argv, "vs:r:")) > 0) {
+	while ((opt = getopt(argc, argv, "vs:r:w:x:p:")) > 0) {
 		switch (opt) {
 		case 's':
 			action = MIITOOL_SHOW;
@@ -292,42 +403,50 @@ static int do_miitool(int argc, char *argv[])
 		case 'v':
 			verbose++;
 			break;
+		case 'p':
+			variable = optarg;
+			break;
+		case 'w':
+			action = MIITOOL_MDIO_WRITE;
+			regstr = optarg;
+			break;
+		case 'x':
+			action = MIITOOL_MDIO_READ;
+			regstr = optarg;
+			break;
 		default:
 			ret = COMMAND_ERROR_USAGE;
-			goto free_phydevname;
+			goto out;
 		}
 	}
 
 	switch (action) {
 	case MIITOOL_REGISTER:
-		bus = simple_strtoul(regstr, &endp, 0);
-		if (*endp != ':') {
-			printf("No colon between bus and address\n");
-			return COMMAND_ERROR_USAGE;
-		}
-		endp++;
-		addr = simple_strtoul(endp, NULL, 0);
-
-		if (addr >= PHY_MAX_ADDR)
-			printf("Address out of range (max %d)\n", PHY_MAX_ADDR - 1);
-
-		mii = mdiobus_get_bus(bus);
-		if (!mii) {
-			printf("Can't find MDIO bus #%d\n", bus);
-			ret = COMMAND_ERROR;
-			goto free_phydevname;
-		}
+		ret = miitool_parse(regstr, &bus, &mii, &addr, NULL);
+		if (ret)
+			goto out;
 
 		phydev = phy_device_create(mii, addr, -1);
+
 		ret = phy_register_device(phydev);
 		if (ret) {
 			printf("failed to register phy %s: %s\n",
 				dev_name(&phydev->dev), strerror(-ret));
-			goto free_phydevname;
+			goto out;
 		} else {
 			printf("registered phy %s\n", dev_name(&phydev->dev));
 		}
 		break;
+	case MIITOOL_MDIO_WRITE:
+		ret = miitool_mdio_write(regstr, variable);
+		if (ret)
+			goto out;
+		break;
+	case MIITOOL_MDIO_READ:
+		ret = miitool_mdio_read(regstr, variable);
+		if (ret)
+			goto out;
+		break;
 	default:
 	case MIITOOL_SHOW:
 		for_each_mii_bus(mii) {
@@ -341,7 +460,7 @@ static int do_miitool(int argc, char *argv[])
 
 	ret = COMMAND_SUCCESS;
 
-free_phydevname:
+out:
 	free(phydevname);
 	return ret;
 }
@@ -351,17 +470,20 @@ BAREBOX_CMD_HELP_TEXT("This utility checks or sets the status of a network inter
 BAREBOX_CMD_HELP_TEXT("Media Independent Interface (MII) unit as well as allowing to")
 BAREBOX_CMD_HELP_TEXT("register dummy PHY devices for raw MDIO access. Most fast ethernet")
 BAREBOX_CMD_HELP_TEXT("adapters use an MII to autonegotiate link speed and duplex setting.")
+BAREBOX_CMD_HELP_TEXT("Furthermore it allows to acces to MDIO bus directly")
 BAREBOX_CMD_HELP_TEXT("")
 BAREBOX_CMD_HELP_TEXT("Options:")
 BAREBOX_CMD_HELP_OPT("-v", "increase verbosity")
 BAREBOX_CMD_HELP_OPT("-s <devpath/devname>", "show PHY status (not providing PHY prints status of all)")
-BAREBOX_CMD_HELP_OPT("-r <busno>:<adr>", "register a PHY")
+BAREBOX_CMD_HELP_OPT("-r <busno>:<addr>", "register a PHY")
+BAREBOX_CMD_HELP_OPT("-w <busno>:<addr>:<reg> -p variable", "read value from variable and writes it to MDIO bus")
+BAREBOX_CMD_HELP_OPT("-x <busno>:<addr>:<reg> -p variable", "read value from MDIO bus and writes it to variable")
 BAREBOX_CMD_HELP_END
 
 BAREBOX_CMD_START(miitool)
 	.cmd		= do_miitool,
-	BAREBOX_CMD_DESC("view media-independent interface status")
-	BAREBOX_CMD_OPTS("[-vsr]")
+	BAREBOX_CMD_DESC("media-independent interface access")
+	BAREBOX_CMD_OPTS("[-vsrwxp]")
 	BAREBOX_CMD_GROUP(CMD_GRP_NET)
 	BAREBOX_CMD_HELP(cmd_miitool_help)
 BAREBOX_CMD_END
-- 
2.7.4

