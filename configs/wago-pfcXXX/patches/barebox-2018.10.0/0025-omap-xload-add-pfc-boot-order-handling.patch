From ee634bb8371cbf3c703d4c832b49054b40dbfc6e Mon Sep 17 00:00:00 2001
From: Peter Galka <peter.galka@wago.com>
Date: Mon, 2 Jul 2018 10:02:08 +0200
Subject: [PATCH] omap: xload: add pfc boot order handling

Xload handler tries to boot from mmc first, if card inserted and barebox
image available. Otherwise it boots from internal memory.
---
 arch/arm/configs/am335x_mlo_defconfig |   1 +
 arch/arm/mach-omap/Makefile           |   2 +-
 arch/arm/mach-omap/xload-pfc.c        | 111 ++++++++++++++++++++++++++++++++++
 3 files changed, 113 insertions(+), 1 deletion(-)
 create mode 100644 arch/arm/mach-omap/xload-pfc.c

diff --git a/arch/arm/configs/am335x_mlo_defconfig b/arch/arm/configs/am335x_mlo_defconfig
index 83df153..eac5e4f 100644
--- a/arch/arm/configs/am335x_mlo_defconfig
+++ b/arch/arm/configs/am335x_mlo_defconfig
@@ -35,6 +35,7 @@ CONFIG_NAND=y
 # CONFIG_NAND_BBT is not set
 CONFIG_NAND_OMAP_GPMC=y
 CONFIG_MCI=y
+CONFIG_MCI_STARTUP=y
 # CONFIG_MCI_WRITE is not set
 CONFIG_MCI_OMAP_HSMMC=y
 CONFIG_PINCTRL_SINGLE=y
diff --git a/arch/arm/mach-omap/Makefile b/arch/arm/mach-omap/Makefile
index a84e94e..490115d 100644
--- a/arch/arm/mach-omap/Makefile
+++ b/arch/arm/mach-omap/Makefile
@@ -28,7 +28,7 @@ obj-$(CONFIG_ARCH_AM33XX) += am33xx_scrm.o
 obj-$(CONFIG_ARCH_OMAP3) += omap3_clock.o
 pbl-$(CONFIG_ARCH_OMAP3) += omap3_clock.o
 obj-$(CONFIG_OMAP_GPMC) += gpmc.o devices-gpmc-nand.o
-obj-$(CONFIG_SHELL_NONE) += xload.o
+obj-$(CONFIG_SHELL_NONE) += xload.o xload-pfc.o
 obj-$(CONFIG_MFD_TWL6030) += omap4_twl6030_mmc.o
 obj-$(CONFIG_OMAP4_USBBOOT) += omap4_rom_usb.o
 obj-$(CONFIG_OMAP3_USBBOOT) += omap3_xload_usb.o
diff --git a/arch/arm/mach-omap/xload-pfc.c b/arch/arm/mach-omap/xload-pfc.c
new file mode 100644
index 0000000..ab5208e
--- /dev/null
+++ b/arch/arm/mach-omap/xload-pfc.c
@@ -0,0 +1,111 @@
+/*
+ * Copyright (C) 2018 WAGO Kontakttechnik GmbH & Co. KG <http://global.wago.com>
+ * Author: Peter Galka <peter.galka@wago.com>
+ *
+ * Xload handler tries to boot from mmc first, if card inserted and barebox
+ * image available. Otherwise it boots from internal memory.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <common.h>
+#include <init.h>
+#include <mci.h>
+#include <bootsource.h>
+#include <mach/generic.h>
+
+extern struct omap_barebox_part *barebox_part;
+static const char *board_variant;
+
+static int pfc_mmc_inserted(void)
+{
+	struct mci *mci;
+
+	mci = mci_get_device_by_name("mmc0");
+	if (!mci)
+		return 0;
+
+	if (mci->host->card_present)
+		return (mci->host->card_present(mci->host) <= 0) ? 0 : 1;
+
+	return 0;
+}
+
+static __noreturn int pfc_xload(void)
+{
+	enum bootsource bootsource;
+	int bootinstance;
+
+	char *bootfile = NULL;
+	void *barebox = NULL;
+	const enum bootsource bootsource_origin = bootsource_get();
+	const int bootinstance_origin = bootsource_get_instance();
+
+	struct device_node *root = of_get_root_node();
+	if (!root)
+		goto out;
+
+	if (of_property_read_string(root, "board-variant", &board_variant))
+		goto out;
+
+	bootfile = (char *) basprintf("barebox.bin.%s", board_variant);
+	if (!bootfile)
+		goto out;
+
+	if (pfc_mmc_inserted()) {
+		bootsource = BOOTSOURCE_MMC;
+		bootinstance = 0;
+		omap_set_bootmmc_devname("mmc0");
+		barebox = omap_xload_boot_mmc(bootfile);
+		if (!barebox)
+			pr_warning("booting from mmc failed, try the origin source\n");
+	}
+
+	if (!barebox) {
+		if (bootsource_get() == BOOTSOURCE_MMC) {
+			bootsource = BOOTSOURCE_MMC;
+			bootinstance = 1;
+			omap_set_bootmmc_devname("mmc1");
+			barebox = omap_xload_boot_mmc(bootfile);
+		} else if (bootsource_get() == BOOTSOURCE_NAND) {
+			if (!barebox_part)
+				goto out;
+
+			pr_info("booting from nand\n");
+			bootsource = BOOTSOURCE_NAND;
+			barebox = omap_xload_boot_nand(barebox_part);
+		}
+	}
+
+	if (!barebox)
+		goto out;
+
+	if (bootsource != bootsource_origin)
+		bootsource_set(bootsource);
+	if (bootinstance != bootinstance_origin)
+		bootsource_set_instance(bootinstance);
+
+	omap_start_barebox(barebox);
+
+out:
+	free(bootfile);
+	pr_err("booting failed\n");
+	while (1);
+}
+
+static int pfc_set_xload(void)
+{
+	barebox_main = pfc_xload;
+
+	return 0;
+}
+environment_initcall(pfc_set_xload);
-- 
2.7.4

