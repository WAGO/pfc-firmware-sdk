From f9b618d13399499ef7ee56978d9fc4a0a1403003 Mon Sep 17 00:00:00 2001
From: Oleg Karfich <oleg.karfich@wago.com>
Date: Mon, 24 Sep 2018 15:01:16 +0200
Subject: [PATCH] xload-pfc: use board info and clean up code

Signed-off-by: Oleg Karfich <oleg.karfich@wago.com>
---
 .../mach-omap/include/mach/am3xxx-pfc-generic.h    |  18 ++++
 arch/arm/mach-omap/xload-pfc.c                     | 117 +++++++++++----------
 2 files changed, 80 insertions(+), 55 deletions(-)

diff --git a/arch/arm/mach-omap/include/mach/am3xxx-pfc-generic.h b/arch/arm/mach-omap/include/mach/am3xxx-pfc-generic.h
index 846cdd7..11a4e1a 100644
--- a/arch/arm/mach-omap/include/mach/am3xxx-pfc-generic.h
+++ b/arch/arm/mach-omap/include/mach/am3xxx-pfc-generic.h
@@ -8,13 +8,31 @@ struct omap_barebox_boot_parts {
 	int num_boot_emmcslots;
 };
 
+enum omap_board_boot_device {
+	HAS_SD = 0,
+	HAS_NAND,
+	HAS_EMMC,
+	NUM_BOOT_DEVICES,
+};
+
+struct omap_board_info {
+	char *board_variant;
+	DECLARE_BITMAP(boot_devices, NUM_BOOT_DEVICES);
+};
+
 #ifdef CONFIG_SHELL_NONE
 int omap_set_barebox_boot_parts(struct omap_barebox_boot_parts *parts);
+int omap_set_board_info(struct omap_board_info *board_info);
 #else
 static inline int omap_set_barebox_boot_parts(struct omap_barebox_boot_parts *parts)
 {
 	return 0;
 }
+
+static inline int omap_set_board_info(struct omap_board_info *board_info)
+{
+	return 0;
+}
 #endif
 
 #endif /* __MACH_AM3XXX_PFC_GENERIC_H */
diff --git a/arch/arm/mach-omap/xload-pfc.c b/arch/arm/mach-omap/xload-pfc.c
index 3f415de..b402ce3 100644
--- a/arch/arm/mach-omap/xload-pfc.c
+++ b/arch/arm/mach-omap/xload-pfc.c
@@ -32,7 +32,7 @@
 #include <libfile.h>
 
 struct omap_barebox_boot_parts *barebox_boot_parts;
-static const char *board_variant = "pfc200";
+struct omap_board_info *board;
 
 static int pfc_mmc_inserted(void)
 {
@@ -55,7 +55,7 @@ static unsigned int pfc_xload_get_image_size(void *head)
 
 	if (is_barebox_arm_head(head))
 		ret = *psize;
-	debug("Detected barebox image size %u\n", ret);
+	pr_info("Detected barebox image size %u\n", ret);
 
 	return ret;
 }
@@ -68,7 +68,7 @@ static void *pfc_xload_read_image_head(const char *name)
 
 	cdev = cdev_open(name, O_RDONLY);
 	if (!cdev) {
-		printf("failed to open %s\n", name);
+		pr_info("%s: failed to open %s\n", name, __func__);
 		return NULL;
 	}
 
@@ -76,7 +76,7 @@ static void *pfc_xload_read_image_head(const char *name)
 	cdev_close(cdev);
 
 	if (ret != ARM_HEAD_SIZE) {
-		printf("failed to read from %s\n", name);
+		pr_info("%s: failed to read from %s\n", __func__, name);
 		return NULL;
 	}
 
@@ -96,7 +96,7 @@ static void *pfc_xload_read_cdev_barebox(const char *partition)
 
 	size = pfc_xload_get_image_size(header);
 	if (!size) {
-		printf("failed to get image size\n");
+		pr_info("%s: failed to get image size\n", __func__);
 		return NULL;
 	}
 
@@ -104,13 +104,13 @@ static void *pfc_xload_read_cdev_barebox(const char *partition)
 
 	cdev = cdev_open(partition, O_RDONLY);
 	if (!cdev) {
-		printf("failed to open partition\n");
+		pr_info("%s: failed to open partition\n", __func__);
 		return NULL;
 	}
 
 	ret = cdev_read(cdev, to, size, 0, 0);
 	if (ret != size) {
-		printf("failed to read from partition\n");
+		pr_info("%s: failed to read from partition\n", __func__);
 		return NULL;
 	}
 
@@ -125,8 +125,8 @@ static void *pfc_xload_boot_parts(char **parts, int num_parts)
 	for (i=0; i < num_parts; i++) {
 		to = pfc_xload_read_cdev_barebox(parts[i]);
 		if (to) {
-			pr_info("found image on raw partition %s\n",
-							parts[i]);
+			pr_info("%s: found image on raw partition %s\n",
+							 __func__, parts[i]);
 			break;
 		}
 	}
@@ -157,7 +157,8 @@ static void *pfc_xload_boot_mmc(char *bootfile)
 	ret = mount(partname, NULL, "/", NULL);
 
 	if (ret) {
-		printf("Unable to mount %s (%d)\n", partname, ret);
+		pr_info("%s: Unable to mount %s (%d)\n", __func__,
+								partname, ret);
 		free(partname);
 		return NULL;
 	}
@@ -185,80 +186,79 @@ static void *pfc_xload_boot_mmc(char *bootfile)
 
 static __noreturn int pfc_xload(void)
 {
-	enum bootsource bootsource;
-	int bootinstance;
-
 	char *bootfile = NULL;
 	void *barebox = NULL;
-	const enum bootsource bootsource_origin = bootsource_get();
-	const int bootinstance_origin = bootsource_get_instance();
+	enum bootsource bootsource;
 
-	struct device_node *root = of_get_root_node();
-	if (root)
-		of_property_read_string(root, "board-variant", &board_variant);
+	if (!board) {
+		pr_err("%s: no board information set\n", __func__);
+		goto out;
+	}
 
-	pr_info("%s: board-variant: %s\n", __func__, board_variant);
+	pr_info("%s: rom-code boots us from: ", __func__);
 
-	bootfile = (char *) basprintf("barebox.bin.%s", board_variant);
-	if (!bootfile)
-		goto out;
+	bootsource = bootsource_get();
+	switch (bootsource) {
+		case BOOTSOURCE_MMC:
+			pr_info("mmc%d\n", bootsource_get_instance());
+			break;
+		case BOOTSOURCE_NAND:
+			pr_info("nand%d\n", bootsource_get_instance());
+			break;
+		default:
+			pr_info("unknown\n");
+	}
+
+	if (!board->board_variant)
+		bootfile = basprintf("barebox.bin");
+	else
+		bootfile = basprintf("barebox.bin.%s", board->board_variant);
 
-	if (pfc_mmc_inserted()) {
-		bootsource = BOOTSOURCE_MMC;
-		bootinstance = 0;
+	pr_info("%s: board-variant: %s\n", __func__, board->board_variant ?
+							board->board_variant :
+							"none");
+
+	if (test_bit(HAS_SD, board->boot_devices) && pfc_mmc_inserted()) {
 		omap_set_bootmmc_devname("mmc0");
-		pr_info("%s: try to boot from %s\n", __func__,
+		pr_info("%s: try to boot vfat from %s\n", __func__,
 						omap_get_bootmmc_devname());
-		barebox = pfc_xload_boot_mmc(bootfile);
 
+		barebox = pfc_xload_boot_mmc(bootfile);
 		if (!barebox)
 			pr_info("%s: file %s not found on %s\n", __func__,
 					bootfile, omap_get_bootmmc_devname());
 	}
 
-	if (!barebox) {
-		if (bootsource_get() == BOOTSOURCE_MMC) {
-			if (!barebox_boot_parts)
-				goto out;
-
-			bootsource = BOOTSOURCE_MMC;
-			bootinstance = 1;
-			omap_set_bootmmc_devname("mmc1");
+	if (test_bit(HAS_EMMC, board->boot_devices) && !barebox) {
+		omap_set_bootmmc_devname("mmc1");
 
+		if (barebox_boot_parts) {
 			pr_info("%s: try to boot raw from %s\n", __func__,
 						omap_get_bootmmc_devname());
 
 			barebox = pfc_xload_boot_parts(
 					barebox_boot_parts->boot_emmcslots,
 					barebox_boot_parts->num_boot_emmcslots);
+		}
 
-			if (!barebox) {
-				pr_info("%s: try to boot vfat from %s\n",
-					__func__, omap_get_bootmmc_devname());
-				barebox = pfc_xload_boot_mmc(bootfile);
-			}
-
-		} else if (bootsource_get() == BOOTSOURCE_NAND) {
-			if (!barebox_boot_parts)
-				goto out;
+		if (!barebox) {
+			pr_info("%s: try to boot vfat from %s\n", __func__,
+						omap_get_bootmmc_devname());
+			barebox = pfc_xload_boot_mmc(bootfile);
+		}
+	}
 
-			pr_info("%s: try to boot from nand\n", __func__);
-			bootsource = BOOTSOURCE_NAND;
+	if (test_bit(HAS_NAND, board->boot_devices) && !barebox) {
+		if (barebox_boot_parts) {
+			pr_info("%s: try to boot raw from nand\n", __func__);
 			barebox = pfc_xload_boot_parts(
 					barebox_boot_parts->boot_nandslots,
 					barebox_boot_parts->num_boot_nandslots);
 		}
 	}
 
-	if (!barebox)
-		goto out;
-
-	if (bootsource != bootsource_origin)
-		bootsource_set(bootsource);
-	if (bootinstance != bootinstance_origin)
-		bootsource_set_instance(bootinstance);
-
-	omap_start_barebox(barebox);
+	if (barebox)
+		omap_start_barebox(barebox);
 
 out:
 	pr_err("%s: could not boot %s from any boot device\n", __func__,
@@ -274,6 +274,13 @@ int omap_set_barebox_boot_parts(struct omap_barebox_boot_parts *parts)
 	return 0;
 }
 
+int omap_set_board_info(struct omap_board_info *board_info)
+{
+	board = board_info;
+
+	return 0;
+}
+
 static int pfc_set_xload(void)
 {
 	barebox_main = pfc_xload;
-- 
2.7.4

