From af664a318b9a9a1d89179554e7ea55d2fd0709a6 Mon Sep 17 00:00:00 2001
From: Heinrich Toews <heinrich.toews@wago.com>
Date: Mon, 18 Jun 2018 13:50:31 +0200
Subject: [PATCH] am35xx: omap3-clock: turn off clocks not used on pfc-am3505
 platform

We need to disable iva and fusb clock because of the following reasons:

IVA clock:
        clock init does take too long (2-3 secs)

FUSB Clock:
        need to turn it off to solve L3 App IRQ In-Band-Error Issue

Signed-off-by: Heinrich Toews <heinrich.toews@wago.com>
---
 arch/arm/mach-omap/include/mach/omap3-clock.h |  2 ++
 arch/arm/mach-omap/omap3_clock.c              | 15 ++++++++++++---
 2 files changed, 14 insertions(+), 3 deletions(-)

diff --git a/arch/arm/mach-omap/include/mach/omap3-clock.h b/arch/arm/mach-omap/include/mach/omap3-clock.h
index 7c52da7..849964a 100644
--- a/arch/arm/mach-omap/include/mach/omap3-clock.h
+++ b/arch/arm/mach-omap/include/mach/omap3-clock.h
@@ -64,6 +64,8 @@
 #define CM_CLKSEL_CAM		0X0f40
 #define CM_FCLKEN_PER		0X1000
 #define CM_ICLKEN_PER		0X1010
+#define CM_IDLEST_PER		0X1020
+#define CM_AUTOIDLE_PER		0X1030
 #define CM_CLKSEL_PER		0X1040
 #define CM_CLKSEL1_EMU		0X1140
 #define CM_FCLKEN_USBH		0x1400
diff --git a/arch/arm/mach-omap/omap3_clock.c b/arch/arm/mach-omap/omap3_clock.c
index 6700f56..c0099d0 100644
--- a/arch/arm/mach-omap/omap3_clock.c
+++ b/arch/arm/mach-omap/omap3_clock.c
@@ -3,7 +3,7 @@
  * @brief OMAP DPLL and various clock configuration
  *
  * @ref prcm_init This is the second level clock init for PRCM as defined in
- * clocks.h -- called from SRAM, or Flash (using temp SRAM stack).
+ * clocks.h -- -                       init_iva_dpll_34x(cpu_rev, clk_index); called from SRAM, or Flash (using temp SRAM stack).
  *
  * During reconfiguring the clocks while in SDRAM/Flash, we can have invalid
  * clock configuration to which ARM instruction/data fetch ops can fail.
@@ -39,6 +39,7 @@
 #include <mach/timers.h>
 #include <mach/sys_info.h>
 #include <mach/syslib.h>
+#include <generated/mach-types.h>
 
 #define S32K_CR			(OMAP3_32KTIMER_BASE + 0x10)
 
@@ -198,7 +199,9 @@ static void init_core_dpll_34x(u32 cpu_rev, u32 clk_sel)
 		sr32(OMAP3_CM_REG(CLKSEL1_PLL), 6, 1, 0);
 
 		sr32(OMAP3_CM_REG(CLKSEL_CORE), 8, 4, CORE_SSI_DIV);
+#ifdef CONFIG_USB /* Solve L3 App IRQ In-Band-Error Issue */
 		sr32(OMAP3_CM_REG(CLKSEL_CORE), 4, 2, CORE_FUSB_DIV);
+#endif
 		sr32(OMAP3_CM_REG(CLKSEL_CORE), 2, 2, CORE_L4_DIV);
 		sr32(OMAP3_CM_REG(CLKSEL_CORE), 0, 2, CORE_L3_DIV);
 		sr32(OMAP3_CM_REG(CLKSEL_GFX), 0, 3, GFX_DIV_34X);
@@ -329,6 +332,7 @@ static void init_mpu_dpll_34x(u32 cpu_rev, u32 clk_sel)
 	sr32(OMAP3_CM_REG(CLKEN_PLL_MPU), 4, 4, dp->fsel);
 }
 
+#ifndef CONFIG_MACH_WAGO_PFC_AM35XX
 static struct dpll_param iva_dpll_param_34x_es1[] = {
 	{ .m = 	0x07D, .n = 0x05, .fsel = 0x07,	.m2 = 0x01, }, /* 12   MHz */
 	{ .m = 	0x0FA, .n = 0x0C, .fsel = 0x03,	.m2 = 0x01, }, /* 13   MHz */
@@ -382,6 +386,7 @@ static void init_iva_dpll_34x(u32 cpu_rev, u32 clk_sel)
 	sr32(OMAP3_CM_REG(CLKEN_PLL_IVA2), 0, 3, PLL_LOCK);
 	wait_on_value((0x1 << 0), 1, OMAP3_CM_REG(IDLEST_PLL_IVA2), LDELAY);
 }
+#endif
 
 /* FIXME: All values correspond to 26MHz only */
 static struct dpll_param core_dpll_param_36x[] = {
@@ -621,7 +626,9 @@ void prcm_init(void)
 		init_core_dpll_34x(cpu_rev, clk_index);
 		init_per_dpll_34x(cpu_rev, clk_index);
 		init_mpu_dpll_34x(cpu_rev, clk_index);
+#ifndef CONFIG_MACH_WAGO_PFC_AM35XX
 		init_iva_dpll_34x(cpu_rev, clk_index);
+#endif
 	}
 	else if (cpu_type == CPU_3630) {
 		init_core_dpll_36x(cpu_rev, clk_index);
@@ -676,7 +683,11 @@ static void per_clocks_enable(void)
 #define ICK_CAM_ON	0x00000001
 #define FCK_PER_ON	0x0003ffff
 #define ICK_PER_ON	0x0003ffff
+#ifndef CONFIG_MACH_WAGO_PFC_AM35XX
 	sr32(OMAP3_CM_REG(FCLKEN_IVA2), 0, 32, FCK_IVA2_ON);
+	sr32(OMAP3_CM_REG(FCLKEN_CAM), 0, 32, FCK_CAM_ON);
+	sr32(OMAP3_CM_REG(ICLKEN_CAM), 0, 32, ICK_CAM_ON);
+#endif
 	sr32(OMAP3_CM_REG(FCLKEN1_CORE), 0, 32, FCK_CORE1_ON);
 	sr32(OMAP3_CM_REG(ICLKEN1_CORE), 0, 32, ICK_CORE1_ON);
 	sr32(OMAP3_CM_REG(ICLKEN2_CORE), 0, 32, ICK_CORE2_ON);
@@ -684,8 +695,6 @@ static void per_clocks_enable(void)
 	sr32(OMAP3_CM_REG(ICLKEN_WKUP), 0, 32, ICK_WKUP_ON);
 	sr32(OMAP3_CM_REG(FCLKEN_DSS), 0, 32, FCK_DSS_ON);
 	sr32(OMAP3_CM_REG(ICLKEN_DSS), 0, 32, ICK_DSS_ON);
-	sr32(OMAP3_CM_REG(FCLKEN_CAM), 0, 32, FCK_CAM_ON);
-	sr32(OMAP3_CM_REG(ICLKEN_CAM), 0, 32, ICK_CAM_ON);
 	sr32(OMAP3_CM_REG(FCLKEN_PER), 0, 32, FCK_PER_ON);
 	sr32(OMAP3_CM_REG(ICLKEN_PER), 0, 32, ICK_PER_ON);
 
-- 
2.7.4

