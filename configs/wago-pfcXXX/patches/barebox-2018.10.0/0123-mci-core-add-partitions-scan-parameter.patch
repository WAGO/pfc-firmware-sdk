From 19dae59af459f9150f007ba377f01abcb5a232b6 Mon Sep 17 00:00:00 2001
From: Oleg Karfich <oleg.karfich@wago.com>
Date: Wed, 17 Oct 2018 14:59:25 +0200
Subject: [PATCH] mci: core: add partitions scan parameter

Signed-off-by: Oleg Karfich <oleg.karfich@wago.com>
---
 drivers/mci/mci-core.c | 70 ++++++++++++++++++++++++++++++++++++--------------
 include/mci.h          |  2 ++
 2 files changed, 53 insertions(+), 19 deletions(-)

diff --git a/drivers/mci/mci-core.c b/drivers/mci/mci-core.c
index ef02d2b..88e7db2 100644
--- a/drivers/mci/mci-core.c
+++ b/drivers/mci/mci-core.c
@@ -1590,30 +1590,14 @@ static int mci_get_cd(struct param_d *param, void *priv)
 	return 0;
 }
 
-static int mci_register_partition(struct mci_part *part)
+static void mci_create_partitions_ondemand(struct mci_part *part)
 {
 	struct mci *mci = part->mci;
 	struct mci_host *host = mci->host;
+	struct device_node *np = host->hw_dev->device_node;
 	const char *partnodename = NULL;
-	struct device_node *np;
 	int rc;
 
-	/*
-	 * An MMC/SD card acts like an ordinary disk.
-	 * So, re-use the disk driver to gain access to this media
-	 */
-	part->blk.dev = &mci->dev;
-	part->blk.ops = &mci_ops;
-
-	rc = blockdevice_register(&part->blk);
-	if (rc != 0) {
-		dev_err(&mci->dev, "Failed to register MCI/SD blockdevice\n");
-		return rc;
-	}
-	dev_info(&mci->dev, "registered %s\n", part->blk.cdev.name);
-
-	np = host->hw_dev->device_node;
-
 	/* create partitions on demand */
 	switch (part->area_type) {
 	case MMC_BLK_DATA_AREA_BOOT:
@@ -1628,7 +1612,7 @@ static int mci_register_partition(struct mci_part *part)
 	case MMC_BLK_DATA_AREA_MAIN:
 		break;
 	default:
-		return 0;
+		return;
 	}
 
 	rc = parse_partition_table(&part->blk);
@@ -1641,6 +1625,46 @@ static int mci_register_partition(struct mci_part *part)
 		of_parse_partitions(&part->blk.cdev, np);
 		of_partitions_register_fixup(&part->blk.cdev);
 	}
+}
+
+static int mci_register_partition(struct mci_part *part)
+{
+	struct mci *mci = part->mci;
+	int rc;
+
+	/*
+	 * An MMC/SD card acts like an ordinary disk.
+	 * So, re-use the disk driver to gain access to this media
+	 */
+	part->blk.dev = &mci->dev;
+	part->blk.ops = &mci_ops;
+
+	rc = blockdevice_register(&part->blk);
+	if (rc != 0) {
+		dev_err(&mci->dev, "Failed to register MCI/SD blockdevice\n");
+		return rc;
+	}
+	dev_info(&mci->dev, "registered %s\n", part->blk.cdev.name);
+
+	mci_create_partitions_ondemand(part);
+
+	return 0;
+}
+
+static int mci_set_scan(struct param_d *param, void *priv)
+{
+	struct mci *mci = priv;
+	int rc, i;
+
+	if (!mci->scan)
+		return 0;
+
+	rc = mci_check_if_already_initialized(mci);
+	if (rc == 0)
+		return rc;
+
+	for (i = 0; i < mci->nr_parts; i++)
+		mci_create_partitions_ondemand(&mci->part[i]);
 
 	return 0;
 }
@@ -1849,6 +1873,14 @@ int mci_register(struct mci_host *host)
 		goto err_unregister;
 	}
 
+	mci->param_scan = dev_add_param_bool(&mci->dev, "scan",
+			mci_set_scan, NULL, &mci->scan, mci);
+
+	if (IS_ERR(mci->param_scan) && PTR_ERR(mci->param_probe) != -ENOSYS) {
+		dev_dbg(&mci->dev, "Failed to add 'scan' parameter to the MCI device\n");
+		goto err_unregister;
+	}
+
 	if (IS_ENABLED(CONFIG_MCI_INFO))
 		mci->dev.info = mci_info;
 
diff --git a/include/mci.h b/include/mci.h
index c9244d1..37bc17e 100644
--- a/include/mci.h
+++ b/include/mci.h
@@ -462,9 +462,11 @@ struct mci {
 	char *ext_csd;
 	int probe;
 	int cd;
+	int scan;
 	struct param_d *param_probe;
 	struct param_d *param_boot;
 	struct param_d *param_cd;
+	struct param_d *param_scan;
 	int bootpart;
 
 	struct mci_part part[MMC_NUM_PHY_PARTITION];
-- 
2.7.4

