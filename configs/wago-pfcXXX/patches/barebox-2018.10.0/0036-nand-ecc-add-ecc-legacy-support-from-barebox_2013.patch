From 570416f325a7bb18d5f0102ccd28f52ae9e73433 Mon Sep 17 00:00:00 2001
From: Oleg Karfich <oleg.karfich@wago.com>
Date: Mon, 18 Jun 2018 13:50:36 +0200
Subject: [PATCH] nand: ecc: add ecc legacy support from barebox_2013

We need this legacy support because we have devices out
there which would need that special mode to boot.

Signed-off-by: Heinrich Toews <heinrich.toews@wago.com>
---
 arch/arm/mach-omap/include/mach/gpmc_nand.h |  1 +
 drivers/mtd/nand/nand_omap_gpmc.c           | 32 +++++++++++++++++++++++------
 2 files changed, 27 insertions(+), 6 deletions(-)

diff --git a/arch/arm/mach-omap/include/mach/gpmc_nand.h b/arch/arm/mach-omap/include/mach/gpmc_nand.h
index 4d896b8..0c0b893 100644
--- a/arch/arm/mach-omap/include/mach/gpmc_nand.h
+++ b/arch/arm/mach-omap/include/mach/gpmc_nand.h
@@ -35,6 +35,7 @@ enum gpmc_ecc_mode {
 	OMAP_ECC_BCH8_CODE_HW,
 	OMAP_ECC_BCH8_CODE_HW_ROMCODE,
 	OMAP_ECC_BCH8_CODE_HW_DETECTION_SW,
+	OMAP_ECC_BCH8_CODE_HW_DETECTION_SW_LEGACY,
 };
 
 /** omap nand platform data structure */
diff --git a/drivers/mtd/nand/nand_omap_gpmc.c b/drivers/mtd/nand/nand_omap_gpmc.c
index 994e646..cf49437 100644
--- a/drivers/mtd/nand/nand_omap_gpmc.c
+++ b/drivers/mtd/nand/nand_omap_gpmc.c
@@ -111,6 +111,7 @@ static const char *ecc_mode_strings[] = {
 	"bch8_hw",
 	"bch8_hw_romcode",
 	"bch8_hw_detsw",
+	"bch8_hw_detsw_legacy",
 };
 
 /** internal structure maintained for nand information */
@@ -261,6 +262,7 @@ static int __omap_calculate_ecc(struct mtd_info *mtd, const uint8_t *dat,
 	switch (oinfo->ecc_mode) {
 #ifdef CONFIG_NAND_BCH_SUPPORT
 	case OMAP_ECC_BCH8_CODE_HW:
+	case OMAP_ECC_BCH8_CODE_HW_DETECTION_SW_LEGACY:
 	case OMAP_ECC_BCH8_CODE_HW_DETECTION_SW:
 	case OMAP_ECC_BCH8_CODE_HW_ROMCODE:
 		for (i = 0; i < 4; i++) {
@@ -309,6 +311,7 @@ static int __omap_calculate_ecc(struct mtd_info *mtd, const uint8_t *dat,
 
 #if defined(CONFIG_NAND_BCH_SUPPORT) && defined(CONFIG_NAND_ECC_HW_SW_ERR_DETECTION)
 	switch (oinfo->ecc_mode) {
+	case OMAP_ECC_BCH8_CODE_HW_DETECTION_SW_LEGACY:
 	case OMAP_ECC_BCH8_CODE_HW_DETECTION_SW:
 		for (i = 0; i < nand->ecc.total; i++)
 			*(ecc_code + i) = *(ecc_code + i) ^ bch8_polynomial[i];
@@ -524,6 +527,7 @@ static int omap_correct_data(struct mtd_info *mtd, uint8_t *dat,
 		__omap_calculate_ecc(mtd, dat, calc_ecc, 0);
 		return omap_correct_bch(mtd, dat, read_ecc, calc_ecc);
 #else
+	case OMAP_ECC_BCH8_CODE_HW_DETECTION_SW_LEGACY:
 	case OMAP_ECC_BCH8_CODE_HW_DETECTION_SW:
 		return omap_correct_bch_sw(mtd, dat, read_ecc, calc_ecc);
 #endif
@@ -548,6 +552,7 @@ static void omap_enable_hwecc(struct mtd_info *mtd, int mode)
 	switch (oinfo->ecc_mode) {
 #ifdef CONFIG_NAND_BCH_SUPPORT
 	case OMAP_ECC_BCH8_CODE_HW:
+	case OMAP_ECC_BCH8_CODE_HW_DETECTION_SW_LEGACY:
 	case OMAP_ECC_BCH8_CODE_HW_DETECTION_SW:
 	case OMAP_ECC_BCH8_CODE_HW_ROMCODE:
 		if (mode == NAND_ECC_READ) {
@@ -864,6 +869,7 @@ static int omap_gpmc_eccmode(struct gpmc_nand_info *oinfo,
 #ifdef CONFIG_NAND_BCH_SUPPORT
 #ifdef CONFIG_NAND_ECC_HW_SW_ERR_DETECTION
 	case OMAP_ECC_BCH8_CODE_HW_DETECTION_SW:
+	case OMAP_ECC_BCH8_CODE_HW_DETECTION_SW_LEGACY:
 		/* Init post-processing engine */
 		nand->ecc.priv = init_bch(13, BCH8_MAX_ERROR, 0); /* use default primitive
 								     polynomial (0x201b, m=13) */
@@ -876,16 +882,30 @@ static int omap_gpmc_eccmode(struct gpmc_nand_info *oinfo,
 		omap_oobinfo.eccbytes = oinfo->nand.ecc.total;
 
 		omap_oobinfo.oobfree->offset = offset; /* =1 */
-		omap_oobinfo.oobfree->length = minfo->oobsize -
-					offset - omap_oobinfo.eccbytes;
+
+		if (mode == OMAP_ECC_BCH8_CODE_HW_DETECTION_SW)
+			omap_oobinfo.oobfree->length = minfo->oobsize -
+						offset - omap_oobinfo.eccbytes;
+		else
+			omap_oobinfo.oobfree->length = minfo->oobsize -
+						offset - oinfo->nand.ecc.steps * oinfo->nand.ecc.bytes; //eccbytes
 
 #define BADBLOCK_MARKER_LENGTH    2
 		{
 			unsigned oob_index = BADBLOCK_MARKER_LENGTH;
-			for (i = 0; i < omap_oobinfo.eccbytes; i++, oob_index++) {
-				omap_oobinfo.eccpos[i] = oob_index;
-				if (((i + 1) % oinfo->nand.ecc.bytes) == 0)
-					oob_index++;
+
+			if (mode == OMAP_ECC_BCH8_CODE_HW_DETECTION_SW) {
+				for (i = 0; i < omap_oobinfo.eccbytes; i++, oob_index++) {
+					omap_oobinfo.eccpos[i] = oob_index;
+					if (((i + 1) % oinfo->nand.ecc.bytes) == 0)
+						oob_index++;
+				}
+			} else { /* OMAP_ECC_BCH8_CODE_HW_DETECTION_SW_LEGACY */
+
+				oob_index = minfo->oobsize - oinfo->nand.ecc.steps * oinfo->nand.ecc.bytes;
+
+				for (i = 0; i < oinfo->nand.ecc.steps * oinfo->nand.ecc.bytes; i++)
+				        omap_oobinfo.eccpos[i] = i + oob_index;
 			}
 		}
 
-- 
2.7.4

