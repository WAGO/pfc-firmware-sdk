From 41af8805a45c8d46980a72bf66734423cd5a10e5 Mon Sep 17 00:00:00 2001
From: Heinrich Toews <heinrich.toews@wago.com>
Date: Wed, 7 Nov 2018 10:09:22 +0000
Subject: [PATCH] fs: allow to unmount root mount points

In our AM335x based products we use eMMC as an internal boot device and
as alternative boot peripheral a SD card. When a SD card is detected it will be
checked first for a valid boot configuration. If it fails we fallback to eMMC.

During such a configuration we need to be able to unmount a partition that was
formerly mounted as a root node in order be able to fallback to another
MMC-based boot device. Until now the code forbid us to unmount a root
mountpoint.

This commit removes this restriction. In a barebox shell an unmount on "/"
would still fail for fsdev_umount() would return with -EBUSY.

NOTICE: As we use the same code for AM35xx based products where we only
have 64k of sram we were not able to include RAMFS to be mounted instead as
root node.

Signed-off-by: Heinrich Toews <heinrich.toews@wago.com>
---
 fs/fs.c | 16 +++++++++++-----
 1 file changed, 11 insertions(+), 5 deletions(-)

diff --git a/fs/fs.c b/fs/fs.c
index 2a4d78c..43d1d85 100644
--- a/fs/fs.c
+++ b/fs/fs.c
@@ -2785,16 +2785,15 @@ int umount(const char *pathname)
 {
 	struct fs_device_d *fsdev = NULL, *f;
 	struct path path = {};
+	bool is_root = false;
 	int ret;
 
 	ret = filename_lookup(AT_FDCWD, getname(pathname), LOOKUP_FOLLOW, &path);
 	if (ret)
 		return ret;
 
-	if (path.dentry == d_root) {
-		path_put(&path);
-		return -EBUSY;
-	}
+	if (path.dentry == d_root)
+		is_root = true;
 
 	for_each_fs_device(f) {
 		if (path.dentry == f->vfsmount.mnt_root) {
@@ -2819,7 +2818,14 @@ int umount(const char *pathname)
 		return -EFAULT;
 	}
 
-	return fsdev_umount(fsdev);
+	ret = fsdev_umount(fsdev);
+	if (ret)
+		return ret;
+
+	if (is_root)
+		d_root = NULL;
+
+	return ret;
 }
 EXPORT_SYMBOL(umount);
 
-- 
2.7.4

