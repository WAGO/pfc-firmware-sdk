From cd27d2b17ffd3f2a8f38f8d37bc76c43635d926d Mon Sep 17 00:00:00 2001
From: Oleg Karfich <oleg.karfich@wago.com>
Date: Fri, 20 Apr 2018 14:25:11 +0200
Subject: [PATCH] boards: add wago pfc-am335x based board code

Signed-off-by: Oleg Karfich <oleg.karfich@wago.com>
---
 arch/arm/boards/Makefile                           |   1 +
 arch/arm/boards/wago-pfc-am335x/Makefile           |   3 +
 arch/arm/boards/wago-pfc-am335x/board.c            | 134 +++++++++++++++++++++
 .../defaultenv-pfc-am335x/boot/emmc                |   5 +
 .../wago-pfc-am335x/defaultenv-pfc-am335x/boot/mmc |   5 +
 .../defaultenv-pfc-am335x/boot/nand                |   8 ++
 .../defaultenv-pfc-am335x/init/automount-nand      |  12 ++
 .../defaultenv-pfc-am335x/init/bootsource          |  21 ++++
 arch/arm/boards/wago-pfc-am335x/lowlevel.c         | 116 ++++++++++++++++++
 arch/arm/boards/wago-pfc-am335x/ram-timings.h      | 104 ++++++++++++++++
 arch/arm/mach-omap/Kconfig                         |   6 +
 arch/arm/tools/mach-types                          |   1 +
 images/Makefile.am33xx                             |  24 ++++
 13 files changed, 440 insertions(+)
 create mode 100644 arch/arm/boards/wago-pfc-am335x/Makefile
 create mode 100644 arch/arm/boards/wago-pfc-am335x/board.c
 create mode 100644 arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/emmc
 create mode 100644 arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/mmc
 create mode 100644 arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/nand
 create mode 100644 arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/automount-nand
 create mode 100644 arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/bootsource
 create mode 100644 arch/arm/boards/wago-pfc-am335x/lowlevel.c
 create mode 100644 arch/arm/boards/wago-pfc-am335x/ram-timings.h

diff --git a/arch/arm/boards/Makefile b/arch/arm/boards/Makefile
index 0c21002..a8b9344 100644
--- a/arch/arm/boards/Makefile
+++ b/arch/arm/boards/Makefile
@@ -154,3 +154,4 @@ obj-$(CONFIG_MACH_VF610_TWR)			+= freescale-vf610-twr/
 obj-$(CONFIG_MACH_ZII_RDU1)			+= zii-imx51-rdu1/
 obj-$(CONFIG_MACH_ZII_RDU2)			+= zii-imx6q-rdu2/
 obj-$(CONFIG_MACH_ZII_VF610_DEV)		+= zii-vf610-dev/
+obj-$(CONFIG_MACH_WAGO_PFC_AM335X)		+= wago-pfc-am335x/
diff --git a/arch/arm/boards/wago-pfc-am335x/Makefile b/arch/arm/boards/wago-pfc-am335x/Makefile
new file mode 100644
index 0000000..1355b5f
--- /dev/null
+++ b/arch/arm/boards/wago-pfc-am335x/Makefile
@@ -0,0 +1,3 @@
+lwl-y += lowlevel.o
+obj-y += board.o
+bbenv-y += defaultenv-pfc-am335x
diff --git a/arch/arm/boards/wago-pfc-am335x/board.c b/arch/arm/boards/wago-pfc-am335x/board.c
new file mode 100644
index 0000000..2dfe561
--- /dev/null
+++ b/arch/arm/boards/wago-pfc-am335x/board.c
@@ -0,0 +1,134 @@
+/*
+ * Copyright (C) 2015 Wadim Egorov, PHYTEC Messtechnik GmbH
+ *
+ * Copyright (C) 2018 WAGO Kontakttechnik GmbH & Co. KG <http://global.wago.com>
+ * Author: Oleg Karfich <oleg.karfich@wago.com>
+ *
+ * Device initialization for the following pfc board variants:
+ *   - 750-810x	PFC100
+ *   - 750-8208	PFC200
+ *   - 750-821x	PFC200
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <bootsource.h>
+#include <common.h>
+#include <nand.h>
+#include <net.h>
+#include <init.h>
+#include <io.h>
+#include <linux/sizes.h>
+#include <envfs.h>
+#include <asm/armlinux.h>
+#include <generated/mach-types.h>
+#include <mach/am33xx-generic.h>
+#include <mach/am33xx-silicon.h>
+#include <mach/bbu.h>
+
+static int pfc_coredevice_init(void)
+{
+	if (!of_machine_is_compatible("wago,am335x-pfc"))
+		return 0;
+
+	am33xx_register_ethaddr(0, 0);
+
+	return 0;
+}
+coredevice_initcall(pfc_coredevice_init);
+
+static struct omap_barebox_part pfc_barebox_part = {
+	.nand_offset = SZ_512K,
+	.nand_size = SZ_512K,
+};
+
+static char *xloadslots[] = {
+	"/dev/nand0.mlo0.bb",
+	"/dev/nand0.mlo1.bb",
+	"/dev/nand0.mlo2.bb",
+	"/dev/nand0.mlo3.bb"
+};
+
+static char *nandslots[] = {
+	"/dev/nand0.boot0.bb",
+	"/dev/nand0.boot1.bb",
+	"/dev/nand0.boot2.bb",
+	"/dev/nand0.boot3.bb"
+};
+
+#define ETH_DEVICE		0
+#define ETHADDR_EEPROM_OFFSET	512
+#define ETHADDR_EEPROM_LENGTH	6
+static int pfc_set_ethaddr(void)
+{
+	struct cdev *cdev;
+	u8 mac[6];
+	int ret;
+
+	cdev = cdev_by_name("eeprom0");
+	if (!cdev)
+		return -ENODEV;
+
+	ret = cdev_read(cdev, mac, ETHADDR_EEPROM_LENGTH, ETHADDR_EEPROM_OFFSET,
+			 0);
+	if (ret < 0)
+		return ret;
+
+	eth_register_ethaddr(ETH_DEVICE, mac);
+
+	return 0;
+
+}
+
+static int pfc_devices_init(void)
+{
+	int ret;
+
+	if (!of_machine_is_compatible("wago,am335x-pfc"))
+		return 0;
+
+	if (bootsource_get() == BOOTSOURCE_MMC) {
+		if (bootsource_get_instance() == 0) {
+			omap_set_bootmmc_devname("mmc0");
+		} else {
+			omap_set_bootmmc_devname("mmc1");
+			am33xx_bbu_emmc_mlo_register_handler("mlo.emmc",
+								"/dev/mmc1");
+		}
+	} else if (bootsource_get() == BOOTSOURCE_NAND) {
+		am33xx_bbu_nand_xloadslots_register_handler("mlo.nand",
+					xloadslots, ARRAY_SIZE(xloadslots));
+		am33xx_bbu_nand_slots_register_handler("barebox.nand", nandslots,
+							ARRAY_SIZE(nandslots));
+	}
+
+	of_device_enable_path("/chosen/environment-sd");
+	omap_set_barebox_part(&pfc_barebox_part);
+	defaultenv_append_directory(defaultenv_pfc_am335x);
+
+	armlinux_set_architecture(MACH_TYPE_PFC_AM335X);
+	barebox_set_hostname("pfc");
+
+	/* Set MAC address for ethernet0 from eeprom. If no valid MAC address
+	 * could read, use the randomized one.
+	 */
+	ret = pfc_set_ethaddr();
+	if (ret < 0)
+		pr_info("no valid ethaddr in eeprom found. Using randomized "
+			"MAC address\n");
+
+	if (IS_ENABLED(CONFIG_SHELL_NONE))
+		return am33xx_of_register_bootdevice();
+
+	return 0;
+}
+device_initcall(pfc_devices_init);
diff --git a/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/emmc b/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/emmc
new file mode 100644
index 0000000..4b68b4a
--- /dev/null
+++ b/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/emmc
@@ -0,0 +1,5 @@
+#!/bin/sh
+
+global.bootm.image=/mnt/mmc1.0/linuximage
+global.bootm.oftree=/mnt/mmc1.0/oftree
+global.linux.bootargs.dyn.root="root=/dev/mmcblk1p2 rw rootwait"
diff --git a/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/mmc b/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/mmc
new file mode 100644
index 0000000..6a8f129
--- /dev/null
+++ b/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/mmc
@@ -0,0 +1,5 @@
+#!/bin/sh
+
+global.bootm.image=/mnt/mmc0.0/linuximage
+global.bootm.oftree=/mnt/mmc0.0/oftree
+global.linux.bootargs.dyn.root="root=/dev/mmcblk0p2 rw rootwait"
diff --git a/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/nand b/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/nand
new file mode 100644
index 0000000..4558424
--- /dev/null
+++ b/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/boot/nand
@@ -0,0 +1,8 @@
+#!/bin/sh
+
+ubidata_boot="/mnt/ubidata_boot"
+
+global.bootm.image="${ubidata_boot}/linuximage"
+global.bootm.oftree="${ubidata_boot}/oftree"
+
+global.linux.bootargs.dyn.root="root=ubi0:rootfs0 rw ubi.mtd=ubidata rootfstype=ubifs"
diff --git a/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/automount-nand b/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/automount-nand
new file mode 100644
index 0000000..e394c60
--- /dev/null
+++ b/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/automount-nand
@@ -0,0 +1,12 @@
+#!/bin/sh
+
+# automount nand boot vfat partition
+
+ubi_dev=/dev/nand0.ubidata
+ubi_boot_volume=/dev/nand0.ubidata.ubi.boot
+mountpoint=/mnt/ubidata_boot
+
+if [ -e ${ubi_dev} ]; then
+        automount -d ${mountpoint} "[ ! -e ${ubi_dev}.ubi ] && ubiattach
+		${ubi_dev}; mount -t ubifs ${ubi_boot_volume} ${mountpoint}"
+fi
diff --git a/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/bootsource b/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/bootsource
new file mode 100644
index 0000000..254033b
--- /dev/null
+++ b/arch/arm/boards/wago-pfc-am335x/defaultenv-pfc-am335x/init/bootsource
@@ -0,0 +1,21 @@
+#!/bin/sh
+
+if [ -n "$nv.boot.default" ]; then
+	exit
+fi
+
+if [ -e /dev/mmc1.0 ]; then
+	nvmem="emmc"
+else
+	nvmem="nand"
+fi
+
+if [ $bootsource = mmc -a $bootsource_instance = 1 ]; then
+	global.boot.default="emmc mmc net"
+elif [ $bootsource = mmc -a $bootsource_instance = 0 ]; then
+	global.boot.default="mmc $nvmem net"
+elif [ $bootsource = nand ]; then
+	global.boot.default="nand mmc net"
+elif [ $bootsource = net ]; then
+	global.boot.default="net $nvmem mmc"
+fi
diff --git a/arch/arm/boards/wago-pfc-am335x/lowlevel.c b/arch/arm/boards/wago-pfc-am335x/lowlevel.c
new file mode 100644
index 0000000..909fde7
--- /dev/null
+++ b/arch/arm/boards/wago-pfc-am335x/lowlevel.c
@@ -0,0 +1,116 @@
+/*
+ * Copyright (C) 2015 Wadim Egorov, PHYTEC Messtechnik GmbH
+ *
+ * Copyright (C) 2018 WAGO Kontakttechnik GmbH & Co. KG <http://global.wago.com>
+ * Author: Oleg Karfich <oleg.karfich@wago.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <common.h>
+#include <linux/sizes.h>
+#include <io.h>
+#include <init.h>
+#include <asm/barebox-arm-head.h>
+#include <asm/barebox-arm.h>
+#include <mach/am33xx-silicon.h>
+#include <mach/am33xx-clock.h>
+#include <mach/generic.h>
+#include <mach/sdrc.h>
+#include <mach/sys_info.h>
+#include <mach/syslib.h>
+#include <mach/am33xx-mux.h>
+#include <mach/am33xx-generic.h>
+#include <mach/wdt.h>
+#include <debug_ll.h>
+
+#include "ram-timings.h"
+
+/**
+ * @brief The basic entry point for board initialization.
+ *
+ * This is called as part of machine init (after arch init).
+ * This is again called with stack in SRAM, so not too many
+ * constructs possible here.
+ *
+ * @return void
+ */
+static noinline void am33xx_pfc_sram_init(void *fdt, int sdram)
+{
+	/*
+	 * WDT1 is already running when the bootloader gets control
+	 * Disable it to avoid "random" resets
+	 */
+	writel(WDT_DISABLE_CODE1, AM33XX_WDT_REG(WSPR));
+	while (readl(AM33XX_WDT_REG(WWPS)) != 0x0);
+
+	writel(WDT_DISABLE_CODE2, AM33XX_WDT_REG(WSPR));
+	while (readl(AM33XX_WDT_REG(WWPS)) != 0x0);
+
+	am33xx_pll_init(MPUPLL_M_600, DDRPLL_M_400);
+
+	am335x_sdram_init(DDR_IOCTRL, &pfc_timings[sdram].cmd_ctrl,
+			&pfc_timings[sdram].regs,
+			&pfc_timings[sdram].data);
+
+	am33xx_uart_soft_reset((void *)AM33XX_UART0_BASE);
+	am33xx_enable_uart0_pin_mux();
+	omap_uart_lowlevel_init((void *)AM33XX_UART0_BASE);
+	putc_ll('>');
+
+	am335x_barebox_entry(fdt);
+}
+
+static noinline void am33xx_pfc_board_entry(unsigned long bootinfo, int sdram,
+					void *fdt)
+{
+	am33xx_save_bootinfo((void *)bootinfo);
+
+	arm_cpu_lowlevel_init();
+
+	/*
+	 * Setup C environment, the board init code uses global variables.
+	 * Stackpointer has already been initialized by the ROM code.
+	 */
+	relocate_to_current_adr();
+	setup_c();
+	am33xx_pfc_sram_init(fdt, sdram);
+}
+
+#define PFC_ENTRY_MLO(name, fdt_name, sdram)				\
+	ENTRY_FUNCTION(name, bootinfo, r1, r2)				\
+	{								\
+		extern char __dtb_z_##fdt_name##_start[];		\
+		void *fdt = __dtb_z_##fdt_name##_start +		\
+			get_runtime_offset();				\
+		am33xx_pfc_board_entry(bootinfo, sdram, fdt);		\
+	}
+
+#define PFC_ENTRY(name, fdt_name)					\
+	ENTRY_FUNCTION(name, r0, r1, r2)				\
+	{								\
+		extern char __dtb_z_##fdt_name##_start[];		\
+		void *fdt = __dtb_z_##fdt_name##_start +		\
+			get_runtime_offset();				\
+		barebox_arm_entry(0x80000000, mem_size, fdt);		\
+	}
+
+PFC_ENTRY_MLO(start_am33xx_pfc_750_810x_sram_256mb, am335x_pfc_750_810x_mlo,
+								PFC_DDR3_256MB);
+PFC_ENTRY_MLO(start_am33xx_pfc_750_8208_sram_256mb, am335x_pfc_750_8208_mlo,
+								PFC_DDR3_256MB);
+PFC_ENTRY_MLO(start_am33xx_pfc_750_821x_sram_512mb, am335x_pfc_750_821x_mlo,
+								PFC_DDR3_512MB);
+
+PFC_ENTRY(start_am33xx_pfc_750_810x_sdram, am335x_pfc_750_810x, SZ_256M);
+PFC_ENTRY(start_am33xx_pfc_750_8208_sdram, am335x_pfc_750_8208, SZ_256M);
+PFC_ENTRY(start_am33xx_pfc_750_821x_sdram, am335x_pfc_750_821x, SZ_512M);
diff --git a/arch/arm/boards/wago-pfc-am335x/ram-timings.h b/arch/arm/boards/wago-pfc-am335x/ram-timings.h
new file mode 100644
index 0000000..3fd1b78
--- /dev/null
+++ b/arch/arm/boards/wago-pfc-am335x/ram-timings.h
@@ -0,0 +1,104 @@
+/*
+ * Copyright (C) 2015 Wadim Egorov, PHYTEC Messtechnik GmbH
+ *
+ * Copyright (C) 2018 WAGO Kontakttechnik GmbH & Co. KG <http://global.wago.com>
+ * Author: Oleg Karfich <oleg.karfich@wago.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef __RAM_TIMINGS_H
+#define __RAM_TIMINGS_H
+
+#define DDR_IOCTRL	0x18B
+
+struct am335x_sdram_timings {
+	struct am33xx_emif_regs regs;
+	struct am33xx_ddr_data data;
+	struct am33xx_cmd_control cmd_ctrl;
+};
+
+enum {
+	PFC_DDR3_256MB,
+	PFC_DDR3_512MB,
+};
+
+struct am335x_sdram_timings pfc_timings[] = {
+	[PFC_DDR3_256MB] = {
+		.regs = {
+			.emif_read_latency	= 0x100007,
+			.emif_tim1		= 0x888A39A,
+			.emif_tim2		= 0x223F7FDA,
+			.emif_tim3		= 0x501F843F,
+			.sdram_config		= 0x61C04AB2,
+			.sdram_ref_ctrl		= 0x93B,
+			.ocp_config		= 0x00141414,
+			.zq_config		= 0x50074BE4,
+			.sdram_config2		= 0x0,
+		},
+		.data = {
+			.rd_slave_ratio0        = 0x38,
+			.wr_dqs_slave_ratio0    = 0x44,
+			.fifo_we_slave_ratio0	= 0x94,
+			.wr_slave_ratio0        = 0x7D,
+			.use_rank0_delay	= 0x01,
+			.dll_lock_diff0		= 0x0,
+		},
+		.cmd_ctrl = {
+			.slave_ratio0	= 0x80,
+			.dll_lock_diff0	= 0x1,
+			.invert_clkout0	= 0x0,
+			.slave_ratio1	= 0x80,
+			.dll_lock_diff1	= 0x1,
+			.invert_clkout1	= 0x0,
+			.slave_ratio2	= 0x80,
+			.dll_lock_diff2	= 0x1,
+			.invert_clkout2	= 0x0,
+		},
+	},
+
+	[PFC_DDR3_512MB] = {
+		.regs = {
+			.emif_read_latency	= 0x100007,
+			.emif_tim1		= 0x0AAAD4DB,
+			.emif_tim2		= 0x226B7FDA,
+			.emif_tim3		= 0x501F867F,
+			.sdram_config		= 0x61C04B32,
+			.sdram_ref_ctrl		= 0x20000064,
+			.ocp_config		= 0x00141414,
+			.zq_config		= 0x50074BE4,
+			.sdram_config2		= 0x0,
+		},
+		.data = {
+			.rd_slave_ratio0        = 0x38,
+			.wr_dqs_slave_ratio0    = 0x44,
+			.fifo_we_slave_ratio0	= 0x94,
+			.wr_slave_ratio0        = 0x7D,
+			.use_rank0_delay	= 0x01,
+			.dll_lock_diff0		= 0x0,
+		},
+		.cmd_ctrl = {
+			.slave_ratio0	= 0x80,
+			.dll_lock_diff0	= 0x1,
+			.invert_clkout0	= 0x0,
+			.slave_ratio1	= 0x80,
+			.dll_lock_diff1	= 0x1,
+			.invert_clkout1	= 0x0,
+			.slave_ratio2	= 0x80,
+			.dll_lock_diff2	= 0x1,
+			.invert_clkout2	= 0x0,
+		},
+
+	},
+};
+
+#endif
diff --git a/arch/arm/mach-omap/Kconfig b/arch/arm/mach-omap/Kconfig
index c451cf0..9930fc1 100644
--- a/arch/arm/mach-omap/Kconfig
+++ b/arch/arm/mach-omap/Kconfig
@@ -184,6 +184,12 @@ config MACH_VSCOM_BALTOS
 	help
 	  Say Y here if you are using a am335x based VScom Baltos devices
 
+config MACH_WAGO_PFC_AM335X
+	bool "Wago AM335X PFCs"
+	select ARCH_AM33XX
+	help
+	  Say Y here if you are using a am335x based Wago PFC
+
 endif
 
 source arch/arm/boards/phytec-som-am335x/Kconfig
diff --git a/arch/arm/tools/mach-types b/arch/arm/tools/mach-types
index 01bc7aa..7ad2b8d 100644
--- a/arch/arm/tools/mach-types
+++ b/arch/arm/tools/mach-types
@@ -4723,3 +4723,4 @@ ecv4			MACH_ECV4		ECV4			4768
 webbg3flight		MACH_WEBBG3FLIGHT	WEBBG3FLIGHT		4769
 sbc_phycore_am335x	MACH_SBC_PHYCORE_AM335X	SBC_PHYCORE_AM335X	4770
 tsc			MACH_TSC		TSC			4771
+pfc_am335x		MACH_PFC_AM335X		PFC_AM335X		9002
diff --git a/images/Makefile.am33xx b/images/Makefile.am33xx
index 50fa019..14fff3c 100644
--- a/images/Makefile.am33xx
+++ b/images/Makefile.am33xx
@@ -135,6 +135,30 @@ pblx-$(CONFIG_MACH_VSCOM_BALTOS) += start_am33xx_baltos_sram
 FILE_barebox-am33xx-baltos-mlo.img = start_am33xx_baltos_sram.pblx.mlo
 am33xx-mlo-$(CONFIG_MACH_VSCOM_BALTOS) += barebox-am33xx-baltos-mlo.img
 
+pblx-$(CONFIG_MACH_WAGO_PFC_AM335X) += start_am33xx_pfc_750_810x_sdram
+FILE_barebox-am33xx-pfc-750-810x.img = start_am33xx_pfc_750_810x_sdram.pblx
+am33xx-barebox-$(CONFIG_MACH_WAGO_PFC_AM335X) += barebox-am33xx-pfc-750-810x.img
+
+pblx-$(CONFIG_MACH_WAGO_PFC_AM335X) += start_am33xx_pfc_750_810x_sram_256mb
+FILE_barebox-am33xx-pfc-750-810x-mlo.img = start_am33xx_pfc_750_810x_sram_256mb.pblx.mlo
+am33xx-mlo-$(CONFIG_MACH_WAGO_PFC_AM335X) += barebox-am33xx-pfc-750-810x-mlo.img
+
+pblx-$(CONFIG_MACH_WAGO_PFC_AM335X) += start_am33xx_pfc_750_8208_sdram
+FILE_barebox-am33xx-pfc-750-8208.img = start_am33xx_pfc_750_8208_sdram.pblx
+am33xx-barebox-$(CONFIG_MACH_WAGO_PFC_AM335X) += barebox-am33xx-pfc-750-8208.img
+
+pblx-$(CONFIG_MACH_WAGO_PFC_AM335X) += start_am33xx_pfc_750_8208_sram_256mb
+FILE_barebox-am33xx-pfc-750-8208-mlo.img = start_am33xx_pfc_750_8208_sram_256mb.pblx.mlo
+am33xx-mlo-$(CONFIG_MACH_WAGO_PFC_AM335X) += barebox-am33xx-pfc-750-8208-mlo.img
+
+pblx-$(CONFIG_MACH_WAGO_PFC_AM335X) += start_am33xx_pfc_750_821x_sdram
+FILE_barebox-am33xx-pfc-750-821x.img = start_am33xx_pfc_750_821x_sdram.pblx
+am33xx-barebox-$(CONFIG_MACH_WAGO_PFC_AM335X) += barebox-am33xx-pfc-750-821x.img
+
+pblx-$(CONFIG_MACH_WAGO_PFC_AM335X) += start_am33xx_pfc_750_821x_sram_512mb
+FILE_barebox-am33xx-pfc-750-821x-mlo.img = start_am33xx_pfc_750_821x_sram_512mb.pblx.mlo
+am33xx-mlo-$(CONFIG_MACH_WAGO_PFC_AM335X) += barebox-am33xx-pfc-750-821x-mlo.img
+
 ifdef CONFIG_OMAP_BUILD_IFT
 image-y += $(am33xx-mlo-y)
 else
-- 
2.7.4

