From 9e4af43b959602c408b295a0b8cbb057a34db5a2 Mon Sep 17 00:00:00 2001
From: Oleg Karfich <oleg.karfich@wago.com>
Date: Wed, 6 Jun 2018 09:09:58 +0200
Subject: [PATCH] drivers: misc: add bootmatrix driver

Signed-off-by: Oleg Karfich <oleg.karfich@wago.com>
---
 drivers/misc/Kconfig      |   6 +
 drivers/misc/bootmatrix.c | 351 ++++++++++++++++++++++++++++++++++++++++++++++
 include/bootmatrix.h      |  13 ++
 3 files changed, 370 insertions(+)
 create mode 100644 drivers/misc/bootmatrix.c
 create mode 100644 include/bootmatrix.h

diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 8d3d0a8..c527235 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -28,6 +28,12 @@ config XSECTION
 	  Controls the XSECTION items that are located e.g. in eeprom like
 	  devconf, boot-mode-id and ethaddr.
 
+config BOOTMATRIX
+	bool "Bootmatrix Driver"
+	help
+	  Detects the boot mode based on pressed keys and exports the boot mode
+	  as a device parameter.
+
 endif
 
 endmenu
diff --git a/drivers/misc/bootmatrix.c b/drivers/misc/bootmatrix.c
new file mode 100644
index 0000000..072e364
--- /dev/null
+++ b/drivers/misc/bootmatrix.c
@@ -0,0 +1,351 @@
+/*
+ * Copyright (C) 2018 WAGO Kontakttechnik GmbH & Co. KG <http://global.wago.com>
+ * Author: Oleg Karfich <oleg.karfich@wago.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <common.h>
+#include <driver.h>
+#include <init.h>
+#include <malloc.h>
+#include <of.h>
+#include <libbb.h>
+#include <fcntl.h>
+#include <linux/err.h>
+#include <gpio.h>
+#include <of_gpio.h>
+#include <linux/types.h>
+#include <linux/bitmap.h>
+#include <bootmatrix.h>
+
+#define MAX_KEY_BITS 8
+
+enum bootmatrix_states {
+	INIT,
+	MULTI_KEY_MODE,
+	SINGLE_KEY_MODE_STAGE1,
+	SINGLE_KEY_MODE_STAGE2,
+};
+
+enum bootmatrix_key_num {
+	RST = 0,
+	RUN,
+	STOP,
+	RESET,
+};
+
+struct bootmatrix_key {
+	int gpio;
+	int active_low;
+};
+
+struct bootmatrix {
+	struct device_d dev;
+	struct bootmatrix_key *keys;
+	struct param_d *param_mode;
+	int num_bootmatrix_keys;
+	int rst_timeout;
+	int mode;
+	bool single_key_mode;
+	DECLARE_BITMAP(matrix, MAX_KEY_BITS);
+};
+
+struct bootmatrix *bootmatrix;
+
+static void bootmatrix_get_current_key_values(struct bootmatrix *bootmatrix)
+{
+	int i, val, pressed;
+	struct bootmatrix_key *key;
+
+	bitmap_zero(bootmatrix->matrix, MAX_KEY_BITS);
+
+	for (i = RST; i < bootmatrix->num_bootmatrix_keys; i++) {
+
+		key = &bootmatrix->keys[i];
+		val = gpio_get_value(key->gpio);
+		pressed = val != key->active_low;
+
+		if (pressed)
+			set_bit(i, bootmatrix->matrix);
+	}
+}
+
+/* We implement the following two logics to detect the bootmode:
+ *
+ * SINGLE_KEY_MODE: some device have only one RST-key implemented. In this case
+ * the production mode is detected when the half of the configured timeout is
+ * reached. The setupfw mode is detected when the full configured timeout is
+ * reached.
+ *
+ * MULTI_KEY_MODE: this mode is the original mode for devices that have the keys
+ * RUN,STOP,RESET and RST implemented. For entering the setupfw mode one has to
+ * hold RST and RESET for a minimum of 7 sec. If one releases the RESET key the
+ * device enters production mode. In all other cases we will fallback into the
+ * default mode.
+ */
+static enum bootmatrix_mode bootmatrix_detect_mode(struct bootmatrix
+							*bootmatrix)
+{
+	enum bootmatrix_mode mode = DEFAULT;
+	enum bootmatrix_states state = INIT;
+	unsigned long *matrix = bootmatrix->matrix;
+	bool exit = false;
+	bool single_key = bootmatrix->single_key_mode;
+	int timeout = bootmatrix->rst_timeout;
+	uint64_t start;
+
+	bootmatrix_get_current_key_values(bootmatrix);
+	if (test_bit(RST, matrix) && (test_bit(RESET, matrix) || single_key)) {
+
+		start = get_time_ns();
+		while (!exit) {
+
+			bootmatrix_get_current_key_values(bootmatrix);
+			switch (state) {
+			case INIT:
+				if (!test_bit(RST, matrix)) {
+					mode = DEFAULT;
+					exit = true;
+				} else if (single_key && test_bit(RST, matrix)) {
+					state = SINGLE_KEY_MODE_STAGE1;
+				} else if (test_bit(RST, matrix) &&
+						test_bit(RESET, matrix)) {
+					state = MULTI_KEY_MODE;
+				}
+				break;
+
+			case SINGLE_KEY_MODE_STAGE1:
+				if (!test_bit(RST, matrix)) {
+					mode = DEFAULT;
+					exit = true;
+				} else if (is_timeout(start, (timeout / 2) *
+								      SECOND)) {
+					mode = PRODUCTION;
+					state = SINGLE_KEY_MODE_STAGE2;
+				}
+				break;
+
+			case SINGLE_KEY_MODE_STAGE2:
+				if (!test_bit(RST, matrix)) {
+					exit = true;
+				} else if (is_timeout(start, timeout * SECOND)) {
+					mode = SETUPFW;
+					exit = true;
+				}
+				break;
+
+			case MULTI_KEY_MODE:
+				if (!test_bit(RST, matrix)) {
+					mode = DEFAULT;
+					exit = true;
+				} else if (!test_bit(RESET, matrix) &&
+							test_bit(STOP, matrix)) {
+					mode = PRODUCTION;
+					exit = true;
+				} else if (is_timeout(start, timeout * SECOND)) {
+					mode = SETUPFW;
+					exit = true;
+				}
+				break;
+			}
+		}
+	}
+
+	return mode;
+}
+
+enum bootmatrix_mode bootmatrix_get_mode()
+{
+	if (!bootmatrix)
+		return -ENODEV;
+
+	if (bootmatrix->mode == UNKNOWN)
+		return -EPROBE_DEFER;
+
+	return bootmatrix->mode;
+}
+
+static int bootmatrix_probe_key(struct device_node *node,
+					struct bootmatrix_key *key, char *name)
+{
+	struct device_node *child;
+	enum of_gpio_flags flags;
+	int ret = 0;
+
+	child = of_find_node_by_name(node, name);
+	if (!child) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	key->gpio = of_get_named_gpio_flags(child, "gpios", 0, &flags);
+	if (key->gpio < 0) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	if (flags & OF_GPIO_ACTIVE_LOW)
+		key->active_low = 1;
+
+	ret = gpio_request(key->gpio, name);
+	if (ret)
+		goto out;
+
+	ret = gpio_direction_input(key->gpio);
+
+out:
+	return ret < 0 ? ret : 0;
+}
+
+static int bootmatrix_probe_dt(struct bootmatrix *bootmatrix,
+				   struct device_node *node)
+{
+	int ret = 0;
+
+	bootmatrix->num_bootmatrix_keys = of_get_child_count(node);
+	bootmatrix->keys = xzalloc(bootmatrix->num_bootmatrix_keys *
+						sizeof(*bootmatrix->keys));
+
+	if (bootmatrix->num_bootmatrix_keys < 1) {
+		ret = -ENODEV;
+		goto out_free;
+	} else if (bootmatrix->num_bootmatrix_keys == 1) {
+		bootmatrix->single_key_mode = true;
+	} else {
+		bootmatrix->single_key_mode = false;
+	}
+
+	ret = of_property_read_u32(node, "rst-timeout-secs",
+						&bootmatrix->rst_timeout);
+	if (ret)
+		goto out_free;
+
+	ret = bootmatrix_probe_key(node, &bootmatrix->keys[RST], "rst");
+	if (ret)
+		goto out_free;
+
+	/* in single-key-mode we need only the rst key. if we found this key
+	 * terminate here.
+	 */
+	if (bootmatrix->single_key_mode)
+		goto out;
+
+	ret = bootmatrix_probe_key(node, &bootmatrix->keys[RUN], "run");
+	if (ret)
+		goto out_free;
+
+	ret = bootmatrix_probe_key(node, &bootmatrix->keys[STOP], "stop");
+	if (ret)
+		goto out_free;
+
+	ret = bootmatrix_probe_key(node, &bootmatrix->keys[RESET], "reset");
+	if (ret)
+		goto out_free;
+
+out:
+	return 0;
+
+out_free:
+	free(bootmatrix->keys);
+	return ret;
+}
+
+static const char *bootmatrix_mode_names[] = {
+	"unknown",
+	"default",
+	"production",
+	"setupfw",
+};
+
+static int bootmatrix_probe(struct device_d *dev)
+{
+	int ret;
+	const char *alias;
+	struct device_node *np = dev->device_node;
+
+	bootmatrix = xzalloc(sizeof(*bootmatrix));
+	bootmatrix->dev.id = DEVICE_ID_SINGLE;
+	bootmatrix->dev.parent = dev;
+	dev->priv = bootmatrix;
+
+	if (!np) {
+		ret = -ENODEV;
+		goto out;
+	}
+
+	ret = bootmatrix_probe_dt(bootmatrix, np);
+	if (ret)
+		goto out;
+
+	alias = of_alias_get(np);
+	if (!alias) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	safe_strncpy(bootmatrix->dev.name, alias, MAX_DRIVER_NAME);
+
+	ret = register_device(&bootmatrix->dev);
+	if (ret)
+		goto out;
+
+	bootmatrix->param_mode = dev_add_param_enum(&bootmatrix->dev, "mode",
+				NULL, NULL,
+				&bootmatrix->mode,
+				bootmatrix_mode_names,
+				ARRAY_SIZE(bootmatrix_mode_names),
+				bootmatrix);
+
+	if (IS_ERR(bootmatrix->param_mode)) {
+		ret = -ENODEV;
+		goto out_unreg;
+	}
+
+	bootmatrix->mode = bootmatrix_detect_mode(bootmatrix);
+
+	return 0;
+
+out_unreg:
+	unregister_device(&bootmatrix->dev);
+
+out:
+	free(bootmatrix);
+	dev_err(dev, "failed to probe %d\n", ret);
+
+	return ret;
+}
+
+static void bootmatrix_remove(struct device_d *dev)
+{
+	struct bootmatrix *bootmatrix = dev->priv;
+
+	dev_remove_parameters(&bootmatrix->dev);
+	unregister_device(&bootmatrix->dev);
+	free(bootmatrix->keys);
+	free(bootmatrix);
+}
+
+static __maybe_unused struct of_device_id bootmatrix_ids[] = {
+	{
+		.compatible = "bootmatrix",
+	}, {
+		/* sentinel */
+	}
+};
+
+static struct driver_d bootmatrix_driver = {
+	.name = "bootmatrix",
+	.probe = bootmatrix_probe,
+	.remove = bootmatrix_remove,
+	.of_compatible = DRV_OF_COMPAT(bootmatrix_ids),
+};
+device_platform_driver(bootmatrix_driver);
diff --git a/include/bootmatrix.h b/include/bootmatrix.h
new file mode 100644
index 0000000..b71121a
--- /dev/null
+++ b/include/bootmatrix.h
@@ -0,0 +1,13 @@
+#ifndef __BOOTMATRIX_H
+#define __BOOTMATRIX_H
+
+enum bootmatrix_mode {
+	UNKNOWN = 0,
+	DEFAULT,
+	PRODUCTION,
+	SETUPFW,
+};
+
+enum bootmatrix_mode bootmatrix_get_mode(void);
+
+#endif /* __BOOTMATRIX_H */
-- 
2.7.4

