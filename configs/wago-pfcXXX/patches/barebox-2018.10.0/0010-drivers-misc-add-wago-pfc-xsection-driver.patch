From 87ecc47cb94ac8816bcfe5dd8f8f04509de853bb Mon Sep 17 00:00:00 2001
From: Oleg Karfich <oleg.karfich@wago.com>
Date: Wed, 23 May 2018 12:33:34 +0200
Subject: [PATCH] drivers :misc: add wago pfc xsection driver

Signed-off-by: Oleg Karfich <oleg.karfich@wago.com>
---
 drivers/misc/Kconfig    |  10 ++
 drivers/misc/Makefile   |   2 +
 drivers/misc/xsection.c | 341 ++++++++++++++++++++++++++++++++++++++++++++++++
 include/xsection.h      |  16 +++
 4 files changed, 369 insertions(+)
 create mode 100644 drivers/misc/xsection.c
 create mode 100644 include/xsection.h

diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 6640a70..8d3d0a8 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -20,4 +20,14 @@ config STATE_DRV
 	depends on OFDEVICE
 	depends on STATE
 
+if MACH_WAGO_PFC_AM335X
+
+config XSECTION
+	bool "Xsection driver"
+	help
+	  Controls the XSECTION items that are located e.g. in eeprom like
+	  devconf, boot-mode-id and ethaddr.
+
+endif
+
 endmenu
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 487e4b8..db9f57d 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -5,3 +5,5 @@
 obj-$(CONFIG_JTAG)		+= jtag.o
 obj-$(CONFIG_SRAM)		+= sram.o
 obj-$(CONFIG_STATE_DRV)		+= state.o
+obj-$(CONFIG_XSECTION)		+= xsection.o
+obj-$(CONFIG_BOOTMATRIX) 	+= bootmatrix.o
diff --git a/drivers/misc/xsection.c b/drivers/misc/xsection.c
new file mode 100644
index 0000000..e0894e0
--- /dev/null
+++ b/drivers/misc/xsection.c
@@ -0,0 +1,341 @@
+/*
+ * Copyright (C) 2018 WAGO Kontakttechnik GmbH & Co. KG <http://global.wago.com>
+ * Author: Oleg Karfich <oleg.karfich@wago.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <common.h>
+#include <driver.h>
+#include <init.h>
+#include <malloc.h>
+#include <of.h>
+#include <libbb.h>
+#include <fcntl.h>
+#include <linux/err.h>
+#include <net.h>
+#include <xsection.h>
+
+struct xsection_item {
+	struct cdev *cdev;
+	char *value_param;
+};
+
+struct xsection {
+	struct device_d dev;
+	struct xsection_item boot_mode_id;
+	struct xsection_item devconf;
+	struct xsection_item ethaddr1;
+	struct xsection_item ethaddr2;
+};
+
+static struct xsection *xsection;
+
+static int xsection_access_item(struct xsection_item *xitem, void *buf,
+								int flags)
+{
+	int ret = 0;
+
+	if (!xitem || !buf || flags < 0)
+		return -EINVAL;
+
+	switch (flags) {
+	case O_RDONLY:
+		ret = cdev_read(xitem->cdev, buf, xitem->cdev->size, 0, 0);
+		break;
+	case O_WRONLY:
+		ret = cdev_write(xitem->cdev, buf, xitem->cdev->size, 0, 0);
+		break;
+	}
+
+	return ret;
+}
+
+int xsection_get_boot_mode_id(u8 *buf)
+{
+	return xsection_access_item(&xsection->boot_mode_id, buf, O_RDONLY);
+}
+
+int xsection_set_boot_mode_id(u8 *value)
+{
+	return xsection_access_item(&xsection->boot_mode_id, value,
+								O_WRONLY);
+}
+
+int xsection_get_devconf(u16 *buf)
+{
+	return xsection_access_item(&xsection->devconf, buf, O_RDONLY);
+}
+
+int xsection_set_devconf(u16 *value)
+{
+	return xsection_access_item(&xsection->devconf, value, O_WRONLY);
+}
+
+int xsection_get_ethaddr1(u8 ethaddr[6])
+{
+	return xsection_access_item(&xsection->ethaddr1, ethaddr, O_RDONLY);
+}
+
+int xsection_set_ethaddr1(u8 ethaddr[6])
+{
+	return xsection_access_item(&xsection->ethaddr1, ethaddr, O_WRONLY);
+}
+
+int xsection_get_ethaddr2(u8 ethaddr[6])
+{
+	return xsection_access_item(&xsection->ethaddr2, ethaddr, O_RDONLY);
+}
+
+int xsection_set_ethaddr2(u8 ethaddr[6])
+{
+	return xsection_access_item(&xsection->ethaddr2, ethaddr, O_WRONLY);
+}
+
+static int xsection_param_get_ethaddr(struct xsection_item *xitem)
+{
+	int ret;
+	u8 buf[6];
+
+	ret = xsection_access_item(xitem, &buf, O_RDONLY);
+	if (ret < 0)
+		return ret;
+
+	free(xitem->value_param);
+	xitem->value_param = xzalloc(sizeof("xx:xx:xx:xx:xx:xx"));
+
+	ethaddr_to_string(buf, xitem->value_param);
+
+	return 0;
+}
+
+static int xsection_param_set_ethaddr(struct xsection_item *xitem)
+{
+	int ret;
+	u8 buf[6];
+
+	if (!strcmp(xitem->value_param, ""))
+		return -EINVAL;
+
+	ret = string_to_ethaddr(xitem->value_param, buf);
+	if (ret)
+		return ret;
+
+	ret = xsection_access_item(xitem, &buf, O_WRONLY);
+
+	return ret < 0 ? ret : 0;
+}
+
+static int xsection_param_get_ethaddr2(struct param_d *p, void *priv)
+{
+	return xsection_param_get_ethaddr(priv);
+}
+
+static int xsection_param_set_ethaddr2(struct param_d *p, void *priv)
+{
+	return xsection_param_set_ethaddr(priv);
+}
+
+static int xsection_param_get_ethaddr1(struct param_d *p, void *priv)
+{
+	return xsection_param_get_ethaddr(priv);
+}
+
+static int xsection_param_set_ethaddr1(struct param_d *p, void *priv)
+{
+	return xsection_param_set_ethaddr(priv);
+}
+
+static int xsection_param_get_boot_mode_id(struct param_d *p, void *priv)
+{
+	struct xsection_item *xitem = priv;
+	int ret;
+	u8 buf;
+
+	ret = xsection_access_item(xitem, &buf, O_RDONLY);
+	if (ret < 0)
+		return ret;
+
+	free(xitem->value_param);
+	xitem->value_param = basprintf("%02x", buf);
+
+	return 0;
+}
+
+static int xsection_param_set_boot_mode_id(struct param_d *p, void *priv)
+{
+	struct xsection_item *xitem = priv;
+	int ret;
+	u8 value;
+
+	if (!strcmp(xitem->value_param, ""))
+		return -EINVAL;
+
+	value = simple_strtoul(xitem->value_param, NULL, 0);
+	ret = xsection_access_item(xitem, &value, O_WRONLY);
+
+	return ret < 0 ? ret : 0;
+}
+
+static int xsection_param_get_devconf(struct param_d *p, void *priv)
+{
+	struct xsection_item *xitem = priv;
+	int ret;
+	u16 buf;
+
+	ret = xsection_access_item(xitem, &buf, O_RDONLY);
+	if (ret < 0)
+		return ret;
+
+	free(xitem->value_param);
+	xitem->value_param = basprintf("%04x", buf);
+
+	return 0;
+}
+
+static int xsection_param_set_devconf(struct param_d *p, void *priv)
+{
+	struct xsection_item *xitem = priv;
+	int ret;
+	u16 value;
+
+	if (!strcmp(xitem->value_param, ""))
+		return -EINVAL;
+
+	value = simple_strtoul(xitem->value_param, NULL, 0);
+	ret = xsection_access_item(xitem, &value, O_WRONLY);
+
+	return ret < 0 ? ret : 0;
+}
+
+static int xsection_add_dev_param(struct device_node *np,
+				struct xsection *xsection,
+				struct xsection_item *xitem, char *param_name,
+				int (*set)(struct param_d *p, void *priv),
+				int (*get)(struct param_d *p, void *priv))
+{
+	struct device_node *partition_node;
+	struct cdev *cdev;
+	struct param_d *param;
+	int ret = 0;
+
+	partition_node = of_parse_phandle(np, param_name, 0);
+	if (!partition_node) {
+		ret = -ENODEV;
+		goto out;
+	}
+
+	cdev = cdev_by_device_node(partition_node);
+	if (!cdev) {
+		ret = -ENODEV;
+		goto out;
+	}
+
+	param = dev_add_param_string(&xsection->dev, param_name, set, get,
+				&xitem->value_param, xitem);
+
+	if (IS_ERR(param)) {
+		ret = -ENODEV;
+		goto out;
+	}
+
+	xitem->cdev = cdev;
+
+out:
+	return ret;
+}
+
+static int xsection_probe(struct device_d *dev)
+{
+	struct device_node *np = dev->device_node;
+	const char *alias;
+	int ret;
+
+	xsection = xzalloc(sizeof(*xsection));
+	xsection->dev.id = DEVICE_ID_SINGLE;
+	xsection->dev.parent = dev;
+	dev->priv = xsection;
+
+	alias = of_alias_get(np);
+	if (!alias) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	safe_strncpy(xsection->dev.name, alias, MAX_DRIVER_NAME);
+
+	ret = register_device(&xsection->dev);
+	if (ret)
+		goto out;
+
+	ret = xsection_add_dev_param(np, xsection, &xsection->boot_mode_id,
+					"boot_mode_id",
+					xsection_param_set_boot_mode_id,
+					xsection_param_get_boot_mode_id);
+	if (ret)
+		goto out_unreg;
+
+	ret = xsection_add_dev_param(np, xsection, &xsection->devconf,
+					"devconf",
+					xsection_param_set_devconf,
+					xsection_param_get_devconf);
+	if (ret)
+		goto out_unreg;
+
+	ret = xsection_add_dev_param(np, xsection, &xsection->ethaddr1,
+					"ethaddr1",
+					 xsection_param_set_ethaddr1,
+					 xsection_param_get_ethaddr1);
+	if (ret)
+		goto out_unreg;
+
+	ret = xsection_add_dev_param(np, xsection, &xsection->ethaddr2,
+					"ethaddr2",
+					 xsection_param_set_ethaddr2,
+					 xsection_param_get_ethaddr2);
+	if (ret)
+		goto out_unreg;
+
+	return 0;
+
+out_unreg:
+	unregister_device(&xsection->dev);
+out:
+	free(xsection);
+	dev_err(dev, "failed to probe %d\n", ret);
+
+	return ret;
+}
+
+static void xsection_remove(struct device_d *dev)
+{
+	struct xsection *xsection = dev->priv;
+
+	dev_remove_parameters(&xsection->dev);
+	unregister_device(&xsection->dev);
+	free(xsection);
+}
+
+static __maybe_unused struct of_device_id xsection_ids[] = {
+	{
+		.compatible = "xsection",
+	}, {
+		/* sentinel */
+	}
+};
+
+static struct driver_d xsection_driver = {
+	.name = "xsection",
+	.probe = xsection_probe,
+	.remove = xsection_remove,
+	.of_compatible = DRV_OF_COMPAT(xsection_ids),
+};
+device_platform_driver(xsection_driver);
diff --git a/include/xsection.h b/include/xsection.h
new file mode 100644
index 0000000..3947b24
--- /dev/null
+++ b/include/xsection.h
@@ -0,0 +1,16 @@
+#ifndef __XSECTION_H
+#define __XSECTION_H
+
+int xsection_get_boot_mode_id(u8 *buf);
+int xsection_set_boot_mode_id(u8 *value);
+
+int xsection_get_devconf(u16 *buf);
+int xsection_set_devconf(u16 *value);
+
+int xsection_get_ethaddr1(u8 ethaddr[6]);
+int xsection_set_ethaddr1(u8 ethaddr[6]);
+
+int xsection_get_ethaddr2(u8 ethaddr[6]);
+int xsection_set_ethaddr2(u8 ethaddr[6]);
+
+#endif /* __XSECTION_H */
-- 
2.7.4

