From 3f9a492297a4f59f12f0f21715ac31db1b6eaab4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Karsten=20N=C3=BCnthel?= <karsten.nuenthel@wago.com>
Date: Wed, 26 Feb 2014 15:08:06 +0100
Subject: [PATCH] udp extension

---
 src/modbus-private.h         |   5 +-
 src/modbus-tcp-private.h     |  30 +++
 src/modbus-tcp.c             | 581 ++++++++++++++++++++++++++++++++++++++++++-
 src/modbus-tcp.h             |   6 +
 src/modbus-udp-private.h     |  60 +++++
 src/modbus-udp.c             |  96 +++++++
 src/modbus-udp.h             |  51 ++++
 tests/bandwidth-client.c     |   8 +-
 tests/bandwidth-server-one.c |  16 +-
 9 files changed, 844 insertions(+), 9 deletions(-)
 create mode 100644 src/modbus-udp-private.h
 create mode 100644 src/modbus-udp.c
 create mode 100644 src/modbus-udp.h

diff --git a/src/modbus-private.h b/src/modbus-private.h
index acf6985..157018d 100644
--- a/src/modbus-private.h
+++ b/src/modbus-private.h
@@ -66,8 +66,9 @@ MODBUS_BEGIN_DECLS
 
 typedef enum {
     _MODBUS_BACKEND_TYPE_RTU=0,
-    _MODBUS_BACKEND_TYPE_TCP
-} modbus_bakend_type_t;
+    _MODBUS_BACKEND_TYPE_TCP,
+    _MODBUS_BACKEND_TYPE_UDP
+} modbus_backend_type_t;
 
 /* This structure reduces the number of params in functions and so
  * optimizes the speed of execution (~ 37%). */
diff --git a/src/modbus-tcp-private.h b/src/modbus-tcp-private.h
index 4452406..0133eb4 100644
--- a/src/modbus-tcp-private.h
+++ b/src/modbus-tcp-private.h
@@ -44,4 +44,34 @@ typedef struct _modbus_tcp_pi {
     char service[_MODBUS_TCP_PI_SERVICE_LENGTH];
 } modbus_tcp_pi_t;
 
+
+#define _MODBUS_UDP_RECV_BUFFER_SIZE  2000
+
+typedef struct _modbus_udp {
+    /* Receive buffer */
+    int data_size;
+    unsigned char *data_begin;
+    unsigned char data_buf[_MODBUS_UDP_RECV_BUFFER_SIZE];
+    /* UDP port */
+    int port;
+    /* IP address */
+    char ip[16];
+} modbus_udp_t;
+
+typedef struct _modbus_udp_pi {
+    /* Receive buffer */
+    int data_size;
+    unsigned char *data_begin;
+    unsigned char data_buf[_MODBUS_UDP_RECV_BUFFER_SIZE];
+    /* UDP port */
+    int port;
+    /* Node */
+    char node[NI_MAXHOST];
+    /* Service */
+    char service[NI_MAXSERV];
+    /* Socket address information */
+    struct sockaddr_storage s_addr;
+    int s_addr_len;
+} modbus_udp_pi_t;
+
 #endif /* _MODBUS_TCP_PRIVATE_H_ */
diff --git a/src/modbus-tcp.c b/src/modbus-tcp.c
index 3cf1ec9..2885614 100644
--- a/src/modbus-tcp.c
+++ b/src/modbus-tcp.c
@@ -48,6 +48,7 @@
 # include <netinet/in.h>
 # include <netinet/ip.h>
 # include <netinet/tcp.h>
+# include <netinet/udp.h>
 # include <arpa/inet.h>
 # include <poll.h>
 # include <netdb.h>
@@ -263,7 +264,7 @@ static int _modbus_tcp_connect(modbus_t *ctx)
     }
 
     if (ctx->debug) {
-        printf("Connecting to %s\n", ctx_tcp->ip);
+        printf("Connecting to %s TCP port %d\n", ctx_tcp->ip, ctx_tcp->port);
     }
 
     addr.sin_family = AF_INET;
@@ -423,6 +424,9 @@ int modbus_tcp_listen(modbus_t *ctx, int nb_connection)
         close(new_socket);
         return -1;
     }
+    if (ctx->debug) {
+        printf("Listen on TCP port %d\n", ctx_tcp->port);
+    }
 
     return new_socket;
 }
@@ -693,6 +697,11 @@ modbus_t* modbus_new_tcp_pi(const char *node, const char *service)
     size_t dest_size;
     size_t ret_size;
 
+    if (!node || !service) {
+        errno = EINVAL;
+        return NULL;
+    }
+
     ctx = (modbus_t *) malloc(sizeof(modbus_t));
     _modbus_init_common(ctx);
 
@@ -706,12 +715,14 @@ modbus_t* modbus_new_tcp_pi(const char *node, const char *service)
 
     dest_size = sizeof(char) * _MODBUS_TCP_PI_NODE_LENGTH;
     ret_size = strlcpy(ctx_tcp_pi->node, node, dest_size);
+/*
     if (ret_size == 0) {
         fprintf(stderr, "The node string is empty\n");
         modbus_free(ctx);
         errno = EINVAL;
         return NULL;
     }
+*/
 
     if (ret_size >= dest_size) {
         fprintf(stderr, "The node string has been truncated\n");
@@ -738,3 +749,571 @@ modbus_t* modbus_new_tcp_pi(const char *node, const char *service)
 
     return ctx;
 }
+
+
+ssize_t _modbus_udp_send(modbus_t *ctx, const uint8_t *req, int req_length)
+{
+	struct sockaddr_in addr;
+	modbus_udp_t *ctx_udp = ctx->backend_data;
+	addr.sin_family = AF_INET;
+	addr.sin_port = htons(ctx_udp->port);
+	addr.sin_addr.s_addr = inet_addr(ctx_udp->ip);
+	return sendto(ctx->s, (const char*)req, req_length, 0, (struct sockaddr *)&addr, sizeof(struct sockaddr_in));
+}
+
+ssize_t _modbus_udp_pi_send(modbus_t *ctx, const uint8_t *req, int req_length)
+{
+	modbus_udp_pi_t *ctx_udp_pi = ctx->backend_data;
+	return sendto(ctx->s, (const char*)req, req_length, 0, (struct sockaddr *)&ctx_udp_pi->s_addr, ctx_udp_pi->s_addr_len);
+}
+
+
+ssize_t _modbus_udp_recv(modbus_t *ctx, uint8_t *rsp, int rsp_length)
+{
+	modbus_udp_t *ctx_udp = (modbus_udp_t *)ctx->backend_data;
+	if (0 == ctx_udp->data_size)
+	{ /* receive new data (triggered by select) */
+		int rc;
+		struct sockaddr_in addr;
+		socklen_t slen = sizeof(struct sockaddr_in);
+		memset(&addr, 0, slen);
+		rc = recvfrom(ctx->s, (void *)ctx_udp->data_buf, _MODBUS_UDP_RECV_BUFFER_SIZE,
+					  MSG_TRUNC, (struct sockaddr *)&addr, &slen);
+		if (rc <= 0) {
+			/* socket closed or read error */
+			return rc;
+		}
+		/*store source address in context for following reply*/
+		strlcpy(ctx_udp->ip, inet_ntoa(addr.sin_addr), 16);
+		ctx_udp->port = ntohs(addr.sin_port);
+
+	    if (rc > _MODBUS_UDP_RECV_BUFFER_SIZE)
+	    {
+	        errno = EMBMDATA;
+	        _error_print(ctx, "UDP receive buffer exceeded");
+			return -1;
+	    }
+		ctx_udp->data_size = rc;
+		ctx_udp->data_begin = ctx_udp->data_buf;
+	}
+	/* return data from buffer to be processed */
+	if (rsp_length > ctx_udp->data_size)
+	{
+        errno = EMBBADDATA;
+        _error_print(ctx, "unexpected message fragment");
+		return -1;
+	}
+	memcpy(rsp, ctx_udp->data_begin, rsp_length);
+	ctx_udp->data_size -= rsp_length;
+	ctx_udp->data_begin += rsp_length;
+	return rsp_length;
+}
+
+ssize_t _modbus_udp_pi_recv(modbus_t *ctx, uint8_t *rsp, int rsp_length)
+{
+	modbus_udp_pi_t *ctx_udp_pi = (modbus_udp_pi_t *)ctx->backend_data;
+	if (0 == ctx_udp_pi->data_size)
+	{ /* receive new data (triggered by select) */
+		int received_bytes;
+		struct sockaddr_storage peer_addr;
+		socklen_t peer_addr_len = sizeof(struct sockaddr_storage);
+		memset(&peer_addr, 0, peer_addr_len);
+		received_bytes = recvfrom(ctx->s, (void *)ctx_udp_pi->data_buf, _MODBUS_UDP_RECV_BUFFER_SIZE,
+					  MSG_TRUNC, (struct sockaddr *)&peer_addr, &peer_addr_len);
+		if (received_bytes <= 0) {
+			/* socket closed or read error */
+			return received_bytes;
+		}
+		/* store source address in context for following reply */
+		if (peer_addr_len && (peer_addr_len <= sizeof(struct sockaddr_storage))) {
+			memcpy(&ctx_udp_pi->s_addr, &peer_addr, peer_addr_len);
+			ctx_udp_pi->s_addr_len = peer_addr_len;
+		}
+
+		if (received_bytes > _MODBUS_UDP_RECV_BUFFER_SIZE)
+	    {
+	        errno = EMBMDATA;
+	        _error_print(ctx, "UDP receive buffer exceeded");
+			return -1;
+	    }
+		ctx_udp_pi->data_size = received_bytes;
+		ctx_udp_pi->data_begin = ctx_udp_pi->data_buf;
+	}
+	/* return data from buffer to be processed */
+	if (rsp_length > ctx_udp_pi->data_size)
+	{
+        errno = EMBBADDATA;
+        _error_print(ctx, "unexpected message fragment");
+		return -1;
+	}
+	memcpy(rsp, ctx_udp_pi->data_begin, rsp_length);
+	ctx_udp_pi->data_size -= rsp_length;
+	ctx_udp_pi->data_begin += rsp_length;
+	return rsp_length;
+}
+
+static int _modbus_udp_set_ipv4_options(int s)
+{
+    int rc;
+    int val;
+#ifndef OS_WIN32
+    /**
+     * Cygwin defines IPTOS_LOWDELAY but can't handle that flag so it's
+     * necessary to workaround that problem.
+     **/
+    /* Set the IP low delay option */
+    val = IPTOS_LOWDELAY;
+    rc = setsockopt(s, IPPROTO_IP, IP_TOS, (const void *)&val, sizeof(val));
+    if (rc == -1) {
+        return -1;
+    }
+    /* Set the don't fragment option */
+    val = IP_PMTUDISC_DONT;
+    rc = setsockopt(s, IPPROTO_IP, IP_MTU_DISCOVER, (const void *)&val, sizeof(val));
+    if (rc == -1) {
+        return -1;
+    }
+#endif
+
+    return 0;
+}
+
+/* Creates an UDP client socket for communication with a Modbus server. */
+static int _modbus_udp_connect(modbus_t *ctx)
+{
+    int new_socket;
+    int rc;
+    modbus_udp_t *ctx_udp = ctx->backend_data;
+
+#ifdef OS_WIN32
+    if (_modbus_tcp_init_win32() == -1) {
+        return -1;
+    }
+#endif
+
+    new_socket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
+    if (new_socket == -1) {
+        return -1;
+    }
+
+    rc = _modbus_udp_set_ipv4_options(new_socket);
+    if (rc == -1) {
+        close(new_socket);
+        if (ctx->debug) {
+        	perror("setsockopt");
+        }
+        return -1;
+    }
+
+    if (ctx->debug) {
+        printf("Created socket for requests to %s UDP port %d\n", ctx_udp->ip, ctx_udp->port);
+    }
+    ctx->s = new_socket;
+    return 0;
+}
+
+/* Creates an UDP client socket for communication with a Modbus server. */
+static int _modbus_udp_pi_connect(modbus_t *ctx)
+{
+    int rc;
+    struct addrinfo *ai_list;
+    struct addrinfo *ai_ptr;
+    struct addrinfo ai_hints;
+    modbus_udp_pi_t *ctx_udp_pi = ctx->backend_data;
+
+#ifdef OS_WIN32
+    if (_modbus_tcp_init_win32() == -1) {
+        return -1;
+    }
+#endif
+
+    memset(&ai_hints, 0, sizeof(ai_hints));
+    ai_hints.ai_family = AF_UNSPEC;    /* Allow IPv4 or IPv6 */
+    ai_hints.ai_socktype = SOCK_DGRAM; /* Datagram socket */
+    ai_hints.ai_flags = 0;
+#ifdef AI_ADDRCONFIG
+    ai_hints.ai_flags |= AI_ADDRCONFIG;
+#endif
+    ai_hints.ai_protocol = 0;          /* Any protocol */
+    ai_hints.ai_canonname = NULL;
+    ai_hints.ai_addr = NULL;
+    ai_hints.ai_next = NULL;
+    ai_list = NULL;
+    rc = getaddrinfo(ctx_udp_pi->node, ctx_udp_pi->service, &ai_hints, &ai_list);
+    if (rc != 0) {
+        if (ctx->debug) {
+        	fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rc));
+        }
+        return rc;
+    }
+    for (ai_ptr = ai_list; ai_ptr != NULL; ai_ptr = ai_ptr->ai_next) {
+        int new_socket = socket(ai_ptr->ai_family, ai_ptr->ai_socktype, ai_ptr->ai_protocol);
+        if (new_socket == -1) {
+            if (ctx->debug) {
+            	perror("socket");
+            }
+            continue;
+        }
+		if (ai_ptr->ai_family == AF_INET)
+		{
+			if (_modbus_udp_set_ipv4_options(new_socket) == -1) {
+				close(new_socket);
+		        if (ctx->debug) {
+		        	perror("setsockopt");
+		        }
+				continue;
+			}
+		}
+		if (ai_ptr->ai_addr && ai_ptr->ai_addrlen && (ai_ptr->ai_addrlen <= sizeof(struct sockaddr_storage))) {
+			/* Success */
+			if (ctx->debug) {
+				printf("Create UDP socket for host %s, service %s\n", ctx_udp_pi->node, ctx_udp_pi->service);
+			}
+			ctx->s = new_socket;
+			memcpy(&ctx_udp_pi->s_addr, ai_ptr->ai_addr, ai_ptr->ai_addrlen);
+			ctx_udp_pi->s_addr_len = ai_ptr->ai_addrlen;
+			break;
+		}
+		close(new_socket);
+    }
+    freeaddrinfo(ai_list);
+
+    if (ai_ptr == NULL) { /* No address succeeded */
+	    if (ctx->debug) {
+	    	fprintf(stderr, "Could not create UDP socket for host %s, service %s\n", ctx_udp_pi->node, ctx_udp_pi->service);
+	    }
+        return -1;
+    }
+
+    return ctx->s;
+}
+
+void _modbus_udp_close(modbus_t *ctx)
+{
+    close(ctx->s);
+}
+
+int _modbus_udp_flush(modbus_t *ctx)
+{
+    int rc, flags;
+    int rc_sum = 0;
+	modbus_udp_t *ctx_udp = ctx->backend_data;
+
+    do {
+        /* Extract the garbage from the socket */
+#ifndef OS_WIN32
+		flags = MSG_TRUNC | MSG_DONTWAIT;
+		rc = recvfrom(ctx->s, (void *)ctx_udp->data_buf, _MODBUS_UDP_RECV_BUFFER_SIZE, flags, 0, 0);
+#else
+        /* On Win32, it's a bit more complicated to not wait */
+        fd_set rfds;
+        struct timeval tv;
+
+        tv.tv_sec = 0;
+        tv.tv_usec = 0;
+        FD_ZERO(&rfds);
+        FD_SET(ctx->s, &rfds);
+        rc = select(ctx->s+1, &rfds, NULL, NULL, &tv);
+        if (rc == -1) {
+            return -1;
+        }
+        if (rc > 0) {
+            /* There is data to flush */
+        	flags = MSG_TRUNC;
+        	rc = recvfrom(ctx->s, (void *)ctx_udp->data_buf, _MODBUS_UDP_RECV_BUFFER_SIZE, flags, 0, 0);
+        }
+#endif
+        if (rc > 0) {
+            rc_sum += rc;
+        }
+    } while (rc >= _MODBUS_UDP_RECV_BUFFER_SIZE);
+
+	ctx_udp->data_size = 0;
+	ctx_udp->data_begin = ctx_udp->data_buf;
+
+    return rc_sum;
+}
+
+int _modbus_udp_select(modbus_t *ctx, fd_set *rfds, struct timeval *tv, int length_to_read)
+{
+	int s_rc;
+	modbus_udp_t *ctx_udp = (modbus_udp_t *)ctx->backend_data;
+	if (0 < ctx_udp->data_size)
+	{/*remaining data in context buffer to be processed immediately*/
+		return 0;
+	}
+    while ((s_rc = select(ctx->s+1, rfds, NULL, NULL, tv)) == -1) {
+        if (errno == EINTR) {
+            if (ctx->debug) {
+                fprintf(stderr, "A non blocked signal was caught\n");
+            }
+            /* Necessary after an error */
+            FD_ZERO(rfds);
+            FD_SET(ctx->s, rfds);
+        } else {
+            return -1;
+        }
+    }
+
+    if (s_rc == 0) {
+        errno = ETIMEDOUT;
+        return -1;
+    }
+
+    return s_rc;
+}
+
+/* Creates a server socket for requests from one or many modbus masters in UDP */
+int modbus_udp_bind(modbus_t *ctx)
+{
+    int new_socket;
+    struct sockaddr_in addr;
+    modbus_udp_t *ctx_udp = ctx->backend_data;
+
+#ifdef OS_WIN32
+    if (_modbus_tcp_init_win32() == -1) {
+        return -1;
+    }
+#endif
+
+    new_socket = socket(AF_INET, SOCK_DGRAM , 0 );
+    if (new_socket == -1) {
+        if (ctx->debug) {
+        	perror("socket");
+        }
+        return -1;
+    }
+
+    memset(&addr, 0, sizeof(addr));
+    addr.sin_family = AF_INET;
+    /* If the modbus port is < to 1024, we need the setuid root. */
+    addr.sin_port = htons(ctx_udp->port);
+    addr.sin_addr.s_addr = INADDR_ANY;
+    if (bind(new_socket, (struct sockaddr *)&addr, sizeof(addr)) == 0) {
+    	/* Success */
+        ctx->s = new_socket;
+        if (ctx->debug) {
+        	printf("Bind UDP socket to port %d\n", ctx_udp->port);
+        }
+        return new_socket;
+    }
+
+    close(new_socket);
+    if (ctx->debug) {
+       	perror("bind");
+    	fprintf(stderr, "Could not bind UDP socket to port %d\n", ctx_udp->port);
+    }
+    return -1;
+}
+
+/* Creates a server socket for requests from one or many modbus masters in UDP */
+int modbus_udp_pi_bind(modbus_t *ctx)
+{
+	int rc;
+    struct addrinfo *ai_list;
+    struct addrinfo *ai_ptr;
+    struct addrinfo ai_hints;
+    const char *node;
+    const char *service;
+    modbus_udp_pi_t *ctx_udp_pi = ctx->backend_data;
+
+#ifdef OS_WIN32
+    if (_modbus_tcp_init_win32() == -1) {
+        return -1;
+    }
+#endif
+
+    if (ctx_udp_pi->node[0] == 0)
+        node = NULL; /* == any */
+    else
+        node = ctx_udp_pi->node;
+
+    if (ctx_udp_pi->service[0] == 0)
+        service = "502";
+    else
+        service = ctx_udp_pi->service;
+
+    memset(&ai_hints, 0, sizeof (ai_hints));
+    ai_hints.ai_family = AF_UNSPEC;    /* Allow IPv4 or IPv6 */
+    ai_hints.ai_socktype = SOCK_DGRAM; /* Datagram socket */
+    ai_hints.ai_flags = AI_PASSIVE;    /* For wildcard IP address */
+#ifdef AI_ADDRCONFIG
+    ai_hints.ai_flags |= AI_ADDRCONFIG;
+#endif
+    ai_hints.ai_protocol = 0;          /* Any protocol */
+    ai_hints.ai_canonname = NULL;
+    ai_hints.ai_addr = NULL;
+    ai_hints.ai_next = NULL;
+    ai_list = NULL;
+    rc = getaddrinfo(node, service, &ai_hints, &ai_list);
+    if (rc != 0) {
+        if (ctx->debug) {
+        	fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rc));
+        }
+        return -1;
+    }
+    for (ai_ptr = ai_list; ai_ptr != NULL; ai_ptr = ai_ptr->ai_next) {
+        int new_socket = socket(ai_ptr->ai_family, ai_ptr->ai_socktype, ai_ptr->ai_protocol);
+        if (new_socket == -1) {
+            if (ctx->debug) {
+            	perror("socket");
+            }
+            continue;
+        }
+        if (bind(new_socket, ai_ptr->ai_addr, ai_ptr->ai_addrlen) == 0) {
+        	/* Success */
+            if (ctx->debug) {
+                printf("Bind UDP socket to service %s\n", ctx_udp_pi->service);
+            }
+            ctx->s = new_socket;
+            break;
+        }
+		close(new_socket);
+        if (ctx->debug) {
+        	perror("bind");
+        }
+    }
+    freeaddrinfo(ai_list);
+
+    if (ai_ptr == NULL) { /* No address succeeded */
+        if (ctx->debug) {
+        	fprintf(stderr, "Could not bind UDP socket to service %s\n", ctx_udp_pi->service);
+        }
+        return -1;
+    }
+    return ctx->s;
+}
+
+const modbus_backend_t _modbus_udp_backend = {
+    _MODBUS_BACKEND_TYPE_UDP,
+    _MODBUS_TCP_HEADER_LENGTH,			/*common for TCP and UDP*/
+    _MODBUS_TCP_CHECKSUM_LENGTH,		/*common for TCP and UDP*/
+    MODBUS_TCP_MAX_ADU_LENGTH,			/*common for TCP and UDP*/
+    _modbus_set_slave,					/*common for TCP and UDP*/
+    _modbus_tcp_build_request_basis,	/*common for TCP and UDP*/
+    _modbus_tcp_build_response_basis,	/*common for TCP and UDP*/
+    _modbus_tcp_prepare_response_tid,	/*common for TCP and UDP*/
+    _modbus_tcp_send_msg_pre,			/*common for TCP and UDP*/
+    _modbus_udp_send,
+    _modbus_udp_recv,
+    _modbus_tcp_check_integrity,		/*common for TCP and UDP*/
+    _modbus_tcp_pre_check_confirmation,	/*common for TCP and UDP*/
+    _modbus_udp_connect,
+    _modbus_udp_close,
+    _modbus_udp_flush,
+    _modbus_udp_select,
+    _modbus_tcp_filter_request			/*common for TCP and UDP*/
+};
+
+const modbus_backend_t _modbus_udp_pi_backend = {
+	_MODBUS_BACKEND_TYPE_UDP,
+	_MODBUS_TCP_HEADER_LENGTH,			/*common for TCP and UDP*/
+	_MODBUS_TCP_CHECKSUM_LENGTH,		/*common for TCP and UDP*/
+	MODBUS_TCP_MAX_ADU_LENGTH,			/*common for TCP and UDP*/
+	_modbus_set_slave,					/*common for TCP and UDP*/
+	_modbus_tcp_build_request_basis,	/*common for TCP and UDP*/
+	_modbus_tcp_build_response_basis,	/*common for TCP and UDP*/
+	_modbus_tcp_prepare_response_tid,	/*common for TCP and UDP*/
+	_modbus_tcp_send_msg_pre,			/*common for TCP and UDP*/
+	_modbus_udp_pi_send,
+	_modbus_udp_pi_recv,
+	_modbus_tcp_check_integrity,		/*common for TCP and UDP*/
+	_modbus_tcp_pre_check_confirmation,	/*common for TCP and UDP*/
+	_modbus_udp_pi_connect,
+	_modbus_udp_close,
+	_modbus_udp_flush,
+	_modbus_udp_select,
+	_modbus_tcp_filter_request			/*common for TCP and UDP*/
+};
+
+modbus_t* modbus_new_udp(const char *ip, int port)
+{
+    modbus_t *ctx;
+    modbus_udp_t *ctx_udp;
+    size_t dest_size;
+    size_t ret_size;
+
+    ctx = (modbus_t *) malloc(sizeof(modbus_t));
+    _modbus_init_common(ctx);
+
+    /* Could be changed after to reach a remote serial Modbus device */
+    ctx->slave = MODBUS_TCP_SLAVE;
+
+    ctx->backend = &(_modbus_udp_backend);
+
+    ctx->backend_data = (void *) malloc(sizeof(modbus_udp_t));
+    ctx_udp = (modbus_udp_t *)ctx->backend_data;
+
+    dest_size = 16;
+    ret_size = strlcpy(ctx_udp->ip, ip, dest_size);
+    if (ret_size == 0) {
+        fprintf(stderr, "The UDP/IP string is empty\n");
+        modbus_free(ctx);
+        errno = EINVAL;
+        return NULL;
+    }
+
+    if (ret_size >= dest_size) {
+        fprintf(stderr, "The UDP/IP string has been truncated\n");
+        modbus_free(ctx);
+        errno = EINVAL;
+        return NULL;
+    }
+
+    ctx_udp->port = port;
+    ctx_udp->data_size = 0;
+    return ctx;
+}
+
+modbus_t* modbus_new_udp_pi(const char *node, const char *service)
+{
+    modbus_t *ctx;
+    modbus_udp_pi_t *ctx_udp_pi;
+    size_t dest_size;
+    size_t ret_size;
+
+    if (!node || !service) {
+        errno = EINVAL;
+        return NULL;
+    }
+
+    ctx = (modbus_t *) malloc(sizeof(modbus_t));
+    _modbus_init_common(ctx);
+
+    /* Could be changed after to reach a remote serial Modbus device */
+    ctx->slave = MODBUS_TCP_SLAVE;
+
+    ctx->backend = &(_modbus_udp_pi_backend);
+
+    ctx->backend_data = (void *) malloc(sizeof(modbus_udp_t));
+    ctx_udp_pi = (modbus_udp_pi_t *)ctx->backend_data;
+
+    dest_size = _MODBUS_TCP_PI_NODE_LENGTH;
+    ret_size = strlcpy(ctx_udp_pi->node, node, dest_size);
+    if (ret_size >= dest_size) {
+        fprintf(stderr, "The UDP node string has been truncated\n");
+        modbus_free(ctx);
+        errno = EINVAL;
+        return NULL;
+    }
+
+    dest_size = _MODBUS_TCP_PI_SERVICE_LENGTH;
+    ret_size = strlcpy(ctx_udp_pi->service, service, dest_size);
+    if (ret_size == 0) {
+        fprintf(stderr, "The UDP service string is empty\n");
+        modbus_free(ctx);
+        errno = EINVAL;
+        return NULL;
+    }
+
+    if (ret_size >= dest_size) {
+        fprintf(stderr, "The service string has been truncated\n");
+        modbus_free(ctx);
+        errno = EINVAL;
+        return NULL;
+    }
+
+    ctx_udp_pi->data_size = 0;  //set on recvfrom
+    ctx_udp_pi->s_addr_len = 0; //set on connect and/or recvfrom
+    return ctx;
+}
diff --git a/src/modbus-tcp.h b/src/modbus-tcp.h
index e4f9a83..49cbb35 100644
--- a/src/modbus-tcp.h
+++ b/src/modbus-tcp.h
@@ -48,6 +48,12 @@ modbus_t* modbus_new_tcp_pi(const char *node, const char *service);
 int modbus_tcp_pi_listen(modbus_t *ctx, int nb_connection);
 int modbus_tcp_pi_accept(modbus_t *ctx, int *socket);
 
+modbus_t* modbus_new_udp(const char *ip_address, int port);
+int modbus_udp_bind(modbus_t *ctx);
+
+modbus_t* modbus_new_udp_pi(const char *node, const char *service);
+int modbus_udp_pi_bind(modbus_t *ctx);
+
 MODBUS_END_DECLS
 
 #endif /* _MODBUS_TCP_H_ */
diff --git a/src/modbus-udp-private.h b/src/modbus-udp-private.h
new file mode 100644
index 0000000..ba04c8a
--- /dev/null
+++ b/src/modbus-udp-private.h
@@ -0,0 +1,60 @@
+//------------------------------------------------------------------------------
+// Copyright (c) WAGO GmbH & Co. KG
+//
+// PROPRIETARY RIGHTS are involved in the subject matter of this material. All
+// manufacturing, reproduction, use and sales rights pertaining to this
+// subject matter are governed by the license agreement. The recipient of this
+// software implicitly accepts the terms of the license.
+//------------------------------------------------------------------------------
+//------------------------------------------------------------------------------
+///  \file     modbus-udp-private.h
+///
+///  \version  $Id: 1 $
+///
+///  \brief    <short description of the file contents>
+///
+///  \author   <author> : WAGO GmbH & Co. KG
+//------------------------------------------------------------------------------
+#ifndef MODBUS_UDP_PRIVATE_H_
+#define MODBUS_UDP_PRIVATE_H_
+
+//------------------------------------------------------------------------------
+// include files
+//------------------------------------------------------------------------------
+
+//------------------------------------------------------------------------------
+// defines; structure, enumeration and type definitions
+//------------------------------------------------------------------------------
+//#define _MODBUS_UDP_HEADER_LENGTH      7
+//#define _MODBUS_UDP_PRESET_REQ_LENGTH 12
+//#define _MODBUS_UDP_PRESET_RSP_LENGTH  8
+//
+//#define _MODBUS_UDP_CHECKSUM_LENGTH    0
+
+typedef struct _modbus_udp
+{
+    /* UDP port */
+    int port;
+    /* IP address */
+    char ip[16];
+} modbus_udp_t;
+
+//------------------------------------------------------------------------------
+// function prototypes
+//------------------------------------------------------------------------------
+
+//------------------------------------------------------------------------------
+// macros
+//------------------------------------------------------------------------------
+
+//------------------------------------------------------------------------------
+// variables' and constants' definitions
+//------------------------------------------------------------------------------
+
+//------------------------------------------------------------------------------
+// function implementation
+//------------------------------------------------------------------------------
+
+
+#endif /* MODBUS_UDP_PRIVATE_H_ */
+//---- End of source file ------------------------------------------------------
diff --git a/src/modbus-udp.c b/src/modbus-udp.c
new file mode 100644
index 0000000..fa3fd04
--- /dev/null
+++ b/src/modbus-udp.c
@@ -0,0 +1,96 @@
+//------------------------------------------------------------------------------
+// Copyright (c) WAGO GmbH & Co. KG
+//
+// PROPRIETARY RIGHTS are involved in the subject matter of this material. All
+// manufacturing, reproduction, use and sales rights pertaining to this
+// subject matter are governed by the license agreement. The recipient of this
+// software implicitly accepts the terms of the license.
+//------------------------------------------------------------------------------
+//------------------------------------------------------------------------------
+///
+///  \file     modbus-udp.c
+///
+///  \version  $Id: 1 $
+///
+///  \brief    <short description of the file contents>
+///
+///  \author   <author> : WAGO GmbH & Co. KG
+//------------------------------------------------------------------------------
+
+//------------------------------------------------------------------------------
+// include files
+//------------------------------------------------------------------------------
+
+//------------------------------------------------------------------------------
+// defines; structure, enumeration and type definitions
+//------------------------------------------------------------------------------
+
+//------------------------------------------------------------------------------
+// function prototypes
+//------------------------------------------------------------------------------
+
+//------------------------------------------------------------------------------
+// macros
+//------------------------------------------------------------------------------
+
+//------------------------------------------------------------------------------
+// variables' and constants' definitions
+//------------------------------------------------------------------------------
+
+//------------------------------------------------------------------------------
+// function implementation
+//------------------------------------------------------------------------------
+modbus_t* modbus_new_udp(const char *ip, int port)
+{
+    modbus_t *ctx;
+    modbus_udp_t *ctx_udp;
+    size_t dest_size;
+    size_t ret_size;
+
+#if defined(OS_BSD)
+    /* MSG_NOSIGNAL is unsupported on *BSD so we install an ignore
+       handler for SIGPIPE. */
+    struct sigaction sa;
+
+    sa.sa_handler = SIG_IGN;
+    if (sigaction(SIGPIPE, &sa, NULL) < 0) {
+        /* The debug flag can't be set here... */
+        fprintf(stderr, "Could not install SIGPIPE handler.\n");
+        return NULL;
+    }
+#endif
+
+    ctx = (modbus_t *) malloc(sizeof(modbus_t));
+    _modbus_init_common(ctx);
+
+    /* Could be changed after to reach a remote serial Modbus device */
+    ctx->slave = MODBUS_UDP_SLAVE;
+
+    ctx->backend = &(_modbus_udp_backend);
+
+    ctx->backend_data = (modbus_udp_t *) malloc(sizeof(modbus_udp_t));
+    ctx_udp = (modbus_udp_t *)ctx->backend_data;
+
+    dest_size = sizeof(char) * 16;
+    ret_size = strlcpy(ctx_udp->ip, ip, dest_size);
+    if (ret_size == 0) {
+        fprintf(stderr, "The IP string is empty\n");
+        modbus_free(ctx);
+        errno = EINVAL;
+        return NULL;
+    }
+
+    if (ret_size >= dest_size) {
+        fprintf(stderr, "The IP string has been truncated\n");
+        modbus_free(ctx);
+        errno = EINVAL;
+        return NULL;
+    }
+
+    ctx_udp->port = port;
+
+    return ctx;
+}
+
+
+//---- End of source file ------------------------------------------------------
diff --git a/src/modbus-udp.h b/src/modbus-udp.h
new file mode 100644
index 0000000..41ebc2b
--- /dev/null
+++ b/src/modbus-udp.h
@@ -0,0 +1,51 @@
+//------------------------------------------------------------------------------
+// Copyright (c) WAGO GmbH & Co. KG
+//
+// PROPRIETARY RIGHTS are involved in the subject matter of this material. All
+// manufacturing, reproduction, use and sales rights pertaining to this
+// subject matter are governed by the license agreement. The recipient of this
+// software implicitly accepts the terms of the license.
+//------------------------------------------------------------------------------
+//------------------------------------------------------------------------------
+///  \file     modbus-udp.h
+///
+///  \version  $Id: 1 $
+///
+///  \brief    <short description of the file contents>
+///
+///  \author   <author> : WAGO GmbH & Co. KG
+//------------------------------------------------------------------------------
+#ifndef MODBUS_UDP_H_
+#define MODBUS_UDP_H_
+
+//------------------------------------------------------------------------------
+// include files
+//------------------------------------------------------------------------------
+#include "modbus.h"
+
+//------------------------------------------------------------------------------
+// defines; structure, enumeration and type definitions
+//------------------------------------------------------------------------------
+MODBUS_BEGIN_DECLS
+
+//------------------------------------------------------------------------------
+// function prototypes
+//------------------------------------------------------------------------------
+modbus_t* modbus_new_udp(const char *ip_address, int port);
+
+//------------------------------------------------------------------------------
+// macros
+//------------------------------------------------------------------------------
+
+//------------------------------------------------------------------------------
+// variables' and constants' definitions
+//------------------------------------------------------------------------------
+
+MODBUS_END_DECLS
+//------------------------------------------------------------------------------
+// function implementation
+//------------------------------------------------------------------------------
+
+
+#endif /* MODBUS_UDP_H_ */
+//---- End of source file ------------------------------------------------------
diff --git a/tests/bandwidth-client.c b/tests/bandwidth-client.c
index e9109e1..97fbed6 100644
--- a/tests/bandwidth-client.c
+++ b/tests/bandwidth-client.c
@@ -37,6 +37,7 @@ uint32_t gettime_ms(void)
 
 enum {
     TCP,
+    UDP,
     RTU
 };
 
@@ -61,11 +62,14 @@ int main(int argc, char *argv[])
         if (strcmp(argv[1], "tcp") == 0) {
             use_backend = TCP;
             n_loop = 100000;
+        } else if (strcmp(argv[1], "udp") == 0) {
+            use_backend = UDP;
+            n_loop = 100000;
         } else if (strcmp(argv[1], "rtu") == 0) {
             use_backend = RTU;
             n_loop = 100;
         } else {
-            printf("Usage:\n  %s [tcp|rtu] - Modbus client to measure data bandwith\n\n", argv[0]);
+            printf("Usage:\n  %s [tcp|udp|rtu] - Modbus client (master) to measure data bandwidth\n\n", argv[0]);
             exit(1);
         }
     } else {
@@ -76,6 +80,8 @@ int main(int argc, char *argv[])
 
     if (use_backend == TCP) {
         ctx = modbus_new_tcp("127.0.0.1", 1502);
+    } else if (use_backend == UDP) {
+        ctx = modbus_new_udp("127.0.0.1", 1502);
     } else {
         ctx = modbus_new_rtu("/dev/ttyUSB1", 115200, 'N', 8, 1);
         modbus_set_slave(ctx, 1);
diff --git a/tests/bandwidth-server-one.c b/tests/bandwidth-server-one.c
index e15fb69..e959cab 100644
--- a/tests/bandwidth-server-one.c
+++ b/tests/bandwidth-server-one.c
@@ -25,25 +25,27 @@
 
 enum {
     TCP,
+    UDP,
     RTU
 };
 
 int main(int argc, char *argv[])
 {
-    int socket;
+    int socket = -1;
     modbus_t *ctx;
     modbus_mapping_t *mb_mapping;
     int rc;
     int use_backend;
 
-     /* TCP */
     if (argc > 1) {
         if (strcmp(argv[1], "tcp") == 0) {
             use_backend = TCP;
+        } else if (strcmp(argv[1], "udp") == 0) {
+            use_backend = UDP;
         } else if (strcmp(argv[1], "rtu") == 0) {
             use_backend = RTU;
         } else {
-            printf("Usage:\n  %s [tcp|rtu] - Modbus client to measure data bandwith\n\n", argv[0]);
+            printf("Usage:\n  %s [tcp|udp|rtu] - Modbus server (slave) to measure data bandwidth\n\n", argv[0]);
             exit(1);
         }
     } else {
@@ -55,7 +57,9 @@ int main(int argc, char *argv[])
         ctx = modbus_new_tcp("127.0.0.1", 1502);
         socket = modbus_tcp_listen(ctx, 1);
         modbus_tcp_accept(ctx, &socket);
-
+    } else if (use_backend == UDP) {
+        ctx = modbus_new_udp("127.0.0.1", 1502);
+        modbus_udp_bind(ctx);
     } else {
         ctx = modbus_new_rtu("/dev/ttyUSB0", 115200, 'N', 8, 1);
         modbus_set_slave(ctx, 1);
@@ -86,7 +90,9 @@ int main(int argc, char *argv[])
     printf("Quit the loop: %s\n", modbus_strerror(errno));
 
     modbus_mapping_free(mb_mapping);
-    close(socket);
+    if (socket != -1) {
+    	close(socket);
+    }
     modbus_free(ctx);
 
     return 0;
-- 
1.9.0

