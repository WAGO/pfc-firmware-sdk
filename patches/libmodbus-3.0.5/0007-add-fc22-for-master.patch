From 0be61669d50c800e539c5fc478cc4068b4111896 Mon Sep 17 00:00:00 2001
From: Timur Celik <timur.celik@wago.com>
Date: Mon, 12 May 2014 09:55:59 +0200
Subject: [PATCH] add fc22 for master

---
 src/modbus-private.h |  1 +
 src/modbus.c         | 34 ++++++++++++++++++++++++++++++++++
 src/modbus.h         |  1 +
 3 files changed, 36 insertions(+)

diff --git a/src/modbus-private.h b/src/modbus-private.h
index 157018d..7891004 100644
--- a/src/modbus-private.h
+++ b/src/modbus-private.h
@@ -62,6 +62,7 @@ MODBUS_BEGIN_DECLS
 #define _FC_WRITE_MULTIPLE_COILS      0x0F
 #define _FC_WRITE_MULTIPLE_REGISTERS  0x10
 #define _FC_REPORT_SLAVE_ID           0x11
+#define _FC_MASK_WRITE_REGISTER       0x16
 #define _FC_WRITE_AND_READ_REGISTERS  0x17
 
 typedef enum {
diff --git a/src/modbus.c b/src/modbus.c
index 09ceec0..2e7dcc8 100644
--- a/src/modbus.c
+++ b/src/modbus.c
@@ -169,6 +169,9 @@ static unsigned int compute_response_length_from_request(modbus_t *ctx, uint8_t
     case _FC_READ_EXCEPTION_STATUS:
         length = 3;
         break;
+    case _FC_MASK_WRITE_REGISTER:
+        length = 7;
+        break;
     case _FC_REPORT_SLAVE_ID:
         /* The response is device specific (the header provides the
            length) */
@@ -278,6 +281,8 @@ static uint8_t compute_meta_length_after_function(int function,
         } else if (function == _FC_WRITE_MULTIPLE_COILS ||
                    function == _FC_WRITE_MULTIPLE_REGISTERS) {
             length = 5;
+        } else if (function == _FC_MASK_WRITE_REGISTER) {
+            length = 6;
         } else if (function == _FC_WRITE_AND_READ_REGISTERS) {
             length = 9;
         } else {
@@ -293,6 +298,9 @@ static uint8_t compute_meta_length_after_function(int function,
         case _FC_WRITE_MULTIPLE_REGISTERS:
             length = 4;
             break;
+        case _FC_MASK_WRITE_REGISTER:
+            length = 6;
+            break;
         default:
             length = 1;
         }
@@ -1616,6 +1624,32 @@ int modbus_write_register(modbus_t *ctx, int addr, int value)
     return write_single(ctx, _FC_WRITE_SINGLE_REGISTER, addr, value);
 }
 
+/* Writes the combination of and_mask and or_mask into a register of the remote device */
+int modbus_write_mask_register(modbus_t *ctx, int addr, int and, int or)
+{
+    int rc;
+    int req_length;
+    uint8_t req[_MIN_REQ_LENGTH+2];
+
+    req_length = ctx->backend->build_request_basis(ctx, _FC_MASK_WRITE_REGISTER, addr, and, req);
+
+    req[req_length++] = or >> 8;
+    req[req_length++] = or & 0x00ff;
+
+    rc = send_msg(ctx, req, req_length);
+    if (rc > 0) {
+        uint8_t rsp[MAX_MESSAGE_LENGTH];
+
+        rc = receive_msg(ctx, rsp, MSG_CONFIRMATION);
+        if (rc == -1)
+            return -1;
+
+        rc = check_confirmation(ctx, req, rsp, rc);
+    }
+
+    return rc;
+}
+
 /* Write the bits of the array in the remote device */
 int modbus_write_bits(modbus_t *ctx, int addr, int nb, const uint8_t *src)
 {
diff --git a/src/modbus.h b/src/modbus.h
index 760d26f..c2119c1 100644
--- a/src/modbus.h
+++ b/src/modbus.h
@@ -177,6 +177,7 @@ int modbus_read_registers(modbus_t *ctx, int addr, int nb, uint16_t *dest);
 int modbus_read_input_registers(modbus_t *ctx, int addr, int nb, uint16_t *dest);
 int modbus_write_bit(modbus_t *ctx, int coil_addr, int status);
 int modbus_write_register(modbus_t *ctx, int reg_addr, int value);
+int modbus_write_mask_register(modbus_t *ctx, int reg_addr, int and_mask, int or_mask);
 int modbus_write_bits(modbus_t *ctx, int addr, int nb, const uint8_t *data);
 int modbus_write_registers(modbus_t *ctx, int addr, int nb, const uint16_t *data);
 int modbus_write_and_read_registers(modbus_t *ctx, int write_addr, int write_nb,
-- 
1.9.0

