--- libmodbus-3.0.5.latest/src/modbus.h	2014-07-01 13:14:05.829974000 +0200
+++ libmodbus-3.0.5/src/modbus.h	2014-07-01 15:53:03.546886952 +0200
@@ -207,6 +207,7 @@
                            unsigned int exception_code);
 void modbus_set_alternative_data(uint8_t enabled, uint8_t value);
 int modbus_is_multicast(modbus_t *ctx);
+void modbus_set_response_delay(uint16_t value);
 /**
  * UTILS FUNCTIONS
  **/
--- libmodbus-3.0.5.latest/src/modbus.c	2014-07-01 13:14:05.829974000 +0200
+++ libmodbus-3.0.5/src/modbus.c	2014-07-01 15:51:41.273079791 +0200
@@ -50,7 +50,7 @@
     _STEP_DATA
 } _step_t;
 
-uint16_t _altData = OFF;
+static uint16_t _altData = OFF;
 void modbus_set_alternative_data(uint8_t enabled, uint8_t value)
 {
   _altData = value << 8 | enabled; //atomic write
@@ -72,6 +72,35 @@
   }
 }
 
+static uint32_t _responseDelay = 0;
+void modbus_set_response_delay(uint16_t value)
+{
+#ifdef _WIN32
+    _responseDelay = value;
+#else
+    _responseDelay = value * 1000000;
+#endif
+}
+
+static inline void wait_response_delay(void)
+{
+  uint32_t currentResponseDelay = _responseDelay;
+  if (currentResponseDelay > 0) {
+#ifdef _WIN32
+    /* usleep doesn't exist on Windows */
+    Sleep(currentResponseDelay);
+#else
+    /* usleep source code */
+    struct timespec request, remaining;
+    request.tv_sec = 0;
+    request.tv_nsec = currentResponseDelay;
+    while (nanosleep(&request, &remaining) == -1 && errno == EINTR)
+        request = remaining;
+#endif
+  }
+}
+
+
 const char *modbus_strerror(int errnum) {
     switch (errnum) {
     case EMBXILFUN:
@@ -1061,6 +1090,7 @@
         break;
     }
 
+    wait_response_delay();
     return send_msg(ctx, rsp, rsp_length);
 }
 
@@ -1445,6 +1475,7 @@
         break;
     }
 
+    wait_response_delay();
     return send_msg(ctx, rsp, rsp_length);
 }
 
@@ -1472,6 +1503,7 @@
     /* Positive exception code */
     if (exception_code < MODBUS_EXCEPTION_MAX) {
         rsp[rsp_length++] = exception_code;
+        wait_response_delay();
         return send_msg(ctx, rsp, rsp_length);
     } else {
         errno = EINVAL;
