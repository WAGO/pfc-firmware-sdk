From bc7b2285870f3d017020b7f9bdf787619ee4e250 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Karsten=20N=C3=BCnthel?= <karsten.nuenthel@wago.com>
Date: Mon, 7 Apr 2014 10:59:03 +0200
Subject: [PATCH] special reply functions

---
 src/modbus-data.c |   6 +-
 src/modbus-tcp.c  |   2 +-
 src/modbus.c      | 406 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/modbus.h      |  10 +-
 4 files changed, 418 insertions(+), 6 deletions(-)

diff --git a/src/modbus-data.c b/src/modbus-data.c
index a13362d..9a00c17 100644
--- a/src/modbus-data.c
+++ b/src/modbus-data.c
@@ -173,12 +173,10 @@ uint32_t modbus_get_bytes_from_bitmap16(const uint16_t *src, uint32_t index,
     }
 
     src++;
-    tab_byte[nb_bytes] = MODBUS_GET_LOW_BYTE(bitmap_value);
-    nb_bytes++;
+    tab_byte[nb_bytes++] = bitmap_value & 0xFF; //get low byte
     if (bitmap_size > 8)
     {
-      tab_byte[nb_bytes] = MODBUS_GET_HIGH_BYTE(bitmap_value);
-      nb_bytes++;
+      tab_byte[nb_bytes++] = bitmap_value >> 8; // get high byte
     }
     nb_bits -= bitmap_size;
   }
diff --git a/src/modbus-tcp.c b/src/modbus-tcp.c
index 2885614..713fc88 100644
--- a/src/modbus-tcp.c
+++ b/src/modbus-tcp.c
@@ -1168,7 +1168,7 @@ int modbus_udp_pi_bind(modbus_t *ctx)
             ctx->s = new_socket;
             break;
         }
-		close(new_socket);
+        close(new_socket);
         if (ctx->debug) {
         	perror("bind");
         }
diff --git a/src/modbus.c b/src/modbus.c
index d88caa2..61a2340 100644
--- a/src/modbus.c
+++ b/src/modbus.c
@@ -50,6 +50,28 @@ typedef enum {
     _STEP_DATA
 } _step_t;
 
+uint16_t _altData = OFF;
+void modbus_set_alternative_data(uint8_t enabled, uint8_t value)
+{
+  _altData = value << 8 | enabled; //atomic write
+}
+
+static void modbus_get_alternative_data(uint8_t *enabled, uint8_t *value)
+{
+  uint16_t tmp = _altData; //atomic read
+  *enabled = tmp & 0xFF;
+  *value = tmp >> 8;
+}
+
+static inline void modbus_set_fixdata(uint8_t *pData, uint32_t length, uint8_t value)
+{
+  const uint8_t * const pDataEnd = pData + length;
+  while (pData < pDataEnd) {
+      *pData = value;
+      pData++;
+  }
+}
+
 const char *modbus_strerror(int errnum) {
     switch (errnum) {
     case EMBXILFUN:
@@ -960,6 +982,390 @@ int modbus_reply(modbus_t *ctx, const uint8_t *req,
     return send_msg(ctx, rsp, rsp_length);
 }
 
+int modbus_reply_request(modbus_t *ctx, modbus_request_t *mb_request,
+                         modbus_mapping_t *mb_mapping)
+{
+    const uint8_t *req = mb_request->begin;
+    int req_length = mb_request->length;
+    int offset = ctx->backend->header_length;
+    int slave = req[offset - 1];
+    int function = req[offset];
+    uint16_t address = (req[offset + 1] << 8) + req[offset + 2];
+    uint8_t rsp[MAX_MESSAGE_LENGTH];
+    int rsp_length = 0;
+    sft_t sft;
+    uint8_t altDataEnabled;
+    uint8_t altDataValue;
+
+    modbus_get_alternative_data(&altDataEnabled, &altDataValue);
+
+    if (ctx->backend->filter_request(ctx, slave) == 1) {
+        /* Filtered */
+        return 0;
+    }
+
+    sft.slave = slave;
+    sft.function = function;
+    sft.t_id = ctx->backend->prepare_response_tid(req, &req_length);
+
+    switch (function) {
+    case _FC_READ_COILS: {
+        int nb = (req[offset + 3] << 8) + req[offset + 4];
+
+        if (nb < 1 || MODBUS_MAX_READ_BITS < nb) {
+            if (ctx->debug) {
+                fprintf(stderr,
+                        "Illegal nb of values %d in read_bits (max %d)\n",
+                        nb, MODBUS_MAX_READ_BITS);
+            }
+            rsp_length = response_exception(
+                ctx, &sft,
+                MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp);
+        } else if ((address + nb) > mb_mapping->nb_bits) {
+            if (ctx->debug) {
+                fprintf(stderr, "Illegal data address %0X in read_bits\n",
+                        address + nb);
+            }
+            rsp_length = response_exception(
+                ctx, &sft,
+                MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp);
+        } else {
+            uint32_t nb_bytes = (nb / 8) + ((nb % 8) ? 1 : 0);
+            rsp_length = ctx->backend->build_response_basis(&sft, rsp);
+            rsp[rsp_length++] = (uint8_t)nb_bytes;
+            if (altDataEnabled == OFF) {
+                rsp_length += modbus_get_bytes_from_bitmap16(mb_mapping->tab_bits,
+                                                             address, nb, &rsp[rsp_length]);
+            } else {
+                modbus_set_fixdata(&rsp[rsp_length], nb_bytes, altDataValue);
+                rsp_length += nb_bytes;
+            }
+            mb_request->processed = TRUE;
+        }
+    }
+        break;
+    case _FC_READ_DISCRETE_INPUTS: {
+        /* Similar to coil status (but too many arguments to use a
+         * function) */
+        int nb = (req[offset + 3] << 8) + req[offset + 4];
+
+        if (nb < 1 || MODBUS_MAX_READ_BITS < nb) {
+            if (ctx->debug) {
+                fprintf(stderr,
+                        "Illegal nb of values %d in read_input_bits (max %d)\n",
+                        nb, MODBUS_MAX_READ_BITS);
+            }
+            rsp_length = response_exception(
+                ctx, &sft,
+                MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp);
+        } else if ((address + nb) > mb_mapping->nb_input_bits) {
+            if (ctx->debug) {
+                fprintf(stderr, "Illegal data address %0X in read_input_bits\n",
+                        address + nb);
+            }
+            rsp_length = response_exception(
+                ctx, &sft,
+                MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp);
+        } else {
+            uint32_t nb_bytes = (nb / 8) + ((nb % 8) ? 1 : 0);
+            rsp_length = ctx->backend->build_response_basis(&sft, rsp);
+            rsp[rsp_length++] = (uint8_t)nb_bytes;
+            if (altDataEnabled == OFF) {
+                rsp_length += modbus_get_bytes_from_bitmap16(mb_mapping->tab_input_bits,
+                                                             address, nb, &rsp[rsp_length]);
+            } else {
+                modbus_set_fixdata(&rsp[rsp_length], nb_bytes, altDataValue);
+                rsp_length += nb_bytes;
+            }
+            mb_request->processed = TRUE;
+        }
+    }
+        break;
+    case _FC_READ_HOLDING_REGISTERS: {
+        int nb = (req[offset + 3] << 8) + req[offset + 4];
+
+        if (nb < 1 || MODBUS_MAX_READ_REGISTERS < nb) {
+            if (ctx->debug) {
+                fprintf(stderr,
+                        "Illegal nb of values %d in read_holding_registers (max %d)\n",
+                        nb, MODBUS_MAX_READ_REGISTERS);
+            }
+            rsp_length = response_exception(
+                ctx, &sft,
+                MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp);
+        } else if ((address + nb) > mb_mapping->nb_registers) {
+            if (ctx->debug) {
+                fprintf(stderr, "Illegal data address %0X in read_registers\n",
+                        address + nb);
+            }
+            rsp_length = response_exception(
+                ctx, &sft,
+                MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp);
+        } else {
+            uint32_t nb_bytes = nb << 1;
+            rsp_length = ctx->backend->build_response_basis(&sft, rsp);
+            rsp[rsp_length++] = (uint8_t)nb_bytes;
+            if (altDataEnabled == OFF) {
+                int i;
+                for (i = address; i < address + nb; i++) {
+                    rsp[rsp_length++] = mb_mapping->tab_registers[i] >> 8;
+                    rsp[rsp_length++] = mb_mapping->tab_registers[i] & 0xFF;
+                }
+            } else {
+                modbus_set_fixdata(&rsp[rsp_length], nb_bytes, altDataValue);
+                rsp_length += nb_bytes;
+            }
+            mb_request->processed = TRUE;
+        }
+    }
+        break;
+    case _FC_READ_INPUT_REGISTERS: {
+        /* Similar to holding registers (but too many arguments to use a
+         * function) */
+        int nb = (req[offset + 3] << 8) + req[offset + 4];
+
+        if (nb < 1 || MODBUS_MAX_READ_REGISTERS < nb) {
+            if (ctx->debug) {
+                fprintf(stderr,
+                        "Illegal nb of values %d in read_input_registers (max %d)\n",
+                        nb, MODBUS_MAX_READ_REGISTERS);
+            }
+            rsp_length = response_exception(
+                ctx, &sft,
+                MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp);
+        } else if ((address + nb) > mb_mapping->nb_input_registers) {
+            if (ctx->debug) {
+                fprintf(stderr, "Illegal data address %0X in read_input_registers\n",
+                        address + nb);
+            }
+            rsp_length = response_exception(
+                ctx, &sft,
+                MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp);
+        } else {
+            uint32_t nb_bytes = nb << 1;
+            rsp_length = ctx->backend->build_response_basis(&sft, rsp);
+            rsp[rsp_length++] = (uint8_t)nb_bytes;
+            if (altDataEnabled == OFF) {
+                int i;
+                for (i = address; i < address + nb; i++) {
+                    rsp[rsp_length++] = mb_mapping->tab_input_registers[i] >> 8;
+                    rsp[rsp_length++] = mb_mapping->tab_input_registers[i] & 0xFF;
+                }
+            } else {
+                modbus_set_fixdata(&rsp[rsp_length], nb_bytes, altDataValue);
+                rsp_length += nb_bytes;
+            }
+            mb_request->processed = TRUE;
+        }
+    }
+        break;
+    case _FC_WRITE_SINGLE_COIL:
+        if (address >= mb_mapping->nb_bits) {
+            if (ctx->debug) {
+                fprintf(stderr, "Illegal data address %0X in write_bit\n",
+                        address);
+            }
+            rsp_length = response_exception(
+                ctx, &sft,
+                MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp);
+        } else {
+            int data = (req[offset + 3] << 8) + req[offset + 4];
+
+            if (data == 0xFF00 || data == 0x0) {
+                uint8_t status = (data) ? ON : OFF;
+                modbus_set_bitmap16_from_bytes(mb_mapping->tab_bits, address, 1, &status);
+                memcpy(rsp, req, req_length);
+                rsp_length = req_length;
+                mb_request->processed = TRUE;
+            } else {
+                if (ctx->debug) {
+                    fprintf(stderr,
+                            "Illegal data value %0X in write_bit request at address %0X\n",
+                            data, address);
+                }
+                rsp_length = response_exception(
+                    ctx, &sft,
+                    MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp);
+            }
+        }
+        break;
+    case _FC_WRITE_SINGLE_REGISTER:
+        if (address >= mb_mapping->nb_registers) {
+            if (ctx->debug) {
+                fprintf(stderr, "Illegal data address %0X in write_register\n",
+                        address);
+            }
+            rsp_length = response_exception(
+                ctx, &sft,
+                MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp);
+        } else {
+            int data = (req[offset + 3] << 8) + req[offset + 4];
+
+            mb_mapping->tab_registers[address] = data;
+            memcpy(rsp, req, req_length);
+            rsp_length = req_length;
+            mb_request->processed = TRUE;
+        }
+        break;
+    case _FC_WRITE_MULTIPLE_COILS: {
+        int nb = (req[offset + 3] << 8) + req[offset + 4];
+
+        if (nb < 1 || MODBUS_MAX_WRITE_BITS < nb) {
+            if (ctx->debug) {
+                fprintf(stderr,
+                        "Illegal nb of values %d in write_bits (max %d)\n",
+                        nb, MODBUS_MAX_WRITE_BITS);
+            }
+            rsp_length = response_exception(
+                ctx, &sft,
+                MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp);
+        } else if ((address + nb) > mb_mapping->nb_bits) {
+            if (ctx->debug) {
+                fprintf(stderr, "Illegal data address %0X in write_bits\n",
+                        address + nb);
+            }
+            rsp_length = response_exception(
+                ctx, &sft,
+                MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp);
+        } else {
+            /* 6 = byte count */
+            modbus_set_bitmap16_from_bytes(mb_mapping->tab_bits, address, nb, &req[offset + 6]);
+
+            rsp_length = ctx->backend->build_response_basis(&sft, rsp);
+            /* 4 to copy the bit address (2) and the quantity of bits */
+            memcpy(rsp + rsp_length, req + rsp_length, 4);
+            rsp_length += 4;
+            mb_request->processed = TRUE;
+        }
+    }
+        break;
+    case _FC_WRITE_MULTIPLE_REGISTERS: {
+        int nb = (req[offset + 3] << 8) + req[offset + 4];
+
+        if (nb < 1 || MODBUS_MAX_WRITE_REGISTERS < nb) {
+            if (ctx->debug) {
+                fprintf(stderr,
+                        "Illegal nb of values %d in write_registers (max %d)\n",
+                        nb, MODBUS_MAX_WRITE_REGISTERS);
+            }
+            rsp_length = response_exception(
+                ctx, &sft,
+                MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp);
+        } else if ((address + nb) > mb_mapping->nb_registers) {
+            if (ctx->debug) {
+                fprintf(stderr, "Illegal data address %0X in write_registers\n",
+                        address + nb);
+            }
+            rsp_length = response_exception(
+                ctx, &sft,
+                MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp);
+        } else {
+            int i, j;
+            for (i = address, j = 6; i < address + nb; i++, j += 2) {
+                /* 6 and 7 = first value */
+                mb_mapping->tab_registers[i] =
+                    (req[offset + j] << 8) + req[offset + j + 1];
+            }
+
+            rsp_length = ctx->backend->build_response_basis(&sft, rsp);
+            /* 4 to copy the address (2) and the no. of registers */
+            memcpy(rsp + rsp_length, req + rsp_length, 4);
+            rsp_length += 4;
+            mb_request->processed = TRUE;
+        }
+    }
+        break;
+    case _FC_REPORT_SLAVE_ID: {
+        int str_len;
+        int byte_count_pos;
+
+        rsp_length = ctx->backend->build_response_basis(&sft, rsp);
+        /* Skip byte count for now */
+        byte_count_pos = rsp_length++;
+        rsp[rsp_length++] = _REPORT_SLAVE_ID;
+        /* Run indicator status to ON */
+        rsp[rsp_length++] = 0xFF;
+        /* LMB + length of LIBMODBUS_VERSION_STRING */
+        str_len = 3 + strlen(LIBMODBUS_VERSION_STRING);
+        memcpy(rsp + rsp_length, "LMB" LIBMODBUS_VERSION_STRING, str_len);
+        rsp_length += str_len;
+        rsp[byte_count_pos] = rsp_length - byte_count_pos - 1;
+        mb_request->processed = TRUE;
+    }
+        break;
+    case _FC_READ_EXCEPTION_STATUS:
+        if (ctx->debug) {
+            fprintf(stderr, "FIXME Not implemented\n");
+        }
+        errno = ENOPROTOOPT;
+        return -1;
+        break;
+
+    case _FC_WRITE_AND_READ_REGISTERS: {
+        int nb = (req[offset + 3] << 8) + req[offset + 4];
+        uint16_t address_write = (req[offset + 5] << 8) + req[offset + 6];
+        int nb_write = (req[offset + 7] << 8) + req[offset + 8];
+        int nb_write_bytes = req[offset + 9];
+
+        if (nb_write < 1 || MODBUS_MAX_RW_WRITE_REGISTERS < nb_write ||
+            nb < 1 || MODBUS_MAX_READ_REGISTERS < nb ||
+            nb_write_bytes != nb_write * 2) {
+            if (ctx->debug) {
+                fprintf(stderr,
+                        "Illegal nb of values (W%d, R%d) in write_and_read_registers (max W%d, R%d)\n",
+                        nb_write, nb,
+                        MODBUS_MAX_RW_WRITE_REGISTERS, MODBUS_MAX_READ_REGISTERS);
+            }
+            rsp_length = response_exception(
+                ctx, &sft,
+                MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp);
+        } else if ((address + nb) > mb_mapping->nb_registers ||
+                   (address_write + nb_write) > mb_mapping->nb_registers) {
+            if (ctx->debug) {
+                fprintf(stderr,
+                        "Illegal data read address %0X or write address %0X write_and_read_registers\n",
+                        address + nb, address_write + nb_write);
+            }
+            rsp_length = response_exception(ctx, &sft,
+                                            MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp);
+        } else {
+            int i, j;
+            uint16_t nb_bytes = nb << 1;
+            rsp_length = ctx->backend->build_response_basis(&sft, rsp);
+            rsp[rsp_length++] = (uint8_t)nb_bytes;
+
+            /* Write first.
+               10 and 11 are the offset of the first values to write */
+            for (i = address_write, j = 10; i < address_write + nb_write; i++, j += 2) {
+                mb_mapping->tab_registers[i] =
+                    (req[offset + j] << 8) + req[offset + j + 1];
+            }
+
+            /* and read the data for the response */
+            if (altDataEnabled == OFF) {
+                for (i = address; i < address + nb; i++) {
+                    rsp[rsp_length++] = mb_mapping->tab_registers[i] >> 8;
+                    rsp[rsp_length++] = mb_mapping->tab_registers[i] & 0xFF;
+                }
+            } else {
+                modbus_set_fixdata(&rsp[rsp_length], nb_bytes, altDataValue);
+                rsp_length += nb_bytes;
+            }
+            mb_request->processed = TRUE;
+        }
+    }
+        break;
+
+    default:
+        rsp_length = response_exception(ctx, &sft,
+                                        MODBUS_EXCEPTION_ILLEGAL_FUNCTION,
+                                        rsp);
+        break;
+    }
+
+    return send_msg(ctx, rsp, rsp_length);
+}
+
 int modbus_reply_exception(modbus_t *ctx, const uint8_t *req,
                            unsigned int exception_code)
 {
diff --git a/src/modbus.h b/src/modbus.h
index 2b7f27c..760d26f 100644
--- a/src/modbus.h
+++ b/src/modbus.h
@@ -125,6 +125,12 @@ extern const unsigned int libmodbus_version_micro;
 typedef struct _modbus modbus_t;
 
 typedef struct {
+    const uint8_t *begin;
+    int length;
+    int processed;
+} modbus_request_t;
+
+typedef struct {
     int nb_bits;
     int nb_input_bits;
     int nb_input_registers;
@@ -192,9 +198,11 @@ int modbus_receive_confirmation(modbus_t *ctx, uint8_t *rsp);
 
 int modbus_reply(modbus_t *ctx, const uint8_t *req,
                  int req_length, modbus_mapping_t *mb_mapping);
+int modbus_reply_request(modbus_t *ctx, modbus_request_t *mb_request,
+                         modbus_mapping_t *mb_mapping);
 int modbus_reply_exception(modbus_t *ctx, const uint8_t *req,
                            unsigned int exception_code);
-
+void modbus_set_alternative_data(uint8_t enabled, uint8_t value);
 /**
  * UTILS FUNCTIONS
  **/
-- 
1.9.0

