#!/bin/bash
#-----------------------------------------------------------------------------#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2021-2022 WAGO GmbH & Co. KG
#-----------------------------------------------------------------------------#
#-----------------------------------------------------------------------------#
# BOOTP handling
#
# Starts bootp client and handles the parameters of a bootp reply.
#
# Author: WAGO GmbH & Co. KG.
#-----------------------------------------------------------------------------#



interface=$2
NETWORK_CONFIG=/etc/config-tools/network_config
LEASE_FILE="/tmp/dhcp-bootp-data-$interface"

notify_event () {
  local iface="$1"
  local action="$2"

  local json_config='{"interface":"'$iface'" , "action":"'$action'" }'

  out=$($NETWORK_CONFIG --dynamic-ip-event --set "${json_config}" --format=json)

  if [[ $? != 0 ]]; then
    logger -t "bootpc-startup.default" "failed to send dynamic ip event: $out"
  fi
}

start () {

    # Open firewall ports if firewall is enabled.
    if [[ $(/etc/config-tools/firewall firewall --is-enabled) == "enabled" ]]; then
        /etc/config-tools/firewall bootp --set-if on "$interface" --apply up
        trap "/etc/config-tools/set_bootp_config $interface close" EXIT
    fi

    while [ -z "$IPADDR" ]
    do
        eval $(/sbin/bootpc --dev "$interface" --serverbcast --returniffail --timeoutwait 0) >> /dev/null
        sleep 3
    done

    # Close firewall ports
    if [[ $(/etc/config-tools/firewall firewall --is-enabled) == "enabled" ]]; then
        /etc/config-tools/firewall bootp --set-if off "$interface" --apply up
        trap "" EXIT
    fi

    echo "IPADDRESS=$IPADDR" > "$LEASE_FILE"
    echo "NETMASK=$NETMASK" >> "$LEASE_FILE"

    # Save default gateways
    if [[ -n "$GATEWAYS" ]] ; then
        index=1
        for i in $GATEWAYS; do
            echo "DEFAULT_GATEWAY_$index=$i" >> "$LEASE_FILE"
            index=$((index + 1))
        done
    fi

    # Write hostname and dns domainname
    [[ -n "$HOSTNAME" ]] && echo "DHCPHOSTNAME=$HOSTNAME" >> "$LEASE_FILE"
    [[ -n "$DOMAIN" ]] && echo "DHCPDOMAIN=$DOMAIN" >> "$LEASE_FILE"

    # Write dns server to tmp file
    if [[ -n "$DNSSRVS" ]] ; then
        index=1
        for i in $DNSSRVS; do
            echo "DNS_SERVER_$index=$i" >> "$LEASE_FILE"
            index=$((index + 1))
        done
    fi

    # Write ntp server to tmp file
    if [[ -n "$NTPSRVS" ]] ; then
        index=1
        for i in $NTPSRVS; do
            echo "NTP_SERVER_$index=$i" >> "$LEASE_FILE"
            index=$((index + 1))
        done
    fi
}

case "$1" in
    start)
        start
        notify_event "$interface" bound
        ;;

    deconfig)
    	/bin/rm -f "$LEASE_FILE"
        ;;
        
esac
