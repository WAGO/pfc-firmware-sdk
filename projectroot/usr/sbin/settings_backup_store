#!/bin/bash
#-----------------------------------------------------------------------------#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# This file is part of PTXdist package wago-custom-install.
#
# Copyright (c) 2018-2020 WAGO Kontakttechnik GmbH & Co. KG
#-----------------------------------------------------------------------------#
#-----------------------------------------------------------------------------#
# Script:   settings_backup_store
#
# Brief:    Save the actual configuration settings of PFC.
#
# Author:   StM: WAGO Kontakttechnik GmbH & Co. KG
# Author:   AGa: WAGO Kontakttechnik GmbH & Co. KG
# Author:   HJH: WAGO Kontakttechnik GmbH & Co. KG
# Author:   MOe: WAGO Kontakttechnik GmbH & Co. KG
# Author:   OG:  WAGO Kontakttechnik GmbH & Co. KG
# Author:   MSc: WAGO Kontakttechnik GmbH & Co. KG
#-----------------------------------------------------------------------------#

# load common backup/restore functions
if [ ! -f "/usr/sbin/settings_backup_lib" ]; then
  echo "settings_backup_lib missing"
  exit 64
fi

source /usr/sbin/settings_backup_lib


#
# Save the value of a parameter to config backup file.
#
# Param 1:  parameterName: name of the parameter
# Param 2:  parameterValue: value of the parameter 
# Param 3:  backupFile:  backup filename
#
# Return: status of I/O operation
#
SaveBackupValue ()
{
  local parameterName="$1"
  local parameterValue="$2"
  local backupFile="$3"
  local status=$SUCCESS
  local stringToSave="$parameterName=$parameterValue"
    
  if [ -n "$backupFile" ]; then
    echo "$stringToSave" >> "$backupFile"
    if [[ $? != $SUCCESS ]]; then
      status=$WRITE_FILE_ERROR
    fi  
  else
    status=$CONFIG_FILE_MISSING
  fi  
  return $status
}

#-------------- main-programm ------------------------#

status=$SUCCESS
backupFile="$1"

#-------------------------------------------------------------
# show help-text if requested
#-------------------------------------------------------------
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  echo
  echo "* save all configuration settings to backup file *"
  echo
  echo "Usage: $(basename "$0")  < backup file name >" 
  echo
  echo "Note: after restoring a reboot is necessary to make the changes active"
  echo
  exit $status
fi

if [[ "$RELEASE_VERSION" == "yes" ]]; then
  SuppressMessageOutput
fi

#-------------------------------------------------------------
# save settings
#-------------------------------------------------------------

if [ -z "$backupFile" ]; then
  #unknown operation
  exit "$INVALID_PARAMETER"
fi

setupBackupFile()
{
  local u="$(umask)"
  rm -f "$backupFile" &&
  umask 137 &&
  : > "$backupFile" &&
  chgrp www "$backupFile" 2>/dev/null
  umask "$u"
}

createBackupFile()
{
    #-------------------------------------------------------------
    # save firmware revision
    firmwareRevision="$(/etc/config-tools/get_coupler_details firmware-revision)"
    ProcessErrBackupOperation $? "Cannot save firmware revision" "$firmwareRevision"

    SaveBackupValue "firmware-revision" "$firmwareRevision" "$backupFile"
    
    #-------------------------------------------------------------
    # process the values from the global list in a loop
    configParamIndex=0
    while [ "$configParamIndex" -lt "${#configParam[*]}" ]; do

      # filter param name and function to read it from parameter list
      paramName=$(echo ${configParam[$configParamIndex]} | cut -d\; -f1)
      readFunction=$(echo ${configParam[$configParamIndex]} | cut -d\; -f2)
      # read value from coupler and if no error occured, write it to backup file
      paramValue="$($readFunction)"
      read_status=$?
      paramValue="$(UriEncode "$paramValue")"
      if [ "$read_status" = "$SUCCESS" ]; then
        SaveBackupValue "$paramName" "$paramValue" "$backupFile"
      elif [ "$read_status" = "$UNKNOWN_PARAMETER" ]; then  
        ReportError "$read_status" "Unknown parameter \"$paramName\" " 
        backup_error_count=$((backup_error_count+1)) 
      else
        ReportError $read_status "Error: \"$read_status\" by reading of parameter \"$paramName\" "
        backup_error_count=$((backup_error_count+1)) 
      fi

      configParamIndex=$[$configParamIndex + 1]

    done
    sync
    
    # add other single values to save - read from coupler and save in backup file
    #
    # example:
    # keyboardLayout=/etc/config-tools/get_coupler_details keyboard-layout
    # SaveBackupValue "keyboard-layout" $keyboardLayout $backupFile
    #
    #-------------------------------------------------------------
    # Save GPRS password, encoded with base64
    passwd="$(/etc/config-tools/settings_backup_mdmd backup gprs-password)" 
    paramValue=$(echo "$passwd" | base64)
    paramValue=$(UriEncode "$paramValue")
    if [ "$?" = 0 ]; then
        SaveBackupValue "gprs-password" "$paramValue" "$backupFile"
    fi
    
    #-------------------------------------------------------------
    # save single dns server - count can differ
    dnsServerNo=1
    dnsServer=$(/etc/config-tools/get_dns_server $dnsServerNo)
    ProcessErrBackupOperation $? "Failed to get dns server" $dnsServerNo
    while [ -n "$dnsServer" ]; do
      print_dbg "dnsServer:" $dnsServerNo $dnsServer
      SaveBackupValue "dns-server-$dnsServerNo" "$dnsServer" "$backupFile"
      dnsServerNo=$[$dnsServerNo + 1]
      dnsServer=$(/etc/config-tools/get_dns_server $dnsServerNo)
      ProcessErrBackupOperation $? "Failed to get dns server" $dnsServerNo
    done
    
    #-------------------------------------------------------------
    # save network settings
    BACKUP_TARGET_VERSION_PARAM=
    if [ -n "${WAGO_BACKUP_TARGET_VERSION:-}" ]; then
      BACKUP_TARGET_VERSION_PARAM="--backup-targetversion ${WAGO_BACKUP_TARGET_VERSION:-}"
    fi

    /etc/config-tools/network_config --backup $backupFile $BACKUP_TARGET_VERSION_PARAM
    ProcessErrRestoreOperation $? "Failed to get network parameters by " "/etc/config-tools/network_config"
     
    #-------------------------------------------------------------
    # save dhcp server settings
    /etc/config-tools/config_dnsmasq_c --store-config "$backupFile"
    ProcessErrRestoreOperation $? "Failed to get config_dnsmasq by " "/etc/config-tools/config_dnsmasq_c"
         
    #-------------------------------------------------------------
    # save dns service settings
    state=$(/etc/config-tools/get_dns_service_config -g dns-state)
    ProcessErrBackupOperation $? "Failed to get dns_service config dns-state from port:" $port
    mode=$(/etc/config-tools/get_dns_service_config -g dns-mode)
    ProcessErrBackupOperation $? "Failed to get dns_service config dns-mode from port:" $port
    fixhosts=$(/etc/config-tools/get_dns_service_config -g dns-fix-host)
    ProcessErrBackupOperation $? "Failed to get dns_service config fix-host from port:" $port
    SaveBackupValue "dns-state" "${state}" "$backupFile"
    SaveBackupValue "dns-mode" "${mode}" "$backupFile"
    SaveBackupValue "dns-fixhosts" "${fixhosts}" "$backupFile"

    #-------------------------------------------------------------
    # save snmp user definitions

    USE_USER_DEFINED_DEVICE_NAME=no
    USE_USER_DEFINED_DESCRIPTION=no
    [[ -e "$SNMP_USER_DEFINES_FILE" ]] && . "$SNMP_USER_DEFINES_FILE"

    SaveBackupValue "snmp-use-user-defined-device-name" "$USE_USER_DEFINED_DEVICE_NAME" "$backupFile"
    SaveBackupValue "snmp-use-user-defined-description" "$USE_USER_DEFINED_DESCRIPTION" "$backupFile"

    #-------------------------------------------------------------
    # save snmp v1/v2c trap configs
    trapReceiverNo=1
    address=`/etc/config-tools/get_snmp_data v1-v2c-trap-receiver-address $trapReceiverNo`
    while [ -n "$address" ]; do
      communityName=`/etc/config-tools/get_snmp_data v1-v2c-trap-receiver-community-name $trapReceiverNo`
      ProcessErrBackupOperation $? "v1-v2c-trap-receiver-community-name from :" $trapReceiverNo
      version=`/etc/config-tools/get_snmp_data v1-v2c-trap-receiver-version $trapReceiverNo`
      ProcessErrBackupOperation $? "v1-v2c-trap-receiver-version from :" $trapReceiverNo

      SaveBackupValue "v1-v2c-trap-receiver-address-${trapReceiverNo}" "$address" "$backupFile"
      SaveBackupValue "v1-v2c-trap-receiver-community-name-${trapReceiverNo}" "$communityName" "$backupFile"
      SaveBackupValue "v1-v2c-trap-receiver-version-${trapReceiverNo}" "$version" "$backupFile"

      trapReceiverNo=$[$trapReceiverNo + 1]
      address=`/etc/config-tools/get_snmp_data v1-v2c-trap-receiver-address $trapReceiverNo`
      ProcessErrBackupOperation $? "v1-v2c-trap-receiver-address from :" $trapReceiverNo
    done
    #-------------------------------------------------------------
    #save snmp v3 configs
    userNo=1
    authName=`/etc/config-tools/get_snmp_data v3-auth-name $userNo`
    while [ -n "$authName" ]; do
      authType=`/etc/config-tools/get_snmp_data v3-auth-type $userNo`
      ProcessErrBackupOperation $? " v3-auth-name for userNo:" $userNo
      authKey=`/etc/config-tools/get_snmp_data v3-auth-key $userNo`
      ProcessErrBackupOperation $? "v3-auth-key for userNo:" $userNo
      privacy=`/etc/config-tools/get_snmp_data v3-privacy $userNo`
      ProcessErrBackupOperation $? "v3-privacy for userNo:" $userNo
      privacyKey=`/etc/config-tools/get_snmp_data v3-privacy-key $userNo`
      ProcessErrBackupOperation $? "v3-privacy-key for userNo:" $userNo
      notificationReceiver=`/etc/config-tools/get_snmp_data v3-notification-receiver $userNo`
      ProcessErrBackupOperation $? "v3-notification-receiver for userNo:" $userNo

      SaveBackupValue "v3-user-auth-name-${userNo}" "$authName" "$backupFile"
      SaveBackupValue "v3-user-auth-type-${userNo}" "$authType" "$backupFile"
      SaveBackupValue "v3-user-auth-key-${userNo}" "$authKey" "$backupFile"
      SaveBackupValue "v3-user-privacy-${userNo}" "$privacy" "$backupFile"
      SaveBackupValue "v3-user-privacy-key-${userNo}" "$privacyKey" "$backupFile"
      SaveBackupValue "v3-user-notification-receiver-${userNo}" "$notificationReceiver" "$backupFile"

      userNo=$[$userNo + 1]
      authName=`/etc/config-tools/get_snmp_data v3-auth-name $userNo`
    done

    # admin user password hash
    SaveBackupValue "linux-admin-pwd-info" $(/etc/config-tools/urlencode -e $(/etc/config-tools/get_user_hash --shadow-get-info admin)) "$backupFile"

    # backup firewall settings
    if [[ -x /etc/config-tools/firewall ]]; then
        /etc/config-tools/firewall firewall --backup >> "$backupFile"
        ProcessErrBackupOperation $? "Failed to backup firewall settings"
    else
        ReportError $INTERNAL_ERROR "Invalid firewall config tool"
        backup_error_count=$((backup_error_count+1))          
    fi

    # backup general firewall state
    if [[ -x /etc/config-tools/firewall ]]; then
        general_firewall_state=$(/etc/config-tools/firewall firewall --is-enabled)
        ProcessErrBackupOperation $? "Failed to get firewall_state"
        SaveBackupValue "general-firewall-state" $general_firewall_state "$backupFile"
    else
        ReportError $INTERNAL_ERROR "Invalid firewall config tool"
        backup_error_count=$((backup_error_count+1))       
    fi
    
    # backup VPN settings
    if [[ -x /etc/config-tools/settings_backup_vpn ]]; then
        /etc/config-tools/settings_backup_vpn backup >> "$backupFile"
        ProcessErrBackupOperation $? "Failed to backup vpn settings"
    else 
        ReportError $INTERNAL_ERROR "Invalid vpn config tool"
        backup_error_count=$((backup_error_count+1))
    fi
    
    # backup Check-System settings
    if [[ -x /usr/sbin/settings_backup_checksys ]]; then
        /usr/sbin/settings_backup_checksys backup >> "$backupFile"
        ProcessErrBackupOperation $? "Failed to backup Check-System settings"
    else 
        ReportError $INTERNAL_ERROR "Invalid Check-System config tool /usr/sbin/settings_backup_checksys"
        backup_error_count=$((backup_error_count+1))
    fi
    
    # backup Docker-Daemon settings
    if [[ -x /usr/sbin/settings_backup_docker ]]; then
        /usr/sbin/settings_backup_docker backup >> "$backupFile"
        ProcessErrBackupOperation $? "Failed to backup Docker-Daemon settings"
    else 
        ReportError $INTERNAL_ERROR "Invalid Docker-Deaemon config tool /usr/sbin/settings_backup_docker"
        backup_error_count=$((backup_error_count+1))
    fi
    
    # Save parameters of modular backup scripts
    for file in "$BACKUP_RESTORE_SCRIPT_DIR/"*; do
        if [[ -x $file ]]; then
            $file "--save" "$backupFile"
            ret=$?
            if [[ $ret != $SUCCESS ]]; then
                ReportError $INTERNAL_ERROR "Cannot save parameters for \"$file\" "
                backup_error_count=$((backup_error_count+1))
            fi
        fi
    done

    # Save packets versions
    echo "#PACKET VERSION" >> "$backupFile"
    if hash opkg 2>/dev/null; then
        opkg list-installed | grep -e ".* - " | sed -e 's/ - /=/' -e 's/^/#packet: /' >> "$backupFile"
    else
        ReportError $INTERNAL_ERROR "Program 'opkg' is not found"
    fi

    # end of other values to save

    report_info "Setting backup is done, \"$backup_error_count\" backup error(s) found" "$LOG_PREFIX"


    # remove file with last error (at this point we are not interested in errors of the single scripts)
    rm "$LAST_ERROR_FILENAME" > /dev/null 2> /dev/null
}

if ! setupBackupFile; then
  status=$FILE_NOT_WRITEABLE
  ReportError $status "$backupFile"
  exit $status
fi

# display progress bar
if [ -x "$(which pv)" ]; then
    # start backup as subprocess (we start progress bar in parallel and have to
    # know when the backup is over
    createBackupFile &
    pid_backup="$!"

    if [[ "$RELEASE_VERSION" == "yes" ]]; then
      RestoreMessageOutput
    fi
    (tail -f "$backupFile" | pv -N "settings" -l -pt -w 70 >/dev/null ) &

    # wait for completion of backup, kill progress bar when finished
    wait "$pid_backup"
    killall tail
else
    createBackupFile
fi

exit $status
