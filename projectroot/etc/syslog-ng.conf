#############################################################################
# Default syslog-ng.conf file
#

@version: 3.34
@include "/etc/syslog-ng.conf.d/*.conf"
@include "/etc/syslog_wago_plc.conf"
options { stats_freq(0); create_dirs(yes); threaded(no); log_fifo_size(100); log_msg_size(2048); };

source s_early {
        file("/var/log/earlymsg");
};

#standard syslog device
source s_local {
        unix-stream("/dev/log");
        internal();
};

#read kernel log to
source s_kernellog {
        file("/proc/kmsg");
};

#read local udp port for codesys3 log messages
source s_udp {
        udp(ip(127.0.0.1) port(514));
};


#collect normal logfiles the LOGMSG file in the directory choosen by LOGPATH
destination d_local {
        file("`LOGPATH``LOGMSG`" suppress(5));
};

destination d_runtime {
        file("`LOGPATH`/runtime.log" suppress(5));
};

destination d_cron {
        file("`LOGPATH`/cron.log" suppress(10));
};

destination d_kernel {
        file("`LOGPATH`/kernel.log" suppress(1));
};

destination d_syslog {
        file("`LOGPATH`/syslog.log" suppress(1));
};

destination d_sudo {
        file("`LOGPATH`/sudo.log" suppress(1));
};

template t_modem {
        template("${DATE} ${HOST} ${MSGHDR}\[${LEVEL}\] ${MESSAGE}\n");
};

destination d_modem {
        file("`LOGPATH`/modem.log" template(t_modem) suppress(5));

};

destination d_opcuaserver {
        file("`LOGPATH`/opcuaserver.log");

};

destination d_bacnet {
        file("`LOGPATH`/bacnet.log");

};

#parser for messages from led_error_server
parser p_wago_errorparser {
        csv_parser(columns("WERR.NAME", "WERR.PERM", "WERR.DATE","WERR.ID","WERR.SET", "WERR.PARAMS")
        delimiters("\t")
        flags(escape-none));
};

# remove passwords, hashes, keys, tokens etc. ...
rewrite r_config_user_mask_secrets {
        subst("new-password=[[:graph:]]*", "new-password=***", value("MESSAGE"));
        subst("confirm-password=[[:graph:]]*", "confirm-password=***", value("MESSAGE"));
        subst("old-password=[[:graph:]]*", "old-password=***", value("MESSAGE"));
        subst("\\$[[:digit:]]\\$[[:alnum:]][[:alnum:]\\$\.]*", "$*$***", value("MESSAGE"));
};

rewrite r_config_dataagent_mask_secrets {
        subst("theNewSharedAccessKey=[[:graph:]]*", "theNewSharedAccessKey=***", value("MESSAGE"));
        subst("theMqttPassword=[[:graph:]]*", "theMqttPassword=***", value("MESSAGE"));
};

rewrite r_config_snmp_mask_secrets {
        subst("v3-auth-key=[[:graph:]]*", "v3-auth-key=***", value("MESSAGE"));
        subst("v3-privacy-key=[[:graph:]]*", "v3-privacy-key=***", value("MESSAGE"));
};

rewrite r_config_mdmd_mask_secrets {
        subst("SimPin=[[:graph:]]*", "SimPin=***", value("MESSAGE"));
        subst("SimPuk=[[:graph:]]*", "SimPuk=***", value("MESSAGE"));
};

#filter for led_error_server
filter f_wago_erroserver {
        program("logforward");
};

filter f_runtime {
        program("CoDeSys") or program("Codesys3") or program("codesys3") or program("codesys");
};

filter f_cron {
        program("crond");
};

filter f_syslog {
        program("syslog-ng");
};

filter f_sudo {
        program("sudo");
};

filter f_modem {
        program(".*mdmd.*");
};

filter f_opcua {
        program(".*opcua.*");
};

filter f_bacnet {
        message("BACnet");
};

filter f_wago_ram_filter {
        "${WERR.PERM}" == "0"
};

filter f_wago_flash_filter {
        not(filter(f_wago_ram_filter));
};

# filter for firmware update scripts
filter f_fwupdate {
        program(".*fwupdate.*");
};

filter f_firewall_debug {
        program("firewall" flags(ignore-case)) and not level(err);
};

#template for writing log messages of led_error_server
template t_wago_log_template {
        template("${WERR.DATE} ${WERR.ID} ${WERR.NAME}: ${WERR.SET} ${WERR.PARAMS}\n");
};

#standart destination of logfile from led_error_server
destination d_wago_ram_default {
        file("`WAGOLOGPATH_RAM``WAGOLOGPREFIX`.log" template(t_wago_log_template));
};

destination d_wago_flash_default {
        file("`WAGOLOGPATH_PERSISTENT``WAGOLOGPREFIX`.log" template(t_wago_log_template));
};

destination d_fwupdate {
        file("/log/fwupdate.log");
};


#`LOGGING`

#standard log for LOG-IDs in ram
log {
        source(s_local);
        source(s_early);
        filter(f_wago_erroserver);
        parser(p_wago_errorparser);
        filter(f_wago_ram_filter);
        destination(d_wago_ram_default);
};

#standard log for LOG-IDs in flash
log {
        source(s_local);
        source(s_early);
        filter(f_wago_erroserver);
        parser(p_wago_errorparser);
        filter(f_wago_flash_filter);
        destination(d_wago_flash_default);
};


#filter for not writing led_error_server messages to d_local
filter f_local {
        not filter(f_wago_erroserver);
};

filter f_not_cron {
        not filter(f_cron);
};

filter f_not_syslog {
        not filter(f_syslog);
};

filter f_not_sudo {
        not filter(f_sudo);
};

filter f_not_runtime {
        not filter(f_runtime);
};

filter f_not_modem {
        not filter(f_modem);
};

filter f_not_firewall_debug {
        not filter(f_firewall_debug);
};

#standart log for syslog_messages
log {
        source(s_local);
        filter(f_local);
        filter(f_not_firewall_debug);
        filter(f_not_cron);
        filter(f_not_syslog);
        filter(f_not_sudo);
        filter(f_not_runtime);
        filter(f_not_modem);
        destination(d_local);
};

log {
        source(s_local);
        filter(f_cron);
        destination(d_cron);
};

log {
        source(s_kernellog);
        destination(d_kernel);
};

log {
        source(s_local);
        source(s_udp);
        filter(f_runtime);
        rewrite(r_config_user_mask_secrets);
        rewrite(r_config_dataagent_mask_secrets);
        rewrite(r_config_snmp_mask_secrets);
        rewrite(r_config_mdmd_mask_secrets);
        destination(d_runtime);
};

log {
        source(s_local);
        filter(f_syslog);
        destination(d_syslog);
};

log {
        source(s_local);
        filter(f_sudo);
        rewrite(r_config_user_mask_secrets);
        rewrite(r_config_dataagent_mask_secrets);
        rewrite(r_config_snmp_mask_secrets);
        rewrite(r_config_mdmd_mask_secrets);
        destination(d_sudo);
};

log {
        source(s_local);
        filter(f_modem);
        destination(d_modem);
};

#firmware-update log
log {
        source(s_local);
        filter(f_local);
        filter(f_fwupdate);
        destination(d_fwupdate);
};

log {
        source(s_local);
        filter(f_opcua);
        destination(d_opcuaserver);
};

log {
        source(s_local);
        filter(f_bacnet);
        destination(d_bacnet);
};
