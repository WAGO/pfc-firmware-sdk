#!/bin/bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2018 WAGO Kontakttechnik GmbH & Co. KG

#-----------------------------------------------------------------------------
# Script-name: update_routing
#
# Read routing, IP masquerading and port forwarding configuration from persistence
# and update system configuration.
#
# Author: WAGO Kontakttechnik GmbH & Co. KG.
#-----------------------------------------------------------------------------

# Set error on use of undefined shell variables
set -u

function Log
{
    [[ $# -gt 0 ]] && logger -t "update-routing" "$1"
}


function AddDefaultRoute
{
    local defgwip=$1
    local defgwmetric=$2
    
    local status=$SUCCESS
    ret=$($ROUTE add default gw "$defgwip" metric "$defgwmetric" 2>&1)
    # Ignore duplicates
    if [[ $? != 0 && $ret != "route: SIOCADDRT: File exists" ]]; then
        status=$INVALID_PARAMETER
        Log "$ret - default $defgwip $defgwmetric"
    fi
    
    echo "$status"
}


function AddHostRoute
{
    local dest_addr=$1
    local gw_addr=$2
    local metric=$3

    local status=$SUCCESS
    ret=$($ROUTE add "$dest_addr" gw "$gw_addr" metric "$metric" 2>&1)
    # Ignore duplicates
    if [[ $? != 0 && $ret != "route: SIOCADDRT: File exists" ]]; then
        status=$INVALID_PARAMETER
        Log "$ret - $dest_addr $gw_addr $metric"
    fi
    
    echo "$status"
}


function AddRoute
{
    local dest_addr=$1
    local dest_mask=$2
    local gw_addr=$3
    local metric=$4

    local status=$SUCCESS

    ret=$($ROUTE add -net "$dest_addr" netmask "$dest_mask" gw "$gw_addr" metric "$metric" 2>&1)
    # Ignore duplicates
    if [[ $? != 0 && $ret != "route: SIOCADDRT: File exists" ]]; then
        status=$INVALID_PARAMETER
        Log "$ret - $dest_addr $dest_mask $gw_addr $metric"
    fi
    
    echo "$status"
}



function DeleteRoute
{
    local dest_addr=$1
    local gw_addr=$2
    local dest_mask=$3
    local metric=$4
        
    if [[ "$dest_addr" != "default" ]]; then
        $ROUTE del -net "$dest_addr" netmask "$dest_mask" gw "$gw_addr" metric "$metric"  2>/dev/null
    else
        $ROUTE del "$dest_addr" gw "$gw_addr" metric "$metric"  2>/dev/null
    fi
}


function DeleteDhcpDefaultGateways()
{
    local _remove="false"
    
    # Are there previously delivert gateway values (route entries) that have to be removed?
    IFS=$'\n'
   
    shopt -s nullglob  # in case globbing was not successful
    for cfgfile in $DHCP_DATA_FILE_BACKUP_TEMPLATE* ; do
        # Get corresponding original (non-backup) configuration file
        local device_name=${cfgfile#$DHCP_DATA_FILE_BACKUP_TEMPLATE}

        if [[ -e $DHCP_DATA_FILE_TEMPLATE$device_name ]]; then
            # Configuration file exists. Check if it differs from backup file.
            local ret=$(diff -q "$cfgfile" "$DHCP_DATA_FILE_TEMPLATE""$device_name")
            [[ $ret ]] && _remove="true" # We do not have to change anything if files differ.
        else
            # Configuration file does not exist. Therefore remove routes stored to backup configuration file.
            _remove="true"
        fi

        # remove gateway entries
        if [[ "true" == "$_remove" ]]; then
            #Load dhcp-data-file content to array. Remove only gateways which are not part of this list.
            new_gateways=()
            [[ -e  $DHCP_DATA_FILE_TEMPLATE$device_name ]] && new_gateways=($($AWK 'BEGIN{RS="[ \t\n]+"; FS="="} /DEFAULT_GATEWAY/ {print $2}' "$DHCP_DATA_FILE_TEMPLATE$device_name" ))

            # Load backup file content.
            . "$cfgfile"
            local index=1
            local varname="DEFAULT_GATEWAY_$index"

            # Following line supports set -u. If variable given by varname is currently
            # not defined as shell variable, it will come into life with an empty value.
            # Using eval is save because no user input is fed into its arguments.
            local GWVALUE=$(eval echo \${$varname-})

            while [ "$GWVALUE" ]; do
                local _remove_gw="true"
                if [[ -n "${new_gateways[@]-}" ]]; then
                    for gw in "${new_gateways[@]}"; do
                        [[ "$gw" == "$GWVALUE" ]] && _remove_gw="false"; break
                    done
                fi
                [[ "true" == "$_remove_gw" ]] && DeleteRoute 0.0.0.0 "$GWVALUE" 0.0.0.0 "$DHCP_DEFAULT_METRIC"
                unset eval "${varname-}"

                index=$((index + 1))
                varname="DEFAULT_GATEWAY_$index"
                GWVALUE=$(eval echo \${$varname-})
            done
            unset eval "${varname-}"
        fi
    done
}


function DeleteRoutes
# Delete all routes specified in $ROUTING_CONFIG_REMOVE_FILE.
{
    if [[ -e "$ROUTING_CONFIG_REMOVE_FILE" ]]; then
        . "$ROUTING_CONFIG_REMOVE_FILE"
    
        if [[   -n "${static_dest_remove[@]-}"
             && -n "${static_dest_mask_remove[@]-}"
             && -n "${static_gw_remove[@]-}"
             && -n "${static_metric_remove[@]-}" ]]; then 

            local count=${#static_dest_remove[@]}

            #Check for array consistency
            local is_valid=FALSE
            [[ ${#static_dest_mask_remove[@]} == "$count" && ${#static_gw_remove[@]} == "$count" && ${#static_metric_remove[@]} == "$count" ]] && is_valid=TRUE
            
            if [[ $is_valid == TRUE ]]; then
                local index=0
                # Remove static routes.
                while [[ $index -lt $count ]]; do
                    DeleteRoute "${static_dest_remove[$index]}" "${static_gw_remove[$index]}" "${static_dest_mask_remove[$index]}" "${static_metric_remove[$index]}"
                    ((index++))
                done
            else
                # Found inconsistent array state
                SetLastError "Inconsistent remove route array state"
            fi
        fi
        
        rm "$ROUTING_CONFIG_REMOVE_FILE"
    fi
}


function IsValidInterfaceName
#
# Check if given interface name is valid.
#
# input: 1: interface name to check
# output:   TRUE  in case interface name is valid,
#           FALSE otherwise
{
    local ifname="$1"
    local isValid="FALSE"
    
    rex_name="^[a-zA-Z][a-zA-Z0-9]{1,14}$"
    [[ "$ifname" =~ $rex_name ]] && isValid="TRUE"
    echo $isValid
}


function HasForwardingEntry
{
    itf=$1
    prot=$2
    dport=$3
    destip=$4
    destport=$5

    local ret=$($AWK -v pattern="fw_port -i $itf -p $prot -m $prot --dport $dport -j DNAT --to-destination $destip:$destport" '$0 ~ pattern {print "HasEntry"}' /etc/firewall/iptables/ipcmn.xml)
    if [[ "HasEntry" == "$ret" ]]; then
        echo "TRUE"
    else
        echo "FALSE"
    fi
}


function SetGeneralForwarding
{
    local ret=$SUCCESS
    
    if [[ "enabled" == "$state" ]]; then
        echo 1 > "$IP_FORWARD"
        $FIREWALL iptables --set-forward on &> /dev/null
    elif [[ "disabled" == "$state" ]]; then
        echo 0 > "$IP_FORWARD"
        $FIREWALL iptables --set-forward off &> /dev/null
    else
        Log "Invalid general status value \"$state\"."
        ret=$INVALID_PARAMETER
    fi
    
    echo "$ret"
}

function SetMulticastRoutes
{
    local ret=$SUCCESS
    local status=$SUCCESS

    local bridges=$($BRCTL show | $GREP -E '^[[:alpha:]]' | $AWK '(NR>1)  {print $1}')
    for bridge in $bridges; do
        ret=$($ROUTE add -net 224.0.0.0 netmask 224.0.0.0 dev $bridge 2>&1)
        # Ignore duplicates
        if [[ $? != 0 && $ret != "route: SIOCADDRT: File exists" ]]; then
            status=$INVALID_PARAMETER
            Log "Failed to add multicast route for bridge: $bridge"
        else
            Log "Set 224.0.0.0 on $bridge"
        fi
    done

    echo "$status"
}

function SetRoutes
{
    local ret=$SUCCESS
    local status=$SUCCESS

    # Clear default routes/gateways
    DeleteRoutes

    local index=0
    local count=0
    [[ "${static_dest[@]-}" ]] && count=${#static_dest[@]}
    # Configure static routes.
    while [[ $index -lt $count ]]; do
        if [[ "${static_state[$index]}" == "enabled" ]]; then
            if [[ "${static_dest[$index]}" && ( "${static_dest[$index]}" == "default" || "${static_dest[$index]}" == "0.0.0.0" ) ]]; then
                # Default gateway
                if [[ "${static_gw[$index]}" && "${static_metric[$index]}" ]]; then
                    status=$(AddDefaultRoute "${static_gw[$index]}" "${static_metric[$index]}")
                fi
            elif [[ "${static_dest_mask[$index]}" = "255.255.255.255" ]]; then
                # Host route
                if [[ "${static_dest[$index]}" && "${static_gw[$index]}" && "${static_metric[$index]}" ]]; then
                    status=$(AddHostRoute "${static_dest[$index]}" "${static_gw[$index]}" "${static_metric[$index]}")
                fi
            else
                if [[ "${static_dest[$index]}" && "${static_dest_mask[$index]}" && "${static_gw[$index]}" && "${static_metric[$index]}" ]]; then
                    status=$(AddRoute "${static_dest[$index]}" "${static_dest_mask[$index]}" "${static_gw[$index]}" "${static_metric[$index]}")
                fi
            fi
        fi
        ((index++))
        [[ $status != $SUCCESS ]] && ret=$INTERNAL_ERROR
    done
    
    # DHCP
    # Are there previously delivert gateway values (route entries) that have to be removed?
    DeleteDhcpDefaultGateways
    
    # Configure DHCP/BOOTP dynamic gateways
    
    local gwindex=-1 # index of the dynamic_* array; unique OVER ALL dhcp-bootp-data-<itf> files
    shopt -s nullglob  # in case globbing was not successful
    for cfgfile in $DHCP_DATA_FILE_TEMPLATE*; do
        . "$cfgfile"                                                                
        local index=1 # DEFAULT_GATEWAY_<index>="<GW-IP>"; unique FOR EACH dhcp-bootp-data-<itf> file
        local varname="DEFAULT_GATEWAY_$index"

        # Following line supports set -u. If variable given by varname is currently
        # not defined as shell variable, it will come into life with an empty value.
        # Using eval is save because no user input is fed into its arguments.
        GWVALUE=$(eval "echo \${$varname-}")

        while [[ "$GWVALUE" ]]; do
            ((gwindex++))
            status=$(AddDefaultRoute "$GWVALUE" "$DHCP_DEFAULT_METRIC")
            [[ $status != $SUCCESS ]] && ret=$INTERNAL_ERROR
            unset $varname # Otherwise $varname is found while reading another file even it is not part of that file.
            ((index++))
            varname="DEFAULT_GATEWAY_$index"
            GWVALUE=$(eval "echo \${$varname-}")
        done
    done
    
    echo "$ret"
}


function SetMasquerading
{
    # Add masquerading
    local index=0
    local count=0
    [[ "${masquerading_interface[@]-}" ]] && count=${#masquerading_interface[@]}
    local ret=$SUCCESS
    
    # Remove all masquerading rules
    $FIREWALL iptables --rem-masq all
    ret=$?

    while [[ $index -lt $count ]]; do
        if [[ "TRUE" == $(IsValidInterfaceName "${masquerading_interface[$index]}") ]]; then
            if [[ "${masquerading_state[$index]}" == "enabled" ]]; then
                $FIREWALL iptables --set-masq "${masquerading_interface[$index]}" # &> /dev/null
            fi
        fi
        ((index++))
    done
    
    echo $ret
}


function SetPortForwarding
{
    # Add port forwarding
    local index=0
    local count=0
    [[ "${port_forwarding_interface[@]-}" ]] && count=${#port_forwarding_interface[@]}
    local ret=$SUCCESS

    # Remove all forwarding rules. Afterwards, add current rules.
    $FIREWALL iptables --rem-pfw all
    ret=$?
    
    while [[ $index -lt $count ]]; do
        if [[ "TRUE" == $(IsValidInterfaceName "${port_forwarding_interface[$index]}") ]]; then
            if [[ "${port_forwarding_state[$index]}" == "enabled" ]]; then
                $FIREWALL iptables --add-pfw on "${port_forwarding_interface[$index]}" "${port_forwarding_protocol[$index]}" - "${port_forwarding_port[$index]}" "${port_forwarding_forward_ip[$index]}" "${port_forwarding_forward_port[$index]}" # &> /dev/null
            fi
        fi
        ((index++))
    done

    echo $ret
}


function DoUpdate
{
    local status=$SUCCESS
    local ret=$SUCCESS
    
    # Set global IP forwarding state
    ret=$(SetGeneralForwarding)
    [[ $ret != $SUCCESS ]] && status=$INTERNAL_ERROR

    # Set static and dynamic routes defined by user.
    ret=$(SetRoutes)
    [[ $ret != $SUCCESS ]] && status=$INTERNAL_ERROR

    # Configure IP-Masquerading.
    ret=$(SetMasquerading)
    [[ $ret != $SUCCESS ]] && status=$INTERNAL_ERROR

    # Configure Port-Forwarding.
    ret=$(SetPortForwarding)
    [[ $ret != $SUCCESS ]] && status=$INTERNAL_ERROR

    # Set multicast routes on all active bridges
    ret=$(SetMulticastRoutes)
    [[ $ret != $SUCCESS ]] && status=$INTERNAL_ERROR

    sync

    # Apply previously set changes if no errors occurred.
    if [[ $status == "$SUCCESS" ]]; then 
        $FIREWALL iptables --apply &> /dev/null
    else
        # Do not log last error when called by netconfd.
        [[ -z ${NETCONF_IP_CONFIG+x} ]] && SetLastError "One or more errors occur during routing setup. See /var/log/messages for details."    
    fi

    echo "$status"
}

#-------------- globals -----------------------------#

ROUTING_CONFIG_FILE="/etc/specific/routing.conf"
ROUTING_CONFIG_REMOVE_FILE="/tmp/routing_remove.conf"
DHCP_DATA_FILE_PREFIX="dhcp-bootp-data-"
DHCP_DATA_FILE_TEMPLATE="/tmp/$DHCP_DATA_FILE_PREFIX"
DHCP_DATA_FILE_BACKUP_PREFIX=backup-$DHCP_DATA_FILE_PREFIX
DHCP_DATA_FILE_BACKUP_TEMPLATE=/tmp/$DHCP_DATA_FILE_BACKUP_PREFIX
IP_FORWARD="/proc/sys/net/ipv4/ip_forward"
DHCP_DEFAULT_METRIC=10
FIREWALL="/etc/config-tools/firewall"
AWK="/usr/bin/awk"
ROUTE="/sbin/route"
GREP="/usr/bin/grep"
BRCTL="/sbin/brctl"

# Static route parameters
declare -a static_dest
declare -a static_dest_mask
declare -a static_gw
declare -a static_metric
declare -a static_routing_type # default or fixed. Fixed routes cannot be deleted.
declare -a static_state # read only

# Masquerading parameters
declare -a masquerading_interface
declare -a masquerading_state
declare -a masquerading_routing_type # Cannot be modified by user.

# Port-Forwarding parameters
declare -a port_forwarding_state
declare -a port_forwarding_interface
declare -a port_forwarding_port
declare -a port_forwarding_protocol
declare -a port_forwarding_forward_ip
declare -a port_forwarding_forward_port

state="invalid" # Fallback in case general routing state value is missing.


#-------------- main-programm -----------------------#

# load general definitions and functions
if [ ! -f "/etc/config-tools/config_tool_lib" ]; then
    print_dbg "config_tool_lib missing"
    exit 64
fi
. "/etc/config-tools/config_tool_lib"

status=$SUCCESS

# Replace default configuration file if requested
if [[ $# -gt 0 ]]; then
    while [[ $# -ne 0 && $status == "$SUCCESS" ]]; do
        case "$1" in
            file=*)
                _file="${1#file=}"
                if [[ -z "$_file" ]]; then
                    status=$MISSING_PARAMETER
                    SetLastError "Missing parameter value for config file"
                elif [[ ! -e "$_file" ]]; then
                    status=$INVALID_PARAMETER
                    SetLastError "Config file does not exist: $_file"
                else
                    ROUTING_CONFIG_FILE="$_file"
                fi
                ;;
            remove-file=*)
                _remove_file="${1#remove-file=}"
                if [[ -z "$_remove_file" ]]; then
                    status=$MISSING_PARAMETER
                    SetLastError "Missing parameter value for config file"
                elif [[ ! -e "$_remove_file" ]]; then
                    status=$INVALID_PARAMETER
                    SetLastError "Config file does not exist: $_remove_file"
                else
                    ROUTING_CONFIG_REMOVE_FILE="$_remove_file"
                fi
                ;;
            *)
                # Ignore unknown parameters
                break
                ;;
        esac
        shift 1
    done
fi


# Read configurations from files
if [ ! -s "$ROUTING_CONFIG_FILE" ]; then
    SetLastError "$ROUTING_CONFIG_FILE is missing - can't execute."
    exit 0
fi
. "$ROUTING_CONFIG_FILE"

# Use advisory lock to avoid race with config_routing and this script on more than one 
# interface with dhcp
status=$( ( flock 9; DoUpdate; ) 9> /var/lock/routing.lock )

exit 0
