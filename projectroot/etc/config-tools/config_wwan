#!/bin/bash
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2018-2022 WAGO GmbH & Co. KG

#-----------------------------------------------------------------------------
# Script-name: config_wwan
#
# Control wwan networking interface.
#
# Author: WAGO GmbH & Co. KG.
#-----------------------------------------------------------------------------

# load general definitions and functions
if [ ! -f "/etc/config-tools/config_tool_lib" ]; then
  echo "config_tool_lib missing"
  exit 64
fi

. /etc/config-tools/config_tool_lib

WWAN_CONFIGFILE_NAME=/etc/specific/wwan.conf


#--------------------------------------------------------------------
# help text (requested with specified parameter)
#--------------------------------------------------------------------
if [ "$1" = "-h" -o "$1" = "--help" ]; then
    echo
    echo "* Control wwan networking interface according to configuration in /etc/specific/wwan.conf *"
    echo
    echo "Usage: config_wwan -h | --help                 print this usage"
    echo "       config_wwan [-e | --enable ]            activate interface (ifup)"
    echo "       config_wwan [-d | --disable ]           deactivate interface (ifdown)"
    echo "       config_wwan [-s | --status ]            print interface status {UP | DOWN | NOT_CONFIGURED}"
    echo "       config_wwan [-t | --start ]             start interface DHCP client"
    echo "       config_wwan [-p | --stop ]              stop interface DHCP client and clear IP addresses"
    echo "       config_wwan [-r | --renew ]             renew interface IP address"
    echo "       config_wwan [-i | --inet ]              print interface IPV4 address"
    echo "       config_wwan [-I | --inet6 ]             print interface IPV6 address"
    echo
    exit 0
fi

set_ip_config () {
  local json_config="$1"
  out=$($NETWORK_CONFIG --ip-config --set "${json_config}" --format=json)
  return $?
}

get_ip_config () {
  local interface="$1"
  out=$($NETWORK_CONFIG --ip-config --get-current --device="$interface" --format=json)
  echo $out
  return $?
}

# Returns IP and netmask in cidr notation.
get_ip_netmask () {
  local interface="$1"
  local out=$(get_ip_config "$interface")

  for token in $out; do
    json=$token
  done
  json=${json//\"/}

  # HINT: awk (in contrast to gawk) does not support capture groups. Therefore, we use 'match' and 'substr' to extract IP address and netmask from json.
  echo "$json" | awk '
  function netmaskToPrefix(netmask)
  {
    c = 0;
    split(netmask, v, ".");
    for (j=0; j < 4; j++)
      for(i=0; i<8; ++i)
        if(and(2**i, v[j] ))
          c++;
    return c;
  }
  {
    match($0, "ipaddr:[^(,})]*[,}]");
    addr = substr( $0, RSTART+7, RLENGTH-7-1 );

    if(addr == "0.0.0.0")
    {
      print "0.0.0.0/32"
    }
    else
    {
      match($0, "netmask:[^(,})]*[,}]");        
      netmask = substr( $0, RSTART+8, RLENGTH-8-1 ); 
      print( addr "/" netmaskToPrefix(netmask) );
    }
  } '
}

#--------------------------------------------------------------------
# main programm
#--------------------------------------------------------------------

status=$SUCCESS

# check for missing input parameter
if [ -z "$1" ]; then
  SetLastError "Missing input parameter"
  status=$MISSING_PARAMETER
  exit $status
fi

#check whether config-file exists
if [ ! -f $WWAN_CONFIGFILE_NAME ]; then
  SetLastError "Config file is missing."
  status=$CONFIG_FILE_MISSING
  exit $status
fi

# check if wwan device exists
if [[ ! -d "/sys/class/net/$WWAN_DEVICE_NAME" ]]; then
  exit 1
fi

. $WWAN_CONFIGFILE_NAME
if [ "$1" = "-e" -o "$1" = "--enable" ]; then
  # 1. TODO: set interface up
  sudo ip link set dev $WWAN_DEVICE_NAME up > /dev/null 2> /dev/null
  # 2. start udhcpc for wwan interface
  set_ip_config '{"'$WWAN_DEVICE_NAME'":{"source":"dhcp", "ipaddr":"0.0.0.0", "netmask":"0.0.0.0"}}'

  #ifup $WWAN_DEVICE_NAME > /dev/null 2> /dev/null
  status=$?

elif [ "$1" = "-d" -o "$1" = "--disable" ]; then
  # 1. stop udhcpc for wwan interface
  set_ip_config '{"'$WWAN_DEVICE_NAME'":{"source":"none"}}'
  # 2. TODO: set interface down
  sudo ip link set dev $WWAN_DEVICE_NAME down > /dev/null 2> /dev/null

  #ifdown $WWAN_DEVICE_NAME > /dev/null 2> /dev/null
  status=$?

elif [ "$1" = "-s" -o "$1" = "--status" ]; then
  WWAN_STATUS="$(sudo ip addr show $WWAN_DEVICE_NAME | grep $WWAN_DEVICE_NAME)"
  if [ -n "$WWAN_STATUS" ]; then
    if [ "$(echo $WWAN_STATUS | grep ',UP')" -o "$(echo $WWAN_STATUS | grep '<UP')" ]; then
      echo "UP"
    else
      echo "DOWN"
    fi
  else
    echo "NOT_CONFIGURED"
  fi

elif [ "$1" = "-t" -o "$1" = "--start" ]; then
  set_ip_config '{"'$WWAN_DEVICE_NAME'":{"source":"dhcp", "ipaddr":"0.0.0.0", "netmask":"0.0.0.0"}}'
  status=$?

elif [ "$1" = "-p" -o "$1" = "--stop" ]; then
  set_ip_config '{"'$WWAN_DEVICE_NAME'":{"source":"none"}}'

elif [ "$1" = "-r" -o "$1" = "--renew" ]; then
  set_ip_config '{"'$WWAN_DEVICE_NAME'":{"source":"none"}}'
  set_ip_config '{"'$WWAN_DEVICE_NAME'":{"source":"dhcp", "ipaddr":"0.0.0.0", "netmask":"0.0.0.0"}}'

elif [ "$1" = "-i" -o "$1" = "--inet" ]; then
  WWAN_IPV4=$(get_ip_netmask $WWAN_DEVICE_NAME)

  if [ -z "$WWAN_IPV4" ]; then
    # address has been not yet assigned or interface is disabled
    echo "0.0.0.0/32"
  else
    echo "$(echo $WWAN_IPV4 | cut -d' ' -f 2)"
  fi

elif [ "$1" = "-I" -o "$1" = "--inet6" ]; then
  WWAN_IPV6="$(sudo ip addr show $WWAN_DEVICE_NAME | grep 'inet6')"
  if [ -z "$WWAN_IPV6" ]; then
    # address has been not yet assigned or interface is disabled
    echo "::/128"
  else
    echo "$(echo $WWAN_IPV6 | cut -d' ' -f 2)"
  fi

else
  SetLastError "Invalid parameter ($paramName)"
  status=$INVALID_PARAMETER
fi

exit $status
