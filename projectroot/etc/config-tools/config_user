#!/bin/bash
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# This file is part of PTXdist package config-tools.
#
# Copyright (c) 2009-2021 WAGO Kontakttechnik GmbH & Co. KG
#-----------------------------------------------------------------------------#
# Script:   /etc/config-tools/config_user
#
# Brief:    Change the configuration of the Users for the Web Based Management.
#
# Author:   SM:  WAGO Kontakttechnik GmbH & Co. KG
# Author:   AGa: WAGO Kontakttechnik GmbH & Co. KG
# Author:   PEn: WAGO Kontakttechnik GmbH & Co. KG
#-----------------------------------------------------------------------------#

# load general definitions and functions
if [[ ! -f "/etc/config-tools/config_tool_lib" ]]; then
  echo "config_tool_lib missing"
  exit 255
fi

source /etc/config-tools/config_tool_lib

LOCAL_PASSWD_FILENAME="/etc/shadow"

in_array()
{
  local needle="$1"
  local haystack="$2"

  for blade_of_grass in $haystack; do
    [[ "$blade_of_grass" == "$needle" ]] && return 0
  done

  return 1
}

is_wbm_user()
{
  local user="$1"
  local member_of; member_of="$(groups "$user")"

  if in_array 'wbmadmin' "$member_of" ||
     in_array 'wbmuser' "$member_of"; then
    return 0
  fi

  return 1
}

#-------------- main-programm ------------------------#

status=$SUCCESS

# show help-text if requested
if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
  echo
  echo "* Change the passwords of webserver users *"
  echo
  echo "Usage: config_user < user=user-value new-password=new-password-value confirm-password=confirm-password-value old-password=old-password-value>"
  echo
  echo "user-value: name of the webserver-user, whose password should be changed"
  echo "new-password-value / confirm-password-value: both strings must be the same"
  echo "old-password-value: current password of user"
  echo 
  exit $status
fi


# filter input parmeter of input-string
userName="$(GetParameterValue user "$@")"
oldPassword="$(GetParameterValue old-password "$@")"
newPassword="$(GetParameterValue new-password "$@")"
confirmPassword="$(GetParameterValue confirm-password "$@")"
#echo "userName:"$userName "newPassword:"$newPassword "confirmPassword:"$confirmPassword

# check if input-parameter user is given
if [[ -z "$userName" ]]; then
  status=$MISSING_PARAMETER
  ReportError $status "(user)"
  SetLastError "Missing Parameter \"user\""
  exit $status
fi

# check if input-parameter old password is given
if [ -z "$oldPassword" ]; then
  status=$MISSING_PARAMETER
  ReportError $status "(no old password)"
  SetLastError "Missing Parameter \"old-password\""
  exit $status
fi

# check if input-parameter password is given
if [[ -z "$newPassword" ]]; then
  status=$MISSING_PARAMETER
  ReportError $status "(new password is missing)"
  SetLastError "Missing Parameter \"new-password\""
  exit $status
fi

# check if password and confirmed password are the same
if [[ "$newPassword" != "$confirmPassword" ]]; then
  status=$INVALID_PARAMETER
  ReportError $status "(confirm password is different)"
  SetLastError "Confirmed password was different"
  exit $status
fi

# check if password contains any non-ASCII characters
LC_ALL_OLD=$LC_ALL
LC_ALL=C

# Groups of ASCII special characters except ']' and '-'
# We need a separate variable to avoid escaping
# Notes:
#       o ']' character must be the first one inside regex group
#       o '-' character must either be the first or the last one
# That's why they are placed within the main regex.

specialChars="\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2e\x2f\x3a\x3b\x3c\x3d\x3e\x3f\x40\x5b\x5c\x5e\x5f\x60\x7b\x7c\x7d\x7e"

if [[ ! "$newPassword" =~ ^[]abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$(echo -e $specialChars)-]*$ ]]; then
  status=$INVALID_PARAMETER
  ReportError $status "(password contains non-ASCII characters)"
  SetLastError "Illegal characters used. Please only use letters (a-z, A-Z),\nnumbers and ASCII special characters: \n""] !\"#$%&'()*+,./:;<=>?@[\^_\`{|}~-"
  exit $status
fi

LC_ALL=$LC_ALL_OLD

# check if current password of user is correct
currHash="$(grep "^${userName}:" <"$LOCAL_PASSWD_FILENAME" | cut -d':' -f2 | cut -d'$' -f4)"
oldHash="$(mkpasswd -m sha512 "$oldPassword" "$(grep "^${userName}:" <"$LOCAL_PASSWD_FILENAME" | cut -d'$' -f3)" | cut -d'$' -f4)"
if [[ "$oldHash" != "$currHash" ]]; then
  status=$INVALID_PARAMETER
  ReportError $status "(transferred old password is different)"
  SetLastError "The old password was different to current password"
  exit $status
fi

#echo "change Password for" $userName "to" $newPassword

  # check if user is member of one of the WBM groups
if ! is_wbm_user "$userName"; then
  status=$INVALID_PARAMETER
  ReportError $status "(user is not member of one of the WBM groups)"
  SetLastError "Invalid user name!"
  exit $status
fi

# set new password for user, passwd will synchronise passwords with remote backends (LDAP etc.)
newEscapedPassword="$(sed 's/\\/\//g' <<<"$newPassword")"
echo -e "${newEscapedPassword}\n${newEscapedPassword}\n" | passwd "$userName" 1>/dev/null 2>&1
passwdStatus=$?
if [[ $passwdStatus -eq $SUCCESS ]]; then
  sync
else
  status=$WRITE_FILE_ERROR;
  ReportError $status "(passwd result $passwdStatus)"
  SetLastError "Error while writing password file"
fi

exit $status
