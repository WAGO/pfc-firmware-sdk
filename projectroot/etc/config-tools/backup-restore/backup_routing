#!/bin/bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2018-2022 WAGO GmbH & Co. KG

set -u

# load general definitions and functions
if [ ! -f "/etc/config-tools/config_routing_lib" ]; then
    print_dbg "config_routing_lib missing"
    exit 64
fi

. "/etc/config-tools/config_routing_lib"

ROUTING_CONFIG_TMP_FILE="/etc/specific/routing.conf.tmp"
ROUTING_CONFIG_PREFIX="routing"
ROUTING_CONFIG_PREFIX_V2="routing-v2"
MOVE="/bin/mv"

function PrintUsage
{
    echo "backup_routing --save <backup-file>      backup routing parameters"
    echo "backup_routing --restore <backup-file>   restore routing parameters"
    echo "backup_routing --param-count             get number of routing parameters to save"
}


# Write logging data using syslog.
#
# Input: Message to log.
#
function Log
{
    [[ $# -gt 0 ]] && logger -t "backup-routing" "$1"
}


# Read routing configuration data from routing configuration file.
#
# Output: returns config tool status, see /etc/config-tools/config_tool_defines.
#
function ReadConfigFile
{
    local status=$SUCCESS
    
    if [[ -e $ROUTING_CONFIG_FILE ]]; then
        . $ROUTING_CONFIG_FILE
    else
        status=$CONFIG_FILE_MISSING
        Log "Could not read \"$ROUTING_CONFIG_FILE\""
    fi
    
    return $status
}


# Write routing configuration to routing configuration file.
#
# The data to write is taken from arrays 
#  - static routing  (static_<*>)
#  - masquerading    (masquerading_<*>)
#  - port forwarding (port_forwarding_<*>)
#
# Output: returns config tool status, see /etc/config-tools/config_tool_defines.
#
function WriteConfigFile
{
    # Write temporary file first. After write operation is completed move temporary file to routing config file.
    local status=$SUCCESS
    
    # Write general routing parameters
    if [[ "${state-}" ]]; then
        echo "state=$state" > $ROUTING_CONFIG_TMP_FILE

        # Write static route parameters
        if [[ $(IsValidStaticRouteEntries v2) == "true" ]]; then
            local index=0
            local count="${#static_dest[@]}"
            [[ $count -gt 0 ]] && echo >> $ROUTING_CONFIG_TMP_FILE
            while [[ $index -lt $count ]]; do
                local dest="${static_dest[$index]}"
                local itf=""
                [[ $dest == "default" ]] && dest="0.0.0.0"
                [[ "${static_interface[*]}" ]] && itf=${static_interface[$index]}

                echo "static_dest[$index]=$dest" >> $ROUTING_CONFIG_TMP_FILE
                echo "static_dest_mask[$index]=${static_dest_mask[$index]}" >> $ROUTING_CONFIG_TMP_FILE
                echo "static_gw[$index]=${static_gw[$index]}" >> $ROUTING_CONFIG_TMP_FILE
                echo "static_interface[$index]=$itf" >> $ROUTING_CONFIG_TMP_FILE
                echo "static_metric[$index]=${static_metric[$index]}" >> $ROUTING_CONFIG_TMP_FILE
                echo "static_routing_type[$index]=${static_routing_type[$index]}" >> $ROUTING_CONFIG_TMP_FILE
                echo "static_state[$index]=${static_state[$index]}" >> $ROUTING_CONFIG_TMP_FILE
                ((index++))
            done
        else
            Log "Invalid static route entries found."
        fi

        # Write masquerading parameters
        if [[ $(IsValidMasquerading) == "true" ]]; then
            index=0
            count=0
            [[ -n "${masquerading_interface[*]-}" ]] && count="${#masquerading_interface[@]}"
            [[ $count -gt 0 ]] && echo >> $ROUTING_CONFIG_TMP_FILE
            while [[ $index -lt $count ]]; do
                echo "masquerading_interface[$index]=${masquerading_interface[$index]}" >> $ROUTING_CONFIG_TMP_FILE
                echo "masquerading_state[$index]=${masquerading_state[$index]}" >> $ROUTING_CONFIG_TMP_FILE
                echo "masquerading_routing_type[$index]=${masquerading_routing_type[$index]}" >> $ROUTING_CONFIG_TMP_FILE
                ((index++))
            done
        else
            Log "Invalid masquerading entries found."
        fi

        # Write port-forwarding parameters
        if [[ $(IsValidPortForwarding) == "true" ]]; then
            index=0
            count=0
            [[ -n "${port_forwarding_interface[*]-}" ]] && count="${#port_forwarding_interface[@]}"
            [[ $count -gt 0 ]] && echo >> $ROUTING_CONFIG_TMP_FILE
            while [[ $index -lt $count ]]; do
                echo "port_forwarding_interface[$index]=${port_forwarding_interface[$index]}" >> $ROUTING_CONFIG_TMP_FILE
                echo "port_forwarding_state[$index]=${port_forwarding_state[$index]}" >> $ROUTING_CONFIG_TMP_FILE
                echo "port_forwarding_port[$index]=${port_forwarding_port[$index]}" >> $ROUTING_CONFIG_TMP_FILE
                echo "port_forwarding_protocol[$index]=${port_forwarding_protocol[$index]}" >> $ROUTING_CONFIG_TMP_FILE
                echo "port_forwarding_forward_ip[$index]=${port_forwarding_forward_ip[$index]}" >> $ROUTING_CONFIG_TMP_FILE
                echo "port_forwarding_forward_port[$index]=${port_forwarding_forward_port[$index]}" >> $ROUTING_CONFIG_TMP_FILE
                ((index++))
            done
        else
            Log "Invalid port forwarding entries found."
        fi
    else
        Log "$0: Inconsistent routing configuration backup file. General routing state parameter missing."
        status=$CONFIG_FILE_INCONSISTENT
    fi
    sync
    $MOVE $ROUTING_CONFIG_TMP_FILE $ROUTING_CONFIG_FILE
    
    return $status
}


# Check if all arrays representing the static route configuration are defined and equal sized.
#
# Output: true,  in case all arrays are defined and have same element count.
#         false, in case array sizes differ or only part of arrays are undefined
#
function IsValidStaticRouteEntries
{
    local version="$1"
    local isValid="false"
    local count=${#static_dest[@]}
    if [[   ${#static_dest_mask[@]} -eq $count
            && ${#static_gw[@]} -eq $count
            && ${#static_metric[@]} -eq $count
            && ${#static_routing_type[@]} -eq $count
            && ${#static_state[@]} -eq $count ]]; then
        isValid="true"
    else
        isValid="false"
    fi

    if [[ $isValid == "true" && $version == "v2" ]]; then
        [[ ${#static_interface[@]} -ne $count ]] && isValid="false"
    fi

    echo $isValid
}

function PrintStaticRouteEntryV1
{
    local count=$1
    local file=$2

    local index=0
    local v1Index=0 # In case of version 1 we do not save array entries containing interface data.
    while [[ $index -lt $count ]]; do
        if [[ -z "${static_interface[$index]}" ]]; then
            # For version V1 we expect a maximum of two default gateways labed with "fixed" routing type.
            # If we find more than two default gateways they are relabeled to "default" routing type.
            local type=${static_routing_type[$index]}
            [[ $v1Index -gt 1 ]] && type=default

            local gw="${static_gw[$index]}"
            [[ -z "$gw" ]] && gw="0.0.0.0"

            echo "${ROUTING_CONFIG_PREFIX}-static-dest=$v1Index|${static_dest[$index]}" >> $file
            echo "${ROUTING_CONFIG_PREFIX}-static-dest-mask=$v1Index|${static_dest_mask[$index]}" >> $file
            echo "${ROUTING_CONFIG_PREFIX}-static-gw=$v1Index|$gw" >> $file
            echo "${ROUTING_CONFIG_PREFIX}-static-metric=$v1Index|${static_metric[$index]}" >> $file
            echo "${ROUTING_CONFIG_PREFIX}-static-routing-type=$v1Index|$type" >> $file
            echo "${ROUTING_CONFIG_PREFIX}-static-state=$v1Index|${static_state[$index]}" >> $file
            ((v1Index++))
        fi
        ((index++))
    done
}

function PrintStaticRouteEntryV2
{
    local count=$1
    local file=$2

    local index=0
    while [[ $index -lt $count ]]; do
        echo "${ROUTING_CONFIG_PREFIX_V2}-static-dest=$index|${static_dest[$index]}" >> $file
        echo "${ROUTING_CONFIG_PREFIX_V2}-static-dest-mask=$index|${static_dest_mask[$index]}" >> $file
        echo "${ROUTING_CONFIG_PREFIX_V2}-static-gw=$index|${static_gw[$index]}" >> $file
        echo "${ROUTING_CONFIG_PREFIX_V2}-static-interface=$index|${static_interface[$index]}" >> $file
        echo "${ROUTING_CONFIG_PREFIX_V2}-static-metric=$index|${static_metric[$index]}" >> $file
        echo "${ROUTING_CONFIG_PREFIX_V2}-static-routing-type=$index|${static_routing_type[$index]}" >> $file
        echo "${ROUTING_CONFIG_PREFIX_V2}-static-state=$index|${static_state[$index]}" >> $file
        ((index++))
    done
}

# Append static route configuration to backup file.
#
# In version 2 it is possible to specify an interface for a static route.
#
# Output: returns config tool status, see /etc/config-tools/config_tool_defines.
#
function PrintStaticRouteEntries
{
    local version=$1
    local file=$2

    local status=$SUCCESS
    
    local count="${#static_dest[@]}"
    [[ $(IsValidStaticRouteEntries $version) == "false" ]] && status=$CONFIG_FILE_INCONSISTENT

    if [[ "$version" == "v1" ]]; then
        PrintStaticRouteEntryV1 $count $file
    else
        PrintStaticRouteEntryV2 $count $file
    fi

    return $status
}


# Check if all arrays representing the masquerading configuration are defined and equal sized.
#
# Output: true,  in case all arrays are defined and have same element count or all arrays are undefined, representing an element count of zero.
#         false, in case array sizes differ or only part of arrays are undefined
#
function IsValidMasquerading
{
    if [[ "${masquerading_interface-}" && "${masquerading_state-}" && "${masquerading_routing_type-}" ]]; then
        local count=${#masquerading_interface[@]}
        if [[    ${#masquerading_state[@]} -eq $count
              && ${#masquerading_routing_type[@]} -eq $count ]]; then
            echo "true"
        else
            echo "false"
        fi
    else
        if [[ "${masquerading_interface-}" || "${masquerading_state-}" || "${masquerading_routing_type-}" ]]; then
            echo "false"
        else
            # All entries are zero; no masquerading entries were specified.
            echo "true"
        fi
    fi
}


# Append masquerading configuration to backup file.
#
# Output: returns config tool status, see /etc/config-tools/config_tool_defines.
#
function PrintMasqueradingEntries
{
    local count=0
    local index=0
    local status=$SUCCESS
    local version=$1
    local file=$2

    local prefix=$ROUTING_CONFIG_PREFIX_V2
    [[ "$version" == v1 ]] && prefix=$ROUTING_CONFIG_PREFIX

    # Ensure all arrays have the same element count.
    [[ -n "${masquerading_interface[*]-}" ]] && count=${#masquerading_interface[@]}
    [[ $(IsValidMasquerading) == "false" ]] && status=$CONFIG_FILE_INCONSISTENT

    if [[ $status -eq $SUCCESS ]]; then
        while [[ $index -lt $count ]]; do
            echo "${prefix}-masquerading-interface=$index|${masquerading_interface[$index]}" >> $file
            echo "${prefix}-masquerading-state=$index|${masquerading_state[$index]}" >> $file
            echo "${prefix}-masquerading-routing-type=$index|${masquerading_routing_type[$index]}" >> $file
            ((index++))
        done
    fi
    
    return $status
}


# Check if all arrays representing the port forwarding configuration are defined and equal sized.
#
# Output: true,  in case all arrays are defined and have same element count or all arrays are undefined, representing an element count of zero.
#         false, in case array sizes differ or only part of arrays are undefined
#
function IsValidPortForwarding
{
    if [[ "${port_forwarding_state-}" && "${port_forwarding_port-}" && "${port_forwarding_protocol-}" && "${port_forwarding_forward_ip-}" && "${port_forwarding_forward_port-}" ]]; then
        local count=${#port_forwarding_interface[@]}
        if [[    ${#port_forwarding_state[@]} -eq $count
              && ${#port_forwarding_port[@]} -eq $count
              && ${#port_forwarding_protocol[@]} -eq $count
              && ${#port_forwarding_forward_ip[@]} -eq $count
              && ${#port_forwarding_forward_port[@]} -eq $count ]]; then
            echo "true"
        else
            echo "false"
        fi
    else
        if [[ "${port_forwarding_state-}" || "${port_forwarding_port-}" || "${port_forwarding_protocol-}" || "${port_forwarding_forward_ip-}" || "${port_forwarding_forward_port-}" ]]; then
            echo "false"
        else
            # All entries are zero; no port forwarding entries were specified.
            echo "true"
        fi
    fi
}


# Append port forwarding configuration to backup file.
#
# Output: returns config tool status, see /etc/config-tools/config_tool_defines.
#
function PrintPortForwardingEntries
{
    local count=0
    local index=0
    local status=$SUCCESS
    local version=$1
    local file=$2

    local prefix=$ROUTING_CONFIG_PREFIX_V2
    [[ "$version" == v1 ]] && prefix=$ROUTING_CONFIG_PREFIX

    [[ -n "${port_forwarding_interface[*]-}" ]] && count="${#port_forwarding_interface[@]}"
    [[ $(IsValidPortForwarding) == "false" ]] && status=$CONFIG_FILE_INCONSISTENT

    if [[ $status -eq $SUCCESS ]]; then
        while [[ $index -lt $count ]]; do
            echo "${prefix}-port-forwarding-interface=$index|${port_forwarding_interface[$index]}" >> $file
            echo "${prefix}-port-forwarding-state=$index|${port_forwarding_state[$index]}" >> $file
            echo "${prefix}-port-forwarding-port=$index|${port_forwarding_port[$index]}" >> $file
            echo "${prefix}-port-forwarding-protocol=$index|${port_forwarding_protocol[$index]}" >> $file
            echo "${prefix}-port-forwarding-forward-ip=$index|${port_forwarding_forward_ip[$index]}" >> $file
            echo "${prefix}-port-forwarding-forward-port=$index|${port_forwarding_forward_port[$index]}" >> $file
            ((index++))
        done
    fi
    
    return $status
}


#### Backup & Restore ##############################################################################

# Get number of parameters that have to be saved during backup.
#
# output: 1.) number of parameters to save during backup.
#         2.) returns config tool status, see /etc/config-tools/config_tool_defines.
#
function GetParameterCount
{
    local status
    local count=0
    
    ReadConfigFile
    status=$?
    
    if [[ $status -eq $SUCCESS ]]; then
        # add 1 for general routing state
        [[ "${state-}" ]] && ((count++))
        # add array sizes
        (( count+=(${#static_dest[@]} * 7) ))
        (( count+=(${#masquerading_interface[@]} * 3) ))
        (( count+=(${#port_forwarding_interface[@]} * 6) ))
    fi
    
    echo $count
    return $status
}

function PrintBackupFileContent
{
    local version="$1"
    
    local prefix=$ROUTING_CONFIG_PREFIX_V2
    [[ "$version" == v1 ]] && prefix=$ROUTING_CONFIG_PREFIX

    # general routing state
    echo "${prefix}-state=$state" >> $file
    # arrays
    PrintStaticRouteEntries $version $file
    [[ $? -ne $SUCCESS ]] && Log "File contains inconsistent static routing entries: $file."
    PrintMasqueradingEntries $version $file
    [[ $? -ne $SUCCESS ]] && Log "File contains inconsistent ip masquerading entries: $file."
    PrintPortForwardingEntries $version $file
    [[ $? -ne $SUCCESS ]] && Log "File contains inconsistent port forwarding entries: $file."
}

# Extend data of version 1 to fit requirements of version 2 (add interface entry).
function ExtendToVersion2
{
    if [[ $(IsValidStaticRouteEntries v1) == "false" ]]; then
        status=$CONFIG_FILE_INCONSISTENT
        return $status
    fi

    local count=${#static_dest[@]}
    local i=0
    while [[ $i -lt $count ]]; do
        static_interface[$i]=""
        ((i++))
    done

    return $SUCCESS
}


# Save configuration parameters to backup file.
# 
# input:  backup file path
# output: returns config tool status, see /etc/config-tools/config_tool_defines.
#
function Save
{
    local status
    local file=$1
    
    # Read config file: . "$CONFIG_FILE"
    ReadConfigFile
    status=$?
    
    # Write arrays to file, adding prefix.
    if [[ $status -eq $SUCCESS ]]; then
        if [[ "${state-}" ]]; then
            PrintBackupFileContent v1 $file
            PrintBackupFileContent v2 $file
        else
            Log "$0: Inconsistent routing configuration file. General routing state parameter missing."
            status=$CONFIG_FILE_INCONSISTENT
        fi
    fi
    
    return $status
}


# Restore configuration parameters from backup file.
# 
# input: backup file path
# output: returns config tool status, see /etc/config-tools/config_tool_defines.
#
function Restore
{
    local status=$SUCCESS
    local file=$1
    local prefix=$ROUTING_CONFIG_PREFIX_V2
    declare -a routing_params
    
    # Get routing relevant data from file: grep for prefix
    # Store each line to array.
    
    routing_params=($(grep ^$ROUTING_CONFIG_PREFIX_V2 $file))
    if [[ -z "${routing_params-}" ]]; then
        routing_params=($(grep ^$ROUTING_CONFIG_PREFIX $file))
        [[ "${routing_params-}" ]] && prefix=$ROUTING_CONFIG_PREFIX || status=$CONFIG_FILE_INCONSISTENT
    fi
    
    if [[ $status -eq $SUCCESS ]]; then
        # TODO: Do we realy need to backup the internal field separator here?
        IFS_BKP=$IFS

        # Parse array entries
        for entry in "${routing_params[@]}"; do
            IFS='=|' # reset internal field separator
            param=($entry)
            if [[ ${#param[@]} == 3 ]]; then
                name=${param[0]/${prefix}-/}
                # Initialize array element
                read "${name//-/_}[${param[1]}]" <<< "${param[2]}"
                
            elif [[ ${#param[@]} == 2 ]]; then
                name=${param[0]/${prefix}-/}
                local pat='static-gw|static-interface' # gw or interface might be empty
                if [[ "$name" =~ $pat  ]]; then
                    read "${name//-/_}[${param[1]}]" <<< ""
                else
                    printf -v "${name//-/_}" "${param[1]}"
                fi
            fi
        done
        
        if [[ $status -eq $SUCCESS && "$prefix" == "$ROUTING_CONFIG_PREFIX" ]]; then
            ExtendToVersion2
            status=$?
        fi

        # Write configuration file.
        if [[ $status -eq $SUCCESS ]]; then
            WriteConfigFile
            "$VALIDATE_GATEWAY_CONFIG" start
        fi
    fi
    
    return $status
}


#### MAIN ##########################################################################################

status=$SUCCESS

# Subsequent variables and arrays might be set during file parse process.
state=""

# Static route parameters
declare -a static_dest=( )
declare -a static_dest_mask=( )
declare -a static_gw=( )
declare -a static_interface=( )
declare -a static_metric=( )
declare -a static_routing_type=( ) # Cannot be modified by user.
declare -a static_state=( ) # read only

# Masquerading parameters
declare -a masquerading_interface=( )
declare -a masquerading_state=( )
declare -a masquerading_routing_type=( ) # Cannot be modified by user.

# Port-Forwarding parameters
declare -a port_forwarding_state=( )
declare -a port_forwarding_interface=( )
declare -a port_forwarding_port=( )
declare -a port_forwarding_protocol=( )
declare -a port_forwarding_forward_ip=( )
declare -a port_forwarding_forward_port=( )


if [[ $# -ge 1 ]]; then
    operation=$1
    
    if [[ $# -ge 2 ]]; then
        file=$2
        if [[ "$operation" == "--save" ]]; then
            Save $file
            status=$?
        elif [[ "$operation" == "--restore" ]]; then
            Restore $file
            status=$?
        else
            # Unknown operation
            status=$INTERNAL_ERROR
            Log "$0: Unknown operation \"$operation\""
        fi
    else
        if [[ "$operation" == "--param-count" ]]; then
            GetParameterCount
        elif [[ "$operation" == "-h" || "$operation" == "--help" ]]; then
            PrintUsage
        else
            # Unknown operation
            status=$INTERNAL_ERROR
            Log "$0: Unknown or incomplete operation \"$operation\""
        fi
    fi
fi

exit $status
