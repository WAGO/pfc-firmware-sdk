#!/bin/bash
#-----------------------------------------------------------------------------#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# This file is part of PTXdist package config-tools.
#
# Copyright (c) 2012-2022 WAGO GmbH & Co. KG
#-----------------------------------------------------------------------------#
#-----------------------------------------------------------------------------#
# Script:   firmware_restore
#
# Brief:    Process restore of firmware data.
#
# Author:   AGa: WAGO GmbH & Co. KG
# Author:   MOe: WAGO GmbH & Co. KG
# Author:   PEn: WAGO GmbH & Co. KG
#-----------------------------------------------------------------------------#


# Load needed firmware functionality
readonly WAGO_CT_DIR="/etc/config-tools"
if [[ ! -f "$WAGO_CT_DIR/config_tool_lib" ]]; then
    echo "Missing dependency config_tool_lib"
    exit 64
fi
source "$WAGO_CT_DIR/config_tool_lib"

readonly WAGO_ST_DIR="/usr/sbin"
if [[ ! -f "$WAGO_ST_DIR/${BOARD_ID}_defines" ]]; then
    echo "Missing dependency ${BOARD_ID}_defines"
    exit 64
fi
source "$WAGO_ST_DIR/${BOARD_ID}_defines"
if [[ ! -f "$WAGO_ST_DIR/${BOARD_ID}_copy_data_emmc_extensions.sh" ]]; then
    echo "Missing dependency ${BOARD_ID}_copy_data_emmc_extensions.sh"
    exit 64
fi
source "$WAGO_ST_DIR/${BOARD_ID}_copy_data_emmc_extensions.sh"


SRCDIR="/mnt/__source_dir"

# By default be quiet
QUIET=1

# status file to show status on wbm e.g.
# not used by now, because progress indicator for restore is not reasonable in wbm by now
statusFile="/var/www/wbm/firmware_restore_status"

status=$SUCCESS

RESTORE_PROCESS_STATUS_TMP_FILE="/tmp/restore_process_status"

# If execute_reboot is set to false, exit is executed instead of reboot.
execute_reboot=1


# Function to restore partition.
#
# Return: 0 on success, unequal to 0 otherwise
#-----------------------------------------------------------------------------#
function RestorePartition
{
    local destinationPartition="$1"
    local sourceFilename="$2"
    local settingsFilename="${3:-}"
    local result=$SUCCESS

    # Save the current settings to restore them in the new partition when user did not provide custom settings
    if [[ -z "$settingsFilename" ]]; then
        settingsFilename="/tmp/current_settings.txt"

        $WAGO_CT_DIR/settings_backup save "$settingsFilename"
        result=$?
    fi

    # Restore whole partition
    if [[ $result -eq $SUCCESS ]]; then
        print_dbg "RestorePartition: <$destinationPartition> <$sourceFilename> <$settingsFilename>"

        $WAGO_ST_DIR/${BOARD_ID}_restore_partition.sh \
          "$destinationPartition" "$sourceFilename" "$settingsFilename" &>/dev/null
        result=$?
    else
        report_error "Error: settings backup was not successful."
    fi

    return $result
}


# Function to write restore state.
#
# Return: 0 on success, unequal to 0 otherwise
#-----------------------------------------------------------------------------#
function WriteRestoreState
{
    case $1 in
      start)
        echo "started"  >"$RESTORE_PROCESS_STATUS_TMP_FILE" && sync
        ;;
      finish)
        echo "finished" >"$RESTORE_PROCESS_STATUS_TMP_FILE" && sync
        ;;
      fail)
        echo "failed"   >"$RESTORE_PROCESS_STATUS_TMP_FILE" && sync
        ;;
      *)
        ;;
    esac
}


# Function to copy home partition.
#
# Return: 0 on success, unequal to 0 otherwise
#-----------------------------------------------------------------------------#
function CopyHome
{
    local result=$SUCCESS

    if [[ "$($WAGO_CT_DIR/get_filesystem_data active-partition-medium)" == "internal-flash-emmc" ]]; then
        report_info "Start home copy"
        local new_home="/tmp/fwrestore_new_home"

        local device="$(/usr/bin/readlink "/dev/home_inactive")"
        local index=0
        local index_found=false
        for partition_device in "${EMMC_PARTITION_DEVICES[@]}"; do
            if [[ "/dev/$partition_device" == "$device" ]]; then
                index_found=true
                break
            fi
            index=$(( index + 1 ))
        done
        local label="${EMMC_PARTITION_LABELS[$index]}"
        if ! $index_found; then
            result=$INTERNAL_ERROR
            report_error "Failed to identify label for inactive home device"
        else
            while mount | grep -q "$device"; do
                if ! umount "$device"; then
                    result=$INTERNAL_ERROR
                    report_error "Failed to umount inactive home device"
                    break
                fi
            done
            if [[ $result -eq $SUCCESS ]]; then
                local fs_type="${EMMC_PARTITION_FS_TYPES[${index}]}"
                report_info "Format inactive home device \"$device\" ($fs_type)"
                do_mkfs /dev/home_inactive "$label" "$fs_type"
            fi
        fi

        if [[ $result -eq $SUCCESS ]]; then
            mkdir "$new_home" &&
                mount -t auto /dev/home_inactive "$new_home" -o sync &&
                cp -a /home/. "$new_home/"
            result=$?
        fi

        umount "$new_home" &&
            rm -rf "$new_home"

        if [[ $result -eq $SUCCESS ]]; then
            report_info "Copy home done"
        else
            result=$INTERNAL_ERROR
            report_error "Failed to copy home partition"
        fi
    else
        report_info "No need to copy home"
    fi

    return $result
}


# Function to reboot controller.
# Does not return normally but reboots system instead.
#-----------------------------------------------------------------------------#
function Reboot
{
    if [[ -z "$execute_reboot" || $execute_reboot == 1 ]]; then
        print_dbg "reboot"
        /sbin/reboot
    else
        print_dbg "exit instead of reboot"
        exit 0
    fi
}


# Exit handler to write final restore state.
# Will always write "fail", since premature exit is always treated as error.
#
# Return: 0 on success, unequal to 0 otherwise
#-----------------------------------------------------------------------------#
function OnExit
{
        WriteRestoreState "fail"
}

# Checks existence of a backup file of a requested package.
# Requested means via commandline option "package-*"
#
# Returns:
#  - SUCCESS if not requested or the file exists
#  - ENCRYPTED_FILE if required and file exists with 'enc' postfix
#  - CONFIG_FILE_MISSING if required and file does not exist
#-----------------------------------------------------------------------------#
checkfile()
{
  # disabled packages mean success
  if [ "$1" != "1" ]; then
    return "$SUCCESS"
  elif [ -f "${2}" ]; then
    return "$SUCCESS"
  elif [ -f "${2}${enc}" ]; then
    return "$ENCRYPTED_FILE"
  fi
  return "$CONFIG_FILE_MISSING"
}

# main-programm
#-----------------------------------------------------------------------------#
trap OnExit EXIT


# Show help text if requested
if [[ "$1"  == "-h" ]] || [[ "$1" == "--help" ]]; then
    echo
    echo "* Process restore of firmware data from backup *"
    echo
    echo "Usage: firmware_restore < package-settings=value package-system=value package-codesys=value device-medium=value > [ upload-dir=value ] [ testmode=value ] [reboot=value] [ passphrase=value ]"
    echo
    echo "package-settings, package-system, package-codesys: 1, if package should be saved, else parameter can be absent"

    echo -n "device-medium: "
    mediumCnt=1
    mediumName="$($WAGO_CT_DIR/get_filesystem_data medium-by-index $mediumCnt)"
    while [[ -n "$mediumName" ]]; do
        # NAND is an illegal source.
        # TODO: for backup/restore: make board-specific hooks here (pac200_backup_restore_check_target.sh?)
        # as well as below where we check for illegal target and in firmware_backup
        if [[ "$mediumName" != "$INTER" ]]; then
            echo -n "$mediumName | "
        fi
        mediumCnt=$(( $mediumCnt + 1 ))
        mediumName="$($WAGO_CT_DIR/get_filesystem_data medium-by-index $mediumCnt)"
    done

    echo "network"
    echo "upload-dir: path of directory that contains files to restore; only used if the device-medium is network"
    echo "testmode: if this parameter is given (value equal), only check if restore file is existing, but do no processing"
    echo "reboot: if this parameter is set to 0, do not execute reboots. Default value is 1."
    echo "passphrase: Passphrase to decrypt an encrypted backup file."
    exit $status
fi


# Filter input parmeter of input string
packageAll=$(GetParameterValue package-all $*)
packageCodesys=$(GetParameterValue package-codesys $*)
packageSettings=$(GetParameterValue package-settings $*)
packageSystem=$(GetParameterValue package-system $*)
print_dbg "packageAll: \"$packageAll\", packageCodesys: \"$packageCodesys\", packageSettings: \"$packageSettings\", packageSystem: \"$packageSystem\""

deviceMedium=$(GetParameterValue device-medium $*)
testmode=$(GetParameterValue testmode $*)
execute_reboot=$(GetParameterValue reboot $*)
print_dbg "verbose: \"$verbose\", deviceMedium: \"$deviceMedium\", testmode: \"$testmode\", reboot: \"$execute_reboot\""

passphrase="$(GetParameterValue "passphrase" $*)"

if [[ "${DO_PRINT_DBG}" == "yes" ]]; then
    QUIET=0
fi

if [[ -n "$packageAll" ]] && [[ "$packageAll" == "1" ]]; then
    packageCodesys=1
    packageSettings=1
    packageSystem=1
fi

# Check input parameter
if [[ "$packageCodesys" != "1" ]] && [[ "$packageSettings" != "1" ]] && [[ "$packageSystem" != "1" ]]; then
    report_error "No package selected"
    status=$INVALID_PARAMETER
    exit $status
fi

# Check input for device medium; must be included in DEVICE_MEDIA configuration or network 
if [[ "$deviceMedium" != "$NETWORK" ]]; then
    sourceDevice="$($WAGO_CT_DIR/get_device_data name $deviceMedium)"
    if [[ "$sourceDevice" == "" ]]; then
        report_error "Invalid device medium (1)"
        status=$INVALID_PARAMETER
        exit $status
    fi

  # blkid returns 2 if the source device has no valid file system
  if ! blkid "/dev/$(DevToPart $sourceDevice 1)" &>/dev/null; then
    report_error "Invalid device medium (no filesystem found)"
    status=$INVALID_PARAMETER
    exit $status
  fi
fi

# no restore from our own device
activePartitionMedium="$(/etc/config-tools/get_filesystem_data active-partition-medium)"
if [[ "$activePartitionMedium" == "$deviceMedium" ]]; then
    report_error "Invalid device medium (2)"
    status=$INVALID_PARAMETER
    exit $status
fi

# no restore from NAND (make bootable image is way to go if you want to do it)
if [[ "$INTERNAL_FLASH_NAND" == "$deviceMedium" ]]; then
    report_error "Invalid device medium (3)"
    status=$INVALID_PARAMETER
    exit $status
fi

print_dbg "Start firmware restore" >"$statusFile"

# source device is network -> read input parameter to get the name of directory including the source files
if [[ "$deviceMedium" == "$NETWORK" ]]; then
    sourceDir="$(GetParameterValue upload-dir $*)"
    print_dbg "sourceDir: $sourceDir"
    if [[ -z "$sourceDir" ]]; then
        status=$MISSING_PARAMETER
        WriteRestoreState "fail"
    elif [[ ! -d  "$sourceDir" ]]; then
        status=$INVALID_PARAMETER
        WriteRestoreState "fail"
    fi

# source medium is not network but another device -> we must mount it before we can read the data
else
    # get the device string of the source medium, so that we can access it
    sourceDevice="$(/etc/config-tools/get_device_data name "$deviceMedium")"
    print_dbg "sourceDevice: $sourceDevice"

    sourcePartition="$(DevToPart $sourceDevice 1)"

    sourceDir="$(df | awk -v part="^/dev/$sourcePartition " 'match($0,part) {print $6}')"

    if [[ "$sourceDir" == "" ]]; then
        # unlikely when automount is enabled via udev config
        sourceDir="$SRCDIR"

        # create the source directory for mounting (p = make parent directory if not existing)
        mkdir -p "$sourceDir"
        if [[ $? -ne 0 ]]; then
            status=$SHELL_ERROR
            ReportError $status "(mkdir -p ${sourceDir})"
        else
            # now mount first partition of source directory for getting backup file:
            DoMount "/dev/$sourcePartition" "$sourceDir"
            status=$?
        fi
    fi
fi

backup_codesys_file="${sourceDir}/${CODESYS_FILENAME}.tgz"
backup_system_file="${sourceDir}/${SYSTEM_FILENAME}.tgz"
backup_settings_file="${sourceDir}/${SETTINGS_FILENAME}"

enc='.enc'

# now we should have any directory including our data
if [[ "$status" == "$SUCCESS" ]]; then
    # first check if the advised backup files are even existing
    checkfile "$packageCodesys"  "${backup_codesys_file}"  || status="$?"
    checkfile "$packageSystem"   "${backup_system_file}"   || status="$?"
    checkfile "$packageSettings" "${backup_settings_file}" || status="$?"

    if [[ $status -eq $CONFIG_FILE_MISSING ]]; then
        print_dbg "config file missing"

        # in testmode this is no real error, but the information we want to get (-> don't report error)
        if [[ "1" != "$testmode" ]]; then
            ReportError $status "($sourceDir/...)"
        fi
    fi
fi

# in testmode, our work is done here - otherwise we can start with reading and processing our data now
if [[ "1" != "$testmode" ]]; then
    # If passphrase is given, we expect an encrypted backup and
    # decrypt it first.
    if [ "$status" -eq "$ENCRYPTED_FILE" ] && [ "${passphrase}" ]; then
      status="$SUCCESS"
      for file in "${backup_codesys_file}" "${backup_system_file}" "${backup_settings_file}"; do
        if test -f "${file}${enc}"; then
          { openssl enc -d -aes-256-cfb -md sha512 -pass fd:3 <"${file}${enc}" >"${file}" 3<< EOF
${passphrase}
EOF
	  } || status="$ENCRYPTED_FILE"
        fi
      done
    fi

    if [[ $status -eq $SUCCESS ]]; then
        WriteRestoreState "start"

        # initialize flag for necessary actions after restore
        rebootFlag=0
        restartCodesys=0

        # stop PLC runtime if it is active
        if [[ -n "$(pidof codesys3)"    ]] ||
           [[ -n "$(pidof plclinux_rt)" ]]; then

            # send term signal and wait until codesys had stopped, check if timeout reached without success
            /etc/config-tools/terminate_codesys 20 &>/dev/null
            if [[ $SUCCESS -ne $? ]]; then
                status=$SHELL_ERROR
                ReportError $status "(/etc/config-tools/terminate_codesys 20)"
            else
                restartCodesys=1
            fi
        fi
    fi

    #-------------------------------------------------------------
    # CoDeSys
    #-------------------------------------------------------------
    if [[ $status -eq $SUCCESS ]] && [[ "$packageCodesys" == "1" ]]; then
        print_dbg "restore codesys"

        # first get device and partition of codesys (= home) device
        destinationPartition="$(/etc/config-tools/get_filesystem_data active-partition)"

        RestorePartition "$destinationPartition" "${backup_codesys_file}"

        status=$?
        if [[ $status -ne $SUCCESS ]]; then
            ReportError $status "(RestorePartition $destinationPartition ${backup_codesys_file})"
        fi
    fi

    #-------------------------------------------------------------
    # system
    #-------------------------------------------------------------
    if [[ $status -eq $SUCCESS ]] && [[ "$packageSystem" == "1" ]]; then
        print_dbg "restore system"
        # first get device and partition of the actually unused system partition and restore the image there
        destinationPartition="$(GetInactiveSystemPartition)"

        if [[ "$packageSettings" == "1" ]]; then
            # Pass settings file to RestorePartition. It will copy it into the restored partition and take care it will
            # be applied after the restored partition boots for the first time.
            RestorePartition "$destinationPartition" "${backup_system_file}" "${backup_settings_file}"
            status=$?

            # signalise that package settings is already processed
            packageSettings=0
        else
            RestorePartition "$destinationPartition" "${backup_system_file}"
            status=$?
        fi

        # Synchronize home partition
        if [[ $status -eq $SUCCESS ]]; then
            CopyHome
            status=$?
        fi

        case $status in
          ${SUCCESS})
            print_dbg "switching bootable rootfs..."
            if SwitchBootPartition; then
                rebootFlag=1
            fi
            ;;

          ${LAST_ERROR_SET})
            ;; # Just pass error to UI

          *)
            ReportError $status "(RestorePartition $destinationPartition ${backup_system_file})"
            ;;
        esac
    fi

    #-------------------------------------------------------------
    # settings
    #-------------------------------------------------------------
    if [[ $status -eq $SUCCESS ]] && [[ "$packageSettings" == "1" ]]; then
        print_dbg "Restore settings" > $statusFile

        $WAGO_CT_DIR/settings_backup restore "${backup_settings_file}"
        if [[ $? -ne $SUCCESS ]]; then
          status=$EXECUTABLE_ERROR
          ReportError $status "(settings_backup)"
        else
            rebootFlag=1
        fi
    fi

    #-------------------------------------------------------------
    # Set final return value
    #-------------------------------------------------------------
    if [[ $status -ne $SUCCESS ]] && [[ $status -ne $LAST_ERROR_SET ]]; then
        report_error "Firmware restore: Error while execution"
    fi
fi


# cleanup efforts:
# in case of an encrypted backup, we have to delete the
# unencrypted backup not to leak any data
if [[ -n "${passphrase}" ]]; then
  rm -f "${backup_codesys_file}" "${backup_system_file}" "${backup_settings_file}"
fi

# destination device is network -> uploaded files must be removed after we processed them
if [[ "$deviceMedium" == "$NETWORK" && -d "$sourceDir" ]]; then
  rm -f "${backup_codesys_file}" "${backup_system_file}" "${backup_settings_file}" \
        "${backup_codesys_file}${enc}" "${backup_system_file}${enc}" "${backup_settings_file}${enc}"
fi

# check if source directory was mounted and if so, unmount it
mount | grep "$SRCDIR" &>/dev/null && umount "$SRCDIR"

# check if directory used for mounting is existing and if so, remove it
if [[ -d "$SRCDIR" ]]; then
    print_dbg "remove $SRCDIR"
    rm -rf "$SRCDIR"
fi

# restart codesys if necessairy
if [[ $restartCodesys -eq 1 ]] && [[ $rebootFlag -eq 0 ]]; then
    print_dbg "restart PLC runtime"
    /etc/init.d/runtime start &>/dev/null
    if [[ $? -ne $SUCCESS ]]; then
        report_error "error while restarting PLC runtime"
        status=$SHELL_ERROR
        ReportError $status "(etc/init.d/runtime start)"
    fi
fi

sync

trap - EXIT

# reboot ipc, if necessairy
if [[ $rebootFlag -eq 1 ]]; then
    Reboot
elif [[ $status -eq $SUCCESS ]]; then
    WriteRestoreState "finish"
else
    WriteRestoreState "fail"
fi

exit $status
