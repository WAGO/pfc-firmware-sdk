#!/bin/bash
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2018 WAGO Kontakttechnik GmbH & Co. KG

#-----------------------------------------------------------------------------#
# Script-name: config_timezone
#
# Configure the timezone.
#
# Author: WAGO Kontakttechnik GmbH
#-----------------------------------------------------------------------------#

# load general definitions and functions
if [ ! -f "/etc/config-tools/config_tool_lib" ]; then
  echo "config_tool_lib missing"
  exit 255
fi

. /etc/config-tools/config_tool_lib


#-------------- main-programm ------------------------#

status=$SUCCESS

# show help-text if requested
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  echo
  echo "* Change the timezone *"
  echo
  echo "Usage: config_timezone < timezone=timezone-value | tz-string=tz-string-value >"
  echo
  echo "timezone-value: timezone as clear text string"
  echo "tz-string-value: timezone-string like it is written in config-file"
  echo 
  exit $status
fi

# filter input parmeter of input-string
newTimezone=`GetParameterValue $TIMEZONE $*`
newTzString=`GetParameterValue $TZ_STRING $*`
#set fallback for using a fallback for WBM and not for CDS3
fallback=`GetParameterValue fallback  $*`
if [ "$fallback" == "" ]
then
        fallback=true
fi

# the 'GetParameterValue'-function replace all '+' with ' ', but the timezone GMT+<value>
# need this '+' indication! So we must add the '+' again.
#echo "unchanged GMT+x timezone input:"$newTimezone
#echo "unchanged GMT+x tz-string input:"$newTzString
if [[ "$newTimezone" != "" ]]; then
    newTimezone=$(echo $newTimezone | sed -e 's/GMT /GMT+/g')
fi

if [[ "$newTzString" != "" ]]; then
  newTzString=$(echo $newTzString | sed -e 's/<GMT /<GMT+/g')
fi
#echo "changed GMT+x timezone input:"$newTimezone
#echo "changed GMT+x tz-string input:"$newTzString

# normalize TZ string by removing possible /2 substrings 
#(as in M3.5.0/2 which is the same as M3.5.0)

if [[ "$newTzString" != "" ]]; then
    newTzString=$(echo $newTzString | sed 's+/2++g')
fi

#echo "newTimezone:"$newTimezone "newTzString:"$newTzString

init_zone()
{
  localtime=$1
  tzStr=$2
  echo -e $tzStr"\c" > $TIMEZONE_FILENAME
  echo -e $localtime"\c" > /etc/TZname
  #ifsbak=$IFS
  #IFS=' '
  #read fileinfo from tar-database and get the orinial filename in case of a link
  #FILE="zoneinfo/$localtime"
  FILE=$(tar -tjvf /usr/share/zoneinfo/zoneinfo.tar.bz2 "zoneinfo/$localtime" | sed 's/.* //')
  #LINKED=`echo $FILEINFO | cut -d ' ' -f 8`
  #if [ "$LINKED" != "" ]
  #then
  #  FILE=$LINKED
  #fi
  tar -xjOf /usr/share/zoneinfo/zoneinfo.tar.bz2 $FILE > /etc/localtime
  #IFS=$ifsbak
  source /etc/timezone
  sync
}

init_zone_by_str()
{
	tzSearch=$1
	SETTED=false;
	ifsbak=$IFS;
	IFS=$'\n';
	for filename in zoneinfos allzones
	do 
		for i in `cat /usr/share/zoneinfo/$filename | grep "$tzSearch"` 
		do
			if [ "$(echo -e $i | cut -d' ' -f1)" == "$tzSearch"  ] || [ "$(echo -e $i | cut -d' ' -f2)" == "$tzSearch"  ]
			then
				newTzString=$(echo $i | cut -d' ' -f2)
				newTzName=$(echo $i | cut -d' ' -f1)
				init_zone "$newTzName" "$newTzString"
				newTzString=""
				SETTED=true;
				sync
				break;
			fi
		done
		if [ "true" == "$SETTED" ]; then
			break
		fi
	done
	if [ "false" == "$SETTED" ]; then
		SetLastError "invalid tz-string"
		status=$INVALID_PARAMETER
	fi
	IFS=$ifsbak;
}


# if timezone should be changed
if [ -n "$newTimezone" ] && [ "$UNKNOWN" != "$newTimezone" ]; then

  actualTimezone=`${CONFIG_TOOLS_PATH}get_clock_data timezone-string`
  #echo "acutalTimezone:"$actualTimezone
  
  if [ "$newTimezone" != "$actualTimezone" ]; then
    newTzString=""
    found=0;
    
    # add white space to differentiate GMT+1 equal or higher than GMT+10
    bakTimezone=$newTimezone
    if [[ "$newTimezone" =~ "Etc/GMT" ]]
    then
        newTimezone="$newTimezone "
    fi
    
    
    grep "$newTimezone" /usr/share/zoneinfo/zoneinfos >> /dev/null
    if [ "$?" == "0" ]
    then
      found=1
    else
      grep "$newTimezone" /usr/share/zoneinfo/allzones >> /dev/null
      if [ "$?" == "0" ]
      then
          found=1
      fi
    fi
    
    # remove white space
    newTimezone=$bakTimezone
    
    if [ "$found" == "1" ]
    then
      ifsbak=$IFS;
      IFS=$'\n';
      isTimezoneSet=false
      for i in `cat /usr/share/zoneinfo/zoneinfos | grep "$newTimezone"` 
      do
        if [ "$(echo -e $i | cut -d' ' -f3-)" == "$newTimezone"  ] || [ "$(echo -e $i | cut -d' ' -f1)" == "$newTimezone" ]
        then
          newTzString=$(echo $i | cut -d' ' -f2)
          newTzName=$(echo $i | cut -d' ' -f1)
          init_zone $newTzName $newTzString
          newTzString=""
          isTimezoneSet=true
          break;
        fi
      done
      if [ "${isTimezoneSet}" != "true" ]
      then
        for i in `cat /usr/share/zoneinfo/allzones | grep "$newTimezone"` 
        do
          if [ "$(echo -e $i | cut -d' ' -f3-)" == "$newTimezone"  ] || [ "$(echo -e $i | cut -d' ' -f1)" == "$newTimezone" ]
          then
            newTzString=$(echo $i | cut -d' ' -f2)
            newTzName=$(echo $i | cut -d' ' -f1)
            init_zone $newTzName $newTzString
            newTzString=""
            break;
          fi
        done
      fi
      IFS=$ifsbak;	
    fi
  fi
fi


# if new TZ-String was found or given, change tz-string in TZ-file and put it to shell-variable
if [ -n "$newTzString" ]; then
  grep "$newTzString" /usr/share/zoneinfo/zoneinfos >> /dev/null
  if [ "$?" == "0" ]
	then
		init_zone_by_str $newTzString
	else
		grep "$newTzString" /usr/share/zoneinfo/allzones >> /dev/null
		if [ "$?" == "0" ]
		then
			if [ $(echo $newTzString | wc -c) -gt 3 ]; then
			init_zone_by_str $newTzString
			fi
		else
			if [ "$fallback" == "true" ]
				then
					printf "" > /etc/localtime
					printf "" > /etc/TZname
					echo -e $newTzString"\c" > $TIMEZONE_FILENAME
				else
					#return ENOINT
					status=2
				fi

		fi
	fi
fi

exit $status
