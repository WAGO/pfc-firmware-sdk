#!/bin/bash
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2018-2022 WAGO GmbH & Co. KG

#-----------------------------------------------------------------------------#
# Script-name: config_default_gateway
#
# Change the configuration of the default-gateway. Default GW addresses
# are written into a config file. Finally an networking event is issued
# which causes the default gateways to be written to the routing table.
#
# Author: WAGO GmbH
#-----------------------------------------------------------------------------#

set -u

# load general definitions and functions
if [ ! -f "/etc/config-tools/config_tool_lib" ]; then
  echo "config_tool_lib missing"
  exit 255
fi

. /etc/config-tools/config_tool_lib

# Set error message and exit
param_error_exit()
{
    local msg=$1
    SetLastError "$msg"
    exit $INVALID_PARAMETER
}

# Check argument value against a selection of values.
arg_assert()
{
    local arg=$1
    local sel=$2
    local msg=$3
    local is_valid="false"

    for val in $sel; do
        if [[ "$arg" == "$val" ]]; then
            is_valid="true"
            break
        fi
    done
    if [ $is_valid == false ]; then
        param_error_exit "$msg"
    fi
}

#-------------- main-programm ------------------------#

status=$SUCCESS

# show help-text if requested
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo
    echo "* Configure value and/or location of the default-gateway *"
    echo
    echo "Usage: config_default_gateway [number=1 or 2] state=state-value | value=default-gateway-value |"
    echo "                              metric=metric-value"
    echo
    echo "number selects one of the two possible default gateways. Default value is 1"
    echo
    echo "state-value:           enabled or disabled"
    echo
    echo "default-gateway-value: ip address of default-gateway"
    echo
    echo "metric-value:          Determines sequence of default gateways to try. Lowest values first."
    echo "                       Default for static configuration is 20. Default for gateways from"
    echo "                       DHCP/BOOTP is 10."
    echo
    exit 0
fi

CONFIG_ROUTING="/etc/config-tools/config_routing"

_number=1
_state=
_gw_ip=
_metric=
_destination=
_dest_mask=

_persist_only="false"


while [[ $# -ne 0 ]]; do
    case "$1" in
       number=*)
            _number="${1#number=}"
            if [ -z "$_number" ]; then
                param_error_exit "Missing parameter selection value"
            fi
            ;;
        state=*)
            _state="${1#state=}"
            if [ -z "$_state" ]; then
                param_error_exit "Missing default gateway state value"
            fi
            ;;
        value=*)
            _gw_ip="${1#value=}"
            if [ -z "$_gw_ip" ]; then
                param_error_exit "Missing default gateway ip address"
            fi
            ;;
        metric=*)
            _metric="${1#metric=}"
            if [ -z "$_metric" ]; then
                param_error_exit "Missing default gateway metric value"
            fi
            ;;
        destination=*)
            _destination="${1#destination=}"
            if [ -z "$_destination" ]; then
                param_error_exit "Missing gateway destination value"
            fi
            ;;
        dest_mask=*)
            _dest_mask="${1#dest_mask=}"
            if [ -z "$_dest_mask" ]; then
                param_error_exit "Missing gateway destination mask value"
            fi
            ;;
        --persist-only)
            _persist_only="true"
            ;;
        *)
            status=$INVALID_PARAMETER
            break
            ;;
    esac
    shift 1
done

arg_assert "$_number" "1 2" "Illegal or missing default gateway number"

# Setup command line arguments for config-routing
args="static --change"
if [[ $_number == 1 || $_number == 2 ]]; then
    index=$((_number-1))
    args="$args index=$index"
fi

if [[ -z "$_destination" && -z "$_dest_mask" ]]; then
    _destination="default"
    _dest_mask="0.0.0.0"
fi

[[ "$_state" ]] && args="$args state=$_state"
[[ "$_gw_ip" ]] && args="$args gw=$_gw_ip"
[[ "$_metric" ]] && args="$args metric=$_metric"
[[ "$_destination" ]] && args="$args dest=$_destination" || args="$args dest=default"
[[ "$_dest_mask" ]] && args="$args dest-mask=$_dest_mask" || args="$args dest-mask=0.0.0.0"

[[ "$_persist_only" == "true" ]] && args="$args --persist-only"

# Call config-routing config-tool
$CONFIG_ROUTING $args
status=$?

# trigger update of system
[[ $status -eq $SUCCESS && "false" == "$_persist_only" && -e /etc/config-tools/events/networking ]] && run-parts -a config /etc/config-tools/events/networking/

exit $status
