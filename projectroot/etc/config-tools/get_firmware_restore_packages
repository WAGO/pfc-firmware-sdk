#!/bin/bash
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2018-2022 WAGO GmbH & Co. KG

#-----------------------------------------------------------------------------#
# Script-name: get_firmware_restore_packages
#
# Get available firmware restore packages for all devices
#
# Author: WAGO GmbH
#-----------------------------------------------------------------------------#

# load general definitions and functions
if [ ! -f "/etc/config-tools/config_tool_lib" ]; then
  echo "config_tool_lib missing"
  exit 255
fi

. /etc/config-tools/config_tool_lib

# show help-text if requested
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  echo
  echo "* Get available firmware restore packages for the significant devices in json format *"
  echo
  echo "Usage: get_firmware_restore_packages"
  echo
  exit $SUCCESS
fi

status=$SUCCESS
CODESYS_ENC_FLAG=1
SYSTEM_ENC_FLAG=2
SETTINGS_ENC_FLAG=4

activePartitionMedium=$(/etc/config-tools/get_filesystem_data "active-partition-medium")

comma=""

echo "{"

# get the existing devices one by one
deviceIndex=1
deviceMedium="$(/etc/config-tools/get_filesystem_data medium-by-index $deviceIndex)"
status=$?

while [ -n "$deviceMedium" ] && [ "$SUCCESS" = "$status" ]; do
  if [ "$deviceMedium" != "$activePartitionMedium" ] && [ ! "$deviceMedium" = "internal-flash" ]; then
    encryptedFlag=0

    # check package states - return value SUCCESS -> package exists, CONFIG_FILE_MISSING -> package not exists, any other -> error
    /etc/config-tools/firmware_restore testmode=1 device-medium="$deviceMedium" package-codesys=1
    codesysState=$?

    codesysAvailable="false"
    if [ $ENCRYPTED_FILE -eq $codesysState ]; then
      encryptedFlag=$(( $CODESYS_ENC_FLAG | $encryptedFlag ))
      codesysAvailable="true"
    elif [ $SUCCESS -eq $codesysState ]; then
      codesysAvailable="true"
    elif [ $CONFIG_FILE_MISSING -ne $codesysState ]; then
      status=$codesysState
    fi

    /etc/config-tools/firmware_restore testmode=1 device-medium="$deviceMedium" package-system=1
    systemState=$?
    systemAvailable="false"

    if [ $ENCRYPTED_FILE -eq $systemState ]; then
      encryptedFlag=$(( $SYSTEM_ENC_FLAG | $encryptedFlag ))
      systemAvailable="true"
    elif [ $SUCCESS -eq $systemState ]; then
      systemAvailable="true"
    elif [ $CONFIG_FILE_MISSING -ne $systemState ]; then
      status=$systemState
    fi

    /etc/config-tools/firmware_restore testmode=1 device-medium="$deviceMedium" package-settings=1
    settingsState=$?
    settingsAvailable="false"

    if [ $ENCRYPTED_FILE -eq $settingsState ]; then
      encryptedFlag=$(( $SETTINGS_ENC_FLAG | $encryptedFlag ))
      settingsAvailable="true"
    elif [ $SUCCESS -eq $settingsState ]; then
      settingsAvailable="true"
    elif [ $CONFIG_FILE_MISSING -ne $settingsState ]; then
      status=$settingsState
    fi

    # it is not possible to execute the backup process with both states (encrypted and not encrypted files)
    # encrypted files have higher prio

    if [ $encryptedFlag -ne 0 ]; then
      if [ $(( $CODESYS_ENC_FLAG & $encryptedFlag )) -ne $CODESYS_ENC_FLAG ]; then
        codesysAvailable="false"
      fi
      if [ $(( $SYSTEM_ENC_FLAG & $encryptedFlag )) -ne $SYSTEM_ENC_FLAG ]; then
        systemAvailable="false"
      fi
      if [ $(( $SETTINGS_ENC_FLAG & $encryptedFlag)) -ne $SETTINGS_ENC_FLAG ]; then
        settingsAvailable="false"
      fi
    fi

    cat <<-EOF
	$comma
	"$deviceMedium": {
	  "packageCodesys": $codesysAvailable,
	  "packageSystem": $systemAvailable,
	  "packageSettings": $settingsAvailable,
	  "encryption_active_state": $encryptedFlag
	}
	EOF

    comma=","
  fi

  # get next device
  deviceIndex=$(( $deviceIndex + 1 ))
  deviceMedium=$(/etc/config-tools/get_filesystem_data medium-by-index $deviceIndex)

done  

echo "}"

exit $status
