#!/bin/bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2018-2022 WAGO GmbH & Co. KG

RESERVED_AREA="/etc/config-tools/reserved_area"
TARGET_DIR="/tmp/file_transfer"

#-----------------------------------------------------------------------------
# Script-name: file_transfer
#
# Prepare and clean file transfers.
#
# Author: WAGO GmbH & Co. KG.
#-----------------------------------------------------------------------------


# Set error on use of undefined shell variables
set -u

function print_usage
{
    echo
    echo "* Command line interface tool supporting file transferes. *"
    echo
    echo "Usage:"
    echo "  file-transfer <options>"
    echo
    echo "Options:"
    echo "  -h, --help                        Show this help text."
    echo "  -x, --extract-from-uri-encoding   Extracts arguments from an URI encoding"
    echo "  -q, --quiet                       Don't print information or error texts to stdout/stderr"
    echo "  -t, --text                        Prints output as name=value pairs, one per line"
    echo "  -j, --json                        Prints output as JSON format string"
    echo "  -p, --prepare                     Prepare file transfer."
    echo "  -c, --cleanup                     Cleanup after file transfer."
    echo "  -f, --print-free-capacity         Print out free capacity of reserved partition"
    echo "  -a, --print-available-capacity    Print out (user) available capacity of reserved partition"
    echo "  -d, --print-file-transfer-path    Print out file transfer directory (\"none\" if not prepared)"
}


function prepare
{
    local status
    local output
    
    output=$("$RESERVED_AREA" --mount "$TARGET_DIR" --create --clear "$text" "$json" "$quiet" "$print_free_capacity" "$print_available_capacity" "$print_file_transfer_path" "$uri_encoding")
    status=$?
    if [[ $status == $SUCCESS ]]; then
        chmod 777 "$TARGET_DIR"
        status=$?
        if [[ $status != 0 ]]; then
            SetLastError "Failed setting access rights for target directory \"$TARGET_DIR\"."
            status=$INTERNAL_ERROR
        else
            if [[ -n "$print_file_transfer_path" ]]; then
                output=$(echo -n "$output" | sed -e "s#MountPoint#FileTransferPath#g")
                if [[ "$output" =~ (.*)none(.*) ]]; then
                    output=$(echo -n "$output" | sed -e "s#none#${TARGET_DIR}#g")
                    if [[ -n "$json" ]]; then
                        output=$(echo -n "$output" | sed -e 's#/#\\/#g')
                    fi
                fi
            fi
        fi
    else
        SetLastError "Failed preparing target directory \"$TARGET_DIR\"."
        status=$INTERNAL_ERROR
    fi

    echo -n "$output"

    return $status
}


function cleanup
{
    local status
    
    "$RESERVED_AREA" --umount --clear "$quiet" "$uri_encoding"
    status="$?"
    
    if [[ $SUCCESS == $status ]]; then
        # Remove directory
        [[ -d "$TARGET_DIR" ]] && rm -r "$TARGET_DIR"
    else
        SetLastError "Failed Removing target directory \"$TARGET_DIR\"."
    fi
    
    if [[ $status != $SUCCESS ]]; then
        return $INTERNAL_ERROR
    else
        return $SUCCESS
    fi
}


function get_info
{
    local output=$("$RESERVED_AREA" "$text" "$json" "$quiet" "$print_free_capacity" "$print_available_capacity" "$print_file_transfer_path" "$uri_encoding")
    status=$?
    if [[ $status == $SUCCESS && -n "$print_file_transfer_path" ]]; then
        output=$(echo -n "$output" | sed -e "s#MountPoint#FileTransferPath#g")
        if [[ -d "$TARGET_DIR" && "$output" =~ (.*)none(.*) ]]; then
            output=$(echo -n "$output" | sed -e "s#none#${TARGET_DIR}#g")
            if [[ -n "$json" ]]; then
                output=$(echo -n "$output" | sed -e 's#/#\\/#g')
            fi
        fi
    fi

    echo -n "$output"

    return $status
}


function parse_cmd_line
{
    while [[ $# -ne 0 && $status == "$SUCCESS" ]]; do
        case "$1" in
            -h)
                print_usage
                exit 0
                ;;
            --help)
                print_usage
                exit 0
                ;;
            -q)
                quiet="--quiet"
                ;;
            --quiet)
                quiet="--quiet"
                ;;
            -j)
                json="--json"
                ;;
            --json)
                json="--json"
                ;;
            -t)
                text="--text"
                ;;
            --text)
                text="--text"
                ;;
            -f)
                print_free_capacity="--print-free-capacity"
                ;;
            --print-free-capacity)
                print_free_capacity="--print-free-capacity"
                ;;
            -a)
                print_available_capacity="--print-available-capacity"
                ;;
            --print-available-capacity)
                print_available_capacity="--print-available-capacity"
                ;;
            -d)
                print_file_transfer_path="--print-mount-point"
                ;;
            --print-file-transfer-path)
                print_file_transfer_path="--print-mount-point"
                ;;
            -x)
                uri_encoding="--extract-from-uri-encoding"
                ;;
            --extract-from-uri-encoding)
                uri_encoding="--extract-from-uri-encoding"
                ;;
            -p)
                operation="prepare"
                ;;
            --prepare)
                operation="prepare"
                ;;
            -c)
                operation="cleanup"
                ;;
            --cleanup)
                operation="cleanup"
                ;;
        esac
        shift 1
    done
    
    return $status
}


#-------------- main-program ------------------------#

quiet=""
text=""
json=""
operation=""
print_free_capacity=""
print_available_capacity=""
print_file_transfer_path=""
uri_encoding=""

# load general definitions and functions
if [ ! -f "/etc/config-tools/config_tool_lib" ]; then
    print_dbg "config_tool_lib missing"
    exit 255
fi

. "/etc/config-tools/config_tool_lib"

status=$SUCCESS

if [[ $# -lt 1 ]]; then
    print_usage
    exit 0
fi

parse_cmd_line "$@"


if [[ "$operation" == "prepare" ]]; then
    prepare
    status=$?
elif [[ "$operation" == "cleanup" ]]; then
    cleanup
    status=$?
else
    get_info
    status=$?
fi


exit $status
