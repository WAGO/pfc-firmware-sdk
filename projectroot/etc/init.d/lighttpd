#!/bin/bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2021 WAGO Kontakttechnik GmbH & Co. KG

#
# lighttpd start script
#

PREFIX="lighttpd: "
LIGHTTPD="/usr/sbin/lighttpd"
LIGHTTPD_PROC="lighttpd"
LIGHTTPD_PIDFILE="/var/run/lighttpd.pid"
LIGHTTPD_CONF="/etc/lighttpd/lighttpd.conf"
LIGHTTPD_LOGDIR="/var/log/lighttpd"
LIGHTTPD_PHP_SESSION_DIR="/var/run/php/sessions"
START_STOP_DAEMON="/sbin/start-stop-daemon"

# Utility function to store process id after service startup
store_pidfile()
{
	# Determine the pid of lighttpd by filter out own pid.
	# One will be this script itself because it's named equally.
	local own_pid="$BASHPID"
	local lighttpd_pids
	lighttpd_pids="$(pidof "${LIGHTTPD_PROC}")"
	for pid in $lighttpd_pids; do
		if [[ "$pid" != "$own_pid" ]]; then
			echo -n "$pid" > "${LIGHTTPD_PIDFILE}"
		fi
	done
}

# Utility function to remove PID-File after stopping the service
remove_pidfile()
{
	rm -f "${LIGHTTPD_PIDFILE}"
}

# Utility function to create a directory and assign appropriate 
# permissions as required by the service
create_directry_if_needed()
{
	local directory="$1"
	if [ ! -d "${directory}" ]; then
		mkdir -p "${directory}"
		chmod 700 "${directory}"
		chown www:www "${directory}"
    fi
}

# Start the service 
start()
{
	create_directry_if_needed "${LIGHTTPD_LOGDIR}"
	create_directry_if_needed "${LIGHTTPD_PHP_SESSION_DIR}"
	$START_STOP_DAEMON --quiet --start --exec "${LIGHTTPD}" -- -f "${LIGHTTPD_CONF}"
	return $?
}

# Stop the service 
stop()
{
    $START_STOP_DAEMON --quiet --stop --oknodo --exec "${LIGHTTPD}"
	return $?
}

# Reload configuration of the service
reload()
{
	local retval=-1
	store_pidfile
	if $START_STOP_DAEMON --stop --signal SIGINT --oknodo --quiet --pidfile "${LIGHTTPD_PIDFILE}" --exec "${LIGHTTPD}"; then
		while start-stop-daemon --stop -t --quiet --pidfile "${LIGHTTPD_PIDFILE}" --exec "${LIGHTTPD}"; do
			usleep 10000;
		done
		if start; then
			retval=0
		fi
	fi
    remove_pidfile
	return $retval;	
}

case $1 in

	start)
		echo "${PREFIX}starting"
		if start; then
			echo "${PREFIX}done"
		else
			echo "${PREFIX}error, could not start server"
		fi
		;;

	stop)
		echo "${PREFIX}stopping"
		if stop; then
			echo "${PREFIX}done"
		else
			echo "${PREFIX}error, could not stop server"
		fi
		;;

	reload)
		echo "${PREFIX}reloading"
		if reload; then
			echo "${PREFIX}done"
		else
			echo "${PREFIX}error, could not reload server"
		fi
		;;

	*)
		echo "${PREFIX}usage: ${0} [start|stop|reload]"
		exit 1
		;;

esac
