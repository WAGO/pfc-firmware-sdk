#!/bin/bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2018 WAGO Kontakttechnik GmbH & Co. KG

DAEMONIZE="/sbin/start-stop-daemon"

# read typelabel ORDER number to detect TP600/CC100 devices
ORDER="$(/etc/config-tools/get_typelabel_value ORDER)"
if [ "${ORDER:0:5}" == "751-9" ]; then
  #CC100
  SD_BOOT_DEV_NAME="/dev/mmcblk0p4"
else
  #PFC/TP600
  SD_BOOT_DEV_NAME="/dev/mmcblk0p1"
fi

# no qt5/x11 graphic without sourcing profile variables
if [ "${ORDER:0:3}" == "762" ] || [ "${ORDER:0:5}" == "752-8" ]; then
   if [ -e "/var/run/framebuffer.mode" ]; then
      #framebuffer mode is active - no Xorg available
      exit 0
   fi
. /etc/profile 2>&1 > /dev/null
fi

# only TP600 show countdown message waithittouch
function tp_wait4touchpressed()
{
  local TOUCHPRESSED=0
  local COUNTDOWN=`getconfvalue /etc/specific/bootsettings.conf countdown`
  if [ -z $COUNTDOWN ]; then
   COUNTDOWN=3
  fi
  if [ $COUNTDOWN -gt 0 ]; then    
    waithittouch "Touch screen to cancel start sequence !" $COUNTDOWN
    TOUCHPRESSED=$?
  fi
  echo "$TOUCHPRESSED"
}

# only TP600
function tp_is_multicore()
{
  local MULTICORE="$(/etc/config-tools/get_eruntime multicore)"
  echo "$MULTICORE"
}

#only TP600
function tp_start_mode()
{
  # result 0: start codesys3 without browser
  # result 1: start browser with WBM without codesys3
  # result 2: start browser with startpage from Plclist and codesys3
  local RESULT=2
  local BOOTAPP="$(/etc/config-tools/get_eruntime bootapp)"
  local PLCSELECTED="0"
  
  if [ "$BOOTAPP" == "yes" ]; then
    if [ $(tp_wait4touchpressed) == "1" ]; then
      # Starting Browser with WBM only without codesys3
      RESULT=1
    else
      PLCSELECTED="$(/etc/config-tools/get_plcselect plc_selected)"
      if [ "$PLCSELECTED" == "0" ]; then
        RESULT=0
      fi
    fi
  fi

  echo "$RESULT"
}

prepare_home_dir()
{
  # prepare home dir according to CODESYS_HOMEDIR_SDCARD config parameter,
  # depending on boot media
  local CDS_ROOT_DIR=/home/codesys_root
  if [ ! -d $CDS_ROOT_DIR ] ; then
      mkdir -p $CDS_ROOT_DIR   #create dir if doesn't exist
      #Set correct admin group id
      chown -R $(whoami):admin $CDS_ROOT_DIR
      chmod g+s $CDS_ROOT_DIR
  fi
  mount | grep -q "$SD_BOOT_DEV_NAME"
  local sd_is_mounted=$?
  . $RUNTIME_CONFIG
  if [ -z "$(pidof codesys3)" -a -z "$(pidof plclinux_rt)" ]; then
    if [ ! -a /home/codesys -o -L /home/codesys ]; then
      if [[ "$(/etc/config-tools/get_filesystem_data active-partition-medium)" =~ "internal-flash" ]] && \
           [ "$CODESYS_HOMEDIR_SDCARD" = "enabled" -a "$sd_is_mounted" = "0" ]; then
        rm -f /home/codesys
        ln -s /media/sd /home/codesys
      else
        # booted from sd-card, direct /home/codesys link to real directory
        rm /home/codesys
        ln -s $CDS_ROOT_DIR /home/codesys
      fi
      # copy non-destructive cds2 files, even if cds3 is started. cds3 ignores the files.
      if [[ -d /home/codesys2_skel ]]; then
        cp -rn /home/codesys2_skel/* /home/codesys/ &> /dev/null #do not show error if no files to copy
      fi
    fi
  fi
}

start_codesys2()
{
  if [ -n "`pidof plclinux_rt`" ]; then
    echo "CoDeSys already started"
  else
    local PROGRAM="/usr/sbin/plclinux_rt"
    local WRAPPER="/usr/bin/rtswrapper"
    export LD_LIBRARY_PATH=/home/codesys
    echo -n "Starting CoDeSys v2.3..."
    umask 0002
    echo $PROGRAM > /var/run/runtime
    if [ "$1" == "0" ]
    then
      "$DAEMONIZE" -S -x "$WRAPPER" -o -b -- "$PROGRAM"
    else
      "$DAEMONIZE" -S -x "$PROGRAM" -o
    fi
  fi
}

set_licence()
{
  local DAT_PATH=/usr/share/codesys3
  local DEVICEID=$(printf "0x%X" $(/etc/config-tools/get_typelabel_value DEVICEID))
  local LINK=$DAT_PATH/3S.$DEVICEID.dat
  if [ ! -e $LINK ]
  then
    LINK=$DAT_PATH/3S.default.dat
  fi
  if [ "$LINK" != "$(readlink $DAT_PATH/3S.dat)" ]
  then
    ln -sf $LINK $DAT_PATH/3S.dat
  fi
}

start_eruntime()
{
  if [ -n "$(pidof codesys3)" ]; then
    echo "eRUNTIME already started"
  else
    local PROGRAM="/usr/bin/codesys3"
    local WRAPPER="/usr/bin/rtswrapper"
    if [ "${ORDER:0:3}" == "762" ] || [ "${ORDER:0:5}" == "752-8" ]; then
      # only TP600
      if [ $(tp_is_multicore) == "no" ]; then
        PROGRAM="/usr/bin/taskset 1 /usr/bin/codesys3"
      fi
    fi
    echo -n "Starting eRUNTIME..."
    set_licence
    umask 0002
    echo $PROGRAM > /var/run/runtime
    if [ "$1" == "0" ]
    then
      "$DAEMONIZE" -S -x "$WRAPPER" -o -b -- "$PROGRAM"
    else
      "$DAEMONIZE" -S -x "$PROGRAM" -o
    fi
  fi
}

start_runtime()
{
  prepare_home_dir
  case $1 in
    2)
     start_codesys2 $2
     ;;
    3)
     if [ "${ORDER:0:3}" == "762" ] || [ "${ORDER:0:5}" == "752-8" ]; then
       # only TP600
       TP_START_MODE=$(tp_start_mode)
       if [ "$TP_START_MODE" == "1" ]; then
         /etc/script/start_wbm.sh 2>&1 > /dev/null &
       elif [ "$TP_START_MODE" == "2" ]; then
         /etc/script/start_webbrowser.sh 2>&1 > /dev/null &
         start_eruntime $2
       else
         start_eruntime $2
       fi
     else
       # all devices except TP600
       start_eruntime $2
     fi
     ;;    
  esac
}

wait_for_stop()
{
  local RUNTIME_PID=$1
  local TIMEOUT=$2
  local RET_VAL=0
  
  local  TIMEOUT_COUNTER=0
  if [ -n "${RUNTIME_PID}" ]
  then      
    while [ -d "/proc/${RUNTIME_PID}" ] 
    do
      if (( TIMEOUT_COUNTER > TIMEOUT ))
      then
        RET_VAL=1
        break
      else
       TIMEOUT_COUNTER=$((TIMEOUT_COUNTER + 1)) 
       sleep 1
      fi
    done
  fi
 
  return $RET_VAL
}

stop_runtime()
{
  local RESULT=1
  local RUNTIME_NAME=""
  local RUNTIME_STRING="Runtime"
  local RUNTIME_PATH=""

  rm -f /var/run/runtime
  case $1 in
    2)
     RUNTIME_NAME="plclinux_rt"
     RUNTIME_STRING="CoDeSys v2.3"
     RUNTIME_PATH=/usr/sbin/${RUNTIME_NAME}
     ;;
    3)
      RUNTIME_NAME="codesys3"
      RUNTIME_STRING="eRUNTIME"
      RUNTIME_PATH=/usr/bin/${RUNTIME_NAME}
      ;;
  esac
  echo -n "Terminate $RUNTIME_STRING..."
  "$DAEMONIZE" -K -qx "$RUNTIME_PATH"
  local RUNTIME_PID=$(pidof ${RUNTIME_NAME})
  wait_for_stop ${RUNTIME_PID} 5
  
  if [ $? -ne 0 ]
  then
    echo "failed"
    logger -t codesys "Regular stopping of $RUNTIME_STRING(${RUNTIME_NAME}) failed send SIGKILL"
    echo -n "Send SIGKILL to ${RUNTIME_STRING} Process (${RUNTIME_NAME})..."
    killall -9 $RUNTIME_NAME &> /dev/null
  fi
  echo "done"
}

CONFIG=/etc/specific/rtsversion
RUNTIME_CONFIG=/etc/specific/runtimes.conf

if [ "${ORDER:0:3}" == "762" ] || [ "${ORDER:0:5}" == "752-8" ]; then
  # only TP600
  USED_RUNTIME_VERSION=3
  RUNTIME_ORDER="3 0"
else
  USED_RUNTIME_VERSION=2
  RUNTIME_ORDER="2 3 0"
fi

FOREGROUND="0"
CREATE_CONFIG="0"

if [ -a $CONFIG ] 
then
  USED_RUNTIME_VERSION=$(cat $CONFIG)
else
  CREATE_CONFIG="1"
fi
POSSIBLE_RUNTIMES=$(/etc/config-tools/get_possible_runtimes)

##backdoor for starting the not configured runtime
if [ "$2" != "" ]
then
  USED_RUNTIME_VERSION=$2
fi

if [[ $POSSIBLE_RUNTIMES != *$USED_RUNTIME_VERSION* ]]
then
  CREATE_CONFIG="1"
  for RUNTIME_TO_BE_USED in $RUNTIME_ORDER
  do
    if [[ $POSSIBLE_RUNTIMES == *$RUNTIME_TO_BE_USED* ]]
    then 
      USED_RUNTIME_VERSION=$RUNTIME_TO_BE_USED
      break
    fi
  done
fi

COMMAND=$1
if [ "$COMMAND" == "debug" ]
then
  FOREGROUND="1"
  COMMAND=start
fi

case $COMMAND in
    start)
        # start runtime
        @RTS_CGROUPS@
        start_runtime $USED_RUNTIME_VERSION $FOREGROUND
        [[ -d /etc/config-tools/events/codesys/ ]] && run-parts -a start /etc/config-tools/events/codesys/ >/dev/null 2>&1
        if [ "$CREATE_CONFIG" == "1" ]
        then
          echo "$USED_RUNTIME_VERSION" > $CONFIG
        fi
        echo "done."
        ;;

    stop)
        stop_runtime $USED_RUNTIME_VERSION
        [[ -d /etc/config-tools/events/codesys/ ]] && run-parts -a stop /etc/config-tools/events/codesys/ >/dev/null 2>&1
        ;;

esac
