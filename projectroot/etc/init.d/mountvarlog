#!/bin/sh

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2018-2022 WAGO GmbH & Co. KG

#
# mountvarlog
#

#  The user is able to set via /etc/logging.conf if he wishes his log files
# to be external storage (via link /media/sd or /media/usb).
#  
#  The tmpfs is mounted to /var/log via the entry in /etc/fstab.
#  If user chooses to log to temporary files, noth

# LOGGING_TYPE := [persistent|temporary]
# PERSISTENT_LOGGING_TARGET := [/media/sd|/media/usb]
source /etc/logging.conf

function root_external_storage_mount_persistent()
{
    umount -l /var/log
}

function root_nand_mount_persistent()
{
    for i in $(seq 1 3); do
        if [[ -e "${PERSISTENT_LOGGING_TARGET}" ]]; then
            umount -l /var/log
            if [[ "$?" == "0" ]]; then
                mkdir -p ${PERSISTENT_LOGGING_TARGET}/log && \
                mount --bind ${PERSISTENT_LOGGING_TARGET}/log /var/log && \
                return 0 # success
                
                # if we are here: umount was successful but mkdir or mount failed
                # => fallback
                mount /var/log
            fi
        else
            # wait for udev to create link
            echo -n "."
            sleep 1
        fi
    done

    return 1 # fail
}

function mount_persistent()
{
    local rootfs=$(grep -o 'root=[^ ]*' /proc/cmdline)

    case "${rootfs}" in
        /dev/ubi*)
            root_nand_mount_persistent
            ;;
        /dev/mmcblk*|/dev/sd*)
            root_external_storage_mount_persistent
    esac
}

case $1 in

	start)
        echo -n "mounting /var/log directory ($LOGGING_TYPE)..."

        case "${LOGGING_TYPE}" in
            persistent)
                mount_persistent
                ;;
            temporary)
                # do nothing -> tmpfs is already mounted on /var/log via fstab
                true
                ;;
        esac

        if [ "$?" -ne "0" ]; then
			echo "failed, aborting"
			exit 1
		fi
		echo "done"
esac

