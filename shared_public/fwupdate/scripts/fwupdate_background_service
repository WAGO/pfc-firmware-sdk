#!/bin/bash
#-----------------------------------------------------------------------------#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# This file is part of project fwupdate (PTXdist package wago-fwupdate).
#
# Copyright (c) 2018-2020 WAGO Kontakttechnik GmbH & Co. KG
#-----------------------------------------------------------------------------#
#-----------------------------------------------------------------------------#
# Script:   fwupdate_background_service
#
# Brief:    WAGO firmware update background service collection.
#
# Author:   PEn: WAGO Kontakttechnik GmbH & Co. KG
# Author:   MLa: WAGO Kontakttechnik GmbH & Co. KG
#-----------------------------------------------------------------------------#


# Load device specific definitions.
readonly WAGO_CT_DIR="/etc/config-tools"
if [ ! -f "$WAGO_CT_DIR/board_specific_defines" ]; then
    echo "Missing dependency board_specific_defines"
    exit 64
fi
source "$WAGO_CT_DIR/board_specific_defines"

# Load firmware update definitions and functions.
readonly WAGO_ST_DIR="/usr/sbin"
if [ ! -f "$WAGO_ST_DIR/fwupdate_common" ]; then
    echo "Missing dependency fwupdate_common"
    exit 64
fi
source "$WAGO_ST_DIR/fwupdate_common"


# General defines
readonly WAGO_CT_NAME="fwupdate_background_service"
readonly WAGO_CT_TITLE="* Background service collection for $WAGO_CT_SYSTEM_MODULE *"

# Activate this option to test maintenance mode, entered on activation via reboot
readonly WAGO_CT_REBOOT_ON_INIT=false


# Set default parameter values
SHOWHELP=0
FUNCTION="no"


# Main tool/script function.
#
# Param 1..n: Script parameters
#
# Return: Exit code, 0 on success, unequal to 0 otherwise
#-----------------------------------------------------------------------------#
fwupdate_background_service_main()
{
    local RESULT=0

    # Print information if no arguments given and exit
    if [[ $# -eq 0 ]]; then
        print_info
        RESULT=$MISSING_PARAMETER
        return $RESULT
    fi

    # Evaluate parameters
    evaluate_params "$@"
    RESULT=$?
    if [[ $RESULT -ne 0 ]]; then
        fwupdate_report_error "Error on parameter evaluation"
        if [[ $RESULT -ne $MISSING_PARAMETER && $RESULT -ne $INVALID_PARAMETER ]]; then
            RESULT=$INVALID_PARAMETER
        fi
        return $RESULT
    fi

    # Print help if requested and exit
    if [[ $SHOWHELP -ne 0 ]]; then
        print_help
        return $RESULT
    fi

    # Switch by service name
    case "$FUNCTION" in
      help)
        print_help
        ;;
      prepare-update)
        prepare_update "${@:2}"
        RESULT=$?
        ;;
      start-update)
        start_update "${@:2}"
        RESULT=$?
        ;;
      finish-work)
        finish_work "${@:2}"
        RESULT=$?
        ;;
      timeout-watcher)
        timeout_watcher "${@:2}"
        RESULT=$?
        ;;
      revert)
        revert "${@:2}"
        RESULT=$?
        ;;
      "")
        fwupdate_report_error "No service name parameter given"
        RESULT=$MISSING_PARAMETER
        ;;
      *)
        fwupdate_report_error "Unknown service name parameter given"
        RESULT=$INVALID_PARAMETER
        ;;
    esac

    return $RESULT
}

# Function to print general tool/script information.
#
# Return: 0 on success, unequal to 0 otherwise
#-----------------------------------------------------------------------------#
print_info()
{
    echo "$WAGO_CT_TITLE"
    echo
    echo "For detailed usage information use:"
    echo "  $WAGO_CT_NAME --help"

    return 0
}

# Function to evaluate tool/script parameters.
# This function uses globally defined script option variables.
#
# Param 1..n: Script parameters
#
# Return: 0 on success, unequal to 0 otherwise
#-----------------------------------------------------------------------------#
evaluate_params()
{
    local RESULT=0

    # Evaluate service parameters
    SHOWHELP=$(get_parameter_option "-h" "--help" "$1")
    RESULT=$?
    if [ "$SHOWHELP" -eq "0" ]; then
        FUNCTION=$(get_parameter_command "$@")
        RESULT=$(( $? == 0 ? $RESULT : $? ))
    fi

    return $RESULT
}

# Function to print tool/script help text.
#
# Return: 0 on success, unequal to 0 otherwise
#-----------------------------------------------------------------------------#
print_help()
{
    echo "$WAGO_CT_TITLE"
    echo
    echo "Usage:"
    echo "  $WAGO_CT_NAME [<script options>] <service name> [<service options> [<param>]]"
    echo
    echo "Service names:"
    echo "  help                                       Prints this help text"
    echo "  prepare-update                             $WAGO_CT_SYSTEM_MODULE internal service to prepare update"
    echo "  start-update                               $WAGO_CT_SYSTEM_MODULE internal service to start update"
    echo "  finish-work                                $WAGO_CT_SYSTEM_MODULE internal service to finish work"
    echo "  timeout-watcher                            $WAGO_CT_SYSTEM_MODULE internal timeout watchdog service"
    echo "  revert                                     $WAGO_CT_SYSTEM_MODULE internal revert service"
    echo
    echo "Script options:"
    echo "  --help                                -h   Prints this help text"
    echo
    echo "Additional information:"
    echo "  This tool is used to call background services of $WAGO_CT_SYSTEM_MODULE."
    echo "  The services are NOT intended to be started out of $WAGO_CT_SYSTEM_MODULE."
    echo "  All services are internal functionality of $WAGO_CT_SYSTEM_MODULE."
    echo
    echo "Examples:"
    echo "  $WAGO_CT_NAME --help"
    echo "     --> Prints this help text"
    echo "  $WAGO_CT_NAME prepare-update"
    echo "     --> Starts background service \"prepare-update\""

    return 0
}

# Function to free resources for fwupdate process.
# This function stops the runtime environment (e.g. CODESYS).
# This function is intended to work asynchronously.
#
# Return: 0 on success, aborts/cancels FW-Update otherwise
#-----------------------------------------------------------------------------#
prepare_update()
{
    local RESULT=0

    fwupdate_cancelation_point

    fwupdate_create_tmp_folder
    if ! fwupdate_check_tmp_folder; then
        fwupdate_abort 100 "fwupdate tmp folder doesn't match requirements!"
    fi

    # Disable runtime autostart early when init contains reboot
    if $WAGO_CT_REBOOT_ON_INIT; then
        chmod a-x "$CDS_INITSCRIPT" > /dev/null 2>&1
        sync
        if [[ -x "$CDS_INITSCRIPT" ]]; then
            fwupdate_abort 100 "Failed to disable runtime autostart"
        fi
    fi
    
    # Stop Check-System if active
    fwupdate_disable_checksystem
    RESULT=$?
    if [ "$RESULT" -ne "0" ]; then
        fwupdate_abort 103 "Unable to stop Check-System"
    else
        fwupdate_report_info "Check-System stopped"
    fi

    # Update progress
    fwupdate_checkpoint_sub_state "$WAGO_FW_UPDATE_INIT_READY_FOR_MAINTENANCE_SUB_STATE" 60 true

    fwupdate_cancelation_point

    # To free resources alternatively reboot to maintenance mode at this point
    if $WAGO_CT_REBOOT_ON_INIT; then
        fwupdate_reboot
    fi

    # Terminate CDS runtime to free up resources for update mode
    fwupdate_stop_runtime
    RESULT=$?
    if [ "$RESULT" -ne "0" ]; then
        fwupdate_abort 301 "Unable to stop runtime"
    else
        fwupdate_report_info "Runtime stopped"
    fi

    # Disable runtime autostart late when init contains no reboot
    chmod a-x "$CDS_INITSCRIPT" > /dev/null 2>&1
    sync
    if [[ -x "$CDS_INITSCRIPT" ]]; then
        fwupdate_abort 100 "Failed to disable runtime autostart"
    fi
    
    fwupdate_unchecked_progress_update 90 true

    fwupdate_cancelation_point

    if [ "$RESULT" -ne "0" ]; then
        fwupdate_abort 100 "Unknown error"
    fi

    fwupdate_checkpoint_prepared true

    return $RESULT
}

# Function to aquire lock and get state.
#
# Return: Exit code, 0 on success, unequal to 0 otherwise
# stdout: On success FW-Update state
#-----------------------------------------------------------------------------#
get_state()
{
    local RESULT=0

    local STATE="$WAGO_FW_UPDATE_INVALID_STATE"
    STATE=$(fwupdate_get_state)
    RESULT=$?
    if [ "$RESULT" -eq "0" ]; then
        echo "$STATE"
    fi

    return $RESULT
}

# Function used to update fw-update progress every 2 seconds while RAUC 
# installing. This function is intended to work asynchronously.
#
# This function runs as long as the prgress file exists
# (see WAGO_FW_UPDATE_INSTALL_PROGRESS_FILE).
#-----------------------------------------------------------------------------#
update_rauc_progress()
{
    local LAST_PROGRESS=0

    # update progress while fwupdate-service is installing image
    while [ -e "$WAGO_FW_UPDATE_INSTALL_PROGRESS_FILE" ]; do
        local PROGRESS=300
        local LINE=$(tail -n 1 "$WAGO_FW_UPDATE_INSTALL_PROGRESS_FILE")
        local INSTALL_PROGRESS=$(echo "$LINE" | cut -d ':' -f3 | cut -d '%' -f1)
        if [ -z $INSTALL_PROGRESS ]; then
            INSTALL_PROGRESS=0
        elif [ $INSTALL_PROGRESS -gt 99 ]; then
            INSTALL_PROGRESS=100
        fi
        PROGRESS=$(($PROGRESS+($INSTALL_PROGRESS*10)/2))

	if [ $PROGRESS -gt $LAST_PROGRESS ]; then
            fwupdate_unchecked_progress_update $PROGRESS true
            LAST_PROGRESS=$PROGRESS
        elif [ $PROGRESS -lt $LAST_PROGESS ]; then
            fwupdate_report_info "Suspicious progress detected: $LINE"
	fi
        
        sleep 2
    done
}

# Function to start RAUC process.
# This function is intended to work asynchronously.
#
# Param 1: RAUC file to install with RAUC
#
# This function does not return normally, but reboots the system.
#-----------------------------------------------------------------------------#
start_update()
{
    local RAUCFILE="$1"
    local RESULT=0

    fwupdate_cancelation_point

    # Export FW target version
    export_target_version "$RAUCFILE"
    if [[ $? -ne 0 ]]; then
        fwupdate_report_warning "Failed to determine target firmware version"
    else
        fwupdate_report_info "Target firmware version: $WAGO_BACKUP_TARGET_VERSION"
    fi

    # Update sub state
    fwupdate_checkpoint_sub_state "$WAGO_FW_UPDATE_STARTED_PREINSTALL_SUB_STATE" 250 true

    # No preinstall defined yet


    # Update sub state
    fwupdate_checkpoint_sub_state "$WAGO_FW_UPDATE_STARTED_RAUCINSTALL_SUB_STATE" 300 true

    # Start RAUC update
    local RAUCOUT=""
    touch "$WAGO_FW_UPDATE_INSTALL_PROGRESS_FILE"
    update_rauc_progress &
    "$RAUC" install "$RAUCFILE" &> "$WAGO_FW_UPDATE_INSTALL_PROGRESS_FILE"
    RESULT=$?

    if [[ -e "$WAGO_FW_UPDATE_INSTALL_PROGRESS_FILE" ]]; then
        RAUCOUT=$(< "$WAGO_FW_UPDATE_INSTALL_PROGRESS_FILE")
        rm -f "$WAGO_FW_UPDATE_INSTALL_PROGRESS_FILE"
    fi
    if [[ $RESULT -ne 0 ]]; then
        # Check state for exit
        local STATE="$WAGO_FW_UPDATE_INVALID_STATE"
        STATE=$(get_state)
        if [[ "$?" -eq "0" ]]; then
            if [[ "$STATE" == "$WAGO_FW_UPDATE_INACTIVE_STATE" ]] ||
               [[ "$STATE" == "$WAGO_FW_UPDATE_REVERT_STATE" ]] ||
               [[ "$STATE" == "$WAGO_FW_UPDATE_ERROR_STATE" ]]; then
                # FW-Update was aborted in installation (e.g. in a hook script), exit without further actions
                exit $INTERNAL_ERROR
            fi
        fi
        local ERROR_MESSAGE
        ERROR_MESSAGE=$(echo -n "$RAUCOUT" | grep -i "error")
        local ERROR_DATE_NEW
        ERROR_DATE_NEW=$(echo -n "$ERROR_MESSAGE" | grep -i "not yet valid")
        local ERROR_DATE_OLD
        ERROR_DATE_OLD=$(echo -n "$ERROR_MESSAGE" | grep -i "has expired")
        if [[ -n "$ERROR_DATE_NEW" ]]; then
            fwupdate_abort 601 "Failed to install RAUC file \"$RAUCFILE\" because certificate is too new: $ERROR_MESSAGE"
        elif [[ -n "$ERROR_DATE_OLD" ]]; then
            fwupdate_abort 602 "Failed to install RAUC file \"$RAUCFILE\" because certificate is too old: $ERROR_MESSAGE"
        else
            fwupdate_abort 600 "Failed to install RAUC file \"$RAUCFILE\": $ERROR_MESSAGE"
        fi
    fi

    # Update partition labels
    if [[ $RESULT -eq 0 ]]; then
        local sys_nr
        sys_nr=$(fwupdate_get_new_system_number)
        RESULT=$?
        if [[ $RESULT -eq 0 ]]; then
            fwupdate_report_info "Update partition labels for system number $sys_nr"
            /usr/sbin/${BOARD_ID}_switch_boot_partition.sh $sys_nr -p
            RESULT=$?
        fi
        if [[ $RESULT -ne 0 ]]; then
            fwupdate_abort 603 "Failed to update partition labels (error code $RESULT)"
        fi
    fi

    fwupdate_checkpoint_sub_state "$WAGO_FW_UPDATE_STARTED_INSTALLED_SUB_STATE" 800 true

    fwupdate_cancelation_point

    fwupdate_checkpoint_sub_state "$WAGO_FW_UPDATE_STARTED_FIRSTBOOT_SUB_STATE" 810 true

    # Reboot to start new system
    fwupdate_reboot
}

# Function to export target FW version.
#
# Param 1: RAUC file to install with RAUC
#
# Return: 0 on success, unequal to 0 otherwise
#-----------------------------------------------------------------------------#
export_target_version()
{
    local RAUCFILE="$1"
    local RESULT=0

    local FW_TARGET_VERSION
    local FW_VERSION_REGEX="[0-9][0-9]\.[0-9][0-9]\.[0-9][0-9][(][0-9][0-9][)]"
    local VERSION_TMP_DIR="/tmp/fwupdate_fwversion"
    local VERSION_FILE="/etc/REVISIONS"
    local RAUCMOUNT="$VERSION_TMP_DIR/rauc_tmp"
    mkdir -p "$RAUCMOUNT" &>/dev/null &&
      mount "$RAUCFILE" "$RAUCMOUNT" &>/dev/null &&
      $(cd "$VERSION_TMP_DIR"; tar -zxf "$RAUCMOUNT/root.tar.gz" ".$VERSION_FILE" &>/dev/null) &&
      FW_TARGET_VERSION="$(grep "^FIRMWARE=" "${VERSION_TMP_DIR}${VERSION_FILE}" 2>/dev/null | cut -d'=' -f2 2>/dev/null)"
    RESULT=$?
    rm -f "${VERSION_TMP_DIR}${VERSION_FILE}" &>/dev/null
    umount "$RAUCMOUNT" &>/dev/null
    if [[ ! "$FW_TARGET_VERSION" =~ $FW_VERSION_REGEX ]]; then
        RESULT=$INTERNAL_ERROR
    else
        export WAGO_BACKUP_TARGET_VERSION="$FW_TARGET_VERSION"

        # Workaround: Additionally write version to file to workaround (cleaned?) RAUC environment
        echo -n "$FW_TARGET_VERSION" >"$VERSION_TMP_DIR/target_firmware.version"
    fi

    return $RESULT
}

# Function to finalize update process.
# This function is intended to work asynchronously.
#
# Return: 0 on success, aborts/cancels FW-Update otherwise
#-----------------------------------------------------------------------------#
finish_work()
{
    # Mark slot as valid
    fwupdate_mark_good
    fwupdate_checkpoint_sub_state "$WAGO_FW_UPDATE_CONFIRMED_MARKED_SUB_STATE" 950 true

    if fwupdate_runtime_available; then
        # Stop codesys if started (this should usually not be the case)
        fwupdate_stop_runtime 10 true
        fwupdate_unchecked_progress_update 960 true

        # Runtime application can be incompatible, delete it
        finish_clean_runtime

        # Prepare previously selected runtime
        finish_prepare_runtime
    fi
    fwupdate_checkpoint_sub_state "$WAGO_FW_UPDATE_CONFIRMED_PREPARED_SUB_STATE" 990 true

    # Go back to normal operation if configured for finish state
    fwupdate_start_normal_operation_on_finish

    # Finally done
    fwupdate_checkpoint_finished true

    # Clean other system
    fwupdate_restore_normal_operation_on_other_system

    # Stop fwupdate service
    fwupdate_stop

    return 0
}

# Function to clean runtime home directory and retain data.
#
# Return: 0 on success, aborts/cancels FW-Update otherwise
#-----------------------------------------------------------------------------#
finish_clean_runtime()
{
    local KEEP_APP=false
    KEEP_APP=$(fwupdate_get_keep_app_flag)
    fwupdate_report_info "keep runtime application: $KEEP_APP"

    if [ "$KEEP_APP" == false ]; then
        # Runtime application will be incompatible, delete it
        finish_clean_runtime_home
        fwupdate_unchecked_progress_update 970 true

        # Runtime retain memory will also be incompatible, delete it
        finish_clean_runtime_retain
        fwupdate_unchecked_progress_update 980 true
    fi
}

# Function to clean runtime home directory.
#
# Return: 0 on success, aborts/cancels FW-Update otherwise
#-----------------------------------------------------------------------------#
finish_clean_runtime_home()
{
    fwupdate_report_info "Cleaning up runtime home"

    if [ -d "$CDS_HOME_DIR_ROOT" ]; then
        rm -rf "$CDS_HOME_DIR_ROOT"
    fi

    if [ -e "$CDS_HOME_DIR_LINK" ]; then
        local cds_data="$(readlink "$CDS_HOME_DIR_LINK")"
        if [ -e $cds_data ]; then
            rm -rf "$cds_data/"*
        fi
    fi

    fwupdate_report_info "Cleanup runtime home done"
    return 0
}

# Function to clean runtime retain data.
#
# Return: 0 on success, aborts/cancels FW-Update otherwise
#-----------------------------------------------------------------------------#
finish_clean_runtime_retain()
{
    # retain_data available?
    /usr/sbin/retain_data -s > /dev/null 2>&1
    if [[ $? -ne 255 ]]; then

        fwupdate_report_info "Cleaning up runtime retain data"

        /usr/sbin/retain_data -d >/dev/null 2>&1
        if [[ $? -ne 0 ]]; then
            fwupdate_abort 100 "Unable to delete retain data"
        fi
    fi

    fwupdate_report_info "Cleanup runtime retain data done"
    return 0
}

# Function to prepare runtime start.
#
# Return: 0 on success, aborts/cancels FW-Update otherwise
#-----------------------------------------------------------------------------#
finish_prepare_runtime()
{
    local RESULT=0

    fwupdate_report_info "Preparing runtime start"

    # Recreate runtime home directory, so startup script can generate some files
    if [ ! -d "$CDS_HOME_DIR_ROOT" ]; then
        mkdir -p $CDS_HOME_DIR_ROOT
        if [ $? -ne 0 ]; then
            RESULT=$INTERNAL_ERROR
        fi
        #Set correct admin group id
        chown -R $(whoami):admin $CDS_HOME_DIR_ROOT
        chmod g+s $CDS_HOME_DIR_ROOT

    fi

    if [ $RESULT -ne 0 ]; then
        fwupdate_abort 100 "Failed to prepare runtime start"
    fi

    # Prepare runtime autostart
    if [ $QUIET -eq 0 ]; then
        chmod a+x "$CDS_INITSCRIPT"
    else
        chmod a+x "$CDS_INITSCRIPT" >/dev/null 2>&1
    fi
    if [[ ! -x "$CDS_INITSCRIPT" ]]; then
        fwupdate_report_warning "Failed to enable runtime autostart"
    fi

    fwupdate_report_info "Preparations for runtime start done"
    return $RESULT
}

# Function to watch timeout and cancel FW-Update when reached.
# This function is intended to work asynchronously.
#
# Return: 0 on success, aborts/cancels FW-Update otherwise
#-----------------------------------------------------------------------------#
timeout_watcher()
{
    local TIME_TO_DEADLINE=""
    local RESULT=0

    local own_pid=$BASHPID
    TIME_TO_DEADLINE=$(fwupdate_get_time_to_deadline)
    RESULT=$?
    if [[ $RESULT -ne 0 || -z "$TIME_TO_DEADLINE" ]]; then
        RESULT=$INTERNAL_ERROR
    else
        sleep $TIME_TO_DEADLINE &
        local sleep_pid=$!
        fwupdate_report_info "Started fwupdate timeout watcher with timeout=${TIME_TO_DEADLINE}s, PIDs: ${own_pid} ${sleep_pid}"
        #Note: the PID of timeout watcher shall be the first one in the PID list!
        echo -n "${own_pid} ${sleep_pid}" > "$WAGO_FW_UPDATE_TIMEOUT_PID_FILE"; sync
        wait $sleep_pid
        
        # Timeout reached, cancel FW-Update
        fwupdate_cancel 1000 "$WAGO_CT_SYSTEM_MODULE canceled (timeout reached)"
        RESULT=$?
    fi

    if [[ $RESULT -ne 0 ]]; then
        fwupdate_report_warning  "Failed to get time to deadline for timeout watcher"
    fi

    return $RESULT
}

# Function to clear/revert changes done by FW-Update.
# This function is intended to work asynchronously.
# May not return normally but reboots system instead.
#
# Pre-condition: No asynchronous FW-Update operation is in progress
#
# Param 1: Old state when update was canceled/aborted (optional)
# Param 2: Old sub state when update was canceled/aborted (optional)
#
# Return: 0 on success, system reboot otherwise
#-----------------------------------------------------------------------------#
revert()
{
    local OLD_STATE="${1:-}"
    local OLD_SUB_STATE="${2:-}"
    local RESULT=0

    fwupdate_revert "$OLD_STATE" "$OLD_SUB_STATE"
    RESULT=$?

    return $RESULT
}

# Start main function
fwupdate_background_service_main "$@"
exit $?
