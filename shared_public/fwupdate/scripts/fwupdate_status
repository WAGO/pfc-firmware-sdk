#!/bin/bash
#-----------------------------------------------------------------------------#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# This file is part of project fwupdate (PTXdist package wago-fwupdate).
#
# Copyright (c) 2018-2022 WAGO GmbH & Co. KG
#-----------------------------------------------------------------------------#
#-----------------------------------------------------------------------------#
# Script:   fwupdate_status
#
# Brief:    WAGO firmware update status tool.
#
# Author:   PEn: WAGO GmbH & Co. KG
# Author:   TBi: WAGO GmbH & Co. KG
#-----------------------------------------------------------------------------#

#NOTE!!! Do not include fwupdate_common - not thread-safe!

# Load firmware update definitions and functions.
readonly WAGO_ST_DIR="/usr/sbin"
if [ ! -f "$WAGO_ST_DIR/fwupdate_private_storage" ]; then
    echo "Missing dependency fwupdate_private_storage"
    exit 64
fi
source "$WAGO_ST_DIR/fwupdate_private_storage"

if [ ! -f "$WAGO_ST_DIR/fwupdate_report" ]; then
    echo "Missing dependency fwupdate_report"
    exit 64
fi
source "$WAGO_ST_DIR/fwupdate_report"

# General defines
readonly WAGO_CT_NAME="fwupdate_status"
readonly WAGO_CT_TITLE="* Get status of $WAGO_CT_SYSTEM_MODULE *"


# Set default parameter values
QUIET=0
SHOWHELP=0
URIENCODE=0
TEXTOUT=0
JSONOUT=0


# Main tool/script function.
#
# Param 1..n: Script parameters
#
# Return: Exit code, 0 on success, unequal to 0 otherwise
#-----------------------------------------------------------------------------#
fwupdate_status_main()
{
    local RESULT=0

    # Evaluate parameters
    evaluate_params "$@"
    RESULT=$?
    if [ $RESULT -ne 0 ]; then
        fwupdate_report_error "Error on config tool parameter evaluation"
        if [ "$RESULT" -ne "$MISSING_PARAMETER" -a "$RESULT" -ne "$INVALID_PARAMETER" ]; then
            RESULT="$INVALID_PARAMETER"
        fi
        return $RESULT
    fi

    # Print help if requested and exit
    if [ $SHOWHELP -ne 0 ]; then
        if [ $QUIET -eq 0 ]; then
            print_help
        fi
        return $RESULT
    fi

    # Set default values for global status variables
    STATE="$WAGO_FW_UPDATE_INVALID_STATE"
    PROGRESS=0
    ERR_CODE=0
    INFO_TEXT=""

    # Check FW-Update status
    get_status
    RESULT=$?

    # Generate output either in JSON or as text
    if [ $RESULT -eq 0 ]; then
        if [ $QUIET -eq 0 ]; then
            echo -e "\n$WAGO_CT_SYSTEM_MODULE status:\n--------------------------------------------------"
        fi
        report_start
        report "status" "$STATE"
        report "percent" "$PROGRESS" i
        report "errcode" "$ERR_CODE" i
        report "info" "$INFO_TEXT"
        report_end
        if [ $QUIET -eq 0 ]; then
            echo -e "\n--------------------------------------------------"
        fi
    fi

    return $RESULT
}

# Function to evaluate tool/script parameters.
# This function uses globally defined script option variables.
#
# Param 1..n: Script parameters
#
# Return: 0 on success, unequal to 0 otherwise
#-----------------------------------------------------------------------------#
evaluate_params()
{
    local RESULT=0

    # First evaluate early parameters
    # (maybe influencing other parameters)
    QUIET=$(get_parameter_option "-q" "--quiet" "$@")
    RESULT=$?
    URIENCODE=$(get_parameter_option "-x" "--extract-from-uri-encoding" "$@")
    RESULT=$(( $? == 0 ? $RESULT : $? ))
    if [ $URIENCODE -ne 0 ]; then
        fwupdate_report_error "Option -x/--extract-from-uri-encoding currently not supported and will be ignored"
    fi

    # Evaluate other parameters
    SHOWHELP=$(get_parameter_option "-h" "--help" "$@")
    RESULT=$(( $? == 0 ? $RESULT : $? ))
    TEXTOUT=$(get_parameter_option "-t" "--text" "$@")
    RESULT=$(( $? == 0 ? $RESULT : $? ))
    JSONOUT=$(get_parameter_option "-j" "--json" "$@")
    RESULT=$(( $? == 0 ? $RESULT : $? ))

    # If both options are not set, report output as text
    if [ $JSONOUT -eq 0 ] && [ $TEXTOUT -eq 0 ]; then
        TEXTOUT=1
    fi

    return $RESULT
}

# Function to print tool/script help text.
#
# Return: 0 on success, unequal to 0 otherwise
#-----------------------------------------------------------------------------#
print_help()
{
    echo "$WAGO_CT_TITLE"
    echo
    echo "Usage:"
    echo "  $WAGO_CT_NAME <script options> [<param>]"
    echo
    echo "Script options:"
    print_general_command_options
    echo
    echo "Additional information:"
    echo "  This tool is used to print status information of $WAGO_CT_SYSTEM_MODULE."
    echo
    echo "Examples:"
    echo "  $WAGO_CT_NAME"
    echo "     --> Prints $WAGO_CT_SYSTEM_MODULE status information in human readable form"
    echo "  $WAGO_CT_NAME -q -t"
    echo "     --> Prints $WAGO_CT_SYSTEM_MODULE status information as name=value pairs in machine readable form"
    echo "  $WAGO_CT_NAME -q -j"
    echo "     --> Prints $WAGO_CT_SYSTEM_MODULE status information as JSON in machine readable form"

    return 0
}

# Function to get current status values.
#
# Return: Exit code, 0 on success, unequal to 0 otherwise
#-----------------------------------------------------------------------------#
get_status()
{
    local RESULT=0

    # Check for present status file after got lock because file may be just destroyed
    if [ ! -e "$WAGO_FW_UPDATE_DATA" ]; then
        # Return default values for inactive when no status file is present
        STATE="$WAGO_FW_UPDATE_INACTIVE_STATE"
        PROGRESS=$WAGO_FW_UPDATE_INITIAL_PROGRESS
        ERR_CODE=$WAGO_FW_UPDATE_INITIAL_ERROR_CODE
        INFO_TEXT="$WAGO_FW_UPDATE_INITIAL_TEXT"

        # Check environment
        if ! check_boot_medium; then
            STATE="$WAGO_FW_UPDATE_NOT_AVAILABLE_STATE"
            INFO_TEXT="FW-Update is currently not usable when running from SD card"
        elif ! check_mounts; then
            STATE="$WAGO_FW_UPDATE_NOT_AVAILABLE_STATE"
            INFO_TEXT="FW-Update is currently not usable: Unexpected system environment"
        # else # Environment OK nothing to do
        fi
    else
        STATE="$(fwupdate_get_state)"
        RESULT=$?

        if [ $RESULT -eq 0 ]; then
            PROGRESS="$(fwupdate_get_progress_percent)"
            RESULT=$?
        fi

        if [ $RESULT -eq 0 ]; then
            ERR_CODE="$(fwupdate_get_error_code)"
            RESULT=$?
        fi

        if [ $RESULT -eq 0 ]; then
            INFO_TEXT="$(fwupdate_get_info_text)"
            RESULT=$?
        fi
    fi

    return $RESULT
}

# Function to check boot medium.
#
# Return: 0 on success, unequal to 0 otherwise
#-----------------------------------------------------------------------------#
check_boot_medium()
{
    local RESULT=0

    local ACTIVE_MEDIUM="unknown"
    ACTIVE_MEDIUM="$(/etc/config-tools/get_filesystem_data "active-partition-medium")"
    RESULT=$?
    if [ $RESULT -eq 0 ] &&
       [ "$ACTIVE_MEDIUM" = "sd-card" ]; then
        RESULT=$WAGO_FW_UPDATE_UNEXPECTED_SYSTEM_CONFIG
    fi

    return $RESULT
}

# Function to check mounts.
#
# Return: 0 on success, unequal to 0 otherwise
#-----------------------------------------------------------------------------#
check_mounts()
{
    local RESULT=0

    if [ $QUIET -eq 0 ]; then
        /etc/init.d/mounthd2 status
        RESULT=$?
    else
        /etc/init.d/mounthd2 status >/dev/null 2>&1
        RESULT=$?
    fi

    return $RESULT
}

# Start main function
fwupdate_status_main "$@"
exit $?
